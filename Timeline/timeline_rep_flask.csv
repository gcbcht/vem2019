REPOSITORY,ISSUE_ID,STATUS,EVENT,CREATED_AT,TIME DURATION,NEGATIVE,NEUTRAL,POSITIVE,MSG,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,opened,2011-06-01 16:16:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,title,2011-06-01 16:16:36,00:00,,1,,"b""b' added an argument to jsonify : status code'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,body,2011-06-01 16:16:36,00:00,,,1,"b'b"" Hi"," Here\'s the thing :the first commit only passes the status argument to the Response base class.the second one updated the tests. Thanks for this great microframework !""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,1,2011-06-01 16:16:36,10.47,,,1,"b'b"" An interesting idea.  This causes jsonify to require an additional argument with no default", and imo we\'d want a 200 default.  Moving status to a keyword argument would prevent  a  with \'status\' as key.  We could use _status as the keyword, just like url_for\'s _external argument.  Armin and others," what do you think? -Ron""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,2,2011-06-01 16:16:36,8.57,,1,,"b""b'   could work"," but maybe we could make the function so that it merges status code and headers in. Then you could do that: Etc.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,closed,2011-06-01 16:35:38,19.03,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,reopened,2011-06-01 16:35:43,0.08,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,3,2011-06-01 16:16:36,8.88,1,,,"b'b"" ok"," but I don\'t see how to patch it... sorry. I\'ll take a look at it later.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,4,2011-06-01 16:16:36,12.65,,,1,"b""b' The approach would be a great solution", supporting as well: make_response already supports tuples.  @mitsuhiko, given the werkzeug response class api, would this be a positional argument or would  indirect the second element of the tuple to the status keyword of the response class. @elishowk," do you want to experiment with this idea and see how it works for you instead of changing jsonify? -Ron'""",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,5,2011-06-01 16:16:36,79.65,,1,,"b""b' I made a helpler using make_response", to behave like I wanted sjonify to behave : url To have jsonify behave like :  return jsonify()," 404Then it would have to be a simple Am i wrong ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,6,2011-06-01 16:16:36,642.43,,,1,"b""b' This is still a good idea"," moving discussion to #140.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,closed,2012-01-17 04:59:15,743.53,1,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,7,2011-06-01 16:16:36,961.85,,1,,"b""b' #430 fixes this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,239,closed,-,-,-,1,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,opened,2011-06-28 21:50:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,title,2011-06-28 21:50:58,00:00,,1,,"b""b' Blueprint template lookup not documented enough'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,body,2011-06-28 21:50:58,00:00,,1,,"b""b' The new blueprint template lookup scheme where the templates folder is just added to the searchpath instead of doing some weird stuff with the names as before. The documentation has to be clearer about that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,1,2011-06-28 21:50:58,1398.2,,1,,"b""b' When you say documentation", do you mean docstrings in the source and the like," or ? What about them do you wish was clearer?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,2,2011-06-28 21:50:58,164.0,,1,,"b""b' This is fixed.url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,closed,2012-03-13 23:53:10,122.2,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,3,2011-06-28 21:50:58,847.9,,1,,"b""b' url  @rduplain  is this a feature? not a bug'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,4,2011-06-28 21:50:58,220.3,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,5,2011-06-28 21:50:58,400.35,1,,,"b""b' This still confusing. Can you add some examples in the documentation?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,6,2011-06-28 21:50:58,561.95,1,,,"b'b"" The current documentation url  is still confusing. It should state that the reason we have to render \'\' instead of \'\' is to avoid name conflict. However"," I would consider url  a bug.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,7,2011-06-28 21:50:58,214.37,,1,,"b""b' @rduplain I have been struggling with this BUG for an hour. And It is so not a feature. At least"," there should be some argument could be set to make the higher priority of template_folder.  PS. How to print the current searchpath of templates?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,8,2011-06-28 21:50:58,291.25,,1,,"b""b' Reopening because of doc issues.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,reopened,2014-08-26 18:09:17,1096.12,2,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,9,2011-06-28 21:50:58,1221.55,,1,,"b'b"" it\'s a BUG.template renderer must not use other\'s blueprint template folder to make a page.it makes no sense to duplicate name of blueprint in template subfolder"," I\'ve made separated blueprints to handle index pages separately""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,10,2011-06-28 21:50:58,3.47,,,1,"b'b"" It is not a bug per se. But it does depend a lot on how your application is structured whether it is useful or not in my opinon it\'s not useful in most cases and having the blueprint name automatically included in the template folder would make sense. Luckily you can easily implement this for yourself in an even more flexible way than just using the blueprint name. You can find an example [here]url  (the code). (I wouldn\'t mind to have an option for this in Flask itself"," since that way IDEs like PyCharm would be likely to support it instead of not being able to show me a link to edit the template a view function is rendering)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,11,2011-06-28 21:50:58,283.38,,1,,"b'b"" I\'m running into the same issue as url  It makes sense to be able to override a blueprint\'s template in the main template folder", but rendering another blueprint\'s template due to the template search path order seems buggy to me. Using the facebook example from url If I were to render my templates in the blueprint using  ," then how would I override that template in the root templates folder?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,12,2011-06-28 21:50:58,8.98,,1,,"b'b"" I just ran into this issue today not the documentation issue posted by OP", but the one referred to in the stackoverflow question linked to above, and discussed later on in these comments. I agree with @Trii overriding a blueprint\'s template from below it on the tree makes sense, but it seems wrong that templates from different blueprints conflict with each other. When you\'re loading a template with from within a blueprint, why would the other blueprints\' folder be included from the search path? Is it _useful_ to be able to override a blueprint\'s templates from another blueprint? Reading and thinking more, I think I\'ve figured out how it works: there is a global namespace for templates, and each blueprint\'s templates folder is at the root of that namespace. It\'s a simple system, which is nice, but it means that if you want to have your templates in their own namespace, you have to put them in a subfolder whose name is unique to the blueprint. In practice you use the name of the blueprint. I guess that\'s not _that_ bad  the structure of most ruby gems are like this, for example, with being in the file  . If your are creating a blueprint named  , you only have to move your templates one folder deeper, from to  . For the cases that I\'ve run into so far, it would be more intuitive to have files in just be **assumed** to be in their own namespace already. But it\'s not too big a deal. The bigger issue is that, in order to refer to a template for your blueprint under this system, you have to use the template\'s global name (  in this case). This means a lot of repetition of the blueprint name in files inside the blueprint, from calls in python," to and tags in jinja. It would be nice if we could avoid all that repetition.""'",,,,,,,,,,,,,
flask,266,closed,closed,2016-06-04 06:25:27,736.17,2,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,266,closed,-,-,-,2,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,opened,2011-07-26 01:35:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,title,2011-07-26 01:35:13,00:00,,1,,"b'b"" AttributeError: type object \'EventsCodes\' has no attribute \'IN_DELETE_SELF\'""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,body,2011-07-26 01:35:13,00:00,1,,,"b'b\' It only happens when I try to enable debugging but this is the traceback I get Traceback (most recent call last):  File """"", line 33," in   main()  File """"", line 30," in main  (host=\\\'0.0.0.0\\\')  File ""/-""", line 553, in run  return run_simple(host, port, self," **options)  File ""/-""", line 609, in run_simple  run_with_reloader(inner, extra_files," reloader_interval)  File ""/-""", line 528, in run_with_reloader  reloader_loop(extra_files," interval)  File ""/-""", line 436, in reloader_loop  reloader(fnames," interval=interval)  File ""/-""", line 464, in _reloader_inotify  mask = reduce(lambda m, a: m | getattr(EventsCodes, a), mask," 0)  File ""/-""", line 464, in   mask = reduce(lambda m, a: m | getattr(EventsCodes, a), mask, 0)AttributeError: type object \\\'EventsCodes\\\' has no attribute \\\'IN_DELETE_SELF\\\'\''
flask,286,closed,1,2011-07-26 01:35:13,10.33,,1,,"b""b' Forgot to mention this is on flask 0.7.2'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,closed,2011-07-26 01:45:33,10.33,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,reopened,2011-07-26 01:45:35,0.03,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,2,2011-07-26 01:35:13,502.78,,1,,"b""b' This is a werkzeug bug and fixed in the development version.  I will push out a point release momentarily.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,closed,2011-07-26 10:08:20,502.75,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,286,closed,-,-,-,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,opened,2011-07-30 08:39:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,title,2011-07-30 08:39:56,00:00,,1,,"b""b' Blueprints and Extensions and SQLAlchemy'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,body,2011-07-30 08:39:56,00:00,1,,,"b'b"" We do not encourage people to create more than one database connection and to connect to databases in arbitrary extensions. The obvious exception are extensions whose sole purpose is to connect to databases. Dependency resolving is done by the developer. Eg: The problem comes with blueprints. If SomethingElse wants to define models it has to do that at a local scope where it has the reference to the db. Assuming it provides blueprints"," how does the blueprint\'s views and other code get to the models? The sad truth is that if you make up blueprints on the fly the views in that blueprint don\'t know how to reference it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,1,2011-07-30 08:39:56,236.32,,1,,"b'b"" It depends from the use case. I have following assumptions:1. Application might want to access blueprint models2. There can be more than one instance of the blueprint", so there can be multiple instances of the same model mapped to different or same database table(s) (using prefixed table name, etc)3. Blueprints don\'t know how they\'re going to be used in the application all parameters are passed in object creation time4. Which brings to the point blueprints should always dynamicly create their models based on the input parameters to the constructor For #1," snippet can look like: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,2,2011-07-30 08:39:56,275.17,,1,,"b'b"" I came across this issue with my bugLink project url  where the basic app knows about the relationship changeset  issue", and extensions to the app should provide release  build  changeset (  issue). My understanding of this is that Blueprint are intended to extend the views. If you need to extend the model, you need to define something like a YellowPrint. As the model is highly coupled with the controller," YellowPrint could also have some mechanism in place to extend your controller. But there is no point in extending the controller if you don\'t make use of the extension provided. Here we come back to the views. Which brings us to the GreenPrint if you need to extend the views and the model.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,3,2011-07-30 08:39:56,1411.37,,1,,"b'b"" I don\'t know if this is exactly the situation you are describing"," but I have something that looks like this in Flask-Restless. Check out url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,4,2011-07-30 08:39:56,1339.97,,,1,"b""b' Nice work!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,5,2011-07-30 08:39:56,746.35,,,1,"b'b"" There are a few solutions I\'ve seen", depending on the use case:Inject dependencies and explicitly generate the views.  This use is a good use case for class based views.  During  , the extension generates the models and passes them to  .  This is similar to what @jfinkels mentions.Provide abstract bases for the models, and expect the user to subclass them and use callbacks to set proxies.  Flask-Login does this with  ,  , and  .  This is useful when Set properties on the extension instance, then pull them from in views.  I don\'t have an example off the top of my head," but this is a similar concept to Flask-Login\'s  . I\'ll work on some short examples for each of these solutions to add to the docs on extensions.""'",,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,6,2011-07-30 08:39:56,1122.22,,1,,"b""b' Closing as this issue is OLD.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,closed,2017-05-25 22:11:19,811.38,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,reopened,2017-05-25 22:11:48,0.48,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,7,2011-07-30 08:39:56,0.62,,1,,"b""b' keeping open as this seems important'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,289,open,-,-,-,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,opened,2011-11-21 15:14:32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,title,2011-11-21 15:14:32,00:00,,1,,"b""b' MethodViews for API example is missing parameter'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,body,2011-11-21 15:14:32,00:00,,1,,"b""b' On url At the end of the page in the very last code example you have: The last has three substitutions in the string"," but the tuple only has two items. It should read:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,1,2011-11-21 15:14:32,61.68,,1,,"b'b"" Saw a change in the repos", but it looks like the parameters are backwards.  If you look at the example in the section above the primary key type should precede the primary key. I\'ve got a patch," but don\'t know where to send it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,closed,2011-11-21 16:16:13,61.68,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,reopened,2011-11-21 16:16:16,0.05,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,2,2011-11-21 15:14:32,352.85,,1,,"b""b' Send a pull request.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,3,2011-11-21 15:14:32,1321.18,,1,,"b'b"" This looks like it\'s been fixed in the current docs so it can be closed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,4,2011-11-21 15:14:32,69.12,,1,,"b""b' @mitsuhiko tagged"," so he can close this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,closed,2012-03-14 01:25:46,549.5,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,353,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,opened,2012-02-07 02:30:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,title,2012-02-07 02:30:57,00:00,,,1,"b""b' Collab me!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,body,2012-02-07 02:30:57,00:00,,,1,"b'b"" @mitsuhiko"," I\'d like to spend some significant time improving some parts of the documentation. You should add me as a collab on the repo. @rduplain agrees :) :metal::trollface::metal:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,1,2012-02-07 02:30:57,620.53,,1,,"b""b' Into that... would it make sense to switch the quickstart and tutorial from function-based to class-based views?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,2,2012-02-07 02:30:57,184.58,,1,,"b""b' @markusgattol I see little reason to do that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,closed,2012-02-07 15:59:29,808.53,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,reopened,2012-02-07 15:59:32,0.05,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,3,2012-02-07 02:30:57,17.9,,1,,"b'b"" Probably"," yes. I just figured there\'s no docu for CBVs apart from url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,4,2012-02-07 02:30:57,543.62,,,1,"b'b"" Let\'s get @kennethreitz on!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,5,2012-02-07 02:30:57,1.9,,,1,"b""b' DO IT!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,closed,2012-03-14 09:57:11,1077.65,0,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,399,closed,-,-,-,0,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,opened,2012-03-18 23:20:07,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,title,2012-03-18 23:20:07,00:00,,1,,"b""b' No get_send_file_options on blueprints"," test fail on master'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,body,2012-03-18 23:20:07,00:00,,1,,"b""b' The method uses the SEND_FILE_MAX_AGE_DEFAULT config", but there is nothing of the sort for blueprints. Tests fail on the current git master because of that: I\\xe2\\x80\\x99d write a patch," but I\\xe2\\x80\\x99m not sure how to access the app config from a blueprint method. Would using be appropriate?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,1,2012-03-18 23:20:07,3.78,,1,,"b'b"" This is an open issue for a new feature.  #433 exposed cache-control headers for send_file.  I added a config value to the application", but this is the first time a Blueprint requires .  I\'m not sure we want to use current_app," and instead I think we should consider some sort of closure on registration.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,2,2012-03-18 23:20:07,47.87,,1,,"b""b' Indeed", I saw that blueprints never use current_app until now so I didn\\xe2\\x80\\x99t just add it. I was going to suggest making the send_static_file method an instance attribute with a closure over the app config," but that does not even work. The same blueprint instance could be added to two apps.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,3,2012-03-18 23:20:07,944.6,,1,,"b'b"" @mitsuhiko", I\'d like to access  in the Blueprint," and this is the first case of it.  Should we use current_app proxy or some sort of closure on registration?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,closed,2012-04-01 15:56:22,996.25,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,reopened,2012-04-01 15:56:24,0.03,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,4,2012-03-18 23:20:07,1395.37,,1,,"b""b' This is fixed now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,closed,2012-04-09 15:11:44,1395.33,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,448,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,opened,2012-03-19 00:07:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,title,2012-03-19 00:07:35,00:00,,1,,"b'b\' ""Example code leaked"" on all but Python 2.7\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,body,2012-03-19 00:07:35,00:00,,1,,"b""b' Running tox", I get the following error for Python 2.5, 2.6 and PyPy," but not 2.7. I have no idea where the real problem is. Is it in  rather than Flask?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,1,2012-03-19 00:07:35,1.23,,1,,"b'b"" That\'s because Python\'s allocation optimizations interfere with this test. This can be ignored"," i just want to keep this test as a general indication if we\'re safe under reference counting on some cpython versions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,closed,2012-03-19 00:08:49,1.23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,2,2012-03-19 00:07:35,41.53,1,,,"b'b"" I\'d like to skip this test for 2.5 and 2.6.  I don\'t like ignoring failures.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,3,2012-03-19 00:07:35,908.73,,1,,"b'b"" @mitsuhiko could we skip this test except on CPython 2.7?  I would skip based on "," but that won\'t work on PyPy (where it also breaks).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,reopened,2012-04-01 15:59:07,950.3,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,4,2012-03-19 00:07:35,457.78,,1,,"b""b' according to #pypy you can test for it like  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,closed,2012-04-24 01:37:32,578.42,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,452,closed,-,-,-,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,opened,2012-05-31 01:31:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,title,2012-05-31 01:31:16,00:00,,1,,"b""b' Login example broke the flow'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,body,2012-05-31 01:31:16,00:00,,,1,b'b\' I am very new to python, flask, heroku, git etc. but I was able to easily and successfully flow through the quickstart guide and get the minimal app deployed on heroku.  I was very impressed with documentation flow and accuracy.  However," I ran into a significant stumbling block with the ""HTTP Methods"" section.  There were two issues that caused me stumble and I think others may stumble here as well. The most significant issue was that the login example code calls descriptive stubs that don\\\'t exist.  This may be fine for those that already understand what the example is showing", but for people like me that learn by trying to run the code examples," it took quite a while to figure that my app was crashing due to the non-existent function calls. The second issue involves the difference between the flask routing and what I was familiar with for form processing in PHP. I initially expected something along the lines of a  script that would get invoked by action=""url "" attribute of the form. Eventually I figured out how it worked by creating what I believe would be a more easily understood example for the method and form functionality.  This is the code that I eventually created to learn and confirm the functionality. Please consider revising the Flask example(s) to show code that can actually be executed like the previous examples I have tried", and to show what the HTML would look like if needed.   \'',,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,closed,2012-05-31 04:00:12,148.93,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,reopened,2012-05-31 04:02:34,2.37,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,1,2012-05-31 01:31:16,1031.37,1,,,"b'b"" I like the pseudocode and  . Maybe we can comment them out so that it\'s obvious that these two methods are not supposed to be run.  Also"," I got stuck at this point too because I did not know that I had to import Request. Maybe it would be possible to link to a complete working example for each of these small examples so that it would be easy to see the important code and then copy and paste the full example and play with it?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,2,2012-05-31 01:31:16,1165.18,,1,,"b'b"" IMO it\'s obvious that functions you didn\'t import or define in your code don\'t exist.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,3,2012-05-31 01:31:16,149.25,,,1,"b""b' Sometimes obvious is not good enough for a good user experience.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,4,2012-05-31 01:31:16,2.85,,1,,"b'b"" This is not targeted to the end user though", also a developer should at least work through a basic introductory book before just trying. Flask was made to make writing webapps faster in Python," but it will never work without a basic understanding of the language you\'re using.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,5,2012-05-31 01:31:16,35.85,1,,,"b""b' A key reason Python is so popular is the usability of the language"," available documentation and tools as compared to other languages.  This seems to be by careful consideration and design.  This particular example was a stand out exception that could be easily fixed.  I am only qualified to say what I find easy to use and what I do not.  Everyone is a user at all levels and designing frameworks and documentation that is easier to understand and use is very hard.  Sometime the best you can do it put it out there and then improve it based on feedback.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,6,2012-05-31 01:31:16,1237.7,,1,,"b'b"" It\'s neither practical nor useful to make all examples executable", especially when in this case the focus is on abstractions. Of course in this case it could be turned into an executable example but it loses all information about potential use cases. All of these different pieces of technolgy simply can\'t all be learned at the same time," at least not in a way that will provide you with a full understanding of them. Start learning Python and then build up on that step by step.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,closed,2014-07-26 13:53:28,590.9,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,516,closed,-,-,-,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,opened,2012-07-08 15:20:49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,title,2012-07-08 15:20:49,00:00,,1,,"b""b' Website'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,body,2012-07-08 15:20:49,00:00,,1,,"b""b' Request to add Flask-MakoTemplates to the extensions listing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,closed,2012-07-22 22:27:51,427.03,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,reopened,2012-07-22 22:28:07,0.27,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,1,2012-07-08 15:20:49,122.6,,,1,"b""b' @benselme can you update this with upstream changes so it can be merged? Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,2,2012-07-08 15:20:49,481.53,,1,,"b""b' Done.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,3,2012-07-08 15:20:49,1.43,,,1,"b""b' Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,closed,2012-09-13 01:26:30,178.38,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,543,closed,-,-,-,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,opened,2012-10-20 16:20:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,title,2012-10-20 16:20:18,00:00,,1,,"b""b' Fix missing argument in find_module of flaskext_'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,body,2012-10-20 16:20:18,00:00,,1,,"b""b' Add back path=None argument into find_module. This fixes #618 and revert #524.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,closed,2013-01-25 04:19:31,719.22,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,1,2012-10-20 16:20:18,1386.3,,1,,"b""b' @kennethreitz Why did you close this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,reopened,2014-08-31 21:10:52,1011.35,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,2,2012-10-20 16:20:18,94.65,,,1,"b""b' Thanks. I recently got commit access and this got lost on the way somewhere.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,closed,2014-10-07 17:01:17,1190.42,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,619,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,opened,2013-05-09 22:34:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,title,2013-05-09 22:34:35,00:00,,1,,"b""b' added flask-canvas extension'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,1,2013-05-09 22:34:35,375.72,,1,,"b'b"" You should double check this. You added your extension to the rejected extensions list", not the regular ones. Also, you\'ll need to have a link to published sphinx based documentation to get approved," I believe.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,2,2013-05-09 22:34:35,1088.52,,1,,"b'b"" So", 9 months later, I\'ve finally gotten around to fixing this. Docs are @ RTD," moved the extension to the approved list.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,3,2013-05-09 22:34:35,1316.4,,,1,"b'b"" @demianbrecht if you care to do a quick rebase for me"," i\'ll merge :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,4,2013-05-09 22:34:35,12.65,,1,,"b""b' @demianbrecht  CC me when you update it :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,closed,2014-03-21 21:07:52,1353.28,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,5,2013-05-09 22:34:35,1120.0,,1,,"b""b' @kennethreitz: Rebased.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,reopened,2014-03-24 15:48:48,1120.93,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,closed,2014-04-09 22:28:18,399.5,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,6,2013-05-09 22:34:35,1161.1,,1,,"b""b' Instead of just closing this without comment you could ask @demianbrecht to resubmit this PR to url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,726,closed,-,-,-,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,opened,2013-05-29 13:32:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,title,2013-05-29 13:32:58,00:00,,1,,"b""b' Flask not working in Virtualenv setup (from S.O.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,body,2013-05-29 13:32:58,00:00,,1,,"b""b' SetUp  code I am trying to run. When I do  It does not run or do anything", it just returns back to command prompt. Although I am running in debug=True mode.  I then made a new VirtualEnv and install bottle in that. When I tried to run helloworld it shows the same behaviour.  However I then started the python shell on the same virtualenv," imported bottle modules and ran What could be problem here ? Even debug does not show anything.  Following link is the output of  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,1,2013-05-29 13:32:58,3.58,,1,,"b""b' Please reassure that you actually do use everything from the same env and in the future mention that you are crossposting your StackOverflow question here.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,2,2013-05-29 13:32:58,65.58,1,,,"b""b' @untitaker Thanks I have updated the title. I am sorry it didnot occur to me to mention that.  Can you please explain how do I do that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,closed,2013-05-29 14:42:09,69.18,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,reopened,2013-05-29 14:51:00,8.85,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,3,2013-05-29 13:32:58,123.78,,,1,"b'b"" It seems your if **name** == \'**main**\' block is not executed properly and the script just composes the app and then just exits. Your example runs totally fine for me and i really don\'t know what\'s wrong.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,4,2013-05-29 13:32:58,141.43,,,1,"b""b' Thanks for trying though. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,5,2013-05-29 13:32:58,246.82,,1,,"b""b' Cannot reproduce.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,closed,2013-05-31 23:14:10,503.17,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,749,closed,-,-,-,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,opened,2013-07-23 06:04:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,title,2013-07-23 06:04:41,00:00,,1,,"b""b' Given absolute URL"," testclient discards query params'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,body,2013-07-23 06:04:41,00:00,,1,,"b""b' The following fails at the assert inside the index subroutine.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,1,2013-07-23 06:04:41,858.82,,1,,"b'b"" That\'s currently intended behavior.  The first parameter to the test client should be a relative url.  If it\'s not"," then the parameters are removed as it\'s treated as if it was url joined with the second.  This works:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,closed,2013-07-24 20:23:36,858.92,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,2,2013-07-23 06:04:41,1041.23,,1,,"b""b' I got the same problem. The documentation does not mention it"," so maybe you could update it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,reopened,2015-06-30 14:51:19,1107.72,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,3,2013-07-23 06:04:41,1319.58,,1,,"b'b"" This behaviour seems a bit unexpected. What\'s the reasoning behind this behaviour?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,4,2013-07-23 06:04:41,550.18,1,,,"b'b"" I noticed this issue in other circumstances", without using the flag at all. Most of our view tests don\'t use request context explicitly, for example: In order to make work without the request context we had to explicitly set in test setup," but besides that this works perfectly and is much less verbose. The problem is that in this case generates absolute URLs (e.g.  ) which suffer from the issue in question. In other words the obvious code doesn\'t work: And has to be replaced with much less obvious: Worst of all there is no warning whatsoever so you don\'t even know why a test is failing for a URL that seems perfectly correct.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,5,2013-07-23 06:04:41,415.12,,1,,b'b\' If the test client needs a relative url, we should always be able to get a relative URL from  . And indeed, we can always get a relative url by calling with . The catch is that we must set  , even if we never need to generate absolute urls. It looks like the underlying constraint is that Werkzeug\\\'s []url  requires the argument.I think changing to treat as optional would be very disruptive, so we should rule that out. could be made to work without either a RequestContext or  , by creating a URL adapter ( ) with a dummy set to the empty string. So in other words, when a there is no RequestContext, and  ," we create a URL adapter with a dummy  . This should be a non-breaking change that will enable the use of with for use in tests without having to set  . We can document the correct usage of with a test client in the ""Testing Flask Applications"" doc.\''",,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,6,2013-07-23 06:04:41,344.52,,,1,"b""b' Sounds like a good plan.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,7,2013-07-23 06:04:41,404.52,,1,,"b'b"" The original issue here is invalid"," since the url should be relative. The absolute url is being appended as the query string. That shouldn\'t change (and would happen in Werkzeug if it should).  It does seem reasonable to want to be able to generate relative urls without setting during testing. I\'ll open a new issue with @sprin\'s plan.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,closed,2017-04-23 16:18:39,87.33,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,801,closed,-,-,-,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,opened,2013-08-16 08:50:21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,title,2013-08-16 08:50:21,00:00,,1,,"b""b' Flask-0.10.1 test failures'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,body,2013-08-16 08:50:21,00:00,,1,,"b""b' Pythons 2.7.5", 2.6.8," 3.3.2. ..-0.10.1 $ PYTHONPATH=. python2.7 run-OR..-0.10.1 $ PYTHONPATH=../Flask-0.10.1-python3_3/lib/ python3.3 run yield  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,1,2013-08-16 08:50:21,235.27,,1,,"b""b' #780 is related.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,2,2013-08-16 08:50:21,290.02,,1,,"b'b"" doesn\'t this fix it the test_appcontext_signals test?  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,3,2013-08-16 08:50:21,1219.67,,1,,"b""b' Fixed"," see #780.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,closed,2014-09-27 13:55:20,304.98,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,4,2013-08-16 08:50:21,789.88,1,,,"b""b' NO taking out the confusing loong PORTAGE_TMPDIR paths/!= under all 3 python impls. test_uninstalled_package_paths != test_json_key_sortinghowever I fully expect you to say works for me and leave it closed'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,5,2013-08-16 08:50:21,523.57,,,1,"b""b' Not sure"," might be a packaging issue. The testsuite runs fine for me when checking out the 0.10.1 tag in the repo. Could you try:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,6,2013-08-16 08:50:21,1410.42,,,1,"b'b"" hmmmmRe-exposing the test test_uninstalled_package_paths in the suite  $ ebuild flask-0.10.1-r1.ebuild clean teststill draws it. cd to the source   untitaker commented 9 days ago said to clone the repo and run python run-No longer works.  On doing all the above I end up with a repo without a run-I presume master has changed radically in 9 days so this cross check has no chance of being invoked.  the  file now indicates tests are run by  [] which gives a totally different set of fallout.. The suite run from /......./-0.10.1-python2_7 $ python run-has 2 lines pointing at the insource files  &  /**init**.py which cited the test_uninstalled_package_paths.  I don\'t know how more conclusive you can get than that"," however if master has moved on to a different testsuite setup I wonder now of any relevance. FWIW what you need is a gentoo system in which to runtest since you clearly don\'t have one.  via my internal contacts I can set you up with a gentoo vm into which you can ssh and see first hand.  I have done this before in an identical scenario.  It will likely be a current gentoo vm hosted by Rackspace.  Some of their staff are (fellow) gentoo devs Your call""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,7,2013-08-16 08:50:21,6.67,,,1,"b'b"" I\'d definetly be interested in fixing this on Gentoo. Please contact me via the email address found on my profile.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,reopened,2014-10-08 11:25:54,1290.57,1,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,8,2013-08-16 08:50:21,344.92,,1,,"b'b"" I wasn\'t able to reproduce anything on the Gentoo VM @idella gave me. I\'m closing this as a setup-specific issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,closed,2014-10-09 17:10:45,344.85,1,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,837,closed,-,-,-,1,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,opened,2013-10-11 22:11:09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,title,2013-10-11 22:11:09,00:00,,1,,"b""b' Update url_for documentation for '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,body,2013-10-11 22:11:09,00:00,,1,,"b'b\' Previous documentation referenced a non-existent property on the Flask object called ""build_error_handler"". This should actually reference . I created an example gist with the broken documentation version and the working version here", url  for Flask 0.10.1\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,1,2013-10-11 22:11:09,1340.22,,,1,"b'b"" This isn\'t just an update to the documentation \\xe2\\x80\\x94 this is an update to the code as well.  What is the exact issue", at present? Closing for now," for cleanup purposes. Please /cc me when you respond :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,closed,2014-03-21 20:31:22,1340.22,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,2,2013-10-11 22:11:09,30.52,1,,,"b""b' I apologize"," I misunderstood :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,reopened,2014-03-21 21:01:53,30.52,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,closed,2014-03-21 21:01:56,0.05,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,885,closed,-,-,-,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,opened,2014-01-03 18:58:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,title,2014-01-03 18:58:20,00:00,,1,,"b""b' Registering a handler for HTTPException has no effect'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,body,2014-01-03 18:58:20,00:00,1,,,b'b\' When registering a handler for  , it has no effect when an HTTP error is raised. Assume the following handler: When requesting a page for which no route exists, a JSON response should be returned by the error handler, but instead, the usual  -generated HTTP error page is returned. On the other hand, if the error handler is defined to handle a specific error code (by passing the error code to the decorator), the exception is trapped and the JSON message returned. As is the class raised internally by the function," why isn\\\'t it possible to create a ""catch-all"" handler like this? Am I missing something?\''",,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,1,2014-01-03 18:58:20,124.13,1,,,"b'b"" Long story short: It is a bug", it\'s a flaw in the design, it\'s easy to work around as a user," so it\'s rather low priority to fix. :S""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,2,2014-01-03 18:58:20,247.85,,1,,"b""b' Do you know where the bug exactly lies? If this is an already known bug"," with some informations about it maybe I could help by trying to fix it by myself and then submit a pull-request.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,3,2014-01-03 18:58:20,582.83,,1,,"b""b' I think it would require rewriting most of the error handling system for Flask"," the code for this is in  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,4,2014-01-03 18:58:20,589.23,,1,,"b""b' #952 is a possible solution to this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,5,2014-01-03 18:58:20,1292.58,,1,,"b""b' Fixed by #839'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,closed,2014-10-19 18:14:59,1396.65,2,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,6,2014-01-03 18:58:20,1429.63,,1,,"b'b"" #839 doesn\'t fix the issue OP posted -it only handles subclasses of  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,7,2014-01-03 18:58:20,3.52,,1,,"b""b' Could you provide a testcase that fails?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,8,2014-01-03 18:58:20,37.15,,1,,"b""b'   Code is an (subclass of  ). Since there is no specific handler for it (unlike  )"," one would hope it would be handled by  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,9,2014-01-03 18:58:20,52.97,,1,,"b'b"" Ahh", I think this is because HTTPException doesn\'t have a HTTP code," but the error handling logic tries to find an errorhandler _with the HTTP code_. cc @flying-sheep ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,reopened,2015-07-05 19:38:19,83.33,2,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,10,2014-01-03 18:58:20,9.62,,1,,"b""b' Has anybody  #1383? I was not very sure by looking at the changes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,11,2014-01-03 18:58:20,4.63,,,1,"b'b"" Yeah this slipped through the cracks! I wonder whether we shouldn\'t remove the -code distinction because of this bug though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,12,2014-01-03 18:58:20,796.68,1,,,"b""b' right", i didn\\xe2\\x80\\x99t think of this, sorry! so the legal classes to register handlers for:  , the finite set of all subclasses of it (synonymous with error codes)," and subclasses of subclasses (e.g. and the legal instances of exceptions to raise are instances of subclasses of but not direct instances of  . this means the following assumptions hold: we should add a way to add a handler for  s without allowing users to raise an instance of  . '""",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,13,2014-01-03 18:58:20,1.48,,1,,"b""b' @Bekt that PR should be closed"," it was written against the old broken behavior that I replaced.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,14,2014-01-03 18:58:20,631.23,,1,,"b""b' For those who simply want to override the default behavior of the _default_ subclasses"," you can do something like this:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,15,2014-01-03 18:58:20,1379.38,,1,,"b""b' #2144 seems to solve this issue'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,16,2014-01-03 18:58:20,74.28,,1,,"b""b' Resolved by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,closed,2017-05-23 19:55:33,17.23,3,14,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,941,closed,-,-,-,3,14,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,opened,2014-01-06 16:22:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,title,2014-01-06 16:22:44,00:00,,1,,"b""b' Added a favicon for the docs '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,body,2014-01-06 16:22:44,00:00,,1,,"b""b' Added a favicon for the docs as requested in issue url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,closed,2014-01-06 16:23:09,0.42,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,reopened,2014-01-06 16:23:14,0.08,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,closed,2014-01-06 16:28:03,4.82,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,1,2014-01-06 16:22:44,5.38,,,1,"b""b' Thanks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,2,2014-01-06 16:22:44,20.48,,,1,"b""b' Thanks for your help.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,943,closed,-,-,-,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,opened,2014-03-23 05:44:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,title,2014-03-23 05:44:31,00:00,,1,,"b'b"" Flask can\'t read multipart form boundaries from custom HTTP clients""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,body,2014-03-23 05:44:31,00:00,,1,,"b'b\' I consistently get the error ""TypeError: cannot concatenate \\\'str\\\' and \\\'NoneType\\\' objects"" whenever I send a multipart form from anywhere that\\\'s not an HTML . For example AndroidQuery\\\'s", Apache HttpClient," and the Chrome Postman plugin all give this error. Trace:File ""C:\\\\Python27\\\\lib\\\\site-packages\\\\werkzeug\\\\""", line 382, in parse_lines  next_part = b\\\'\\\' + boundary\'',,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,1,2014-03-23 05:44:31,416.98,,1,,"b""b' Can you provide the headers of your request please?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,closed,2014-03-23 13:19:06,454.58,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,2,2014-03-23 05:44:31,39.3,,,1,"b'b"" As it turns out", I was setting the Content-Type manually in each of these cases," which meant the form boundaries weren\'t correct. You can safely ignore this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,reopened,2014-03-23 13:20:48,1.7,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,closed,2014-03-23 13:20:50,0.03,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,3,2014-03-23 05:44:31,0.93,,,1,"b""b' Ok cool.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1007,closed,-,-,-,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,opened,2014-04-01 18:54:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,title,2014-04-01 18:54:03,00:00,,1,,"b""b' Python 3.4 changed behavior'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,body,2014-04-01 18:54:03,00:00,,,1,b'b\' In doing a test upgrade to python 3.4 I encountered the following traceback (snippet) I was able to resolve it with the following: If you want a formal pull request, I\\\'d be happy to provide one," and do it ""right""", this feels pretty brute-force, I\\\'m sure there\\\'s a better way.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,1,2014-04-01 18:54:03,13.22,,1,,"b""b' Some forgotten information:  Python 3.4 changed []url  to align with [PEP-451]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,2,2014-04-01 18:54:03,1161.32,,1,,"b'b"" That PR was done just using the inline editor.  If I get time sometime I\'ll get another one with tests and such"," but there\'s at least that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,3,2014-04-01 18:54:03,483.92,,1,,"b'b"" I chatted with Eric Snow about this at PyCon (Eric did the pkgutil work) and he\'s fixed it for 3.4.1. Until then"," this is probably the best available solution. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,4,2014-04-01 18:54:03,1000.55,,1,,"b""b' Closing this here.  The latest code already deals with 3.4 support.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,closed,2014-06-06 15:13:03,1219.0,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,5,2014-04-01 18:54:03,23.3,,1,,"b'b"" Can you clarify? I have Flask 0.10.1 (the lastest", I believe) and Python 3.4.1," and I\'m getting this error (specifically if I install snakemake and do I get this error). What do I need to upgrade to fix this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,6,2014-04-01 18:54:03,30.28,,1,,"b'b"" @pfmoore It\'s because case problem.url package name is but it calls  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,7,2014-04-01 18:54:03,55.45,,,1,"b'b"" @methane ah"," thanks. I hadn\'t spotted that""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,8,2014-04-01 18:54:03,241.87,1,,,"b""b' Can Flask revisit fixing this for Python 3.4.0?  With Ubuntu Trusty having 3.4.0 installed"," there are environments where upgrading to 3.4.1 to deal with this bug is a pain.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,9,2014-04-01 18:54:03,1140.18,,1,,"b""b' Considering for next bugfix release.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,reopened,2015-03-30 16:04:08,51.08,1,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,10,2014-04-01 18:54:03,16.33,,,1,"b""b' thank you for reconsidering!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,11,2014-04-01 18:54:03,542.38,,,1,"b'b"" I am currently reconsidering fixing this issue. I don\'t think it\'s a good idea for Flask to work around this behavior", see #1481. The fix seems easy, but  have already far too much cruft accumulated that results in accepting workarounds like these. I also don\'t think that Python 3 currently has a userbase big enough for our workaround to matter, which would probably be released when it\'s already too late and Ubuntu has updated its Python 3 package. If you really have to use 3.4.0, doing this fix seems easy enough to do in usercode through monkeypatching: I\'ll still leave this issue open, because I\'m not the only one to decide this," and we already recieved a considerable amount of bug reports because of this issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,12,2014-04-01 18:54:03,93.4,,1,,"b'b"" I can relate with not wanting to add cruft to a code base. My understanding is that since Django switched to Python3 by default that the user base for 3 is a decent chunk (numbers I heard at PyCon ranged from 4-15%). [I found some stats]url  but I\'m not sure how reliable they are. I\'m unsure how large the user base really is at this point. But I am fairly sure it\'s large enough that if Monkey patch is an acceptable answer than a documentation change should happen (at least) because I spent a hefty chunk of time tracking this issue down.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,13,2014-04-01 18:54:03,304.48,,,1,"b'b"" Agree completely.Thanks for tracking this down!  This issue (including the [monkey-patch solution]url  should suffice for docs as it\'s easily found by googling the error message. For now", I\'m going to go ahead and close this. If any of the other maintainers disagree," feel free to re-open.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,closed,2016-04-08 08:00:44,956.6,1,9,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1011,closed,-,-,-,1,9,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,opened,2014-04-14 01:31:17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,title,2014-04-14 01:31:17,00:00,,1,,"b""b' About flask docs translations'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,body,2014-04-14 01:31:17,00:00,,,1,"b'b"" #756 Hello @kennethreitz "," We\'ve created \'flask-docs-kr\' project in . url We hope to enable \'\' URL. Please add our flask-docs-kr project to official flask  project. (\'Admin -Thanks.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,1,2014-04-14 01:31:17,514.5,,1,,"b""b' :+1:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,2,2014-04-14 01:31:17,107.52,,,1,b'b\' I\\\'m not really happy about making this official. While I appreciate the effort and it\\\'s always great to see people excited to spend efforts on the project, especially on things that make it more approachable to new people," promoting this translation to something ""official"" implies that the documentation is developed with the same standards and by the same people as everything else. This is however not the case. Afaik none of the people with commit access know korean", so we can\\\'t review it, we can\\\'t keep it up to date with the original etc. nor do we have any other regular contributors who do. This is however the standard I would like to see for an official translation and I think others probably have the same expectation or it would at least be reasonable for them to have it.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,3,2014-04-14 01:31:17,87.7,,1,,"b""b' I agree with you.It is hard to review translated document for Korean. (another languages are too.)Even though it is translated perfectly"," it may be outdated document.However it will be worth discussing for people who using other languages.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,4,2014-04-14 01:31:17,1399.8,,1,,"b""b' There are several different translated documents for Chinese. url url url the newest version is one year ago.Most people translate a certain version of Flask. Is there any useful tools the compare the translations between and update translations easily? English Version A    English Verison B  -2014-07-27 21:21 GMT+08:00 Jou Sung-Shik notifications@:##  Cluster and Grid Computing LabServices Computing Technology and System LabHuazhong University of Science and TechnologyWuhan",430074," ChinaTel: +86-189 7160 9959Fax: +86-27-87557354'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,5,2014-04-14 01:31:17,561.35,,1,,"b'b"" Who would be maintaining the translated docs? I think providing links to unofficial translations might be helpful"," but making them \'official\' just creates more work.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,6,2014-04-14 01:31:17,1156.9,,,1,b'b\' I think all the maintainers are in agreement that it\\\'s awesome folks are translating the docs, but we can\\\'t commit to keeping them maintained," so we can\\\'t imply they\\\'re ""official"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,closed,2016-06-02 17:19:03,947.77,0,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,7,2014-04-14 01:31:17,392.9,,,1,"b'b"" Have you seen what the Requests projects does? Effectively:someone forks the repo", translates the docsthe translated docs are uploaded to readthedocsa link is added to the sidebar of the requests documentation It\'s pretty obvious that they are unofficial translations, by URL alone," and the quality of content. But people find them extremely helpful in their respective communities. It is purely up to the person who created the translation to maintain it. They generally do not. That is fine. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,reopened,2016-06-06 23:53:05,394.03,0,5,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,8,2014-04-14 01:31:17,916.27,,1,,"b""b' Should this issue be closed? Since the related milestone was marked as 100% complete.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,closed,2019-01-25 03:35:32,222.45,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,9,2014-04-14 01:31:17,762.1,,1,,b'b\' I want to ask similar question about Russian translation. OK, you can\\\'t check translation because you don\\\'t have any russian developers, so you can\\\'t make it as official translation. But then, what i (and other translators) can do? Can you give a link to that translation, and say, that this is unofficial? Can i search for russian developers on some other sites and ask them to check translation? What if i translate docs commit-by-commit, so you will always see, is it new or outdated? So," if i want to translate it ""right-way""", how can i do it?\'',,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,10,2014-04-14 01:31:17,800.03,,,1,"b'b"" If you are still interested"," you\'ll need to build the docs with the correct language tag and give us access on rtd to add it as a translation. It looks like this may be very out of date though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,11,2014-04-14 01:31:17,801.8,,1,,"b""b' If anyone wants to figure out the Sphinx built-in way to manage translations", we might be able to consolidate the translations in a pallets repo," but that is not something I have time to figure out.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,12,2014-04-14 01:31:17,915.78,,,1,"b""b' @liks79 Is the korean version of flask documentation still maintained? I am interested in contributing to it in terms of both contents and scripting(for building docs"," etc.).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1023,closed,-,-,-,0,8,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,opened,2014-05-28 17:15:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,title,2014-05-28 17:15:11,00:00,,1,,"b""b' incomplete formatted string expression'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,body,2014-05-28 17:15:11,00:00,1,,,"b'b"" in the example code of doc pageurl  the formatted string expression in the exception has two %s placeholders but only one variable.see excerpt following:\'\'\'Here is an example document (put this also into "," e.g.): def max_length(length):  def validate(value):    if len(value) <= length:    return True    raise Exception(\'%s must be at most %s characters long\' % length)  return validate\'\'\'""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,closed,2014-05-28 17:15:53,0.7,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,1,2014-05-28 17:15:11,106.67,,1,,"b""b' Why did you close this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,2,2014-05-28 17:15:11,86.17,1,,,"b'b"" Sorry", total noob at issue management. (first issue attempt)I won\'t make that particular error again. On 5/28/2014 12:02 PM," Markus Unterwaditzer wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,3,2014-05-28 17:15:11,19.3,,1,,"b'b"" It\'s okay. Below the comment field"," there is a button to reopen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,reopened,2015-11-06 00:37:57,442.07,2,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,4,2014-05-28 17:15:11,239.67,,1,,"b'b"" in the second code example in \'declarative\' section ofurl  in the validate(value)   function", in the raise  statement," the formatted string expression has two %s placeholders but only one variable. raise Exception(\'%s must be at most %s characters long\' % length)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,5,2014-05-28 17:15:11,9.7,,,1,"b'b"" Good catch. And a great thing for a quick pull request (it\'s one of the cases where using the web-based github editor comes handy).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,6,2014-05-28 17:15:11,982.9,,1,,"b""b' Looks like this is fixed in the latest version of the docs. url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,7,2014-05-28 17:15:11,20.6,,,1,"b""b' Yes"," thank you.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,closed,2016-06-02 17:40:14,1022.28,2,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1072,closed,-,-,-,2,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,opened,2014-06-04 03:22:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,title,2014-06-04 03:22:43,00:00,,1,,"b""b' '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,body,2014-06-04 03:22:43,00:00,,1,,"b'b"" the  has a issue when i run \\xef\\xbc\\x8cthe error is follow:AttributeError: \'Flask\' object has no attribute \'cli\'""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,1,2014-06-04 03:22:43,27.73,,1,,"b""b' this is the flask version problem"," the flask 0.10 version is fix this issue'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,closed,2014-06-04 03:50:27,27.73,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,2,2014-06-04 03:22:43,3.33,,1,,"b""b' my last commented is wrong","the right version is 0.11 dev version fix this problem'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,reopened,2014-06-04 03:53:47,3.33,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,closed,2014-06-04 03:53:52,0.08,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1078,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,opened,2014-06-30 16:56:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,title,2014-06-30 16:56:12,00:00,,1,,"b""b' Flask Badges '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,body,2014-06-30 16:56:12,00:00,,,1,"b""b' url  Flask Badge Images are not  to be fixed ![issue]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,1,2014-06-30 16:56:12,1344.75,,1,,"b""b' You can find all of those badges [here]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,2,2014-06-30 16:56:12,109.93,,,1,"b""b' Thanks'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,closed,2014-07-01 17:10:54,14.7,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,reopened,2014-07-01 17:16:06,5.2,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,3,2014-06-30 16:56:12,9.62,1,,,"b""b' Reopened. v_Website needs to be updated anyways_ Failed to load resource: net::ERR_CONNECTION_REFUSED '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,4,2014-06-30 16:56:12,55.63,,,1,"b""b' Badges load fine for me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,closed,2014-10-19 18:16:08,60.03,1,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,5,2014-06-30 16:56:12,922.15,,,1,"b""b' great! its fixed :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1098,closed,-,-,-,1,2,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,opened,2014-07-05 05:54:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,title,2014-07-05 05:54:16,00:00,,1,,"b""b' Links to Werkzeug  and Jinja in Document are wrong '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,body,2014-07-05 05:54:16,00:00,,1,,"b""b' Links to Werkzeug and Jinja  on url  are wrong.Linked to url  and url  instead of url  and url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,1,2014-07-05 05:54:16,61.17,,1,,"b'b"" This actually has been fixed in the docs"," It\'s just not pushed out to the website.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,2,2014-07-05 05:54:16,726.05,,,1,"b""b' Links are still broken today!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,3,2014-07-05 05:54:16,1179.47,,1,,"b'b"" They\'re now redirecting.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,closed,2014-08-26 14:40:57,526.68,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,4,2014-07-05 05:54:16,22.12,,,1,"b'b"" Nope! There\'s still a link to  "," which 404.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,5,2014-07-05 05:54:16,2.52,1,,,"b'b"" Ugh... unfortunately i can\'t change them as they\'re per-tag and not maintenance branch. @mitsuhiko said there\'s a policy not to change anything on old docs"," so the correct fix would be to install a redirect.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,reopened,2014-08-26 15:05:35,24.63,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,6,2014-07-05 05:54:16,5.0,,1,,"b""b' Just pinged @mitsuhiko"," now it works.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,closed,2014-08-26 15:10:35,5.0,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1104,closed,-,-,-,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,opened,2014-07-16 08:39:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,title,2014-07-16 08:39:22,00:00,,1,,"b'b\' CLI: ""flask"" command help doesn\\\'t list custom commands\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,body,2014-07-16 08:39:22,00:00,,1,,"b""b' I am playing with the latest release of flask with cli module. I have created a command called initdb and when I call flask initdb it works as expected", but when I just call flask command it supposed to show the list of all available commands including initdb," which is not the case. Any idea why?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,1,2014-07-16 08:39:22,1166.48,,1,,"b'b"" The flask command doesn\'t work for me. I don\'t know if I haven\'t set something up incorrectly", but trying to follow examples where the flask command is used do not work for me. I get the following: . Also, when trying to play with the minitwit example," and just trying or  I get the following error: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,2,2014-07-16 08:39:22,649.2,,1,,"b""b' I learned alot from the image tweeted by @mitsuhiko how this will help @SherMM url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,3,2014-07-16 08:39:22,534.15,,1,,"b'b"" I still cannot get the flask command to work", even after following post by @erwagasore . I haven\'t used Flask in a couple months, but my version is current. I am not sure if there needs to be a flask_config file or something else," but no shell I use recognizes this command. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,4,2014-07-16 08:39:22,6.7,,1,,"b""b' There is no command. Where are you getting this information from?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,5,2014-07-16 08:39:22,26.93,1,,,"b'b"" This is just what I interpreted (apparently incorrectly) from the minitwit docs and link provided by @erwagasore above. I just realized", I don\'t have the version of flask with the module. So, I am guess it\'s my problem. Sorry for the confusion," but thanks for the help anyways. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,6,2014-07-16 08:39:22,716.62,,1,,"b""b' The  module is in the latest flask commit on this repository. Check this out url  for more info on the future of flask'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,closed,2014-08-28 14:18:57,339.58,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,7,2014-07-16 08:39:22,122.6,1,,,"b""b' Sorry for closing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,reopened,2014-08-28 14:22:03,3.1,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,8,2014-07-16 08:39:22,23.22,,1,,"b""b' Since works correctly i suppose that this is a deficiency in click.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,9,2014-07-16 08:39:22,1439.6,,1,,"b'b"" I think I got a clue on this one. It seems indeed a problem with  . The access is actually never executed: This is the closest I\'ve come to narrow the problem. If not args ( ) the function will exit on but the problem is that env variables are actually accessed in  . That\'s why works correctly"," because it has at least one arg and the environment gets set up.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,10,2014-07-16 08:39:22,424.8,,1,,"b'b"" I\'ve also come that far. As a workaround we could set to true and print the help manually"," but i think this should be fixed in click.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,11,2014-07-16 08:39:22,1300.15,,1,,"b'b"" I\'m closing this for now as the latest changes implicitly fixed this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,closed,2016-05-26 19:29:49,307.77,2,11,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1124,closed,-,-,-,2,11,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,opened,2014-10-20 08:25:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,title,2014-10-20 08:25:33,00:00,,1,,"b""b' Handle a single unusual argument in jsonify'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,body,2014-10-20 08:25:33,00:00,,1,,b'b\' I ran into this issue today, googled it, and found [someone else having the same issue]url  If you\\\'re using the JSON Encoder in Overholt," you may notice that passing one of your models to jsonify does not work.  It says ""object is not iterable""", even though your custom json encoder will turn it into an iterable in a moment.  This is because Flask is trying to make it into a dict before that can happen. This patch fixes this case.  Also it allows you to return other legitimate singular json values such as integers and strings.  Hopefully this doesn\\\'t raise any security issues.  If it does, someone else may wish to handle this more carefully.\'',,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,1,2014-10-20 08:25:33,198.88,,1,,"b'b"" This is actually intended", see url  Your particular case would be url  However, we\'re considering removing that restriction," see url  so don\'t close this yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,2,2014-10-20 08:25:33,451.62,,1,,"b'b"" @untitaker I have read that page. While my patch would allow you to serialize arrays", that\'s not the point of my patch.  In my case," I am returning an object that my JSON encoder is going to turn into a dict. A much better way to prevent you from serializing arrays would be to check after serialization if the first character is an open bracket ([).  There is no point in breaking other legitimate uses of jsonify just to prevent that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,3,2014-10-20 08:25:33,3.82,,1,,"b""b' I see. Would you be willing to maintain the PR regarding #248 though?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,4,2014-10-20 08:25:33,6.13,,1,,"b""b' @untitaker What do you mean?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,5,2014-10-20 08:25:33,11.15,,1,,"b'b"" Nevermind. I\'ll leave this PR open", because your particular issue is different from the linked one. The current patch is unlikely to land in its current form," but i expect that we will fix both issues at once.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,6,2014-10-20 08:25:33,24.02,,,1,"b'b"" I updated it to improve the check for arrays", and added a configuration option. I\'d like to run flask\'s test suite on this, but when I run  it says  ," even though I can open Python and import flask just fine.  I wonder what\'s up with that.  It has the same problem before my patch is applied.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,7,2014-10-20 08:25:33,2.17,,1,,"b""b' I think the new system requires you to install flask in developer mode:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,8,2014-10-20 08:25:33,1.5,,1,,"b'b"" I installed it with but that didn\'t work.  I tried yours"," but that didn\'t work either.  Hm.  Github now says  What does that mean?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,9,2014-10-20 08:25:33,3.78,,,1,"b'b"" I don\'t think this is the way to go. I actually think we should completely remove all checks", and also clarify in the docs that this portion is basically obsolete. @DasIch also suggested to specify a list of officially supported browsers. Remember, this is 1.0, we can break compat all the way we want. If the user still wants to support Internet Explorer 5," they can just avoid serializing arrays.It seems to run fine for me without that.I don\'t see that message. Travis can be glitchy sometimes in that regard.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,10,2014-10-20 08:25:33,346.43,,1,,"b'b"" My understanding is that the previous behavior (always converting the args to a dict) was sufficient to always prevent a top level json list", but blocked the legitimate use case of jsonify\'ing an _object_ for which one has written a custom JSONEncoder. This PR seems to enable that ability, while still protecting against top level json lists. Whether json lists are considered a vulnerability Flask should handle, whether a config value allows top level lists to be ," and which browsers have been patched or not all seem to be concerns that can be handled in a separate PR(s). The ability to disable array security is not needed to solve the problem. If this PR did not attempt to fix the jsonify(object) issue _and_ introduce a JSONIFY_ARRAY_SECURITY config flag (contentious) I imagine it could be merged without much debate? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,11,2014-10-20 08:25:33,664.75,1,,,"b""b' I actually think that this is a definitive bug that can be fixed as done in this PR without much discussion.Actually this is the controversial part for me: I think we should completely remove any security checks (as argued in #248) and extensively document why the user might want to take manual precautions against this problem.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,12,2014-10-20 08:25:33,192.18,,1,,"b""b' No longer merges cleanly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,13,2014-10-20 08:25:33,4.1,,1,,"b'b"" Yes"," that too. I\'ll close this for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,closed,2014-11-29 16:16:05,470.53,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,14,2014-10-20 08:25:33,1156.73,1,,,"b'b"" I\'m sad to see this hasn\'t merged"," though I appreciate the responsibly cautious approach in #248""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,reopened,2016-01-25 15:55:48,1419.72,2,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,closed,2016-01-25 15:56:01,0.22,2,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1209,closed,-,-,-,2,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,opened,2014-10-25 23:38:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,title,2014-10-25 23:38:43,00:00,,1,,"b""b' Updating extension guidelines v2'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,body,2014-10-25 23:38:43,00:00,,1,,"b""b' Continuing #1035 and #1218"," #1135 related.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,1,2014-10-25 23:38:43,118.13,,,1,b'b\' @untitaker I\\\'m unclear if you want to include updates to or only in this PR...  I think should also have a few updates, as it now conflicts with  , leaving flask n00bs (such as myself) confused on how they should be importing flask extensions in the 1.0 release.  1) still suggests users should import using the deprecated rather than  :This conflicts with the recommendation in  :I suspect (but not certain) that should be changed to:2) If the above is updated, then the section [Flask Before 0.8]url  reads a bit weird... the way the first sentence is currently worded implies the user will know about  , even though all previous references to it have been removed. Since this is a major release," the cleanest thing might be to simply delete the entire ""Flask Before 0.8"" section. Alternatively", just have a simple note that says something along the lines of:Linking to the old docs should provide enough context on . 3) Along those lines, should the script be removed from the 1.0 release master branch? Neither that nor the script seem necessary anymore since they\\\'re available through the maintenance branches. 4) Should the following paragraph be deleted from  ?5) Should the following line be deleted from  ?Leaving this in might accidentally encourage users to use as a catchall solution. I don\\\'t see any reason to leave it in, as the section reads fine without it.  I would happily submit a PR to implement the above changes except I\\\'m not 100% confident on the proper solutions to these issues. Feel free to either implement changes or let me know the desired solutions and I\\\'ll fix them. \'',,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,2,2014-10-25 23:38:43,385.38,1,,,"b'b"" I agree that the wording implies the user should use  ", but doesn\'t actually import either Flask-Foo or Foo-Flask, it\'s just an ordinary package name. is the only name with such magic, and again, the magic is hard to maintain, which is one of the reasons we want to remove it.As mentioned in url  we need another migration tool for this. If we remove this section maybe more docstring text should be added to  .Not sure... if yes, the additional text mentioned above should be added in the maintenance branch. I\'d say the change would be a bit radical, a safe thing to do is to rename it to make room for the new fixer. We also could extend the current compat tool so that it can do all kinds of conversions (the default being that it would convert and to  ).In general i\'d rather just convert information to the past tense instead of deleting it... maybe we could move all information about  into just one chapter, and link this chapter sometimes for historic reasons," but not leave mentions of  scattered.""'",,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,3,2014-10-25 23:38:43,1.28,,1,,"b""b' Oh"," and i think any such changes should go in a separate PR pointed to master.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,4,2014-10-25 23:38:43,1196.4,1,,,"b'b"" This is a complete mess and doesn\'t merge anymore"," we should cherry-pick out of it and kill it then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,5,2014-10-25 23:38:43,303.15,,1,,"b""b' Taken care of in #1484'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,closed,2016-04-05 09:03:10,564.45,2,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,6,2014-10-25 23:38:43,468.88,,1,,"b""b' Not really"," we still need to update the extension guidelines in some way.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,reopened,2016-04-05 16:51:57,468.78,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,7,2014-10-25 23:38:43,203.0,1,,,"b'b"" My bad.  Can you clarify what\'s missing?  005a49d969e2e4ebcd23cfd8347a6f2d331e1778 updated the extension guidelines and 188f0e2710bec195925687f51db5dc430ee5ee91 added a deprecation warning.  Is there something else beyond the switch to  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,8,2014-10-25 23:38:43,11.85,,1,,"b""b' @jeffwidman Yes", I think the enumerated list for extension requirements has to be updated as well. That is a completely unrelated change," see #1035 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,9,2014-10-25 23:38:43,42.32,,,1,"b""b' needs a rebase!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,closed,2017-05-25 21:22:03,270.1,3,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,10,2014-10-25 23:38:43,12.98,,1,,"b""b' i merged this manually. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1220,closed,-,-,-,3,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,opened,2014-12-03 15:52:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,title,2014-12-03 15:52:20,00:00,,1,,"b""b' Slash in route affects  order'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,body,2014-12-03 15:52:20,00:00,,,1,b'b\' Hi ! I\\\'m in trouble since a moment using Flask with that point.I\\\'m registring 2 url rules in a blueprint : I\\\'ve read somewhere that the rule with the less number of parameters is taken in routing.But, when I\\\'m typing /, I\\\'m in the function, not in  When I print the : After some tests, it seems that following code is working as expected : So," the dot isn\\\'t considered as a ""separator"" ?Is there a way to fix that ? Thanks in advance for your help !\''",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,1,2014-12-03 15:52:20,36.23,,1,,"b""b' Duplicate of url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,closed,2014-12-03 16:28:34,36.23,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,2,2014-12-03 15:52:20,0.65,,1,,"b'b"" Actually this is a slightly different case"," so I\'ll reopen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,reopened,2014-12-03 16:29:13,0.65,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,3,2014-12-03 15:52:20,333.37,,1,,"b""b' I think this is a Werkzeug issue", specifically with url  You should probably submit it to url  In the meantime," reordering the routes should work.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,4,2014-12-03 15:52:20,893.18,,1,,"b""b' This is a Werkzeug issue"," already reported at #727.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,closed,2017-06-05 12:55:47,1226.57,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1265,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,opened,2014-12-12 00:30:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,title,2014-12-12 00:30:15,00:00,,1,,"b""b' Update MethodViewType for supporting Mixin'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,body,2014-12-12 00:30:15,00:00,1,,,"b""b' Example of use: class ListResourceMixin(object):  def get(self):    ... class MyResource(Resource"," ListResourceMixin):  ...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,1,2014-12-12 00:30:15,582.65,,1,,"b""b' In which concrete scenario would you want to use mixins?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,2,2014-12-12 00:30:15,503.78,,1,,"b'b"" I\'m developing Webservices using Flask-Restful. class ListResourceMixin(object):  list_parser = ()  list_(\'page\'", type=int) # Pagination for every model  list_(\'items\', type=int, default=10) ... class CustomerResource(Resource, ListResourceMixin):  model = () class ProductResource(Resource, ListResourceMixin):  model = () class TodoResource(Resource, GetResourceMixin, UpdateResourceMixin,"DeleteResourceMixin):  model = () 2014-12-13 11:13 GMT+01:00 Markus Unterwaditzer notifications@:##  _Disponible en:_ url Twitter url  LinkedInurl ""'",,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,3,2014-12-12 00:30:15,1202.93,,1,,"b""b' no unittests?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,closed,2015-07-14 13:22:49,772.57,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,reopened,2015-07-14 13:23:03,0.23,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,4,2014-12-12 00:30:15,1340.23,,1,,"b""b' Is this still open? I mean does the issue still exist?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,5,2014-12-12 00:30:15,175.63,,1,,"b""b' #1936 duplicates this"," but adds tests. Closing in favor of that one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,closed,2017-04-21 15:55:29,152.43,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1276,closed,-,-,-,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,opened,2014-12-18 13:32:21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,title,2014-12-18 13:32:21,00:00,,1,,"b""b' send_file fails when filename contains unicode symbols'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,body,2014-12-18 13:32:21,00:00,1,,,b'b\' Hi. I\\\'ve detected an issue with supporting unicode filenames in send_file.If send_file attempts to respond with utf-8 in http headers, the answer is empty," the log contains something like ""http-headers should containbe latin-1"".I know that [browser support IS A MESS]url  but it seems", that sending two filenames (  and  ) separated by semicolon should work. I\\\'d like this to be handled by flask or werkzeug. Will you accept such pull request?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,1,2014-12-18 13:32:21,643.08,1,,,"b""b' Similar discussion has already happened regarding this observation. See the issue from to read more about the details", but the short of it is that HTTP headers are supposed to only accept characters. Changing this behavior in flask or werkzeug would only cause issues and break running code by allowing requests to be sent in an unsupported encoding to webservers which expect to get  . Someone else can chime in if I am mistaken," but I think this can be closed. Similar discussion:url url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,2,2014-12-18 13:32:21,512.03,,1,,"b'b"" I suppose the problem here is that it\'s not clear which encoding send_file takes for the filename. Latin-1 makes sense"," but people might assume it\'s UTF-8.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,3,2014-12-18 13:32:21,746.27,,1,,"b""b' I updated the API documentation to make that explicit"," is that sufficient?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,4,2014-12-18 13:32:21,441.37,,1,,"b'b"" BTW"," I\'ve solved the problem by sending filename*=utf-8\'blah\' header field.Works everywhere except for the IE <= 8. Here is the snippet: Looks like a more correct way of fixing this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,5,2014-12-18 13:32:21,4.58,,1,,"b'b""  From the research I did I am surprised that worked for you actually"," but either way I\'m not sure if we should be suggesting that workaround because the encoding doesn\'t seem to be universally supported.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,6,2014-12-18 13:32:21,35.95,,1,,"b'b"" I\'m not really worrying about universal browser support.Here are the support tables for the feature.url  As far", as I understand," providing both and should be more compatible. A library for transliteration / unaccenting will be required though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,7,2014-12-18 13:32:21,921.55,,,1,"b'b"" From that link:I\'m happy to close the PR if you want to instead work on supporting this? But I\'m unsure whether it is so necessary to not follow the recommendation. I think someone should chime in here though"," @untitaker.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,8,2014-12-18 13:32:21,612.75,,1,,"b'b"" I think that PR definitely should be used", at least as some kind of hotfix.I\'ve no time to work on this right now. Some time later," maybe. Don\'t close the issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,9,2014-12-18 13:32:21,936.58,,1,,"b""b' @untitaker any opinion on this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,10,2014-12-18 13:32:21,73.2,1,,,"b'b"" Looking this over again and I want to close the issue and merge #1371. I think worrying about universal browser support is a good idea and it doesn\'t make much sense to make this change if the recommended practice is to use unless necessary to do otherwise.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,11,2014-12-18 13:32:21,405.77,,1,,"b'b"" I\'ve found the unidecode library providing the required function:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,12,2014-12-18 13:32:21,572.98,,1,,"b""b' @georgthegreat", thank you. Although the question for me is not whether we can provide the suggested function," but rather it is worth disregarding universal browser support for the enhancement.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,13,2014-12-18 13:32:21,149.45,,1,,"b""b' I thought that provided example should not break any compatibility.Do you have IE6 for checking? I have the following example here:url  (pdf"," 23 mb in size).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,14,2014-12-18 13:32:21,810.72,,1,,"b'b"" UPDATE: This is a wrong approach. It causes security warning to be shown in modern Chromium-based browsers. I don\'t know", which security problems are caused by multiple filename specification," but this is very serious regression of approach I\'ve suggested.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,15,2014-12-18 13:32:21,1290.58,,,1,"b'b"" @georgthegreat Thanks for the update. I\'ll merge the PR then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,closed,2015-06-06 05:29:13,956.87,3,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,16,2014-12-18 13:32:21,3.48,,1,,"b""b' You sure you wanted to merge this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,17,2014-12-18 13:32:21,1.47,,1,,"b""b' @untitaker", I just commented on the PR," I meant to ask for a review actually...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,18,2014-12-18 13:32:21,6.3,,1,,"b'b"" Alright", the docs are now merged. @georgthegreat I don\'t think any other fix is possible if you\'re passing bytestrings. If you\'re passing unicode," the situation looks different and there is a real bug somewhere.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,19,2014-12-18 13:32:21,3.87,1,,,"b'b"" @untitaker I was passing unicode before the fix. Later I\'ve changed this to two filenames specifications. This works well for IE and Firefox", but causes stupid warning in Chromium.Since Chromium-based browsers are much more widespread," I\'ve decided to drop IE support. I don\'t think there is a bug in Flask. Chromium seems the candidate to me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,20,2014-12-18 13:32:21,2.88,,1,,"b""b' On Fri", Jun 05, 2015 at 10:44:30PM -0700, Yuriy Chernyshov wrote:To clarify: I meant _unicode strings_," not UTF-8 encoded bytestrings orgenerally strings with unicode characters in them.Could you give me a testapp that does exactly what you did?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,21,2014-12-18 13:32:21,11.93,,1,,"b'b"" I\'m using Python3", so there is no utf-8 encoded bytestrings easily available.Yes, I can work on MWE," but I\'ll do it a bit later.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,22,2014-12-18 13:32:21,610.42,,1,,"b'b"" Here is the mwe of a problem described in the issue. I didn\'t added my workarounds to it"," since none of them is working properly.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,reopened,2015-06-07 22:05:22,996.15,4,18,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,23,2014-12-18 13:32:21,372.78,,1,,"b'b"" Ok", I\'ve educated myself about this and I\'d suggest that Flask should not only not support this," but _actively prevent_ the user from sending non-ASCII filenames IMO.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,24,2014-12-18 13:32:21,2.0,1,,,"b'b"" While non-ascii filenames are a bit ugly", they are VERY popular," especially among people who just use some webapp and don\'t do techie stuff. Imagine some secretaries (or other non-tech-savvy people) uploading a file to a web application and downloading it again later. They\'d probably be very confused why it got renamed for no apparent reason (especially if not done in a smart way such as converting to  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,25,2014-12-18 13:32:21,1.78,1,,,"b""b' My point is rather that there is no way to support the full utf-8 range in a consistent way across browsers"," and the user might encounter worse usability bugs (I got a blank screen instead of a download) than a wrong filename.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,26,2014-12-18 13:32:21,1.07,,1,,"b""b' Hm.. use something like translitcodec to ascii-fy unicode filenames but add a config option to disable this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,27,2014-12-18 13:32:21,4.82,1,,,"b'b"" Most important thing is to make the developer aware of this issue", but we don\'t have to hold their hand through this. What I propose is an easily-to-disable error message, if the dev knows about those issues," they can add custom headers themselves for their specific target browsers.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,28,2014-12-18 13:32:21,3.12,,1,,"b'b"" Of course this would be a huge breakage for existing code", but it\'s at least not unnoticed and still can be easily disabled. Existing apps can continue being broken," but new apps don\'t have to be.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,29,2014-12-18 13:32:21,2.78,1,,,"b'b"" I realize that this change is probably going to cause a lot of controversity if we\'re actually going with it"," so I\'d like some more feedback. We don\'t really have a deadline for 1.0 anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,30,2014-12-18 13:32:21,903.1,,1,,"b'b"" Actually"," I\'ve found RFC suggesting that Chromium behaviour is wrong:url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,31,2014-12-18 13:32:21,0.22,,1,,"b""b' Some outdated test cases can be found here:url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,32,2014-12-18 13:32:21,534.75,,1,,"b'b"" If you can use then using would work around this problem. I\'ve tested this with Russian"," Chinese and Hebrew filenames. See [this StackOverflow answer]url  for details.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,33,2014-12-18 13:32:21,1132.65,,1,,"b'b"" Looking at this for PyCon sprints. Cc: @ThiefMaster  It\'s not clear based on @untitaker\'s comments what the behavior should be. If I read it correctly: If attachment_filename is non-ASCII"," then emit a warning from send_file(). Unless the user passes a (new) flag to suppress the warning.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,34,2014-12-18 13:32:21,2.12,,1,,"b""b' Cc @mitsuhiko'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,35,2014-12-18 13:32:21,1170.23,,1,,"b""b' Maybe this could be addressed somehow? utf-8 filenames are the norm nowadays.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,36,2014-12-18 13:32:21,5.78,,,1,"b'b"" I\'m using the following code to send unicode filenames.It works fine with any modern browser (AFAIK):url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,37,2014-12-18 13:32:21,934.02,,1,,"b""b' handle this by  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,38,2014-12-18 13:32:21,1381.6,,1,,"b""b' @tkisme Could you please confirm that your solution is working without any problems of compatibility with any browser? I really would like to get a perma fix to this problem'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,closed,2017-04-08 17:54:21,1188.98,8,29,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1286,closed,-,-,-,8,29,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,opened,2015-01-02 07:10:42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,title,2015-01-02 07:10:42,00:00,,1,,"b""b' Dev server fails to terminate"," becomes orphan'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,body,2015-01-02 07:10:42,00:00,1,,,"b'b"" Running OS X Yosemite.I had the dev server running and was toggling the debug option. i.e. ={True", False} in my entry-point file. I started running without debug and was surprised that the server was loading changes I made to my templates without having to restart the server. This is the reason I was toggling the option. Though, this is not the issue, since I later learned that that was the correct behavior. In any case, I proceeded to then set debug to True and save the entry-point file. I may have restarted the server at this point, but either way things were still running regularly. However, trouble ensued when I then commented the line setting debug to True (thus leaving it set to the default False value) and saved. After this, I restarted the server, but was met with a traceback ending in: I restarted the server multiple times, before and after relaunching the Terminal app, and was met with this traceback each time. From this I suspected the server process was still running and had been orphaned. Using Activity Monitor, I found a python process running and terminated it. After that, when I tried running the dev server, I received a smaller (though similarly-ending) traceback. (not sure what to conclude from receiving a different traceback) I didn\'t get to do much more testing after that. I came to GitHub to begin documenting the bug when my MacBook suddenly restarted. I can\'t say the restart is related to this issue. However, the restart was due to an OS X panic relating to OSXFuse. I\'ve never had an OS X panic since updating to Yosemite," so I find a correlation to the dev server issue possible.""'",,,,,,,,,,,,,,,,
flask,1304,closed,1,2015-01-02 07:10:42,465.32,,1,,"b""b' You are getting this because because the socket on which the flask app was running is still running in daemon mode. It generally happens when you uses  control + Z  to stop the flask server instead try using  control + C . To see the process id and kill it"," type these commands in your Mac terminal  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,2,2015-01-02 07:10:42,73.37,,1,,b'b\' There are two processes in debug mode. The actual server runs in the child. What happened is that you killed the parent," which leaves the child alive. The child continues to run and gets ""adopted"" by the init process (it doesn\\\'t turn into a zombie", that\\\'s something completely different).  This is completely normal and expected behavior. =\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,3,2015-01-02 07:10:42,1327.22,1,,,"b'b"" I strongly doubt that Flask is responsible for crashing your Mac", and am not entirely sure how you killed the server for a floating (!= zombie) process to occur. If you want to kill both of them," I\'ve found that killing their process group works quite well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,closed,2015-01-20 14:16:36,425.9,2,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,4,2015-01-02 07:10:42,1336.95,,1,,"b'b"" Thank you for the responses to this issue. As has been pointed out", I absolutely misspoke when I said \'zombie\'. I really meant to state that it became an orphan process. I can accept that it is the expected behavior. However, it seems rather peculiar that this would be anything other than a design flaw. Based on @DasIch\'s response, it sounds like Flask made the mistake of terminating only the parent and allowing the child to become orphaned. At the very least," this causes an inconvenience to the user by having to switch to a different port or otherwise kill the orphaned process manually.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,reopened,2015-01-31 16:30:03,133.45,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,5,2015-01-02 07:10:42,236.88,,1,,"b""b' Reopening this because I tend to agree from a usability perspective", however," I am not sure if this is even fixable.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,6,2015-01-02 07:10:42,139.63,,,1,"b""b' @DasIch  Thank you for explaining this issue!  I was pulling my hair out trying to kill the process and could never resolve the issue. BTW", I rebooted and orphan child process was no longer an issue.  I was able to start the dev server and process requests then.  Not ideal I know," but that worked for me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,7,2015-01-02 07:10:42,1239.1,1,,,"b'b"" Unfortunately", I can\'t follow your steps to reproduce this, there\'s too much narration and guessing. The first and last paragraphs don\'t even seem relevant?  Toggle from to doesn\'t cause a zombie process on my machine.  If anyone is still having this problem," please open a new issue with exact steps to reproduce.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,closed,2017-06-14 15:29:10,1379.12,3,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,8,2015-01-02 07:10:42,87.73,,,1,"b""b' I ran into this after a reboot on macOS Sierra. The steps above worked fine", though there was a typo in the original instructions," here it is corrected:   replace PORT and PID with their corresponding values.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1304,closed,-,-,-,3,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,opened,2015-01-03 15:10:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,title,2015-01-03 15:10:38,00:00,,1,,"b""b' URL generation rule explained for file uploads'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,closed,2015-01-03 18:13:36,182.97,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,1,2015-01-03 15:10:38,205.38,,1,,"b""b' Why close this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,reopened,2015-01-03 19:19:11,65.58,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,2,2015-01-03 15:10:38,762.93,1,,,"b'b"" Changing the File upload progress bar part. Will create another pull request soon. :) Update: Oops! Didn\'t notice it is opened already. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,3,2015-01-03 15:10:38,1337.77,,,1,"b""b' @untitaker This looks good to me"," could we merge it and close #1256?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,4,2015-01-03 15:10:38,20.55,,1,,"b'b"" Ah yes... JS libraries come and go"," I\'d like to avoid linking to a specific one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,5,2015-01-03 15:10:38,2.95,,1,,"b'b"" Hmm"," what is the quickest way to fix this? Could you merge it and then I just remove the link to dropzonejs? I\'m guessing jQuery is here to stay and is safe to leave in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,closed,2015-03-04 17:45:01,1345.83,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1307,closed,-,-,-,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,opened,2015-01-13 17:06:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,title,2015-01-13 17:06:27,00:00,,1,,"b""b' Flaskr tutorial Step 3 is missing content'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,body,2015-01-13 17:06:27,00:00,,1,,"b""b' url shows only the header and a portion of the first paragraph.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,1,2015-01-13 17:06:27,52.23,,1,,"b""b' Not for me. Could you provide a screenshot?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,2,2015-01-13 17:06:27,69.8,,,1,"b""b' Firefox 34.0.5 and IE 11.0.9600.17501  have the full page.Chrome Version 39.0.2171.95 m shows the apostrophe in the fourth line of text"," but nothing following. The flask icon and the left column are also not displayed.  Screen shot is attached.My system is Windows 7 pro 64bit service pack 1 ![image]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,closed,2015-01-13 19:08:29,122.03,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,3,2015-01-13 17:06:27,0.93,1,,,"b'b"" Are you sure it\'s not some extension or proxy messing with the page?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,4,2015-01-13 17:06:27,14.45,,1,,"b'b"" Same negative function after disabling all my chrome extensions.  Have not fiddled with proxy\'s"," do not know how to check their state of being.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,reopened,2015-01-13 19:23:52,15.38,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,5,2015-01-13 17:06:27,4.2,,1,,"b'b"" I\'m pretty sure it\'s a problem on your end. The server doesn\'t send any invalid headers. Does this version work: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,6,2015-01-13 17:06:27,10.6,,1,,"b""b' Both the inital page from url and each of the subsequent pages all show full content. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,7,2015-01-13 17:06:27,6.75,1,,,"b'b"" That\'s kinda weird"," but sincethis doesn\'t seem to be an issue with Flask\'s doc serveryou now have a workaround for your issue I\'m going to close this issue. Please leave a note here if you ever find out what caused this issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,closed,2015-01-13 19:45:27,21.58,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1314,closed,-,-,-,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,opened,2015-01-28 07:48:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,title,2015-01-28 07:48:33,00:00,1,,,"b'b"" Strange behaviour in  decorator \'methods\' parameter when using string""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,body,2015-01-28 07:48:33,00:00,,1,,"b'b\'   While tupple is iterable for flask accept this without any error warning or problem: even more: (""GET""","POST"") works as well as [""GET","POST""].However with single element string there is problem: Output: Seems that flask happily parses ((""POST"")) letter by letter. Posting with curl using method ""P""  is valid thing in flask.While it is stupid use case, I doubt that Flask should happily churn  String letter by letter. Also I think that after possible fix it would be easy to unit test :smirk: I think even for custom method definition this is not a valid or good behaviour.\''
flask	1328	closed	1	ThiefMaster	2015-01-28 07:48:33	13.18		+1		b'b"" (\'foo\') doesn\'t create a tuple, does. So you were passing a plain string instead of a tuple. In Python, tuples are created by the  , not by the (except the empty tuple where without anything inside actually does create a tuple).""'
flask	1328	closed	closed	 - 	2015-01-28 09:09:26	80.88	1	2	0
flask	1328	closed	reopened	 - 	2015-01-28 09:10:38	1.2	1	2	0
flask	1328	closed	2	ThiefMaster	2015-01-28 07:48:33	69.6		+1		b""b' Maybe it would make sense to either fail when a string is passed or convert it to a single-element tuple.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,3,2015-01-28 07:48:33,6.15,1,,,"b""b' Sorry", my bad. I edited it a bit. I agree with ThiefMaster it would make more sense to convert it to tuple or handle as whole string, failing," instead sillently iterating over its letters.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,4,2015-01-28 07:48:33,190.35,1,,,"b""b' I agree that there should be an error message. @entd would you like to write such a patch?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,5,2015-01-28 07:48:33,1.48,,1,,"b""b' I would like to.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,6,2015-01-28 07:48:33,3.23,,,1,"b""b' Great! Mail me on the address linked to my profile if you need any help.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,7,2015-01-28 07:48:33,278.03,,1,,"b""b' @entd must be using an older version of flask.  In the current version you get a TypeError if you try to do what he did above.  The server will not even start.  Commit where it was fixed: af5a0853bfe36d547af93b904729a43fcf8cc55d'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,8,2015-01-28 07:48:33,60.52,,1,,"b""b' Oh ok"," that was quite a long time ago.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,closed,2015-01-31 18:11:06,540.47,3,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,9,2015-01-28 07:48:33,985.33,,1,,"b""b' No I am not. I am using newest version from pipi on python3. Maybe that is the problem.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,10,2015-01-28 07:48:33,989.73,1,,,"b""b' Oh sorry that is indeed old version problem stable release was made before that commit. Seems that maybe you need to release new stable version and bump number up :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,11,2015-01-28 07:48:33,1073.9,,1,,"b""b' Ok"," it is fixed now though in either case.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1328,closed,-,-,-,4,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,opened,2015-03-13 19:55:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,title,2015-03-13 19:55:35,00:00,,1,,"b""b' Add note to not use plain text passwords to '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,body,2015-03-13 19:55:35,00:00,,1,,"b'b"" In reference to issue #836"," a general note about hashing passwords for security is added. This clarifies the tutorial\'s choice to not use secure passwords to demonstrate the basic usage of Flask.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,1,2015-03-13 19:55:35,43.47,,1,,"b""b' Hi Winston"," do you think you could mention some extensions for password hashing as noted in #836?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,2,2015-03-13 19:55:35,161.92,,1,,"b""b' Yeah"," I can get on that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,3,2015-03-13 19:55:35,1314.38,,,1,"b""b' Closing due to inactivity. Feel free to refile! (or ping me)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,closed,2016-04-01 21:15:21,79.77,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,4,2015-03-13 19:55:35,657.0,,,1,"b'b"" @untitaker what do you think about just merging this as is?  I know it\'s missing a note about the extensions", but otherwise looks good, and it\'s certainly better than the current state of not having anything. Easy enough for someone to later on add links to  ,  , etc. Re-opening just so we don\'t lose track of it... if you don\'t think it should get merged in the current state," then just close it again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,reopened,2016-04-05 08:14:58,659.62,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,5,2015-03-13 19:55:35,520.75,,1,,"b""b' Agreed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,closed,2016-04-05 16:53:08,518.17,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1381,closed,-,-,-,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,opened,2015-03-27 18:17:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,title,2015-03-27 18:17:41,00:00,1,,,"b""b' fix bad autodoc signature when functions are decorated'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,body,2015-03-27 18:17:41,00:00,1,,,"b'b"" It\'s very annoying when you read the API documentation"," all decorated functions haven\'t the correct signature. Example :  should be  this PR fixes this issue with an elegant solution found here : url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,closed,2015-03-27 18:27:52,10.18,2,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,reopened,2015-03-27 18:27:54,0.03,2,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,1,2015-03-27 18:17:41,157.32,,1,,"b""b' Yeah", this is about as elegant as it gets," but it kinda freaks me out that an environment variable could change fundamental behavior of Flask. Will need to think more about this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,2,2015-03-27 18:17:41,4.63,,1,,"b""b' url  looks like a cleaner solution"," even though it does require decorating all the decorators...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,3,2015-03-27 18:17:41,5.98,,1,,"b""b' [Holy moly]url  not sure what I prefer...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,4,2015-03-27 18:17:41,306.6,1,,,b'b\' I would suggest url  instead of this one. I know it patches the stdlib," but it seems like a much broader solution to me while it avoids making Flask itself ""vulnerable"" to weird environments.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,closed,2015-06-06 02:12:13,464.32,3,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1403,closed,-,-,-,3,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,opened,2015-03-29 15:54:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,title,2015-03-29 15:54:55,00:00,,1,,"b""b' Generic error handler for any exception'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,body,2015-03-29 15:54:55,00:00,,1,,"b'b"" Is there a way to add a global catch-all error handler in which I can change the response to a generic JSON response? I can\'t use the signal", as it is not allowed to modify the response url I would prefer to not wrap the function as that feels like internal API. I guess I\'m after something like: Note the does not take any parameters, meaning it would catch all  codes which does not have a specific error handler attached to them. I know I can use to catch exceptions, but if I do for example," it will still return a HTML response.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,1,2015-03-29 15:54:55,1.45,,1,,"b""b'   is what you are looking for If you want only HTTP errors", check which base class all the HTTP errors in werkzeug use. Also," better use IRC or Stack Overflow for this kind of questions.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,2,2015-03-29 15:54:55,31.83,,1,,"b'b"" Please don\'t use the issuetracker for support.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,closed,2015-03-29 16:28:12,33.28,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,3,2015-03-29 15:54:55,31.77,,1,,"b""b' @ThiefMaster Thanks"," but does unfortunately still not catch  . Reposted the question here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,4,2015-03-29 15:54:55,13.65,,1,,"b'b"" Ah"," I see. That\'s actually a deficiency of the current error handling system. See also url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,reopened,2015-03-29 17:13:37,45.42,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,5,2015-03-29 15:54:55,0.37,,1,,"b'b"" In master it works"," in 0.10.1 it doesn\'t""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,6,2015-03-29 15:54:55,2.42,,1,,"b""b' Ok.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,closed,2015-03-29 17:16:25,2.8,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,7,2015-03-29 15:54:55,1241.95,1,,,"b'b"" I hate to break this", but in the latest version doesn\'t catch nor  . This is a big problem," as I would like to email any application wide exception to myself in order to know that something has failed.  Right now Flask doesn\'t allow that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,8,2015-03-29 15:54:55,1253.55,1,,,"b'b"" You\'re looking for url  Back then it was decided that HTTP exceptions still have to be treated slightly differently than normal exceptions (even though the exact opposite was the goal) for backwards compat"," unfortunately I can\'t find the relevant chatlogs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1406,closed,-,-,-,2,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,opened,2015-04-21 14:47:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,title,2015-04-21 14:47:11,00:00,,1,,"b""b' json_encoder not invoked from '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,body,2015-04-21 14:47:11,00:00,,1,,"b'b"" I created a custom JSON encoder class extended from  but it is not called when calling . Additionally"," I removed my custom JSON encoder and confirmed that isn\'t called either via a break statement in Pycharm.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,1,2015-04-21 14:47:11,930.78,,1,,"b'b"" The reason you never see either the default or your custom json encoder execute is that the class instance is not iterable. [This line of jsonify]url  runs which results in a  . You could probably figure out a way to do what you want with a custom JSON encoder"," but I don\'t think you need to. Instead you can make a base class that implements a custom iterator and have all of the classes that need to be jsonified inherit it as a mixin. Then the class instance can be passed to jsonify as like this:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,2,2015-04-21 14:47:11,101.48,,1,,"b""b' I think this should be fixed together  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,3,2015-04-21 14:47:11,712.57,,1,,"b""b' That would solve the issue with converting a single object to JSON but if you try and do an array of MyClasses a custom json encoder would be required again.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,4,2015-04-21 14:47:11,122.92,,,1,"b'b"" Good point. I wasn\'t sure of your use case.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,5,2015-04-21 14:47:11,1112.43,,1,,"b'b"" Flask _does_ use your custom encoder: url  Note that Python\'s json library will only call if it does not know how to serialize the object.  For example", a subclass will not go through  ," it will be treated as a  .  What is the actual custom object you are trying to dump?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,6,2015-04-21 14:47:11,199.83,,1,,"b'b"" The main reason for this is so I can have a custom JSON encoder which handle streaming of objects coming from a generator function. I don\'t want to load all the results into memory before returning them.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,7,2015-04-21 14:47:11,623.13,,1,,"b""b' I think the problem of this is python do not support to transform any object to JSON. May be we can implement a interface just like @mreinhardt said. to support jsonify any object but not only basic object to JSON.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,8,2015-04-21 14:47:11,645.72,,1,,"b'b"" @wswuai @mreinhardt The easiest way I\'ve found to do this is with Marshmallow. It works out of the box with Flask but there\'s a compatibility layer for creating URLs. I\'m not sure how it\'d handle streaming requests though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,9,2015-04-21 14:47:11,1322.18,,1,,"b""b' This is something that should be solved by a serialization library such as Marshmallow (there are plenty of others too).  Flask is not in a position to change how basic JSON serialization works.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,closed,2015-11-03 14:58:14,11.05,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,10,2015-04-21 14:47:11,202.82,,1,,"b'b"" @davidism This is what I wanted to fix for 1.0. It\'s almost a duplicate of #248", but I want to ensure custom classes like that work in jsonify after we fix that issue," which is why I left this one open.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,reopened,2015-11-04 18:21:03,202.82,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,11,2015-04-21 14:47:11,96.27,1,,,"b""b' @untitaker oops", that got burried in the comments," I see what the issue is now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,12,2015-04-21 14:47:11,44.85,,1,,"b""b' Hi @untitaker et al."," I opened #1602 a few days ago and think it might fit in with this / the desired work on  for 1.0. Would it be helpful if I worked up a PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,13,2015-04-21 14:47:11,45.83,,,1,"b""b' Running the app posted in the original issue now outputs Looks like you can safely close this issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,closed,2016-06-02 21:35:26,194.38,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,14,2015-04-21 14:47:11,449.32,,,1,"b""b' Excellent!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1443,closed,-,-,-,1,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,opened,2015-06-06 00:49:48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,title,2015-06-06 00:49:48,00:00,,1,,"b""b' Code fix for issue #1481'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,body,2015-06-06 00:49:48,00:00,,1,,"b""b' This is a unit test and code fix for issue #1481 that keeps the previous behavior of get_root_path and intercepts the new thrown by  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,1,2015-06-06 00:49:48,24.22,,1,,"b""b' Closing"," see issue #1481 for rationale.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,closed,2015-06-06 01:14:01,24.22,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,reopened,2015-06-06 01:23:11,9.17,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,2,2015-06-06 00:49:48,10.58,,,1,"b'b"" We actually have url  _another issue_ open for this. I also elaborated there why I think that this fix isn\'t a good idea. I am still unsure about this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,3,2015-06-06 00:49:48,93.2,,1,,"b""b' I added my reply in #1011 and will respond in that thread.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,4,2015-06-06 00:49:48,304.43,,1,,"b""b' Closing for now per url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,closed,2016-04-08 08:02:14,399.05,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1482,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,opened,2015-06-23 10:37:21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,title,2015-06-23 10:37:21,00:00,,1,,"b""b' No more than 5XX  possible'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,body,2015-06-23 10:37:21,00:00,,1,,"b""b' Hi. I wrote a post about benchmarking some web frameworks and found a strange bug in Flask.Requests per seconds were very low and not above 600 req/s. @miguelgrinberg contacted me about it and first thought that the issue was on my side but he also experienced the same behaviour. Here is the Link to the Blogpost:url  Something might be blocking requests in Flask or Werkzeug. I am willing to help towards inverstigation. Cheers Bijan'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,1,2015-06-23 10:37:21,7.97,1,,,"b""b' The dev server is not suitable for production. In fact it can only serve _one connection_ at a time. This has been stressed multiple times", both in IRC and the docs (at least in master," the quickstart contains a fairly explicit hint).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,closed,2015-06-23 10:45:19,7.97,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,2,2015-06-23 10:37:21,13.87,,1,,"b""b' I did not use the dev server. I used gunicorn...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,3,2015-06-23 10:37:21,2.07,,1,,"b'b"" I didn\'t see that in your blogpost", only the  line. In that case it\'d be useful to know the exact gunicorn config. On 23 June 2015 12:59:21 CEST," Bijan notifications@ wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,reopened,2015-06-23 11:02:02,16.72,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,4,2015-06-23 10:37:21,7.73,1,,,"b""b' I just checked again on Python 2.7.10 (default", May 26 2015," 13:08:10)  I made it run via  I started the benchmark via My gunicorn installation was just installed via pip on osx 10.9.5 (I did not change anything): The flask source can be found here:url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,5,2015-06-23 10:37:21,1.75,,1,,"b""b' Could you try it on your setup and let me know if you experience the same behaviour? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,6,2015-06-23 10:37:21,21.85,,,1,"b'b"" Try meinheld. gunicorn\'s default worker is not designed for high load.Since it doesn\'t support keep-alive", client connect to gunicorn for each request.When closing TCP connection, it is in TIME_WAIT state for 1 minute.If your machine uses 30000 free port," you can only 30000  (= 500 ). I use nginx + uWSGI (reverse proxy via unix domain socket) for production anduse  (supports keep-alive) for benchmark.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,7,2015-06-23 10:37:21,8.42,,,1,"b""b' Nice!  brmpb:app bijan$ wrk -c 64 -d 30s url  Running 30s test @ url 2 threads and 64 connections  Thread Stats Avg  Stdev   Max +/Stdev  Latency   6.02ms  4.92ms  72.68ms 76.25%   5.90k   1.11k  8.26k  68.33%  352591 requests in 30.00s"," 64.90MB read:  11751.58:  2.16MB'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,8,2015-06-23 10:37:21,1.67,,1,,"b""b' This deployment option should be added to the docs under:url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,closed,2015-06-26 13:23:47,141.75,2,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,9,2015-06-23 10:37:21,989.77,,1,,"b'b"" @methane  I am new to Flask and was exploring various deployment options. Can you please explain why you wouldn\'t use  for production? Is your comment still relevant?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,10,2015-06-23 10:37:21,1029.3,,1,,"b""b' Because infra team prefer daemon completely written in C. You can use gunicorn to listen unix domain socket.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,11,2015-06-23 10:37:21,247.47,,1,,"b'b"" @methane Since it doesn\'t support keep-alive", client connect to gunicorn for each request. When closing TCP connection, it is in TIME_WAIT state for 1 minute. If your machine uses 30000 free port, you can only 30000  (= 500 ).  Can you please let me know where to read more about it? I would like to understand more about this," but this is a hard to formulate question""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,12,2015-06-23 10:37:21,1164.37,,1,,"b'b\' Google ""TIME_WAIT"" and learn TCP states.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,13,2015-06-23 10:37:21,28.72,,,1,"b""b' thanks @methane ! This is sufficient to get me started'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1512,closed,-,-,-,2,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,opened,2015-07-16 00:46:29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,title,2015-07-16 00:46:29,00:00,,1,,"b""b' make external_url_handler example py3 compliant'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,body,2015-07-16 00:46:29,00:00,,1,,"b'b"" a raises statement with multiple values is no longer allowed in python 3It\'s just a documentation change"," no functionality changed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,1,2015-07-16 00:46:29,494.05,,1,,"b'b"" We currently keep the examples polyglot", falling back to Python 2 if that\'s not reasonably possible. I\'m open to change this," but it would have to be a very concentrated effort that changes all examples at once. I\'m going to close this as it would make the docs inconsistent.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,closed,2015-07-16 09:00:33,494.07,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,2,2015-07-16 00:46:29,42.27,,,1,"b'b"" I\'m not sure if i got you right", but this change is polyglot (if that\'s your concern) or are you rejecting this," because there may be just inconsistencies in the syntax used in the documentation. I really would love to have this documentation changed because it helped me very much when first implementing the BuildError handling.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,reopened,2015-07-16 09:48:28,47.92,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,3,2015-07-16 00:46:29,6.28,,1,,"b'b"" I didn\'t know that was available in Python 2.7. I suppose this covers the most important Python 2 version.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,closed,2015-07-16 09:49:09,0.68,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,4,2015-07-16 00:46:29,0.1,,,1,"b""b' Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1534,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,opened,2015-07-28 03:03:24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,title,2015-07-28 03:03:24,00:00,,1,,"b""b' Returned 200 for illegal request url'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,body,2015-07-28 03:03:24,00:00,,1,,"b""b' Flask version is 0.10.1 and the below is code of server side. The below is input and output of tool.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,1,2015-07-28 03:03:24,598.17,,1,,"b""b' @aftalavera see below picture. ![output]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,2,2015-07-28 03:03:24,1.72,,,1,"b'b"" Posting an absolute URI is fine in principle"," so I guess the only issue here is that Flask doesn\'t do strict validation of the IP address and the scheme? I don\'t really know if that\'s its job.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,3,2015-07-28 03:03:24,8.03,,1,,"b'b"" @untitaker Yes", the issue is just what you said. I think maybe this is the responsibility of Werkzeug, but I\'m not sure the design principle of Flask," so I issue it here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,4,2015-07-28 03:03:24,1.47,,1,,"b'b"" Not even Werkzeug"," but whatever is parsing the original HTTP request. I\'m not even sure if we should reject the request or just fall back to sensible defaults.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,closed,2015-07-28 13:21:07,617.72,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,reopened,2015-07-28 13:21:08,0.02,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,5,2015-07-28 03:03:24,8.6,,1,,"b'b"" @untitaker I have read Werkzeug code and found out in inherit and it\'s method do the parsing thing.  Hopes that will help you.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,6,2015-07-28 03:03:24,129.28,,1,,"b'b"" I\'d consider this invalid", the development server is rather minimalistic," production servers do the validation""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,7,2015-07-28 03:03:24,1132.88,,,1,"b'b"" :+1:  for invalid. The dev server is not suitable for anything but development (and even then I\'d run it behind nginx if there are lots of static assets so those requests aren\'t served by the dev server at all) so I don\'t think there\'s any important reason to be more strict in parsing HTTP requests as long as it works fine with valid requests.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,8,2015-07-28 03:03:24,173.6,,1,,"b""b' I now have to agree with Adrian and Ronny","  is not in a position to decide what a valid IP address is.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,closed,2015-08-06 13:17:09,1436.02,0,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1541,closed,-,-,-,0,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,opened,2015-08-23 14:30:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,title,2015-08-23 14:30:27,00:00,,1,,"b""b' Fix static route when using host_matching = True'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,body,2015-08-23 14:30:27,00:00,,1,,"b""b' Change to accept two new keyword arguments", and  .  This enables host_matching to be set properly by the time the constructor adds the static route, and enables the static route to be properly associated with the required host.  Previously, you could only enable host_matching once your app was already instantiated (e.g.  ), but at that point the constructor would have already added the static route without host matching and an associated host," leaving the static route in a broken state.  Fixes #1559. '""",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,1,2015-08-23 14:30:27,215.12,,1,,"b""b' I think a better fix would be if we delay registration of the static route until the first request. This sort of thing may sound radical"," but is already done for a lot of things that depend on configuration changes done past the instantiation of  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,2,2015-08-23 14:30:27,518.88,1,,,"b'b"" @untitaker Thanks for taking a look at this and sorry for the delay in responding! I\'ve been swamped with urgent work", but I\'d still love to contribute a fix for this issue, and make any required changes to get it landed, ideally before I forget what the problem is again and have to start over. The user still needs a way to pass a host for the static route though, right? In that case, what is the advantage of delaying registration of the static route until the first request, when we can do it correctly at app instantiation time provided a param?  Even still, I tried delaying registration of the static route until the first request anyway just to see if it would work, but it didn\'t. Ultimately there is a chicken-and-egg problem. By the time we get the first request and go to add the static route, if the first request was for the static endpoint, we will already get an incorrect 404 for it before we\'ve had a chance to add the static route.  I worked up a new PR for this in #2211 which applies cleanly against latest master. In that version, rather than add the two new constructor parameters and  , where *should* be True if is passed, I made it so that there\'s only the single new parameter," which if passed causes to be set to True implicitly. Maybe that\'s preferable.""'",,,,,,,,,,,,,,,,,
flask,1560,closed,3,2015-08-23 14:30:27,616.35,,1,,"b""b' Because your fix 1.) introduces another way to do the same thing 2.) will not work for existing code that modifies in arbitrary ways.  I see how my suggestion falls apart", but I definitely think that we can initialize the static URL path before the request gets routed," so static requests should work for the first request as well.  I suppose requires to be set? In that case we should raise an exception for the case  . This is doable in both possible implementations.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,4,2015-08-23 14:30:27,343.07,,,1,"b'b"" Thanks for the continued review"," @untitaker. I addressed your comments in 7ea1ed6 as part of #2211. Specifically: Defer adding the static route until right before the first request. No longer set url_ to True implicitly if static_host is provided. Instead raise an error at the time the static route is added if static_host is truthy and host_matching is falsy.  Please take a look.  I\'ll close this PR since #2211 is the one with the desired changes. Happy to squash and rebase that one as desired.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,closed,2017-03-23 18:43:52,253.42,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,reopened,2017-03-27 20:01:11,77.32,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,5,2015-08-23 14:30:27,227.03,,,1,"b""b' Thanks for reopening"," @untitaker. Just pushed 919e5dc. I think that should do the trick to get this all resolved. Please let me know if any further changes are needed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,6,2015-08-23 14:30:27,21.78,,1,,"b""b' Done in 67d8d0f.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,7,2015-08-23 14:30:27,1339.97,,,1,"b""b' This has been approved by @untitaker and @davidism (thanks for reviewing!). Can this be merged?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,8,2015-08-23 14:30:27,5.62,,1,,"b""b' There is a ResourceWarning when running the tests on Python 3 that needs to be fixed. I think you need to close your response explicitly to make this error go away.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,9,2015-08-23 14:30:27,11.87,,,1,"b'b"" Oh", I thought that was due to an unrelated issue (#513). Added an explicit in 5511315 and now the tests are passing for me locally on Python 3, thanks @untitaker! Ready to merge now?  (Note: some targets are now failing on Travis (for REQUIREMENTS=devel and REQUIREMENTS=devel-simplejson), but [that was the case for the most recent build of master]url  too (revision ae1ac2053bcf0c77de32fc7915e36f8ca2f5c961)," so that seems unrelated to this PR and shouldn\'t block merging.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,10,2015-08-23 14:30:27,855.7,,1,,"b'b"" I now kicked over the broken builds. We can\'t test against those devel versions if they fail to install.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,closed,2017-04-07 14:31:54,1110.72,1,7,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,11,2015-08-23 14:30:27,166.1,,,1,"b""b' Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,12,2015-08-23 14:30:27,169.22,,,1,"b""b' My pleasure"," and thank you for reviewing and merging!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,13,2015-08-23 14:30:27,870.02,,,1,"b""b' Thanks for this fix all. It quickly helped solve the issue of finding a way to easily allow a reverse proxy to multiple domains. But", breaks debug toolbar," related to flask-admin issue at [flask]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1560,closed,-,-,-,1,7,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,opened,2015-10-24 07:15:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,title,2015-10-24 07:15:03,00:00,,1,,"b""b' travis: python 3.5 support'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,body,2015-10-24 07:15:03,00:00,,1,,"b""b' Add python 3.5 build to travis configuration.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,closed,2015-10-24 07:16:16,1.22,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,reopened,2015-10-24 07:17:06,0.83,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,1,2015-10-24 07:15:03,168.05,,1,,"b""b' For completeness please update  as well'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,2,2015-10-24 07:15:03,554.13,,,1,"b""b' done!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,closed,2015-10-30 16:35:06,558.0,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1594,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,opened,2015-12-05 19:39:52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,title,2015-12-05 19:39:52,00:00,,1,,"b""b' Dev server redirects to arbitrary url when path starts with double slash //'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,body,2015-12-05 19:39:52,00:00,,1,,"b'b""   If I try to navigate to url  (2 slashes)", I get redirected to .  I correctly get a 404 with url  (1 slash) and url  (3 slashses).  This is a vulnerability," I shouldn\'t be redirected to arbitrary urls.  Flask should prevent arbitrary redirects from urls.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,1,2015-12-05 19:39:52,26.02,,1,,"b'b"" As the [documentation]url  states the integrated server is intended **for development environments only**:This doesn\'t seem like an issue to me", or does this happen with other servers as well (gunicorn, uwsgi," etc.)?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,2,2015-12-05 19:39:52,10.27,,1,,"b'b"" I didn\'t test with other servers but I ran the Flask server and the issue happened.  Use the code above", run the server," and check the requests and responses.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,closed,2015-12-05 22:09:13,149.35,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,reopened,2015-12-06 06:21:16,492.05,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,3,2015-12-05 19:39:52,773.18,1,,,b'b\' I tested in Firefox, Chrome, and Opera and redirected to domains such as , , , and .This bug exists in Flask on redirect to other site.  If the user runs Flask on a VPS without using another web server," this issue can be used in a phishing attack. Why do and display ""Not Found""? I think this issue should be fixed.\''",,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,4,2015-12-05 19:39:52,21.07,,1,,"b'b"" You are not supposed to do that. Open redirects are mostly an issue on highsites and those are even less likely to use the dev server in production. @davidism: 301 redirect maybe? That\'d explain why it happens for you with no server running.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,5,2015-12-05 19:39:52,5.48,,1,,"b""b' If I run the service on Linux with bash and access the Flask app"," this is an issue. Example: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,6,2015-12-05 19:39:52,107.62,,1,,"b'b"" The dev server is not acceptable for any production setup", period. If someone uses it anyway," it\'s his fault if his box gets pwned or abused. I just looked into it and the problem happens due to an incorrect being passed to the werkzeug from the dev server (it\'s set to when using the two slashes)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,7,2015-12-05 19:39:52,15.38,,1,,"b""b' Can someone still report a bug to werkzeug perhaps so it can decide on how to handle this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,8,2015-12-05 19:39:52,3.97,,1,,"b'b"" OK", this is not a flask bug," possibly not even a werkzeug bug. (python stdlib) doesn\'t normalize consecutive slashes into a single one so it passes a path of to the dev server which runs this code: The double slash results in the being set instead of the so eventually it does end up in  . As a workaround we could normalize slashes before using in  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,9,2015-12-05 19:39:52,16.15,,1,,"b""b' You mean the issue is here? url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,10,2015-12-05 19:39:52,2.2,,1,,"b'b"" Yes. is set in the Python stdlib and contains in your case. Later it\'s used to populate HTTP_HOST: url  (please use the proper repo when linking to code"," not some leak that just happens to contain a copy of a virtualenv containing werkzug)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,11,2015-12-05 19:39:52,261.1,,1,,"b'b"" Ultimately", the answer is still the same: don\'t use the dev server in production, it is not designed to be secure.  At this point, it\'s clear that this is not a Flask bug," and it has been reported in #822.  Closing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,closed,2015-12-06 16:22:18,601.03,1,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1639,closed,-,-,-,1,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,opened,2015-12-28 22:30:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,title,2015-12-28 22:30:34,00:00,,1,,"b""b' Stream download chunked not working?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,body,2015-12-28 22:30:34,00:00,,1,,"b""b' Hello"," i use requests to send large file like that: On the Flask side i get that: But no content is writed and i get response 400. This is my request headers:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,closed,2015-12-29 00:06:48,96.23,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,reopened,2015-12-29 00:09:02,2.23,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,1,2015-12-28 22:30:34,893.05,,1,,"b""b' It seems that requests library is not the problem.Please read the attached issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,2,2015-12-28 22:30:34,329.55,,1,,"b""b' WSGI cannot accept chunked requests. Nothing I can do about this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,closed,2016-01-04 18:53:10,1124.13,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,3,2015-12-28 22:30:34,110.83,,1,,"b""b' @mitsuhiko Do you know if there is an open issue WSGI being worked for this chunked issue?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1668,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,opened,2016-01-02 21:57:37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,title,2016-01-02 21:57:37,00:00,,1,,"b'b"" Flask isn\'t doctestable""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,body,2016-01-02 21:57:37,00:00,,,1,"b'b""   Anyone any idea what happens there? I\'d love to doctest my Flask application since it\'s especially awesome to document endpoints.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,1,2016-01-02 21:57:37,1.3,,1,,b'b\' doctests are useful for simple functions with no outside requirements," not for web applications and their controllers (flask\\\'s ""view functions"") which obviously need other setup steps like database access", the request context, etc.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,2,2016-01-02 21:57:37,4.1,,1,,"b'b"" I find them pretty useful"," e.g.: It adds value to the docs while helping reducing test redundancy. Also this phenomenon means that I can\'t doctest any routine that is within a Python file that imports Flasks object.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,3,2016-01-02 21:57:37,1.1,,1,,"b""b' url  You can probably combine this with a pytest fixture (possibly with  ) that setups the app context.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,4,2016-01-02 21:57:37,5.58,1,,,"b'b"" Maybe we have a misunderstanding... I am well aware of PyTest and the documentation. The same error gets raised with PyTest on test collection. I just tried to simplify it to you and make it more concrete thus provided the sample Python shell commands. I\'m saying that I apparently cannot use doctest on any Python module that _imports_ (not even uses) the Flask request object. I hoped we could figure out what kind of magic the request object does"," what kind of magic doctest does around it and where it clashes. (This may actually well be an issue with doctest but that\'s what I\'m trying to find out.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,5,2016-01-02 21:57:37,1.87,,,1,"b'b"" Importing the request object is fine", accessing any attributes of it is not (or doing anything that\'s causes a call to any of its magic methods). See werkzeug\'s [LocalProxy]url  But pytest might run autouse fixtures before accessing attributes of module globals (didn\'t test it)," in that case it would probably  work.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,6,2016-01-02 21:57:37,9.47,,1,,"b'b"" Interesting: Summarizing facts:Accessing works.Accessing does not. url Accessing any nonsense throws a  doctest seems to handle an  ","  which is the usual thing to expect. Is there a reason why throws a whenever _any_ attribute (except some default ones apparently) is accessed? (I\'m new to Flask so forgive me any non knowledge please:) Shouldn\'t the API of a at least be defined? It certainly never will have a attribute I\'d guess...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,7,2016-01-02 21:57:37,5.27,,1,,"b'b"" It\'s a proxy object so any access to it (unless technically impossible", e.g. for the operator which cannot be overloaded) is forwarded to the underlying object (which is only available during a request context in case of  ). When you are in a request context, the attributes of are well-defined," but without one it\'s impossibly to do that without making the proxy much less generic.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,8,2016-01-02 21:57:37,1.95,,1,,"b'b"" I guess that\'s NOTABUG then for you...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,closed,2016-01-02 22:28:15,30.63,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,9,2016-01-02 21:57:37,4.23,1,,,"b'b"" I don\'t know if pytest has a hook for this (doubt it)", but if you can somehow make it check whether an object is a instance before trying to do things with it," you could avoid this kind of breakage.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,10,2016-01-02 21:57:37,1.77,,1,,"b'b"" I\'ve filed this as a doctest issue since they should catch other exceptions too IMO: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,11,2016-01-02 21:57:37,785.67,,1,,"b'b"" FWIW I\'ve created a custom request object with to work around this problem. In case somebody else wants to doctest anything that contains this import _somewhere_.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,12,2016-01-02 21:57:37,621.82,,1,,"b'b"" Got bitten by this", too. I have utility functions which I\'d like to doctest in next to various modules that mention and everything goes up in flames when I try to do because  discovery . Python devs don\'t think it\'s their problem either," as far as I can tell from url  Could you guys figure it out with them?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,13,2016-01-02 21:57:37,352.35,,1,,"b""b' This bug bit me today also. I encounter the issue in Python 3.5 but not 2.7.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,14,2016-01-02 21:57:37,8.57,,1,,"b'b"" @sils1297 Can you share the code you used to work around the issue? I\'ve tried simply invoking the code you shared on in place of  ", but that isn\'t sufficient to avoid the runtime error. Also," I\'m seeing the runtime error for files that don\'t import request. A file with only this flask import has the same issue:  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,15,2016-01-02 21:57:37,92.42,,1,,"b""b' @jaraco which point release of Python 3.5? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,16,2016-01-02 21:57:37,116.25,,1,,"b""b' Essentially I just did a module with: and then in every module import request from this module instead of importing it from flask directly'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,17,2016-01-02 21:57:37,225.27,,1,,"b""b' thas plain broken :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,18,2016-01-02 21:57:37,65.27,,,1,"b'b"" Well", what should we do... we want flask," we want doctest. Both are awesome but refuse to work together. It\'s a hack for sure and you probably don\'t wanna use it in production but it\'s still useful.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,19,2016-01-02 21:57:37,2.45,,1,,"b""b' 3.5.1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,20,2016-01-02 21:57:37,93.27,,1,,"b""b' Also"," is affected:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,21,2016-01-02 21:57:37,8.68,,1,,"b'b"" Seems that and are effected as well. After those discoveries"," I was able to write a  file (for pytest) to implement the workaround: Perhaps I\'ll release that hack as a pytest plugin.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,22,2016-01-02 21:57:37,0.85,,1,,"b'b"" It\'s better to go to the source and set  "," fixing them all at once.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,23,2016-01-02 21:57:37,456.35,,1,,"b""b' @untitaker your thoughts?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,reopened,2016-04-22 21:43:27,1395.2,2,20,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,24,2016-01-02 21:57:37,541.33,,1,,"b""b' any doctest will have to push an known context to work correctly simply setting something to None is bound to break other bits'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,25,2016-01-02 21:57:37,1.27,1,,,"b""b' also doctest is not awesome its a toy that is hard to extend and falls down painfully whenever you need to deal with more than the most simple code examples'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,26,2016-01-02 21:57:37,220.68,,1,,"b'b"" I\'d rather close this as it appears unfixable. On 23 April 2016 08:46:15 CEST"," Ronny Pfannschmidt notifications@ wrote:##  Sent from my Android device with K-9 Mail. Please excuse my brevity.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,closed,2016-04-23 12:20:14,876.78,3,22,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,27,2016-01-02 21:57:37,157.88,1,,,"b'b"" If doctest is a toy that is not awesome", it should probably be removed from the stdlib. On the contrary, it\'s a model that works well for many use cases, including Python itself. Acknowledging that it doesn\'t have the  semantics and some of the more advanced techniques necessary for mature projects and that sometimes a project will abuse doctests beyond their intended purpose, it doesn\'t follow that doctests should be deprecated, and especially not by a library like flask.If the issue is unfixable, doesn\'t it at least deserve an explanation for why it is unfixable? I haven\'t yet delved into what the issue is," but it seems that raising a RuntimeError during inspection of the code is something that the LocalProxy could at least in theory avoid.""'",,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,28,2016-01-02 21:57:37,204.3,1,,,b'b\' From what I understand (mind you, I\\\'m not an active framework user, just a fan)," the problem is that Request object shouldn\\\'t be used standalone because it needs at least partially initialised framework (the so-called ""context""). Thus the RuntimeError instead of a ""more standard"" AttributeError", because accessing an attribute just reveals that context is not initialised. I guess it would be hard to fix it in  without redesigning most of the framework architecture," so the only sensible solution seem to be adding initialisation boilerplate to each and every doctest in which the Request object is used which kinda defeats the purpose of using doctests instead of ""normal"" unit tests.\''",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,29,2016-01-02 21:57:37,366.83,,,1,b'b\' @jaraco I am under the impression that this issue is unfixable in an absolutely clean way," without breaking API compat (such as changing RuntimeError to AttributeError -tests already rely on that). ""Absolutely clean"" is a requirement", because while the maturity and usefulness of doctests is IMO completely off-topic, I don\\\'t think it\\\'s worth working around its deficiencies. I closed this issue prematurely because I think we need to set strict priorities when the bugtracker is already trashy as is.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,30,2016-01-02 21:57:37,367.52,,1,,"b""b' That said", if you figure out the issue and are able to come up with a solution," please do open a PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,31,2016-01-02 21:57:37,1423.25,,1,,"b""b' @untitaker I have created a PR against werkzeug that should fix this: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1680,closed,-,-,-,5,24,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,opened,2016-01-24 04:32:52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,title,2016-01-24 04:32:52,00:00,,1,,"b""b' Traceback returns KeyError: WERKZEUG'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,body,2016-01-24 04:32:52,00:00,,1,,"b'b"" When I send an item to my server I get this error: Can\'t seem to figure out why. I am sending the item to the server as a base64. I should note that I am sending an image as a base64""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,1,2016-01-24 04:32:52,871.15,,1,,"b""b' Please provide an example that fails.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,closed,2016-01-25 19:07:01,874.15,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,reopened,2016-01-25 19:07:09,0.13,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,2,2016-01-24 04:32:52,3.55,1,,,"b""b' Sorry", I got it working," there was an error on the client side.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,closed,2016-01-25 19:07:35,0.43,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1699,closed,-,-,-,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,opened,2016-03-03 18:15:00,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,title,2016-03-03 18:15:00,00:00,,1,,"b""b' Fix for #1740'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,body,2016-03-03 18:15:00,00:00,,1,,"b""b' #1740'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,1,2016-03-03 18:15:00,1.97,,1,,"b""b' Added encoding to open_resource with default None so it is not breaking change'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,closed,2016-03-03 18:25:14,10.23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,2,2016-03-03 18:15:00,31.28,,,1,"b'b"" Use [ ]url  or [ ]url  for compatibility with 2 and 3.  doesn\'t support universal newlines", and is slow on 2.6.  I\'d probably go with  . Needs documentation," and a test would be nice too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,reopened,2016-03-03 18:48:15,23.02,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,3,2016-03-03 18:15:00,20.83,,1,,"b'b"" On second look", I can\'t figure out why the linked issue fails for you.  It\'s opening the file in binary mode," it shouldn\'t matter what the encoding is at that point.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,4,2016-03-03 18:15:00,5.57,,1,,"b'b"" if you will open the file in \'r\' mode instead of \'rb\' it will fail. For now", I changed the opening mode to \'rb\' and decoding it myself. I will take a look on  and will try to update this pull request," because I think it will look better if the encoding can be defined in open_resource.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,closed,2016-04-08 15:41:58,1253.72,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1741,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,opened,2016-04-16 11:59:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,title,2016-04-16 11:59:16,00:00,,1,,"b'b\' Automatic redirect with ""/"" breaks routes with different methods\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,body,2016-04-16 11:59:16,00:00,1,,,"b'b\' I have found an issue that is caused by the automatic redirect of routes to the version with a ""/"" at the end. See the code below for a minimal example: The POST route is unreachable as the ""/"" redirect is done without looking at the method. See the following curl commands (the flag is to follow redirects): Edit: My python version is Python3.4 and Werkzeug is 0.11.8 but it was also possible with the git version of Werkzeug.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,1,2016-04-16 11:59:16,39.17,,1,,"b""b' Switching the order of the two routes fixes the issue btw: That way POST does get matched:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,2,2016-04-16 11:59:16,1.85,1,,,"b'b"" Mixing and seems like a really bad idea to me. Try to disable the automated redirect from to if you really need it though. You can also do this globally using If that solves it for you I\'d say it\'s not a bug.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,3,2016-04-16 11:59:16,9.88,1,,,"b""b' I agree that it is not very nice. But I found this bug during a refactor that had the side of importing the routes in a different order and suddenly different parts of my application were broken because there were some GET routes that redirected my PUT routes. It seems bad that routes are redirected when the resulting route will result in a 405 error", especially when the first route was in the routing table for that method. Disabling strict slashes for the GET route in the example works  ," but this is not really what I want since like strict slashes and have them enabled for a reason.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,4,2016-04-16 11:59:16,272.08,1,,,"b'b"" Hello @JelteF Really"," your method of doing this is bad practice. I\'ll show you a method that will solve this issue for you. I always put both get and post in to one method. It\'s best practice and it keeps your code really clean and easy to read.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,5,2016-04-16 11:59:16,24.27,1,,,"b""b' @AzureusNation When using REST like applications I think it is a very weird practice to do it like this. Since the GET", PUT and POST methods probably do entirely different things," but putting them in the same function. It is also shown in examples that you can simple have functions with the same route but with different '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,6,2016-04-16 11:59:16,2.42,,,1,"b""b' You could use class-based views or an extension like flask-restful'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,7,2016-04-16 11:59:16,5.23,,1,,"b'b"" @JelteF Here\'s an idea so not all the code is in the same function. You could have your functions in a separate py file and call the functions like this. But personally I don\'t see the need of having 3 functions when you can compress it down in to one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,8,2016-04-16 11:59:16,2.25,1,,,"b'b"" Pretty ugly IMO (not to mention that camelCase doesn\'t belong into python code).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,9,2016-04-16 11:59:16,149.87,,,1,"b'b"" It doesn\'t look like there\'s a bug here since the behavior is configurable. Having the strict slashes redirect default to on seems fine to meI prefer that we have a redirect one way or the other as I think it leads to cleaner URLs by default. If a user for some reason wants to mix the route styles", it\'s not hard to google how to turn off that redirect.  Arguably, the redirect could kick in _after_ the routes table is parsed, in which case the new POST would work, but if you\'d previously had a route that was working due to a redirect, adding this new route would (somewhat unexpectedly) break the original route. For now, I\'m closing this, if there\'s significant interest in changing the evaluation order so the redirect happens after the routes table," then we can re-open and re-evaluate.""'",,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,closed,2016-04-17 20:26:17,507.02,6,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,10,2016-04-16 11:59:16,25.55,,1,,"b""b' The redirect itself is not the problem", since that is exactly what I want. The problem is that it redirects even though the method is invalid after the redirect," especially because the exact route is valid for that method. If a GET route would be defined with and without a slash I would argue that this behaviour is not a bug. But in this case a redirect is done to a route that will definitely return an error in favour of not redirecting and having a route that matches directly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,11,2016-04-16 11:59:16,20.6,,1,,"b'b\' FTR changing the evaluation order to anything ""complexity-based"" seems like a no-go to me since the resulting behavior would be harder to reason about. You\\\'re going to end up with edgecases like this one either way: I think the current way has fewer ones. At least you can just change the order of registration to work around it", in systems where the routes are resorted you can\\\'t.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,12,2016-04-16 11:59:16,1408.43,,1,,"b'b"" Having thought about this more", I agree the behavior is definitely surprising and does feel like a bug. If a route doesn\'t define a HTTP method, then another route that handles that method shouldn\'t be overridden," regardless of auto-redirects.  I\'m not sure how to best solve it. Probably the redirect should only kick in for the defined HTTP methods on a route. That\'s the behavior I would expect.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,reopened,2016-04-18 20:40:52,14.58,6,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,13,2016-04-16 11:59:16,3.52,1,,,"b'b"" Sorry", yes, that _is_ a bug. I didn\'t even sense this from the original post, probably was half-sleeping. While I think this can _maybe_ be solved in a backwards-compatible manner, I don\'t think it qualifies for a bugfix release," as it _might_ break applications.""'",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,14,2016-04-16 11:59:16,1291.83,,,1,"b""b' Glad to hear you guys agree. After looking into to Flask internals a bit I think this is actually a Werkzeug bug instead of a Flask bug.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,15,2016-04-16 11:59:16,34.98,,1,,"b'b"" I\'ve just submitted a very simple pull request in the werkzeug repo to fix this bug. url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,16,2016-04-16 11:59:16,32.62,,,1,"b""b' Closing"," this is now tracked over in url  Thanks again @JelteF for working on this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,closed,2016-04-19 19:23:49,1362.95,7,7,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,17,2016-04-16 11:59:16,5.73,,1,,"b""b' no please keep this issue open"," PRs are different from issues.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,reopened,2016-04-19 19:29:33,5.73,7,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,18,2016-04-16 11:59:16,65.4,,1,,"b'b"" No problem"," but I thought the switch to fixing this in Werkzeug means it\'s not an issue with Flask but with upstream? Do we keep Flask issues open if the underlying problem is in a dependancy?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,19,2016-04-16 11:59:16,4.55,,1,,"b""b' It would be better refiled against Werkzeug but more importantly"," some issue should stay open.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,20,2016-04-16 11:59:16,821.02,,1,,"b""b' I would close this and file it again against Werkzeug. This actually is also related to this issue: url  (As the flipping of the order of the decorator should not have made a difference)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,closed,2016-05-22 10:20:31,890.97,7,11,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1783,closed,-,-,-,7,11,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,opened,2016-05-14 02:10:05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,title,2016-05-14 02:10:05,00:00,1,,,"b""b'  is poorly documented'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,body,2016-05-14 02:10:05,00:00,,1,,"b'b"" url  The documentation doesn\'t list or explain any of the arguments used by  . It only says: For one"," I know there should be at least and maybe (or surely) more than that. **Note:** All Flask version\'s documentation seems to be affected by this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,1,2016-05-14 02:10:05,1150.32,,,1,"b'b"" I\'d like to work on this. What would you recommend looking at as a good example of documentation in Flask already?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,2,2016-05-14 02:10:05,31.3,,,1,"b'b"" @Sanjurjo7 Go for it!  I haven\'t looked at it in-depth", but the API docs are probably auto-generated by Sphinx using the function\'s docstrings. So probably what you need to do is expand this a bit: url  While I\'m not sure it\'s a canonically good example," there\'s certainly more info in the docstring: url  Hopefully that\'s enough to get you started.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,3,2016-05-14 02:10:05,826.83,,1,,"b'b"" Okay", this is what I\'ve got: I\'m new to contributing though, so I\'ve got a named branch (iss1809_register_blueprint_docs) with commits," but I\'m not sure how to start a pull request...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,4,2016-05-14 02:10:05,15.28,,,1,"b""b' Oh", sweet, nm," I think I figured it out.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,5,2016-05-14 02:10:05,149.58,,1,,"b""b' Done with this one. Pull #1811 got it. :^)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,closed,2016-05-22 14:29:30,739.42,1,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,6,2016-05-14 02:10:05,6.2,,,1,"b'b"" Thanks for the hard work! I don\'t know if I would have been able to pull it off myself!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,7,2016-05-14 02:10:05,376.92,,1,,"b'b"" I\'m reopening this issue because #1811 contains incorrect information and was reverted in #1912""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,reopened,2016-06-14 20:46:32,377.03,1,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,closed,2017-06-14 14:41:44,1075.2,1,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1809,closed,-,-,-,1,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,opened,2016-06-01 21:15:32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,title,2016-06-01 21:15:32,00:00,,1,,"b""b' Add tests target that uses simplejson'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,body,2016-06-01 21:15:32,00:00,,1,,"b""b' url  Should add tox envs for testing with simplejson installed.  Possibly add this to the travis matrix.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,1,2016-06-01 21:15:32,1296.97,,1,,"b""b' Are there any specific features of simplejson we want to test"," or just run the regular tests with simplejson?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,closed,2016-06-02 19:30:28,1334.93,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,2,2016-06-01 21:15:32,151.78,,,1,b'b\' Just for the future,"Fixed #1846"" is not a really good commit message. It\\\'s meaningless without extra context (going to github). Also, your Git is configured to commit with the email ""james@"" might want to fix that :)\''
flask	1846	closed	3	jeffwidman	2016-06-01 21:15:32	10.65	+1			b""b' Good catch @ThiefMaster sorry I overlooked this when reviewing.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,reopened,2016-06-03 09:34:35,844.12,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,4,2016-06-01 21:15:32,1159.42,,1,,"b""b' #1869'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,closed,2016-06-03 16:54:21,439.77,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1846,closed,-,-,-,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,opened,2016-06-01 23:38:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,title,2016-06-01 23:38:45,00:00,,1,,"b""b' Issue using Flask CLI with module layout recommended in Large Applications'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,body,2016-06-01 23:38:45,00:00,,1,,"b'b"" Example project that shows issue is available I\'m attempting to use the large app structure seen in the [Flask Larger Applications documentation]url  First", set up a virutal environment and install flask 0.11 into that environment (has all that for you). Can successfully launch app using old mechanism found in and   But can\'t seem to get to work with flask-cli. You can see both of the methods in  . This throws  : This loads, but doesn\'t register any of the views even though the print output makes it to the console. How should I be loading a module with flask-cli? Or alternatively," how should I be changing the module structure to support it properly?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,1,2016-06-01 23:38:45,6.72,,1,,"b'b"" That\'s because you did not actually install your app. A few options:export PYTHONPATH=/pip install editable . (assuming you have a "," did not look if you have) An argument can be made that this behavior should be improved. I\'m up for that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,2,2016-06-01 23:38:45,32.52,,,1,"b'b"" Ah", hmm. Is installing an app in development a common pattern? I haven\'t run into it yet but admittedly, all my flask apps have been deployed by me rather than being open sourced for distribution. I was making this change based on the recommended guidance in the release notes to abandon in favor of the cli. While didn\'t seem to help, reading the [documentation]url  again," I found that fixed the short term problem for me. My final command: This works fine. Only feel like I\'m not really using any of the benefits of the new cli feature now \\xf0\\x9f\\x98\\x84 ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,3,2016-06-01 23:38:45,441.62,,,1,"b""b' Yes! Without you will not get any meta information about your package. Functionality we should make sure that and behave the same WRT to the Python path.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,4,2016-06-01 23:38:45,640.47,,1,,"b""b' Looking into this as part of the PyCon sprints.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,5,2016-06-01 23:38:45,238.53,,1,,"b""b' We just hit the same thing. The issue with doing e.g. is that", when you do e.g. from your route definition, you get e.g. rather than \\xe2\\x80\\x93 i.e. the module loader treats it as a separate module," and your routes get registered to the wrong Flask app. It seems a little odd to me to have to have a stub for an application to get this to work nicely.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,6,2016-06-01 23:38:45,81.13,,1,,"b""b' I think this issue should be closed as fixed by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,7,2016-06-01 23:38:45,565.08,,,1,"b""b' Okay!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,closed,2016-06-07 09:04:52,566.12,0,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,8,2016-06-01 23:38:45,345.13,,1,,"b'b"" I understand #1872 solves the bug with not being used properly to infer path", and render the use of viable, but this does not solve the issue that @mitsuhiko raised:Right now, using doesn\'t work for large apps with the [structure you advise]url  unless it is installed as a dev module. Since the installation in editable mode is not a common pattern nor mentioned in the docs (right?), it would be nice to:mention this issue as a note in the current stable Flask doc," for the cli chapterchange the behavior to add the current path or detect automatically if the path of the module has to be added. It would avoid people trying to switch from to the cli to be left scratching their heads :-).""'",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,reopened,2016-08-30 14:51:50,346.97,0,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,9,2016-06-01 23:38:45,6.48,,1,,"b'b""   seems pretty reasonable as a dev-mode thing. In production you\'d be using uWSGI anyway \\xe2\\x80\\x93 i.e. doesn\'t matter in that case.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,10,2016-06-01 23:38:45,72.4,,1,,"b'b"" Wow @untitaker that was fast.@taion: Well", for one thing the flask cli is designed to be used for any arbitrary task that could be run in prod (starting with db mgt with  ...). It\'s supposed to be a saner replacement for the deprecated of  , and limiting its usage to dev environments seems sad to me. For two, even if is \'reasonable\'," it\'s just not documented hence my remark. Unless we just make the recommended way to go?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,11,2016-06-01 23:38:45,1134.35,1,,,"b'b"" I\'ve been looking around", and:1. #1950 helps a lot by giving better error message than a plain ImportError. (but it\'s not released yet)2. Importing an arbitrary path (eg, the current one) seems like recipe for disaster," while having the user chose between installing the app in editable mode and add by hand the module path to is reasonable.3. The remaining bit: Do we want the docs to reflect this? I\'d add a sentence like:... but I don\'t know how to get about editing the current doc.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,12,2016-06-01 23:38:45,99.35,,1,,"b""b' Strongly disagree that we should encourage modifying  or PYTHONPATH manually. This can be solved with better detection and documentation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,13,2016-06-01 23:38:45,986.03,,1,,"b""b' Yep"," definitely something that should be built into flask cli... hopefully next minor version adds cwd to the python path automatically?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,14,2016-06-01 23:38:45,812.95,,,1,"b""b' I agree", it should not be a requirement to modify  or any environment variables to access the cli via the flask command.  It should also not be a requirement that your flask app is installed with setuptools for this to work in a nice way.  If nobody is working on this," I would be interested in investigating writing a patch for it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,15,2016-06-01 23:38:45,5.2,,,1,"b'b"" It is strongly encouraged to make your app a package and that isn\'t going tochange. On Tue", Apr 04, 2017 at 11:41:39AM -0700," Leslie Luyt wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,16,2016-06-01 23:38:45,547.12,,1,,"b""b' With #2297", #2319, and #2326, can detect or specify app factories. With #2414, can specify packages that are not installed in develop mode ( )," although installing in develop mode is still recommended.  I verified that both and work as expected with the original example.'""",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,closed,2017-07-15 03:53:50,782.0,1,12,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1847,closed,-,-,-,1,12,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,opened,2016-06-02 20:01:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,title,2016-06-02 20:01:15,00:00,,1,,"b""b' Add last_modified arg for send_file'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,body,2016-06-02 20:01:15,00:00,,1,,"b""b' Enhancement: Add last_modified arg of type DateTime to send_file. Fixes #1321'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,1,2016-06-02 20:01:15,706.38,,1,,"b""b' @prachikhadke I think should be  based on your further research in url  correct? Thanks for your hard work today at the Pycon Sprint.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,2,2016-06-02 20:01:15,127.85,,1,,"b""b' Yes. Can be closed. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,closed,2016-06-03 09:55:29,834.23,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,3,2016-06-02 20:01:15,1351.62,,1,,"b'b"" I\'m going to re-open this until url  is decided""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,reopened,2016-06-04 08:27:06,1351.62,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,4,2016-06-02 20:01:15,677.77,,1,,"b""b' af515cc7ea561292b07195c6a93662b7ca189e21"," with some cleanup in 7c271401b284e6fcc2040fffe317342e2a17a902'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,closed,2016-06-05 19:44:52,677.77,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1859,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,opened,2016-06-03 22:47:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,title,2016-06-03 22:47:02,00:00,,1,,"b""b' Improve test coverage of '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,body,2016-06-03 22:47:02,00:00,,1,,"b""b' Added tests for and  .Added a test to ensure that UUIDs are correctly jsonified.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,closed,2016-06-03 23:24:26,37.4,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,1,2016-06-03 22:47:02,37.87,,1,,"b""b' adjusting these tests to use a pytest tempfile instead of a real file object'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,2,2016-06-03 22:47:02,157.15,,1,,"b'b"" You don\'t even need a tempfile"," just a file-like object.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,3,2016-06-03 22:47:02,315.45,,,1,"b'b"" @nland Curious why you closed this?  Once you update the code"," a simple followed by will push the updated code to this PR. We\'d certainly appreciate having the extra test coverage.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,reopened,2016-06-11 07:18:10,473.73,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,4,2016-06-03 22:47:02,507.73,,1,,"b""b' Closing due to inactivity"," please refile if updated.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,closed,2016-08-20 15:45:14,507.07,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,5,2016-06-03 22:47:02,3.32,,1,,"b""b' rebased and pushed f16e477b2a7329d249b5793a0dc4986503a48371"," cleaned up in f193f590bc33bde70fad200782350beac3506585'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1885,closed,-,-,-,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,opened,2016-06-08 01:46:51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,title,2016-06-08 01:46:51,00:00,,1,,"b""b' Added make target for test coverage"," simplified contributing doc'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,body,2016-06-08 01:46:51,00:00,1,,,"b""b' The commands to run a coverage report are somewhat clunky", and hard to remember.1. will now generate the report, display it, and save an HTML version.2. already ensures that test dependencies are installed. This seemed clever and helpful for beginners, so I did the same for and  . (Also, added and to test-)3. Updated contribution guide to replace the  ,  , and coverage instructions with the versions.  commands should be easier to remember? Also ensures everyone runs the same tests every time. Apologies if I globbed too much into one PR," happy to edit if needed.'""",,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,1,2016-06-08 01:46:51,233.5,,1,,b'b\' I like most everything here except the docs changes (item 3). Personally, I prefer that we continue to recommend using the normal tool commands rather than hiding them behind  . For example,  rather than  . If we bury everything under commands, then while it\\\'s easier to run the default case, it makes it more difficult to customize things adhoc when developing. Having the normal tool command as the invocation recommended by the docs makes any breakage more likely to be noticed. These instructions target developers who want to hack on flask, so I don\\\'t think it\\\'s an unreasonable bar for them to have to learn the basics of these tools.  That said, I do like having as a shortcut," so I would be in favor of saying ""Here\\\'s the instructions.... If you want a shortcut for the above that runs everything"," you can run  .""It doesn\\\'t look we\\\'re doing this", but sometimes projects use in their file to tell Tox what to install... so you can accidentally end up telling tox to install tox. I just checked, and not an issue for Flask.\'',,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,2,2016-06-08 01:46:51,408.9,,,1,"b""b' Good point"," probably not helpful _remove_ info from the docs. Rewritten (approximately) as suggested.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,closed,2017-01-31 14:55:48,788.95,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,reopened,2017-01-31 14:56:59,1.18,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,3,2016-06-08 01:46:51,522.22,,,1,"b""b' needs a rebase!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,closed,2017-05-25 21:16:23,379.4,1,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,4,2016-06-08 01:46:51,5.02,,1,,"b""b' i merged this manually'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1896,closed,-,-,-,1,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,opened,2016-06-14 00:17:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,title,2016-06-14 00:17:08,00:00,,1,,"b""b' Enable template auto-reloading in ()'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,body,2016-06-14 00:17:08,00:00,,1,,"b'b"" When Flask app debugging is enabled (==True)", and Jinja2template auto-reloading is not explicitly disbaled, templateauto-reloading should be enabled. If the app is instantiated, the jinja_env object is accessed (therebyinitialising the Jinja2 environment) and the server is then started with(debug=True)," template auto-reloading is _not_ enabled. This is because reading the jinja_env object causes the environmentinitialisation function to set auto_reload to  (which isn\'t yetTrue). Calling (debug=True) should correct this in order toremain consistent with Flask code reloading (which is enabled within() if debug == True).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,1,2016-06-14 00:17:08,1028.03,,,1,"b'b"" This looks fine to me"," although I\'d prefer another maintainer sign off as well before it\'s merged. Can you add a test though?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,2,2016-06-14 00:17:08,6.2,,,1,"b'b"" No problem"," I\'ll add a test to this later this evening. Thanks.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,3,2016-06-14 00:17:08,24.73,,1,,"b'b"" I don\'t think so that\'s the root of the problem. The template reloader gets disabled at Flask app instantiation if it\'s not explicitly enabled and debug mode isn\'t turned on at that point. However", in the case if the code reloader, reloading is enabled in it is not explicitly disabled and debug is enabled. I think the patch harmonises the behaviour between template and code reloading (if no explicit reloading configuration and debug is enabled via  ," reloading is set to match  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,4,2016-06-14 00:17:08,172.53,1,,,"b'b"" I think you\'re confusing the template reloader of Jinja (enabled by default) with the server reloader from Werkzeug (disabled by default).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,5,2016-06-14 00:17:08,4.12,,1,,"b'b"" And TEMPLATES_AUTO_RELOAD controls how Jinja\'s is set. The default value means that it _already depends on debug mode_ (see  "," url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,6,2016-06-14 00:17:08,2.37,1,,,"b'b"" Sorry", I see that you\'ve figured all of this already out in url  In that case I would say that we need to deduplicate that logic anyway," i.e. remove the logic for TEMPLATE_AUTO_RELOAD out of into  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,7,2016-06-14 00:17:08,4.18,1,,,"b'b"" @untitaker That\'s the problem. If you don\'t explicitly enable debug via configuration at Flask app instantiation then access the  ", template auto reloading is disabled. If you then subsequently enable debug by starting the server with  ," Werkzeug debugging and reloading is enabled (regardless of the fact it wasn\'t otherwise explicitly enabled via config) but template auto reloading isn\'t enabled. I think the intention is that calling should enable debugging and auto reloading. It\'s confusing that this enables code reloading (when no explicit option is set) but doesn\'t enable template reloading (when no explicit option is set). Sorry if I\'m not explaining this very well..""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,8,2016-06-14 00:17:08,3.8,,1,,"b'b"" Yes I oversaw your post in #1907", it all makes sense. But with this fix there\'s another inconsistency: If I explicitly set and then run  ," the value gets ignored?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,9,2016-06-14 00:17:08,33.48,,1,,"b'b"" @davb5 What i meant specifically was using instead of just the debug flag itself. There\'s instanceswhen I\'ve enabled debug but disabled reloading intentionally. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,10,2016-06-14 00:17:08,10.7,1,,,"b""b' You are confusing Werkzeug server reloading with Jinja env reloading. On 14 June 2016 23:36:46 CEST"," Alec Nikolas Reiter notifications@ wrote:##  Sent from my Android device with K-9 Mail. Please excuse my brevity.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,11,2016-06-14 00:17:08,6.67,1,,,"b'b"" Ah", I understand now @untitaker. Sorry, I missed that comment. You\'re right in that we\'re clobbering any configuration set value from  , and this probably isn\'t the best course of action. The difficulty here is that between instantiating our Flask app and calling there are a few places that template auto reloading could be enabled or disabled. My proposed patch works for most scenarios but fails for the one you\'ve highlighted if we explicitly disable template auto reloading (using any of the above mechanisms) then call  , we clobber our explicit disablement of template reloading. And that\'s probably not ideal. @justanr\'s comment that we might want to use rather than makes some sense, but could this cause further confusion by tying Jinja template autoreloading to Werkzeug reloading in one place ( ) but no-where else? I think you\'re right in that moving the logic for TEMPLATE_AUTO_RELOAD into might be the solution. We\'d have to make sure that nothing else fails and no behaviours change as a result of template auto-reloading not being configured one way or another before (i.e. make sure nothing expects some value to be there before  ). What does Jinja do if  is not set? Does it have a sensible default behaviour? If so," we could probably just move that block from into pretty much wholesale. Would this be a better solution?""'",,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,12,2016-06-14 00:17:08,36.98,,1,,"b'b"" Actually", that might not work without some more changes. I don\'t believe is called at all in WSGI apps," so that couldn\'t be the only place that we set  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,13,2016-06-14 00:17:08,13.13,,1,,"b'b"" Actually", url  might not matter as I don\'t think the Werkzeug auto reloader works in a WSGI environment (could someone please confirm?). If we don\'t auto reload code in a WSGI environment, keeping the template auto reloader configuration in would make sense and keep things consistent. However, it would appear that Jinja defaults to auto_reload=True. expects unconfigured auto reload to default to False. Moving the config code from would mean that between instantiating the Flask app and calling  ," the config in would be ignored. This wouldn\'t work. And running it was a WSGI app would leave the reloader on by default (not the currently established behaviour). I think we\'ll need a different approach (clobbering the value in as per the original patch is starting to look more pragmatic now).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,14,2016-06-14 00:17:08,153.27,,1,,"b'b"" I\'ve added a test for the original patch (wether or not we use that solution"," it\'s a starting point for the unit test).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,15,2016-06-14 00:17:08,447.43,,1,,"b""b' A quick workaround is to enable it manually: I guess this issue is blocking a lot of people who use flask to develop templates.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,16,2016-06-14 00:17:08,1213.02,,,1,"b'b"" Thank goodness I found this"," I\'ve been tearing my hair out for a few hours trying to figure out why my templates weren\'t auto updating. I guess while running apt-get upgrade I didn\'t notice that I had updated to 0.11.1 which has this issue. What release are you guys targeting for this fix?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,17,2016-06-14 00:17:08,647.2,,1,,"b""b' Adding along with seems to fix.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,18,2016-06-14 00:17:08,323.8,,,1,"b""b' needs a rebase!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,19,2016-06-14 00:17:08,19.58,,1,,"b""b' closing due to inactivity. please consider re-opening this pull request :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,closed,2017-05-25 21:28:22,1271.23,5,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,reopened,2017-06-14 16:47:32,1159.17,5,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,closed,2017-06-14 16:47:43,0.18,5,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,20,2016-06-14 00:17:08,1160.25,1,,,b'b\' Sorry for  spam," was trying to see if ""allow edits from maintainers"" was enabled for the PR. I\\\'m going to continue this in another PR.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,21,2016-06-14 00:17:08,104.18,,1,,"b'b"" So", I\'m at a loss. I\'ve tried every proposed solution I\'ve been able to find, without luck. My locally run Flask app completely ignores any changes made to my html template files, no matter what I do. I\'ve even redefined the location of the template folder via doesn\'t change a thing. Cleared browser cache, changed browsers. Nothing.  I\'ve tried every permutation of setting debug and auto_reload I can think of. I currently have it running with a solution proposed in this thread (code below) no errors, but still it completely ignores any changes made to template html files. Am I going mad? What could I be missing?  EDIT: nevermind," realized I wasn\'t even calling the file I\'d been editing. New to flask :)""'",,,,,,,,,,,,,,,,,,,,,,,,,
flask,1910,closed,-,-,-,6,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,opened,2016-06-14 09:02:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,title,2016-06-14 09:02:06,00:00,,1,,"b""b' Wrong import json library'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,body,2016-06-14 09:02:06,00:00,,1,,"b""b' [This code]url  is always import error.(  is not included in the  .)See: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,1,2016-06-14 09:02:06,49.0,,1,,"b""b' indeed"," how about a quick pull request removing the unnecessary lines?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,2,2016-06-14 09:02:06,519.03,,1,,"b'b"" It\'s not explicitly included"," but does do a [quick check to see if it\'s already installed]url and uses it if it is.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,3,2016-06-14 09:02:06,68.6,,1,,"b'b"" That\'s the problem though", will never have  , it\'s aliased to  .  Flask should just do its own check," we\'re not getting anything by importing itsdangerous\'s or werkzeug\'s import.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,4,2016-06-14 09:02:06,27.0,,1,,"b""b' since we want to use the same module", and depend on it anyway," it makes sense to just import with the only name it will ever use'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,closed,2016-06-15 16:27:11,445.08,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,5,2016-06-14 09:02:06,1120.75,,1,,"b""b' For the record: older versions of itsdangerous had this named which is why this was a import that supported both.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,6,2016-06-14 09:02:06,0.52,,1,,"b""b' At the very least we should bump the dependency to a version of itsdangerous that includes always.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,reopened,2016-06-17 14:51:24,1344.22,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,7,2016-06-14 09:02:06,4.68,,1,,"b""b' What about just copying the logic from itsdangerous?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,8,2016-06-14 09:02:06,1.02,1,,,"b'b"" Seems more sensible to me than relying on an import in another library. I\'ve always found it weird to make imports part of the public API.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,9,2016-06-14 09:02:06,6.22,1,,,"b""b' Personally I would prefer if we documented the json attribute in itsdangerous and make it part of the public API then import it and require a specific version of it. I do not like the idea of having different json modules for Flask and itsdangerous because it becomes confusing for a user if different ones are picked up due to the different behavior on simplejson vs json on Python 3.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,10,2016-06-14 09:02:06,9.52,,1,,"b'b"" The import is duplicated anyway in Werkzeug for its json support"," and we can\'t get that one from itsdangerous.  When would there ever be a situation where itsdangerous imports one but Flask imports the other?  My vote is for just duplicating the import. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,11,2016-06-14 09:02:06,1.17,,1,,"b'b"" The only json import that is user facing in Werkzeug is in contrib so that\'s not really a concern there.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,12,2016-06-14 09:02:06,0.57,,1,,"b'b"" Except we\'re talking about moving it into main right now.  #4""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,13,2016-06-14 09:02:06,2.18,,1,,"b""b' If we move Json code into main werkzeug then we need to figure out a long term solution for this problem. Getting the imports right everywhere is tricky. If we do it this way then we should add comments everywhere that clarify the import order so that if anyone ever changes it anywhere"," we fix it in all libraries.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,14,2016-06-14 09:02:06,0.72,,1,,"b'b"" Would using something like make sense? Edit: Just saw they use a different api that doesn\'t use  /  so probably no""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,15,2016-06-14 09:02:06,1.05,1,,,"b'b"" I don\'t want to go down that path. But I can see that in the future there might be a simplejson2 or something like this. Why? Because stuff like this keeps happening in the Python world :(""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,16,2016-06-14 09:02:06,0.37,1,,,"b""b' JFTR. The stdlib json inclusion was supposed to fix this but it turns out that the JSON module in the stdlib is inferior to the one in simplejson.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,17,2016-06-14 09:02:06,0.42,,1,,"b'b"" Maybe it\'s time to just pick one?  url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,18,2016-06-14 09:02:06,0.83,,1,,"b'b"" I don\'t think that is possible. We had issues before forcing simplejson on people.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,19,2016-06-14 09:02:06,2.75,,1,,"b'b"" Then just go with  ?  The tests pass for both"," and there\'s only one line of code that does anything different between the two (dealing with slash escapes in some version of simplejson).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,20,2016-06-14 09:02:06,8.5,,1,,"b'b"" If we decide to figure out #1602"," then users will have the option of adding simplejson back in if it\'s something they want.  How many people are even _aware_ that Flask will use simplejson if it\'s available?  It\'s not documented anywhere.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,21,2016-06-14 09:02:06,2.17,,1,,"b'b"" We should definitely not go with  . It\'s slower", it\'s very unmaintained," it heavily varies between different versions of Python.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,22,2016-06-14 09:02:06,291.78,,1,,"b""b' @mitsuhiko Is this resolved?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,23,2016-06-14 09:02:06,2.68,,,1,"b'b\' The part that\\\'s marked ""beginner friendly"" is.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,24,2016-06-14 09:02:06,4.03,,,1,"b'b"" @davidism So what\'s the next step with this now? I\'d love to dive into this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,closed,2017-05-22 19:37:58,286.57,4,20,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1911,closed,-,-,-,4,20,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,opened,2016-07-08 05:37:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,title,2016-07-08 05:37:27,00:00,,1,,"b""b' adding in try around __import__ to catch invalid '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,body,2016-07-08 05:37:27,00:00,,1,,"b'b"" I\'ll start this off by saying this may be a naive approach to what appears to be a common thread between a few recent issues (#1926", #1902, #1829). I\'m attempting to solve the issue of mistyped or improperly defined app paths reaching the **import** call for the flask app server. Given the way is currently structured, I can\'t find a bulletproof way to ensure only correct  names reach the import.  If that\'s the case," I believe the best response is to simply catch the error and return something more descriptive than for debugging purposes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,1,2016-07-08 05:37:27,914.45,1,,,"b'b"" I\'m all for better error messages", but this is a bit misleading: Appending is not necessarily required, only if you want to import files whose parent dirs are not in your PYTHONPATH. If you have your flask app installed as package, should suffice," without file extension.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,2,2016-07-08 05:37:27,1103.2,,1,,"b""b' Thanks for clarifying that @untitaker"," I updated the exception message to reflect that a little closer.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,closed,2016-08-10 20:46:26,908.98,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,3,2016-07-08 05:37:27,332.33,,1,,"b""b' Why did you close this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,4,2016-07-08 05:37:27,2.32,1,,,"b'b"" Sorry"," wasn\'t sure if it was really going to provide anything useful. Didn\'t want to waste any of your time. I\'ll reopen if needed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,reopened,2016-08-10 20:50:57,4.52,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,5,2016-07-08 05:37:27,2.95,,1,,"b'b"" I\'ll review whenever I get around to it"," because I do this in my freetime.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,6,2016-07-08 05:37:27,2.18,,1,,"b'b"" @untitaker absolutely", no rush. I was just trying to clean up on my end," didn\'t mean to kill this prematurely.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,closed,2016-08-12 13:12:00,981.05,2,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,7,2016-07-08 05:37:27,977.18,,,1,"b""b' Excellent"," thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1950,closed,-,-,-,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,opened,2016-07-28 14:36:04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,title,2016-07-28 14:36:04,00:00,,1,,"b""b' Added a missing module to import statement'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,1,2016-07-28 14:36:04,21.9,,1,,"b'b""   was written a couple sections up the page"," it\'s not an import.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,closed,2016-07-28 14:57:58,21.9,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,2,2016-07-28 14:36:04,7.28,,1,,"b""b' then perhaps the function should be added to the example as well? Because if somebody is just trying to  the example code"," will not work as it is right now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,3,2016-07-28 14:36:04,0.8,,1,,"b""b' @davidism Actually"," it is an import. Looks like that part of the docs was written before it was added to Flask. url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,reopened,2016-09-08 14:12:52,1394.9,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,4,2016-07-28 14:36:04,1387.25,,1,,"b'b"" Reopening as a reminder"," but the section needs a larger rewrite to make use of Flask\'s own version.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,closed,2017-05-12 05:38:37,925.75,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1965,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,opened,2016-08-19 19:26:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,title,2016-08-19 19:26:16,00:00,,1,,"b""b' JSON  mixin'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,body,2016-08-19 19:26:16,00:00,,1,,"b""b' Continuing #1416  All inline discussions have been resolved.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,1,2016-08-19 19:26:16,942.22,,,1,"b'b"" Any progress on this ? Could you rebase ?  I\'ve been looking for better JSON support (a-la python-requests) and there\'s already several bug reports and PR in flask and werkzeug about this. This looks like a popular demand :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,2,2016-08-19 19:26:16,92.05,1,,,"b""b' This change would make a big difference to us. Sorry to see that it is nearly two years old"," can I do something to help?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,3,2016-08-19 19:26:16,211.43,,1,,"b""b' This request merged would be a huge relief for me and my team also.  @mitsuhiko", @untitaker," how can we make this happen?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,4,2016-08-19 19:26:16,150.22,,1,,"b""b' +1 for this feature. Any way to help this get in?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,5,2016-08-19 19:26:16,147.5,,,1,"b""b' needs a rebase!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,6,2016-08-19 19:26:16,0.22,,1,,"b""b' Maybe it would be better to use Requests as the test client :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,7,2016-08-19 19:26:16,57.38,,1,,"b'b"" closing", old pr," requests is actually a better idea for the client (though i\'m sure that\'s not an obvious choice)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,closed,2017-05-25 22:07:18,161.03,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,8,2016-08-19 19:26:16,5.6,,1,,"b'b"" That is only your opinion at the moment", and the Flask docs don\'t show how touse it as one. Before we settle on this we should make clear how to actuallyuse it in tests. Right now you have to spin up a dev server for this. On Thu, May 25, 2017 at 03:07:25PM -0700," Kenneth Reitz wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,reopened,2017-05-25 22:13:48,6.5,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,9,2016-08-19 19:26:16,1.32,,,1,"b'b"" i definitely don\'t think requests should go in"," i\'m mostly joking about that :)  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,10,2016-08-19 19:26:16,1.3,,1,,"b""b' may have been premature to close this \\xe2\\x80\\x94\\xc2\\xa0i reviewed every line of code", and it seemed solid until i got to the deprecation of  . then," I saw that there may be some issues with werkzeug and saw the merge conflicts so decided to close. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,11,2016-08-19 19:26:16,4.38,,1,,"b'b"" I\'m not sure either what to think of that. We can have (parts of) requests as test client and it would probably be an UXimprovement", but right now I consider the overhead of its entire HTTP stack tobe too much. On Thu, May 25, 2017 at 03:15:35PM -0700," Kenneth Reitz wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,12,2016-08-19 19:26:16,32.87,,1,,"b'b"" Well", you\'d write a connection adapter that would skip it speaking HTTP and have it talk WSGI instead. Should be <30LOC. It\'s alright though, people are used to having unique test clients," and people are def used to the one built in here. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,13,2016-08-19 19:26:16,1202.82,,1,,"b""b' Continued in #2358.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,closed,2017-06-04 18:55:34,1241.77,1,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1984,closed,-,-,-,1,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,opened,2016-08-19 22:17:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,title,2016-08-19 22:17:45,00:00,,1,,"b""b' Update '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,body,2016-08-19 22:17:45,00:00,,1,,"b'b"" Python 3.4.2 Fix TypeError: Type str doesn\'t support the buffer API""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,closed,2016-08-19 22:38:11,20.43,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,reopened,2016-08-19 22:38:20,0.15,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,1,2016-08-19 22:17:45,84.02,1,,,"b'b"" Sorry"," first time I create a pull request and am unfamiliar with the process.Closing this one since pull request #1987 has additional changes and couldn\'t figure out how to add them to this one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,closed,2016-08-19 23:41:47,63.45,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,2,2016-08-19 22:17:45,61.22,,1,,"b""b' Hey @teichopsia-", for future reference," you simply have to push new commits to the existing branch and the PR will update :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,3,2016-08-19 22:17:45,143.62,,1,,"b'b"" Thanks @nateprewitt. In short"," basically what I did and just give a better explanation of the reasons? I\'m not sure if the commit message was descriptive enough.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,4,2016-08-19 22:17:45,99.4,,,1,"b'b"" @teichopsiaSorry this fell out of my queue. You can use to amend the last commit message. You can also use [ ]url  to do more involved commit modifications. That way you won\'t need to open a second PR in the future. Cheers!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,1985,closed,-,-,-,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,opened,2016-09-07 05:49:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,title,2016-09-07 05:49:16,00:00,,1,,"b""b' changing ip address to string for localhost'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,body,2016-09-07 05:49:16,00:00,,1,,"b'b\' For url  which now is more inline with docs in the home page of url  Before the change: After the change: As you can see its not ""getting"" the favicon. Is that an issue?  This change is []url  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,1,2016-09-07 05:49:16,78.9,,1,,"b""b' Probably just means your browser already has one cached.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,2,2016-09-07 05:49:16,402.62,,1,,"b'b\' Please remove the unrelated grammar ""fixes""", they\\\'re not necessary.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,3,2016-09-07 05:49:16,243.38,,1,,"b""b' done'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,closed,2016-09-07 17:54:10,724.9,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,reopened,2016-09-07 17:54:16,0.1,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,4,2016-09-07 05:49:16,87.42,,1,,"b""b' From the linked issue:So what exactly is this addressing by making it equal  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,5,2016-09-07 05:49:16,130.52,1,,,"b'b"" I think y\'all are misunderstanding #2007. I want to show an error when the user tries to set to an IP address.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,closed,2016-09-08 01:46:20,472.07,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2010,closed,-,-,-,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,opened,2016-10-11 13:32:48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,title,2016-10-11 13:32:48,00:00,,1,,"b""b' Updated Celery pattern'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,body,2016-10-11 13:32:48,00:00,,1,,"b'b"" The given pattern caused Celery to lose the current Context. And with this new pattern: Note that I\'m using Celery 3.1.24. The current pattern may be outdated (last change was 2013)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,1,2016-10-11 13:32:48,42.5,,1,,"b""b' @lght at first glance this seems highly problematic", as this removes the logic in that has to happen around  in order to handle bound tasks," context stack interaction and more'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,2,2016-10-11 13:32:48,407.32,,,1,"b'b"" @RonnyPfannschmidt it would seem problematic if it wasn\'t mentionned in their documentation that doing so would remove the whole request context by creating a new generic one (here",  ). In their doc url  they specify the task is, by default, run with the method, unless is overriden, but calling directly completely masks the context (this function,url  creates and pushes a new context, before calling itself). (  being the function decorated by the task decorator). One of the issues faced by such action (calling  ) is that the task won\'t be retried. Indeed, the default context sets the to  , and Celery is not willing to retry the task url  I\'m not sure about the intended use of  , except for calling directly a task. Most of the answers found on Stackoverflow about such problems, or about executing some lines of code  the execution of the task, are suggesting doing an override of and then call the method. I\'m not saying it\'s a good practice (and that they are right), just that it\'s worth mentioning this pattern should be updated. Try it yourself," you\'ll see.""'",,,,,,,,,,,,,,,,,
flask,2055,closed,3,2016-10-11 13:32:48,585.85,,1,,"b""b' Would really like to know how you arrive at the behavior you encountered in theOP. Are you calling the task directly such that you expect the existing ctx tobe passed down instead of a new one being pushed? With all we know you might as well file this PR against Celery itself to removeeverything but the invocation of from  . On Tue", Oct 11, 2016 at 02:02:49PM -0700," Geoffrey Bauduin wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,4,2016-10-11 13:32:48,621.0,,1,,"b'b"" @untitaker I would not go for patching this kind of behavior. It must have an intended use. I\'m calling the task like it is mentionned in celery\'s doc ( ). I\'ll provide a link to a quick script that shows exactly the disappearence of the task context before the end of the day""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,5,2016-10-11 13:32:48,2.2,,1,,"b""b' Maybe a celery dev could chime in here? cc @ask '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,6,2016-10-11 13:32:48,19.78,,1,,"b'b"" Speeding things up", you\'ll find a quick script to see what\'s actually going on here: url  Console output: First context is the one with pattern," second one is with pattern.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,7,2016-10-11 13:32:48,1258.37,,1,,"b'b"" I can\'t reproduce this issue"," and the example is gone. The documentation worked for me as-is.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,closed,2017-05-08 14:30:02,57.23,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,8,2016-10-11 13:32:48,3.23,1,,,"b""b' @davidism sorry", the example is still there, the url just moved," url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,reopened,2017-05-08 17:44:12,194.17,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,9,2016-10-11 13:32:48,192.38,,1,,"b'b"" I\'d rather tend to close this though just because it appears that nobody else has this problem.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,10,2016-10-11 13:32:48,74.35,,1,,b'b\' I\\\'ve been investigating this, I really can\\\'t tell what the intention of the design was in Celery here. If is not overridden," it is skipped and is called directly as an ""optimization"". But has logic in it that seems like it shouldn\\\'t be skipped (except for pushing that empty request). So it\\\'s not just optimizing away a lookup and call", it\\\'s changing behavior.  Additionally," it only seems to happen with  . Calling it through a worker shows the real request. So the ""optimization"" doesn\\\'t happen remotely? I haven\\\'t dug into remotely stepping through that yet.  ~As far as I can tell", this fix is correct.~ I\\\'m still not sure if this fix is correct. If you want to override  , you should not call  , you should call  . However, it changes the behavior when the task is called directly. Going to dig a little more first.\'',,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,11,2016-10-11 13:32:48,1183.13,,1,,"b'b"" There\'s a function", [ ]url  that replaces with a version that doesn\'t insert an empty request, to guard against this exact situation," but it\'s only called when [setting up a instance]url  doesn\'t trigger that because it doesn\'t go through a worker.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,12,2016-10-11 13:32:48,256.85,,1,,"b""b' Got around to finishing testing this. With the change", things at least behave consistently between enabled or not.  * (task called as function) has no context," which I guess makes sense. * (task executed eagerly) has a context. * (task executed remotely) has a context.  It looks like calling instead of is the intended way to write a task subclass.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,closed,2017-05-15 19:41:13,117.02,1,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2055,closed,-,-,-,1,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,opened,2016-11-04 06:03:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,title,2016-11-04 06:03:31,00:00,,1,,"b""b' switch to packaged sphinx theme'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,body,2016-11-04 06:03:31,00:00,,1,,"b'b"" I fixed up  flask-sphinx-themes so that it\'s an installable package. No longer need to copy files or use submodule"," just  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,1,2016-11-04 06:03:31,312.33,,1,,"b""b' Similar effort at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,2,2016-11-04 06:03:31,0.65,,1,,"b'b"" Also I think the flask docs builder doesn\'t even use that submodule repo but a different one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,3,2016-11-04 06:03:31,388.07,,1,,"b'b"" Yeah", I know the docs builder is doing its own thing, but I\'m with you on wanting to switch away from that. The flask-sphinx-themes repo is the one linked as a submodule here and in various extensions.  People were submitting issues and patches to it.  It\'s also the one that was moved to the Pallets org. I like your idea of having all the themes in one repo," just in case people want to document extensions for the other Pallets projects.  I\'ll go back and merge the two.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,4,2016-11-04 06:03:31,206.13,,1,,"b'b"" Why not just move to Alabaster? It\'s more actively maintained and is based on the same codebase. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,5,2016-11-04 06:03:31,7.47,,1,,"b'b"" You can close this", I\'m not getting involved into the docs infra anymore. Ifyou want to propose the RTD theme you should discuss this with Armin, as it\'sup to him in the end. On Thu, May 25, 2017 at 02:10:51PM -0700," Kenneth Reitz wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,6,2016-11-04 06:03:31,0.42,,1,,"b""b' Nvm about closing", I thought this was one of my PRs On Thu, May 25, 2017 at 02:10:51PM -0700," Kenneth Reitz wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,7,2016-11-04 06:03:31,5.65,,1,,"b""b' Related: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,closed,2017-05-25 21:31:54,928.38,0,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,reopened,2017-05-25 21:31:56,0.03,0,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,8,2016-11-04 06:03:31,11.82,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,closed,2017-05-25 21:36:07,4.18,0,10,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2080,closed,-,-,-,0,10,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,opened,2016-12-20 03:01:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,title,2016-12-20 03:01:50,00:00,,1,,"b'b""  crashes on Python 3 when source isn\'t encoded in default encoding""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,body,2016-12-20 03:01:50,00:00,,1,,"b""b' when I read my instance config file"," I get an error. Then I modify the code of  to thisThe problem is resolved. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,1,2016-12-20 03:01:50,782.05,,1,,"b""b'  is this a traceback from something flask related? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,2,2016-12-20 03:01:50,593.53,1,,,"b""b' Yes. sorry Iam forgot said this. my os is win10 python is 3.51 flask 0.11'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,3,2016-12-20 03:01:50,103.72,,,1,"b""b' what does your config file look like? and how are you calling it within your flask app? if it is an issue", not just an implementation thing," you should be posting the minimum to reproduce the error. we need a bit more information to judge whats going on.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,4,2016-12-20 03:01:50,169.77,,1,,"b""b' this is my code.    this Traceback '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,5,2016-12-20 03:01:50,2.8,,1,,"b""b' My win10 is chinese. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,6,2016-12-20 03:01:50,823.43,,1,,"b'b"" i don\'t think you need this:   instance_path = r\'D:\\\\Python\\\\flask\\\\brick\\\\instance\'  but i don\'t see why that would cause the error. also all config vars need to be capitalized", this line should be:  BASEDIR = (((__file__)," ))""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,7,2016-12-20 03:01:50,432.75,1,,,b'b\' Yes, you are ring.  I am learning Flask, So I want to try as much as possible the various functions. I think the reason of this error is chinese version win10 file system default encodeing is GBK, I don\\\'t know why i change to utf-8.  I find online, get an method,"filename = open(\\\'\\\',\\\'rb\\\')"". And, I see a Flask another function open_instance_resource(self, resource, mode=\\\'rb\\\')  and the use. So, I think, use this mothod to modify ""open(filename, \\\'rb\\\') as config_file"" . Sorry, my English is not good, Don\\\'t know whether to express correctly.\''
flask	2118	closed	8	wgwz	2016-12-20 03:01:50	1079.58		+1		b""b' i think we can probably close this here for now. it seems to be just an issue getting the encoding handled properly. maybe this will help: url '",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,9,2016-12-20 03:01:50,712.8,,1,,"b""b' hi", I think the issue in []url  it seems implicitly use default encoding, not explicitly  assign encoding to  . docstring in said: I suggest to fix it to always using  , because in windows, the default encoding might be be cp950, gbk," or cp1252...etc. '""",,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,10,2016-12-20 03:01:50,36.78,,,1,"b""b' Hi",  url  This said is the string encodeing,  string is in memory, but my question is that when open file, so, that is not a good solution. lanfon72 said is right. only have one parameter," You can add a parameter is used to specify the encoding.'""",,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,11,2016-12-20 03:01:50,527.27,,1,,"b'b"" @xinyvz is the issue resolved? if so", what solved it? it is not entirely clear based on what you have said. please share the solution for others that might find this thread facing similar issues. and of course," close the issue if it\'s done.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,12,2016-12-20 03:01:50,595.4,1,,,"b'b"" I modify the  function", add a paramter, mode=\'rb\', Solved the problem. I\'m sorry," I didn\'t think of other methods.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,13,2016-12-20 03:01:50,661.05,,,1,"b'b"" Ok"," nice. Let\'s close this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,14,2016-12-20 03:01:50,427.52,,1,,"b""b' Not sure if this is actually resolved.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,15,2016-12-20 03:01:50,21.92,,1,,"b'b"" Seems the issue here is that the config file is encoded with utf8 but the machine\'s default locale is gbk. Either we allow passing an encoding to  "," or we require the encoding to be utf8. Opening the file in binary mode is not correct.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,16,2016-12-20 03:01:50,2.82,,1,,"b""b' I think always using UTF-8 would be the cleanest solution.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,17,2016-12-20 03:01:50,2.08,,1,,"b""b' The encoding should be indicated at the top of the file using a comment  . I do think this issue is a Python 3 portability bug and that opening the file in binary mode is correct (as is the default in Python 2). can deal with binary strings and apparently also can detect the encoding using that comment annotation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,18,2016-12-20 03:01:50,1.02,,1,,"b'b"" So if I\'m right @xinyvz shouldn\'t have this problem in Python 2.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,19,2016-12-20 03:01:50,33.62,,1,,"b""b' If Python will handle the coding comment if the file is opened in binary mode then yeah we should just always open in binary mode.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,20,2016-12-20 03:01:50,263.4,,1,,"b""b' @untitaker I have not try in python2","  but I think you are right.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,closed,2016-12-25 04:15:08,73.3,3,16,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,reopened,2016-12-25 04:59:27,44.32,3,16,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,closed,2016-12-25 05:28:11,28.73,3,16,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,21,2016-12-20 03:01:50,93.65,,1,,"b'b"" This isn\'t fixed"," don\'t close it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,reopened,2016-12-25 05:48:47,20.6,3,17,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,22,2016-12-20 03:01:50,14.12,,1,,"b""b' @davidism OK reopen'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,23,2016-12-20 03:01:50,17.22,,1,,"b'b"" I read Python3",5 doc, it said in open(file, mode=\'r\', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) function:  so," I modify  function again.   ""'",,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,24,2016-12-20 03:01:50,560.43,,1,,"b""b' Please try out #2123 @xinyvz '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,closed,2016-12-26 02:51:24,1262.62,3,20,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2118,closed,-,-,-,3,20,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,opened,2017-02-20 04:32:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,title,2017-02-20 04:32:41,00:00,,1,,"b""b' Input stream not automatically drained at teardown.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,body,2017-02-20 04:32:41,00:00,,1,,"b'b"" I\'m not sure if this is intended behaviour and maybe I should know better", but I spent ages trying to figure out why I was getting a error and it turned out to be because I was not consuming the data associated with a request when raising an exception.  This seems to be a massive hole because if you are not expecting data with a request and so don\'t read anything then that data is left in the input stream (assuming  ) and so forms the start of the next request.  In fact I have even tried sending a request with another request in the data and Flask processes that data as if it were the next request and sends that in response to the following request.  I have resolved this issue by copying the body of the clause in the function inside from in []url  and having this new function decorated with  .  This ensures that the input stream is always drained after every request and so left over data is not mis-interpreted as the start of the next request.  Anyway, if I am expected to handle this situation manually as I have done can something be added to the documentation (or if it\'s already there can you point it out to me, somehow I couldn\'t find it).  Otherwise," I think Flask should drain the input stream so that subsequent requests are always correctly aligned.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,1,2017-02-20 04:32:41,17.87,,1,,"b""b' Please add a minimal example that demonstrates the issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,2,2017-02-20 04:32:41,59.38,,1,,"b""b'  Then run on the command line in or  :  The output from Flask where it is running is:  The error here is slightly different to what I was getting in my full application"," but from the same section of code (I had  ).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,3,2017-02-20 04:32:41,989.08,,1,,"b""b' having issues with Flask not responding after Chrome receiving 404 may be related to this issue.  just posted on SO: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,4,2017-02-20 04:32:41,24.97,,1,,"b'b"" @aradnaev Your issue is not related.  The protocol version must be manually set to or else headers manually added to cause this bug"," neither of which you are doing.  Your issue seems to be that Chrome is holding the connection when it shouldn\'t.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,5,2017-02-20 04:32:41,130.87,,1,,"b'b"" We can\'t replicate this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,closed,2017-05-23 00:54:52,1222.18,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,6,2017-02-20 04:32:41,30.15,1,,,"b""b' Sorry", but did you try the example I provided?  Because I still have the problem with Python 2.7.13 and Flask 0.13-dev.  There was a missing line in my sample, between the and there should be a  .  In the linked issue #2205 @brianrusso says that he cannot replicate the curl behaviour," but his post shows a similar Flask error showing that Flask is misbehaving.  Can you please post the result of running the example I provided.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,7,2017-02-20 04:32:41,13.67,,1,,"b""b' Yes", we tried your example, with multiple different clients making requests," without encountering the error you had.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,8,2017-02-20 04:32:41,1.42,,1,,"b'b"" I tried your example"," but doing a \'GET / \' did not result in any error.    Am I missing something when replicating? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,9,2017-02-20 04:32:41,17.67,,,1,b'b\' Thanks.  The curl line that I gave actually does 3 things.  It chains two GET requests one after the other (thus making use of keep-alive), but then also sends additional data with the get request," specifically being the carefully crafted string ""GET / \\\\r\\\\n"".  The idea is to create a stream of data that looks like a regular GET request", followed by my crafted one, and then have the second GET request return the results of the crafted one.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,10,2017-02-20 04:32:41,2.27,,,1,"b""b' Okay thanks I understand a bit more now. So your thought is that the werkzeug caching is not exhausting the pipeline"," which then could result in some type of injection situation?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,11,2017-02-20 04:32:41,4.43,1,,,"b'b"" Whoever is responsible (flask or werkzeug) for draining the pipeline is not doing it.  I\'m not sure who should control that behaviour.  Regarding the consequences", the injection was just the easiest way to show it.  I don\'t think there is really an attack vector there anymore than a malformed Content-Length header would provide," the issue is more that a valid (i.e. well-formed) request can cause the failure of a subsequent request.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,12,2017-02-20 04:32:41,2.33,,,1,"b""b' Okay. Thanks for the clarification. I had misunderstood the issue. I will look into it some more.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,13,2017-02-20 04:32:41,68.15,1,,,"b""b' Okay I agree there is definitely something odd going on here.  @Parakleta This is the issue"," correct?   ## With protocol_version commented  ## protocol_version set to  @davidism  please re-open this issue.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,14,2017-02-20 04:32:41,21.88,,1,,"b""b' Yes"," that is exactly the issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,reopened,2017-05-23 05:03:26,248.57,3,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,15,2017-02-20 04:32:41,13.3,,1,,"b""b' @brianrusso you mentioned at the sprint that you had an idea for this. Do you still have time to make a PR or at least write some notes?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,16,2017-02-20 04:32:41,750.4,,1,,"b'b"" Running the app with Gunicorn does not have this issue.  This happens even with a basic from the standard library", which is what is based off. This should probably be reported to Python as well.  It\'s definitely not a Flask issue, if we were to fix it," it would be in Werkzeug. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,17,2017-02-20 04:32:41,464.5,,1,,"b'b"" Closing this", please reopen against Werkzeug if it\'s still an issue for you. However, do remember that the dev server is only for development," and production servers already drain the input.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,closed,2018-02-24 00:05:01,1141.58,3,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2188,closed,-,-,-,3,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,opened,2017-03-23 14:01:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,title,2017-03-23 14:01:44,00:00,,1,,"b""b' Flask treats SystemExit and other BaseExceptions as indicating success'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,body,2017-03-23 14:01:44,00:00,,1,,b'b\' See here: url When combined with a database layer, this completely breaks transaction guarantees," as the request context ""pop"" handler will see no error and assume the transaction was successful", resulting in it being committed while in an inconsistent state.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,1,2017-03-23 14:01:44,2.42,,1,,"b'b"" url I don\'t see why you would have database logic running outside your flask app (wsgi middleware?) but if you tell Flask to propagate exceptions they\'ll be re-raised.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,closed,2017-03-23 14:04:09,2.42,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,2,2017-03-23 14:01:44,1.28,,1,,"b""b' Also"," see url  in teardown_appcontext you can check whether there has been an exception or not and  accordingly.  The request context callbacks are not the right place for this a database transaction usually does not need an actual HTTP request.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,3,2017-03-23 14:01:44,0.03,,1,,"b'b"" I\'m not sure I understand. Why does your db driver raise  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,4,2017-03-23 14:01:44,7.6,,,1,"b'b"" @ThiefMaster is not called on  s so is not useful. Yes", we use retry middleware to automatically retry transactions which are rolled back due to deadlock. Regardless of whether you consider this good practice, flask should not be treating  s as though no error occurred.  @untitaker My DB driver doesn\'t raise  , it is raised externally whenever the orchestration system (in this case kubernetes) decides to shutdown a pod. This should be a clean shutdown," and should not be corrupting the database...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,5,2017-03-23 14:01:44,1.53,,1,,"b""b' Oh now I see"," you want this code to handle non-Exception-subclass exceptions too...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,reopened,2017-03-23 14:14:36,10.45,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,6,2017-03-23 14:01:44,0.6,,1,,"b'b"" Even though I\'m still not sure why you would ever get a SystemExit from application code where does Kubernetes inject the exception?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,7,2017-03-23 14:01:44,1.42,,,1,"b'b"" It may be rather than  "," I\'m not sure. Since flask quits and none of our error handlers trigger we don\'t get any log output! (This was a huge PITA to debug).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,8,2017-03-23 14:01:44,0.97,,1,,"b'b"" That sounds like you are using the / dev server. I\'d expect proper wsgi servers to finish processing a request and then shutting down cleanly instead of sending KeyboardInterrupt when shut down.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,9,2017-03-23 14:01:44,3.57,,1,,"b'b"" Yes", just changing this to will likely prevent users from stopping the dev server, though I haven\'t actually tried this. If you could find out which exception is actually raised," this would make decision-making easier. Perhaps we could only re-raise and  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,10,2017-03-23 14:01:44,2.63,,,1,"b'b"" @ThiefMaster I will look into that", thanks.  @untitaker I would expect non exceptions to be re-raised. The important thing as far as I\'m concerned is that is not called with as the argument," because that indicates success.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,11,2017-03-23 14:01:44,1372.58,,1,,"b'b"" @ThiefMaster We\'re using gunicorn", and it does wait for the worker to finish in response to  , but it appears that  may be sending (maybe if the container takes too long to shut down?)," which results in a exception being raised in the gunicorn workers.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,closed,2017-05-30 16:52:38,158.03,0,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2221,closed,-,-,-,0,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,opened,2017-04-07 12:57:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,title,2017-04-07 12:57:57,00:00,,1,,"b""b' Add example for virtualenv integration in cli docs'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,1,2017-04-07 12:57:57,6.1,,,1,"b""b' Editing scripts is not a good idea"," it is like editing code in  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,closed,2017-04-07 13:04:03,6.1,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,2,2017-04-07 12:57:57,8.65,,,1,"b""b' Thanks. This part [Virtualenv Integration]url  was already in docs"," is it better to remove it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,reopened,2017-04-07 13:14:08,10.08,0,1,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,3,2017-04-07 12:57:57,1.75,,1,,"b'b"" I see"," I wasn\'t aware of that section.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,closed,2017-04-07 14:10:44,56.6,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,4,2017-04-07 12:57:57,58.05,,,1,"b""b' Thanks @greyli \\xf0\\x9f\\x8e\\x89 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2234,closed,-,-,-,0,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,opened,2017-05-01 14:07:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,title,2017-05-01 14:07:50,00:00,,1,,"b""b' Handle app factory in FLASK_APP'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,body,2017-05-01 14:07:50,00:00,,,1,"b'b""   [ Gunicorn does this with  ]url  which I\'m not super happy with. Instead"," we could use to allow a simple list of arguments. The line should never be so complicated that would be necessary anyway. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,1,2017-05-01 14:07:50,214.98,,1,,"b""b' Should be instead of  "," right?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,2,2017-05-01 14:07:50,136.1,,1,,"b'b"" Also handle without parens.  evaluates to a string", not a tuple, so need to special case one positional arg, probably by adding a comma at the end. Need to check that it\'s not empty parens though, because then inserting is a syntax error.  This solution only allows positional arguments (and named argument implicitly)," but I\'m ok with not supporting keyword arguments.""'",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,3,2017-05-01 14:07:50,680.35,,1,,"b""b' Down vote on this feature.  The environ way would be better.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,4,2017-05-01 14:07:50,3.35,,,1,"b'b"" Something like  would not belong into the core of a microframework like Flask. You don\'t necessarily have multiple configs available actually", if you want to be able to specify which config to use I\'d just use  .  I\'m \\xc2\\xb10 on this issue: It does make more flexible, but on the other hand always calling the app factory with no arguments which. in my opinion," should use the most common default values keeps things nice and simple.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,5,2017-05-01 14:07:50,4.65,,1,,"b'b"" @ThiefMaster Actually I don\'t use either. The way is a suggested replacement for this issue.  I\'ve always been using the to bootstrap the flask app.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,6,2017-05-01 14:07:50,26.45,,,1,"b'b"" I\'m not that fond either with such flexibility in  ", a simple call with no arguments to the application factory might be enough," IMO. By looking at the deployment options in the docs we may need to write our own (or something similar) application file for a handful of cases anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,7,2017-05-01 14:07:50,422.73,,1,,"b""b' I merged a pull request yesterday which [provides this functionality]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,8,2017-05-01 14:07:50,0.87,,,1,"b'b"" The PR looked good to me", and from what I could tell, this was @davidism\'s plan for the project, so I went ahead with it. Leaving this ticket open for further discussion," if any is needed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,closed,2017-05-26 14:57:19,49.48,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,reopened,2017-05-26 14:57:21,0.03,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,9,2017-05-01 14:07:50,617.52,,,1,"b'b"" I *really* like the shortcut of being able to call the factory in uWSGI and Gunicorn config. I think the ease of setup outweighs the complexity here. If users want to use env vars instead"," that\'s fine and should probably be documented as an alternative.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,closed,2017-05-28 01:14:50,617.48,0,6,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2264,closed,-,-,-,0,6,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,opened,2017-05-02 11:52:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,title,2017-05-02 11:52:39,00:00,,1,,"b""b' Catch-all errorhandler does not catch BadRequestKeyError'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,body,2017-05-02 11:52:39,00:00,,1,,"b'b"" ## Versions  Python 3.6.1 Flask 0.12.1 Werkzeug 0.12.1  ## Issue  A catch-all error handler (one that catches )", does not catch  . Here\'s a very quick illustration of the issue:  url Steps to repoduce: 1. Clone the repo above, install requirements etc 2. Run 3. Navigate to  , see that the error handler is correctly called  4. Navigate to  , see that the error handler is not called If I define an error handler specifically for it will be called, as expected.  Edit: If you downgrade to  ," this example will work.""'",,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,1,2017-05-02 11:52:39,9.5,,1,,"b'b"" Closing since this has the same issue: url We have a handler in another project for which isn\'t called for  "," despite it being a subclass.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,closed,2017-05-02 12:02:09,9.5,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,2,2017-05-02 11:52:39,0.4,,1,,"b""b' Does enabling the option help'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,3,2017-05-02 11:52:39,5.87,,1,,"b""b' @ThiefMaster no"," still same issue'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,4,2017-05-02 11:52:39,15.82,,1,,"b'b"" Actually", turns out the issue is with other exceptions as well. Not sure if it\'s the same issue as the one I linked above," so reopening.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,reopened,2017-05-02 12:24:14,22.08,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,5,2017-05-02 11:52:39,360.73,,1,,"b""b' This is more similar to #941.  This issue here is that  s are treated differently from other exceptions in the error handling code.  Each HTTP status code gets its own handler map.  So in order to catch you would need to register a handler for the code.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,6,2017-05-02 11:52:39,1271.95,,,1,"b""b' Is there still a way now to catch all HTTPExceptions? I believe that this is a good feature as we might use third party libraries and it is not always clear what kind of exceptions are thrown by the third party library. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,7,2017-05-02 11:52:39,130.05,1,,,"b'b"" You can catch standard  s by iterating over werkzeug\'s standard error codes and registering a handler for each of them (can be the same handler):  This will work for most real-life cases.  However", there are several : * If an is raised with a attribute of  , it bypasses exception handling * Error handlers registered for integer codes will only catch  s with that code if the exception class inherits from werkzeug\'s default exception class for that code. * Custom  s with non-standard codes will not be caught.  You can change http exception handling by setting the config parameter to  .  With this configuration: *  s with a of will be handled like regular exceptions *  s with other values are handled the same as usual (i.e. per-code error handler lookup)," except that if no handler is found the exception will be re-raised instead of generating a default error page.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,8,2017-05-02 11:52:39,762.72,,,1,"b""b' @ngaya-ll Hi", thanks for your quick reply! I tried the code that you suggested, however it does not take any effect. But I am using flask-restplus on top of flask," could it be that they have some conflicts?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,9,2017-05-02 11:52:39,685.73,,1,,"b'b"" I\'m not familiar with flask-restplus but from the [documentation]url  it appears that that extension modifies the error handling behavior"," so my above comment may not apply.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,10,2017-05-02 11:52:39,1382.2,,1,,"b""b' Fixed by #2314.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,closed,2017-05-30 16:57:38,273.4,1,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2268,closed,-,-,-,1,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,opened,2017-05-26 11:31:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,title,2017-05-26 11:31:50,00:00,,1,,"b""b' flask mutable session (with flask-session RedisSessionInterface)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,body,2017-05-26 11:31:50,00:00,,,1,"b'b"" I am using the [RedisSessionInterface]url  of [flask-session]url  to implement my server side sessions.  I have a test case that relies on mutating the session and I have read that this is possible [from the Flask documentation]url Here\'s my test code (using [pytest]url  My application relies on seeing but this change is not there.  Any ideas!?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,closed,2017-05-27 19:53:20,501.5,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,reopened,2017-05-27 19:54:47,1.45,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,1,2017-05-26 11:31:50,431.1,,1,,"b'b"" I can\'t reproduce your issue using the built-in session interface. If it is an issue with Flask-Session"," you\'ll need to report it there. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,closed,2017-05-29 18:42:56,1368.15,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,2,2017-05-26 11:31:50,93.7,,,1,"b""b' OK"," thanks for taking a look @davidism!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,3,2017-05-26 11:31:50,95.7,,1,,"b""b' I should note", the documentation says: Which, in this case," is not true (part of the reason I reported here). Should this be amended?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,4,2017-05-26 11:31:50,105.23,,1,,"b'b"" It does work independently. If it doesn\'t"," it\'s either a problem with how you\'re using it or a problem with the backend.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2337,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,opened,2017-06-02 22:08:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,title,2017-06-02 22:08:14,00:00,,1,,"b""b' Wrong release version'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,body,2017-06-02 22:08:14,00:00,,1,,"b""b' In the 0.12.2 release the version in is still 0.12.2-dev  This is causing problems with programs checking the flask version.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,1,2017-06-02 22:08:14,73.32,,1,,"b""b' I can bump it"," but what problems is it causing?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,2,2017-06-02 22:08:14,501.33,,1,,"b'b"" It\'s causing problems with [onionshare]url  on archlinux.  It boils down to:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,3,2017-06-02 22:08:14,400.57,,1,,b'b\' Flask 0.12.2, the released version, has  , which is correct. Flask master, the dev version, has  ," which is also correct. Flask has always used ""-dev"" for it\\\'s dev designator. The version scheme we use is [PEP 440]url  compliant and has not changed format as far as I can remember.  It looks like while the onionshare AUR allows as an alternative to  ", it doesn\\\'t actually expect its version scheme. It should use instead of (or at least if you don\\\'t want to depend on setuptools).\'',,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,closed,2017-06-03 14:23:27,975.22,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,4,2017-06-02 22:08:14,5.68,,,1,"b""b' The released version does not! bb83ae9 url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,5,2017-06-02 22:08:14,0.43,,1,,"b'b"" at least not the archive generated in github. I didn\'t try pypi""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,6,2017-06-02 22:08:14,1.93,1,,,"b'b"" That\'s weird", I\'ll check our release script. The only supported release builds are on PyPI though," which do have the right versions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,7,2017-06-02 22:08:14,8.13,,1,,"b""b' Looks like I need to report a bug to the Arch package maintainer though. Funnily enough"," I use Arch but have never had a reason to check its Flask package. I wonder if other distros have the same problem.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,8,2017-06-02 22:08:14,40.45,,1,,"b""b' ~Reported to Arch here: url ~ Reported to Arch here: url  Reported to onionshare here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,9,2017-06-02 22:08:14,54.98,,1,,"b'b"" I know for a fact that arch doesn\'t like using pypi to fetch python packages... Either way I think github tags should be identical to the builds. There is no reason why this shouldn\'t be the case""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,reopened,2017-06-03 16:21:00,117.55,1,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,10,2017-06-02 22:08:14,576.42,,1,,"b""b' The tag has been fixed. Arch needs to rebuild their package.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,closed,2017-06-04 01:51:29,570.48,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2355,closed,-,-,-,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,opened,2017-06-21 23:13:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,title,2017-06-21 23:13:35,00:00,,1,,"b""b' Add command to CLI to generate secure random strings'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,body,2017-06-21 23:13:35,00:00,,1,,"b'b"" I wrote command-line utility to generate a secure random string. It can be used", for example," to set Flask\'s  . The command is called with (length defaults to 30).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,1,2017-06-21 23:13:35,910.82,1,,,"b'b\' Needs a test and docs. Should mention something like ""Use the command to get a random value."" in the docs.  I\\\'m curious where you got the pattern you\\\'re using here. Seems weird to work backwards to get a string that\\\'s close to the desired length. I\\\'d rather input the number of random bytes to start with and get a string of whatever length is necessary.  -b", bytes byte length of initial random data   b64encode((n)).decode(\\\'UTF-8\\\')  16 bytes (128 bits) is probably a sufficient default.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,2,2017-06-21 23:13:35,3.17,,1,,"b'b"" I don\'t see the point of using a base64 string considering that most flask config files can contain python code and thus backslash-escaped strings.  Also"," I\'m not sure whether this is really within the scope of flask.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,3,2017-06-21 23:13:35,10.57,,1,,"b""b' Hmm", true, and we already mention how to generate a key as raw bytes in the docs. Although we should probably make it more clear outside the quickstart," in the config and session docs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,4,2017-06-21 23:13:35,4.85,,1,,"b'b"" I would use hexlify instead of base64 to ensure a safer subset of ASCII. Whether asciifying is necessary.. I just wouldn\'t take unnecessary risks.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,5,2017-06-21 23:13:35,4.22,,1,,"b""b' Actually"," looks like I already added an example of how to generate it to the SECRET_KEY docs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,closed,2017-06-24 14:47:12,933.62,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,reopened,2017-06-24 16:14:05,86.88,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,closed,2017-06-24 16:35:38,21.55,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,6,2017-06-21 23:13:35,115.03,,1,,"b'b"" Closing this because I don\'t think we need a built-in command for it. I\'d rather the user understand how the secret is generated"," which is already documented.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2386,closed,-,-,-,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,opened,2017-06-22 04:50:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,title,2017-06-22 04:50:55,00:00,,1,,"b'b"" Flask app doesn\'t run when importing Python-Markdown module""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,body,2017-06-22 04:50:55,00:00,,,1,"b'b"" ### Expected Behavior  Import the Python-Markdown module and run the Flask app   ### Actual Behavior   If I simply comment out the line", the app  just fine.  ### Environment  * Python version: 2.7.12 * Flask version: 0.12 * Werkzeug version: 0.11.2 * Python-Markdown version: 2.6.8  I\'m running on Windows 10 using Git Bash (mintty)," which lets me use instead of for  . However I found that doesn\'t change the outcome.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,1,2017-06-22 04:50:55,95.1,,1,,"b'b"" This doesn\'t seem to be an issue related to Flask"," maybe make sure that you are in the right directory?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,2,2017-06-22 04:50:55,341.35,,1,,"b""b' Not related to Flask"," try to ask on stackoverflow.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,closed,2017-06-22 12:07:22,436.45,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,3,2017-06-22 04:50:55,10.55,,1,,"b""b' Install the latest master instead of the latest release and you will get an error"," which tells you what you did wrong.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,4,2017-06-22 04:50:55,1.63,,1,,"b""b' @kblomqvist did you  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,5,2017-06-22 04:50:55,1.62,1,,,"b""b' my mistake", in the most recent version its not needed anymore," sorry'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,6,2017-06-22 04:50:55,0.08,,1,,"b""b' Nope. I just know that the current release masks the import error with the one given above.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,7,2017-06-22 04:50:55,6.82,,1,,"b""b' @kblomqvist i just made a new virtualenv on fedra", installed markdown and flask and created the file," i see no issue running your script    '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,8,2017-06-22 04:50:55,1.88,1,,,"b""b' i suspect it could be a platform issue on windows someone with a similar box has to take a look'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,reopened,2017-06-22 12:29:57,22.58,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,9,2017-06-22 04:50:55,0.52,,1,,"b""b' @kblomqvist does it happen without any extra imports as well?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,10,2017-06-22 04:50:55,35.1,,1,,"b'b"" It looks like I was a little too sleepy last night. Turns out I was actually running Flask 0.10. Upgrading seems to have made the problem go away. I haven\'t tried running from the latest master as @kblomqvist suggested.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,11,2017-06-22 04:50:55,5.98,,1,,"b""b' very well"," closing as invalid then'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,closed,2017-06-22 13:11:33,41.6,2,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2387,closed,-,-,-,2,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,opened,2017-07-15 08:43:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,title,2017-07-15 08:43:13,00:00,,1,,"b""b' [0.12.x] Remove outdated text on  redirect package'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,body,2017-07-15 08:43:13,00:00,1,,,"b""b' ...from 0.12.x documentation. i.e. here: url I noticed that the live documentation for 0.12.x has this paragraph on the current stable version saying that the . namespace should be used. This is deprecated since 0.11.x right? The development version has that paragraph removed", so I just did the same for this branch.  <!-Commit checklist:  * add tests that fail without the patch * ensure all tests pass with  pytest  * add documentation to the relevant docstrings or pages * add  versionadded  or  versionchanged  directives to relevant docstrings * add a changelog entry if this patch changes code  Tests, coverage, and docs will be run automatically when you submit the pull request," but running them yourself can save time. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,closed,2017-07-15 13:26:37,283.4,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,reopened,2017-07-15 13:27:34,0.95,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,1,2017-07-15 08:43:13,734.75,,,1,"b'b"" Unfortunately", we can\'t roll out new docs without a new release, and I don\'t plan on making any more 0.12 releases.  If you\'d like to look over the current docs to make sure we\'re not mentioning any more," that would be helpful. Thanks for your interest!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,closed,2017-07-16 20:57:58,450.4,1,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,2,2017-07-15 08:43:13,506.42,,,1,"b""b' Alright"," thanks for letting me know.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2417,closed,-,-,-,1,1,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,opened,2017-07-20 07:46:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,title,2017-07-20 07:46:15,00:00,,1,,"b""b' The reloader fails on SyntaxError when using a custom cli entry point'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,body,2017-07-20 07:46:15,00:00,,1,,"b""b' ### Expected Behavior  The reloader should keep working even on SyntaxError when using a custom cli entry point. Obviously it might be diffcult to make it work as is"," so it might require the cli entry point to be written in a certain way for this to work. For example it should be in a separate file that is not modified often during app development and should import the app only from the function. This might just require documenting this more clearly.    ### Actual Behavior  Introucing a SyntaxError into the file will cause the reloader to exit.  ### Environment  * Python version: 2.7.13 * Flask version: 0.12.2 * Werkzeug version: 0.12.2 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,1,2017-07-20 07:46:15,562.6,,1,,"b""b' This is technically not possible (briefly mentioned at the bottom of url  and one of the reasons the command exists.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,closed,2017-07-20 17:08:51,562.6,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,2,2017-07-20 07:46:15,1.93,,1,,"b'b"" If you do use a custom CLI command you might want to either keep the import path towards your cli entrypoint free from anything that is likely to break or simply making your CLI entry point a separate top-level module (  for example). Then you define your CLI commands in that module and import the actual implementation from within the command function. That way the dev server won\'t die if you introduce syntax errors anywhere in your package (except something that causes the cli itself to fail at import time)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,3,2017-07-20 07:46:15,2.9,,1,,"b'b\' That is why I mentioned ""documentation"". I think we ought to at least leave a note about this in the documentation since we do have a section mentioning custom entry points and this limitation is not mentioned there.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,4,2017-07-20 07:46:15,2.12,,1,,"b'b"" That\'s not a custom entry point though", just a custom CLI. If you added the cli as an entry point in ," you could use and get the correct behavior.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,5,2017-07-20 07:46:15,0.95,,1,,"b""b' Reopening as documentation issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,reopened,2017-07-20 17:16:45,7.9,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,6,2017-07-20 07:46:15,1005.68,,,1,"b""b' I actually encounter a custom entry point problem", so I just post it here.  I install the app with this setup:  ## Exception When I run  ," the error below was displayed: Everything is fine when I use or  .  ## Enviroment OS: windows 7 Python version: 2.7.13 Flask version: 0.12.2 Werkzeug version: 0.12.2  Any ideas will be appreciated.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,7,2017-07-20 07:46:15,0.97,,1,,"b""b' Unrelated"," please open a new issue. In your case it tries to run a .exe file as python.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,8,2017-07-20 07:46:15,9.03,,,1,"b""b' OK"," thanks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,9,2017-07-20 07:46:15,2.92,,1,,"b""b' @greyli There is already a separate issue for that url  and a pull request url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,10,2017-07-20 07:46:15,3.0,,,1,"b""b' @segevfiner Got it"," thanks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,11,2017-07-20 07:46:15,904.87,,1,,"b'b"" Maybe I should open a new issue", but want to check here first. I\'m using the command from latest docs, but if there\'s a then the dev server stops reloading.  This means even after the syntax error is fixed," the dev server doesn\'t reload and must be manually restarted.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,12,2017-07-20 07:46:15,1115.2,,1,,"b'b"" @alanhamlett just tried it out", looks like it\'s fixed with Flask master and Werkzeug 0.14. That\'s when using  ," not this issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,closed,2018-01-28 22:48:39,331.9,0,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2424,closed,-,-,-,0,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,opened,2017-11-10 12:31:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,title,2017-11-10 12:31:10,00:00,,1,,"b""b' Exception while opening session causes auto_pop not to be executed on the context'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,body,2017-11-10 12:31:10,00:00,,1,,"b'b"" ### Expected Behavior  auto_pop of the request context should be executed regardless of whether an exception happened after pushing the context(for example", when opening a session).  We\'re using Redis sessions from flask_session:  ### Actual Behavior  The request context is not popped whenever there is a timeout getting the session from Redis.  We can see in following requests the \'g\' object still holds information from the failing request.  In  the context is first pushed and then the session is opened:  But if open_session() fails," then () is not executed. Perhaps () should also be under the  block in ?  This is the exception that triggers the context not to be popped:  ### Environment  * Python version: 2.7.6 * Flask version: 0.10.1 * Werkzeug version: 0.11.11 ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,1,2017-11-10 12:31:10,1302.85,,1,,"b""b' Does anybody agree? Notice this specific issue can also be fixed by catching the timeout in flask_session but I still think Flask should handle this gracefully and clean up the context.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,closed,2017-11-14 10:29:56,1318.77,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,reopened,2017-11-14 10:30:10,0.23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,2,2017-11-10 12:31:10,658.25,,1,,"b""b' Duplicate of #1528"," fixed in #2254. This will be in the next release.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,closed,2018-01-04 21:12:16,642.1,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2517,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,opened,2017-11-14 14:45:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,title,2017-11-14 14:45:10,00:00,,1,,"b'b"" Don\'t create View instances for each request""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,body,2017-11-14 14:45:10,00:00,1,,,"b""b'   creates a function that instantiates the class every request. This seems inefficient for no real gain.   The only argument I could think of for instantiating every request is if the constructor does something different based on the request. That seems like bad design", but any use that I can think of for that could be accomplished with properties instead.  Yes, there are ways to make it less expensive, like generating more ahead of time and passing more arguments, but that is not intuitive," and makes the class just a more complicated view factory.'""",,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,1,2017-11-14 14:45:10,3.4,,,1,"b'b"" I don\'t see how this can safely be changed without risking to break people\'s code if they store stuff on e.g. because they call other methods in the same class and pass some thing via attributes instead of arguments.  Besides that"," instantiating a class is quite cheap...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,2,2017-11-14 14:45:10,1.4,,1,,"b'b"" It\'s not cheap if you do something expensive in the constructor"," which until I dug into the implementation was my intuition of how to use them.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,3,2017-11-14 14:45:10,1.08,,1,,"b""b' Storing things on from other methods is equivalent to storing globals"," which would break for the usual reasons.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,4,2017-11-14 14:45:10,1.18,,1,,"b""b' only if an instance is reused for more than one request. as long as the instance is request-scoped"," storing stuff on self is like setting a local variable in a normal view function'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,5,2017-11-14 14:45:10,3.63,,1,,"b'b"" Ah"," I see. I wonder how common that is? Or at least how many are written in such a way that they would break with a single instance.  I\'d rather change the behavior and put a big warning in the changelog / docs that they should store data on  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,6,2017-11-14 14:45:10,2.98,,1,,"b""b' Maybe add a arg to  "," and issue a deprecation warning that it will change to in the future.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,7,2017-11-14 14:45:10,4.2,,1,,"b""b' If we add this I would rather go for this thing to always be configurable or even better add a base class that is instantiated once. Like this you can pick what suits you more instead of having '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,8,2017-11-14 14:45:10,3.23,,1,,"b'b"" I\'ll have to think on how we could do without copying the code", which would be harder to maintain. But I\'m ok with it in principal," assuming we change the docs to push it as the normal choice and as a more advanced choice.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,9,2017-11-14 14:45:10,286.53,1,,,"b'b"" Isn\'t storing stuff on already discouraged in favor  of storing stuff on  ?  Personally", I\'d rather move people towards a best practice and worry less about breaking their code," as long as we do it in a major version bump (and the upcoming 1.0 feels like an ideal time).  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,10,2017-11-14 14:45:10,1.02,1,,,"b""b'   is something to use across the code (e.g. for stuff like the current user). Putting application data into that is used within a single class seems pretty ugly to me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,11,2017-11-14 14:45:10,373.35,,1,,"b'b"" @davidism  I\'d be okay with this", as View allows you to do stuff like request based DI into a view (e.g. make this instance if X otherwise make that one), plus self is cheap storage if the view class has multiple methods.  This [call here]url  can be modified in the SingletonView to create the instance and store the reference onto the class, something like:   That\'s just a rough draft idea," but something along those lines would not create a new instance for each request and allow the view class to be created for multiple end points.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,12,2017-11-14 14:45:10,388.72,,,1,"b""b' What about object pooling? This way no such code change will be required to benefit from such an improvement.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,13,2017-11-14 14:45:10,282.27,,1,,"b'b"" You\'ll need to explain what you mean.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,14,2017-11-14 14:45:10,608.18,,1,,"b""b' This was done intentionally because people can stuff state on self between functions. It matches the behavior in Django.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,15,2017-11-14 14:45:10,216.48,,1,,"b'b"" We could probably do something with  ", similar to how the Flask object prevents setup methods after handling requests. From my experience on Stack Overflow," the users who would use globals will find a way and insist it\'s ok anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,16,2017-11-14 14:45:10,330.88,1,,,"b""b' @davidism thing is that I have used the fact that self is fresh from request to request myself plenty of times. The allocation of the class instance is insignificant compared to what else happens on request dispatching.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,17,2017-11-14 14:45:10,0.92,,1,,"b""b' Changing this now will break a lot of code since this is also explicitly documented behavior:  > The way this works is that whenever the request is dispatched a new instance of the class is created and the dispatch_request() method is called with the parameters from the URL rule. The class itself is instantiated with the parameters passed to the as_view() function.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,18,2017-11-14 14:45:10,753.57,,1,,"b""b' @mitsuhiko would you be ok with a new SingletonView subclass?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,19,2017-11-14 14:45:10,5.43,,1,,"b""b' @davidism i could imagine a attribute on the view that the generic function internally references. It could be which means it lives for the single request only"," which binds it to the application instance or which makes it an actual singleton that then cannot have state.  Generally the only values I think make sense are and though.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,closed,2019-01-13 19:54:34,309.4,4,15,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,reopened,2019-01-13 20:10:33,15.98,4,15,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2520,open,-,-,-,4,15,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,opened,2017-12-03 07:50:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,title,2017-12-03 07:50:18,00:00,,1,,"b""b' update pycharm instructions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,body,2017-12-03 07:50:18,00:00,,1,,"b""b' Update Pycharm instructions to run via module name #2535  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,1,2017-12-03 07:50:18,835.97,,1,,"b'b"" I ran the through url  and got the size down to 18KB (-67%)without any noticeable decrease in quality. It\'s probably for the best to keep images as small as possible.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,closed,2018-01-04 17:41:29,591.18,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,reopened,2018-01-04 17:45:15,3.77,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,2,2017-12-03 07:50:18,1369.27,,1,,"b""b' I created a smaller (dimensions) image then optimized it with the tinypng link from @Tafkas. I also reworded some of the docs to reflect the current CLI.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,closed,2018-01-04 20:56:38,191.38,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2541,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,opened,2017-12-11 17:54:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,title,2017-12-11 17:54:11,00:00,,1,,"b'b\' "" deprecated"" warning during jsonify()\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,body,2017-12-11 17:54:11,00:00,,1,,"b""b' It seems is deprecated. Getting warnings here... How do we fix this? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,1,2017-12-11 17:54:11,4.07,,1,,"b""b' That depends on what you are using it for. And since this is not a place to ask for help but an issue tracker"," please ask this question in the #pocoo IRC channel on freenode or on Stack Overflow.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,closed,2017-12-11 17:58:47,4.6,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,2,2017-12-11 17:54:11,6.53,1,,,"b'b"" @ThiefMaster Maybe I didn\'t make myself clear here. This is an issue with Flask. It should not be accessing . So this needs fixing so that Flask does not access .  Or am I totally misunderstanding?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,reopened,2017-12-11 18:11:08,12.35,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,3,2017-12-11 17:54:11,7.33,,1,,"b'b"" Oh indeed", I didn\'t notice it\'s coming from within Flask. As a workaround on your side," simply disable or ignore the warning for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,4,2017-12-11 17:54:11,5.58,,1,,"b""b' Master already removed this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,closed,2017-12-11 18:17:42,6.57,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,5,2017-12-11 17:54:11,45.3,,,1,"b""b' Sweet"," thank you!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,6,2017-12-11 17:54:11,142.43,1,,,"b""b'  Still getting this when using jsonify with flask"," with python 3.6 :(  Anyone having the same issue?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,7,2017-12-11 17:54:11,837.72,,1,,"b""b' @KoJoVe this was fixed in master but there was no release since. Until next Flask version is released"," you may disable as a workaround as suggested above.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,8,2017-12-11 17:54:11,97.17,,,1,"b""b' Oh"," I did not understood that there was no releases since then. Thank you very much!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2549,closed,-,-,-,2,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,opened,2017-12-14 06:38:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,title,2017-12-14 06:38:59,00:00,,1,,"b""b' Docs: Add missing backslash'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,body,2017-12-14 06:38:59,00:00,,,1,"b""b'   <!-Commit checklist:  * add tests that fail without the patch * ensure all tests pass with  pytest  * add documentation to the relevant docstrings or pages * add  versionadded  or  versionchanged  directives to relevant docstrings * add a changelog entry if this patch changes code  Tests", coverage, and docs will be run automatically when you submit the pull request," but running them yourself can save time. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,1,2017-12-14 06:38:59,389.02,1,,,"b'b"" Paths only have one backslash"," you\'re confusing that with a Python string.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,closed,2017-12-14 13:08:00,389.02,1,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,2,2017-12-14 06:38:59,20.15,,1,,"b""b' @davidism The backslashes added are used to escape the origin one.  Check [here]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,3,2017-12-14 06:38:59,5.02,,1,,"b'b"" OK"," please explain why you\'re making a change like that in the future.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,reopened,2017-12-14 13:33:10,25.17,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,closed,2017-12-14 13:33:33,0.38,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,4,2017-12-14 06:38:59,0.68,1,,,"b""b' Okay"," sorry about that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2553,closed,-,-,-,2,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,opened,2018-04-15 20:33:54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,title,2018-04-15 20:33:54,00:00,,1,,"b""b' Ability to check if client connection is still open'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,body,2018-04-15 20:33:54,00:00,,,1,"b""b' For things like server sent events"," it would be really great to have an easy option to check if the client connection of a streamed request is still open.  Something like this: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,1,2018-04-15 20:33:54,1.62,,1,,"b""b' Does the WSGI protocol even expose this information?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,2,2018-04-15 20:33:54,3.45,,1,,"b""b' Maybe this helps? url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,3,2018-04-15 20:33:54,10.83,,1,,"b""b' I tried using   But the method of the generator is not called on client disconnect.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,4,2018-04-15 20:33:54,224.72,,1,,"b'b"" @MaxNoe My technique for detecting gone clients in streaming handlers is to watch the I/O operations that you do in your handler for errors. If you write to a socket that has been closed from the other side", the operation will raise an  , typically with an value of  ," or sometimes  . Isn\'t that sufficient for your needs? I don\'t think there is a way to detect a closed socket without writing or reading on it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,5,2018-04-15 20:33:54,56.13,,1,,"b'b"" In the example i\'ve given"," I don\'t get any kind of exception""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,closed,2018-04-16 01:30:40,296.77,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,reopened,2018-04-16 01:30:44,0.07,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,6,2018-04-15 20:33:54,15.13,,1,,"b""b' Well", that is not what I see here. I adapted your example code to a standalone app as follows:   I connect to and the lines start coming, both on the browser and on the console. If I close the browser, a second or two later the lines stop printing in the console, which means that Flask caught the exception and cancelled the generator.  As I said above, the closed socket is detected when a write is done on the socket. Flask is writing the lines that you yield," and as far as I can see it is handling the closing of the socket in the correct way.'""",,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,7,2018-04-15 20:33:54,12.4,,1,,"b""b' One more thing. If what you are asking is to have a way to be notified when the generator is stopped"," then you can catch in your function. Here is my above example modified to be notified when the client went away: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,8,2018-04-15 20:33:54,26.72,,1,,"b""b' I think I understand now. I try streaming a log file. So as long as not a new line from the logfile comes in"," my generator does not try to stream a new result.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,9,2018-04-15 20:33:54,8.87,1,,,"b""b' I see. So your generator must be blocking on the line for a while. Unfortunately there is nothing you can do to escape that blocking call when the client goes away. I would ensure your log file gets updated often"," maybe a heartbeat log line that prevents your generator from ever blocking for too long on that read call.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,10,2018-04-15 20:33:54,28.4,,1,,"b""b' The  does not block"," it immediately returns an empty string. I could send an empty sse.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,11,2018-04-15 20:33:54,5.7,1,,,"b""b' Ok", i moved the check for the emptiness from the server to the client (basically sending an empty sse every second) and it works nicely now.  However, if there is a way comparable to in php," that would be really helpful.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,12,2018-04-15 20:33:54,4.57,,1,,"b""b' @MaxNoe read the first user note in the [connection_status documentation]url  That matches what I told you above", without writing on the connection php is also unable to detect a closed socket. The difference is that php appears to record the closed state in this variable so that the application can check it," while Flask closes the generator. Add a  for as I showed you and you will have a notification on socket closed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,13,2018-04-15 20:33:54,91.4,,,1,"b""b' Thanks for the help and  explanations!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,closed,2018-04-16 04:43:50,193.1,2,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2702,closed,-,-,-,2,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,opened,2018-04-20 19:49:49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,title,2018-04-20 19:49:49,00:00,,1,,"b""b' Support for more environment variables for Flask CLI'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,body,2018-04-20 19:49:49,00:00,,,1,"b""b' It would be great to add support for more environment variables for Flask CLI. For example", should run the app in port 8080 instead of default. Thus," we can have a single .flaskenv file that sets our environment and just without further arguments.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,1,2018-04-20 19:49:49,19.85,,1,,"b'b"" Click is already configured to do this"," you\'re just missing the command name:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,closed,2018-04-20 20:09:40,19.85,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,2,2018-04-20 19:49:49,1.5,,1,,"b'b"" Looks like it\'s not documented though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,reopened,2018-04-20 20:11:10,1.5,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,closed,2018-04-20 20:25:28,14.3,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2713,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,opened,2018-04-27 03:17:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,title,2018-04-27 03:17:59,00:00,,1,,"b""b' New tuple requirement for response is restrictive'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,body,2018-04-27 03:17:59,00:00,,1,,"b""b'  I had written a simple wrapper to take all the response primitives", and jsonify them before returning to client like so:  Then i set  to the class above. However, in flask 1.0 , the routes are required to return a tuple.  This means if I have a route like this:  The client receives a valid json object. But if I do this:   Flask will throw this error: > TypeError: The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body," headers)'""",,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,1,2018-04-27 03:17:59,58.82,,1,,"b""b' That change is made a year ago. You need to wrap the response yourself. Before the change", Flask detect it in this way:   After the change," it is:   So the list you returned is going to behave like this. It is the right response.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,closed,2018-04-27 04:16:48,58.82,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,2,2018-04-27 03:17:59,188.92,,1,,"b'b"" I don\'t think that\'s a solution. His goal is to apply a custom function on everything returned from a view function to convert it to JSON.  I think the solution here is to not override but rather or of the Flask class.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,reopened,2018-04-27 08:07:02,230.23,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,3,2018-04-27 03:17:59,289.8,,,1,"b""b' I just tested returning a list like in my example in flask .12 and it works just fine.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,4,2018-04-27 03:17:59,21.28,,,1,"b""b' Yes"," it should work fine in 0.12. There is nothing wrong. What you need is a solution to get the same result as before. Try @ThiefMaster \\xe2\\x80\\x98s solution.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,5,2018-04-27 03:17:59,0.15,,,1,"b""b' i have whipped up a hack that seems to work ", but I would like to know if this is a correct solution.  Also," It would be nice if i could override the ResponseWrapper on a blueprint basis instead of my entire app.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,6,2018-04-27 03:17:59,1.35,,1,,"b'b"" No"," don\'t monkeypatch. Subclass instead: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,7,2018-04-27 03:17:59,4.43,,1,,"b""b' along the same thread"," is there a way to have such overriding capability for blueprints also? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,8,2018-04-27 03:17:59,0.92,,1,,"b""b' Blueprints do not have their own  ", since they just add stuff to the app. But yes," you can subclass e.g. or as well..'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,closed,2018-04-27 12:47:00,279.97,0,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,9,2018-04-27 03:17:59,272.97,,1,,"b""b' Eh", decided to fix this," see #2737'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2726,closed,-,-,-,0,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,opened,2018-04-28 16:37:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,title,2018-04-28 16:37:34,00:00,,1,,"b""b' Better exception handling when env vars are missing for flask CLI'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,body,2018-04-28 16:37:34,00:00,1,,,"b""b' ### Expected Behavior  As there is the support for the app", when running CLI without providing the proper environment variables we must see a better warning instead of raw exception.  Tell us what should happen.  **we should see a better warning or message pointing to the problem**  ### Actual Behavior  Tell us what happens instead.  **we see traceback before the help message**   The same happens to   The could include   ### Suggestion  We could check the existence of envvar before running any of the commands in the Group Cli," if FLASK_APP does not exist the dispatch of commands never happens. ### Environment  * Python version: 3.6.0 * Flask version: Flask==1.0 * Werkzeug version: Werkzeug==0.14.1 * Click: click==6.7  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,1,2018-04-28 16:37:34,1.1,,1,,"b""b' * I can implement that and send a PR"," just want to know if the idea is acceptable'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,2,2018-04-28 16:37:34,502.43,,,1,"b""b' Anything that improves help messages is great.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,closed,2019-01-13 19:54:32,196.97,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,reopened,2019-01-13 20:09:55,15.38,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,3,2018-04-28 16:37:34,182.85,,1,,"b""b' Looks better in flask 1.0.2"," so maybe we can close this?  with a option   without any options: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2741,open,-,-,-,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,opened,2018-05-08 16:08:28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,title,2018-05-08 16:08:28,00:00,,1,,"b'b\' docs: installation: Fix ""now you can continue"" link\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,body,2018-05-08 16:08:28,00:00,,1,,"b""b' At the end of the installation docs we currently point the reader back into the middle of the installation doc itself", which is probably not very helpful to the reader since they just finished reading that.  Instead," point to the next section in the docs (Quickstart).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,1,2018-05-08 16:08:28,7.55,,1,,"b""b' The ref is correct. Users get to that section by clicking a link earlier in the page"," then the link at the bottom of the section takes them back to continue the instructions.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,closed,2018-05-08 16:16:01,7.55,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,2,2018-05-08 16:08:28,4.6,,,1,"b""b' Aah I see now.  Hmmm...  I just reflexively scrolled to the bottom of the page skipping over the Windows stuff.  Perhaps a separate link to Quickstart would make sense anyways.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,reopened,2018-05-08 16:21:04,5.05,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,3,2018-05-08 16:08:28,0.78,,1,,"b'b\' I reopened. Add a link to the end of the ""Install Flask"" section instead.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,4,2018-05-08 16:08:28,129.7,,1,,"b""b'  Done'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,closed,2018-05-09 03:11:48,650.73,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2764,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,opened,2018-05-15 02:17:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,title,2018-05-15 02:17:23,00:00,,1,,"b""b' Add Blueprint level cli registration-#1357'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,body,2018-05-15 02:17:23,00:00,,1,,"b'b"" So", this tries to address the ability to easily add commands to blueprints, and let them get stacked into the applications cli group in one of three ways.  The default is nested, with name taken from the bp name, giving you  :  bp = Blueprint(\'user\', __name__)   (\'create\')  Optionally you can override that grouping name, giving you  :  bp = Blueprint(\'user\', __name__, cli_group=\'librarian\')   (\'create\')  Or, you can specify as the group, which applies it directly to the root app\'s cli group giving  :  bp = Blueprint(\'user\', __name__," cli_group=None)   (\'add_user\')  The tests show each of these options.  Let me know your thoughts and I\'ll add the documentation changes required if everyone think\'s it\'s useful to proceed.  can also be specified when registering on the app: to override the bp level choice.  closes #1357 ""'",,,,,,,,,,,,,,,,,,,
flask,2784,closed,1,2018-05-15 02:17:23,312.32,1,,,"b""b' Please keep the first line of your commit messages shorter than 51 chars (see url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,closed,2019-01-13 19:54:29,1057.1,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,reopened,2019-01-13 20:09:05,14.6,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,2,2018-05-15 02:17:23,633.13,,1,,"b'b"" Well", I\'m a year slow," but I\'m putting this in 1.1.0. :tada: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,3,2018-05-15 02:17:23,221.93,,1,,"b'b"" @doobeh I force pushed to get this in line with the latest changes and added a changelog. You\'re going to have to reset your local master branch after this is merged. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,closed,2019-05-24 21:47:49,98.73,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,4,2018-05-15 02:17:23,12.62,,,1,"b'b"" Thanks @davidism!\\xe2\\x80\\x94 I\'ll work on getting the documentation updates put together shortly to go along with it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2784,closed,-,-,-,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,opened,2018-06-06 11:16:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,title,2018-06-06 11:16:34,00:00,,1,,"b""b' Importing from PWD using fails in development environment'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,body,2018-06-06 11:16:34,00:00,,1,,"b""b' ### Expected Behavior  We have a Flask app defined in a file which sits inside a folder", say  :   The file imports from the top-level directory, in this case   The empty file exists in the directory  .  Using the default environment (production), we can run the Flask app by invoking the module from the top-level directory, using   The module is imported correctly and the app runs.   ### Actual Behavior  If we try to use the development environment, setting the variable, it fails.    ### Environment  * Python version:  Python 2.7.12 (default, Nov 20 2017," 18:23:56)  [GCC 5.4.0 20160609] on linux2  * package versions:   click==6.7   Flask==1.0.2   itsdangerous==0.24   Jinja2==2.10   MarkupSafe==1.0   Werkzeug==0.14.1 '""",,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,1,2018-06-06 11:16:34,1199.4,1,,,"b'b"" Close it since it is not a bug of Flask.  It seems a misunderstanding of Python PATH. I don\'t know where you put your according to your description. It is better to ask your question on StackOverflow with a minimal example.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,closed,2018-06-07 07:15:58,1199.4,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,2,2018-06-06 11:16:34,62.13,,,1,"b'b"" With all due respect", it seems like _you_ haven\'t understood the issue.  I do understand how PATH works, and I did say where  is located.  I also said that starting the Flask server this way works for the production environment, but not for the development environment. So clearly, this is related to Flask rather than be a general issue of Python imports. But to be absolutely clear, if you don\'t have the call to in the file  , running a script in this way works perfectly well," with the module being imported correctly.  I would be grateful if you could look at this issue again and try to fully understand what is reported about the behavior of the Flask development server.""'",,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,3,2018-06-06 11:16:34,24.77,1,,,"b'b""  I\'m sorry"," but I don\'t fully understand your  . Is it or  ? I can only guess.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,reopened,2018-06-07 08:44:31,88.55,2,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,4,2018-06-06 11:16:34,4.22,,1,,"b""b' It is a werkzeug reloader issue.  Maybe related to #461'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,5,2018-06-06 11:16:34,61.38,,,1,"b""b' Thanks! Trying to understand exactly what that issue and #1246 imply for this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,closed,2018-06-07 11:09:23,144.87,2,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2817,closed,-,-,-,2,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,opened,2018-06-16 14:39:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,title,2018-06-16 14:39:26,00:00,,1,,"b""b' Documentation for testing need to be updated'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,body,2018-06-16 14:39:26,00:00,,1,,"b""b' The chapter [Testing Flask Applications]url in docs need to be updated to compatible with the rewritten flaskr application.  See #2831 for more info.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,1,2018-06-16 14:39:26,11.35,,1,,"b""b' Is there someone working on it? Can I work / help on it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,2,2018-06-16 14:39:26,9.57,,,1,"b'b"" I\'m happy to review PRs on this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,3,2018-06-16 14:39:26,1068.15,,,1,"b""b' @davidism Would be glad to pick this up. Should I simplify the examples as the tests are much larger now? (i.e: not go through every single one"," but just the important  ones from the old doc)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,closed,2019-06-01 13:38:49,1379.38,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,reopened,2019-06-01 13:39:55,1.1,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,4,2018-06-16 14:39:26,207.07,,,1,"b""b' Is anyone working on this? I recently picked up Flask and pytest would love to help out in the issue :smile: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,5,2018-06-16 14:39:26,303.87,,,1,"b""b' I personally think that the documentation related to testing a flask application is too complicated and not beginner friendly. I would love to rewrite this an make it a bit simple for beginners. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2833,open,-,-,-,0,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,opened,2018-06-20 13:41:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,title,2018-06-20 13:41:43,00:00,,1,,"b""b' Logging example fails outside request context'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,body,2018-06-20 13:41:43,00:00,,1,,"b""b' ### Expected Behavior  should run server as well as   ### Actual Behavior  I think that the problem is in:   init_logger() called before app = Flask() '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,1,2018-06-20 13:41:43,1.23,,1,,"b""b' From where does the code run? If it runs outside a request context"," add a check for and only access if you have one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,2,2018-06-20 13:41:43,6.85,,1,,"b""b' Please use Stack Overflow for questions about your own code. This tracker is for issues related to the project itself. Be sure to include a [minimal", complete," and verifiable example]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,closed,2018-06-20 13:49:49,8.1,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,3,2018-06-20 13:41:43,0.15,,1,,"b""b' url  Grabbed from there'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,4,2018-06-20 13:41:43,0.85,,1,,"b""b' Wut? @davidism  Is this not complete?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,5,2018-06-20 13:41:43,0.75,,1,,"b""b' I think this might actually be a valid issue if Flask logging code runs outside a request context and the code from that page in the docs accesses the context unconditionally.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,reopened,2018-06-20 13:51:33,1.73,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,6,2018-06-20 13:41:43,0.7,,1,,"b""b' So why then it works well in development mode?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,7,2018-06-20 13:41:43,3.6,,,1,"b'b"" The docs are just an example of injecting information. It\'s an optional example", it\'s not part of the default logging. It\'s not designed to be bulletproof. If you want to update the docs to add around the injection, that would be fine. You\'ll also need to inject default values when not in a request so the formatter still works.  It\'s not working in development mode either," development mode doesn\'t magically make a request context available outside a request.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,8,2018-06-20 13:41:43,2.12,1,,,"b'b"" the key word is \'magically\' Ok then", am I right that there is no solid way to inject request in logger," rather than append it to message manually?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,9,2018-06-20 13:41:43,1.07,,,1,"b'b"" sure"," just set them to an empty string or if there\'s no context!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,10,2018-06-20 13:41:43,1.13,,,1,"b""b' Ok thanks. btw: this is a logger result in dev mode:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,11,2018-06-20 13:41:43,0.95,,1,,"b'b"" I think you get the error in prod mode because the output on startup is different depending on . Stuff logged during actual requests has a context of course"," so that doesn\'t fail.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,closed,2019-06-01 13:38:41,1427.13,1,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2838,closed,-,-,-,1,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,opened,2018-07-18 12:18:21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,title,2018-07-18 12:18:21,00:00,,1,,"b""b' DispatcherMiddleware with different loggers per app in flask 1.0'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,body,2018-07-18 12:18:21,00:00,,1,,"b""b' After upgrading to flask 1.0 logging from different apps using DispatcherMiddleware", each log emitted is written to all handlers in the different apps. I assume this caused by always having the name  , maybe?  Here is a example:  Run with  And then make a request to / and /app2/. Each error log will be written in both logfiles.  ### Environment  * Python version: 3.6.5 * Flask version: 1.0.2 * Werkzeug version: 0.14.1  My actual app is using with blueprints with the same behaviour," but I assume it the same issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,1,2018-07-18 12:18:21,520.52,,1,,"b'b"" It logs twice because you\'re adding two handlers to the same logger. Add one handler to the logger instead.  To get different names"," override  :   Or see the docs on logging for how to inject extra information into log records. In your case you would inject  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,closed,2018-07-19 20:58:52,520.52,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,2,2018-07-18 12:18:21,618.77,,1,,"b'b"" Thanks for the workaround. I can see this is not really a bug per se just a breaking change for my setup :)", but while I can see from PR 2436 that was removed to simply things. However wouldn\'t it make sense to at least be able to override the default in the constructor like which can then be used by ? Because another unfortunate side effect I\'ve encountered, is that if you add a Sentry error handler to the logging, the Sentry interface groups errors by so if you have a bunch of flask applications," everything is now simply called  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,reopened,2018-08-06 14:25:37,1046.75,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,3,2018-07-18 12:18:21,449.42,1,,,"b'b"" Since we now use the prefix for logger names", it\'s easy to autoconfigure a handler just for Flask, rather than interfering with other libraries by messing with the root logger, which was part of the whole original problem.  Multiple apps was an unforseen case," and I understand how this can be inconvenient. I\'m hesitant to make this configurable again. Perhaps a compromise would be so that it\'s unique but still under the namespace.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,4,2018-07-18 12:18:21,22.63,,,1,"b'b"" Or even just hard code using instead of  . If we can be reasonably sure that it won\'t cause issues like the previous implementation"," I\'m fine with changing it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,5,2018-07-18 12:18:21,126.43,,1,,"b'b""  Here"," shouldn\'t the apps be instantiated with the sub-classed  to use the overridden logger property?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,closed,2019-07-02 00:42:51,617.23,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2866,closed,-,-,-,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,opened,2018-09-21 13:55:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,title,2018-09-21 13:55:19,00:00,,1,,"b""b' Docs: fix some typos in '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,body,2018-09-21 13:55:19,00:00,,1,,"b""b' Fix some typos in  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,closed,2018-09-21 14:09:34,14.25,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,reopened,2018-09-21 14:09:37,0.05,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,1,2018-09-21 13:55:19,37.97,,1,,"b""b' Please make docs changes against 1.0-maintenance (unless they have to do with new features). Otherwise the changes will only appear in the dev version of the docs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,2,2018-09-21 13:55:19,23.83,,1,,"b""b' @davidism"," do you mean that document related PR should be based on the  1.0-maintenance  branch?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,3,2018-09-21 13:55:19,0.57,,1,,"b""b' Yes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,closed,2018-09-21 15:09:45,60.13,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,reopened,2018-09-21 15:11:37,1.87,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,4,2018-09-21 13:55:19,18.4,,1,,"b'b"" There are some docs changes in the dev version that are also useful for  1.0-maintenance .  If these commits aren\'t merged into  1.0-maintenance "," the next change will be cumbersome.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,5,2018-09-21 13:55:19,17.12,,1,,"b'b"" I know"," I\'m working on cherry picking them.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,6,2018-09-21 13:55:19,3.15,,,1,"b""b' Thank you for your hard work!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,closed,2019-01-06 22:51:55,460.3,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,2918,closed,-,-,-,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,opened,2018-12-16 11:49:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,title,2018-12-16 11:49:15,00:00,,1,,"b""b' TypeError: __name__ must be set to a string object '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,body,2018-12-16 11:49:15,00:00,,,1,"b'b\' ### Expected Behavior I wanna write code capable of python3. So i add ""from future import unicode_literals"" on the top of ", i use MethodView to build rest api in the same file. I wish it could work fine.  Here is an example:  ### Actual Behavior  However, when i run the web app, it thows the error,"  I soon realize that because i use the ""from future import unicode_literals"" in py2 so the function name is unicode type", but the name of a function should be string  i wonder is it possible to change the source code in the  and add the if-then workflow to convert name of function from unicode type into string type to handle the situation .  ### Environment python2.7 Flask==1.0.2 Werkzeug==0.14.1 \'',,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,1,2018-12-16 11:49:15,954.67,,,1,"b""b' Thanks for reporting on this! You can fix it temporarily by using or  "," for example: @davidism Could we just add this under [: L102]url  and L91: Or this:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,closed,2018-12-26 10:55:03,1385.8,0,1,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,reopened,2018-12-26 13:22:53,147.83,0,1,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,2,2018-12-16 11:49:15,804.85,,1,,"b'b"" This is one of the (many) downsides of using the future. It is not something we support. You\'ll need to be deliberate about the types you\'re passing in Python 2.  doesn\'t make your code any more capable of running on Python 3", it just makes all strings Unicode," which is not supported consistently on Python 2 in general.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,closed,2019-01-06 17:08:46,225.88,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3033,closed,-,-,-,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,opened,2019-01-12 17:12:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,title,2019-01-12 17:12:15,00:00,,1,,"b""b' Add link to Render deployment'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,body,2019-01-12 17:12:15,00:00,,,1,"b""b' Add a link to deployment instructions for [Render]url  I noticed the Heroku instructions actually link to a Django project. I created a Flask guide [here]url  which is linked in this PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,closed,2019-01-13 19:54:20,162.08,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,reopened,2019-01-13 20:09:32,15.2,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,1,2019-01-12 17:12:15,1271.15,,,1,"b'b"" First", cool project and thanks for adding docs for Flask to it.  However, I don\'t want this to become an ever updating list of people\'s favorite services, it\'s meant to give an idea of what\'s possible, not be comprehensive. I may change this whole section eventually. Not sure if I\'ll merge this yet, but you\'ll need to put it at the bottom of the list. Also," rebase it onto 1.0-maintenance.""'",,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,2,2019-01-12 17:12:15,137.15,,,1,"b""b' Makes sense. Will do!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,3,2019-01-12 17:12:15,125.6,,1,,"b""b' @davidism I rebased onto 1.0-maintenance and changed the base branch as well. Does everything look okay?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,4,2019-01-12 17:12:15,383.02,,1,,"b""b' Bumping this up.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,5,2019-01-12 17:12:15,1369.63,,1,,"b""b' In case it helps", and as additional context," [Gatsby]url  and [Create React App]url  have both added Render as an official deployment options. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,6,2019-01-12 17:12:15,970.48,,,1,"b'b"" At this time I don\'t plan on adding more services to this list. Thanks for working on it though! I\'m planning to refresh the deploy docs in general"," and will keep you in mind when considering how I want to add 3rd-party services in the future.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,closed,2019-06-21 16:09:17,1199.75,0,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3073,closed,-,-,-,0,4,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,opened,2019-07-01 14:19:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,title,2019-07-01 14:19:39,00:00,,1,,"b'b"" [tutorial] flaskr\'s pytest does not pass due to test_#test_get_close_db fail.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,body,2019-07-01 14:19:39,00:00,,,1,"b""b' #test_get_close_db does not pass.  ### Actual Behavior  ![image]url ### Environment  * Python version: 3.7.3 * Flask version: 1.0.3 * Werkzeug version: 0.15.4 * pytest: 5.0.0'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,1,2019-07-01 14:19:39,7.2,,1,,"b""b' I have a fix for this in #3278'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,2,2019-07-01 14:19:39,10.92,,,1,"b""b' @asottile  Great. Closed this issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,closed,2019-07-01 14:37:46,18.12,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,reopened,2019-07-01 15:02:26,24.67,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,closed,2019-07-01 17:57:20,174.9,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,3,2019-07-01 14:19:39,488.88,,1,,"b""b' I think this can be fixed using the getrepr() method.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,4,2019-07-01 14:19:39,493.68,,1,,"b'b"" here\'s how it was fixed in #3278: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flask,3277,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
