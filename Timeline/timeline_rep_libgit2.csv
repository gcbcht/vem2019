REPOSITORY,ISSUE_ID,STATUS,EVENT,CREATED_AT,TIME DURATION,NEGATIVE,NEUTRAL,POSITIVE,MSG,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,opened,2011-04-05 17:36:51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,title,2011-04-05 17:36:51,00:00,,1,,"b""b' fix git_treebuilder_insert probrem.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,body,2011-04-05 17:36:51,00:00,,,1,"b'b"" couldn\'t add new entry when inserting new one with  . by the way", does zlib settings something diffrence?original tree object started 0x0178,  but started 0x9c78.. these files can read correctry so its not a proprem. just share this info :D Cheers,"Shuhei""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,1,2011-04-05 17:36:51,26.52,,,1,"b""b' Nice spotting"," thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,closed,2011-04-08 18:03:22,26.52,0,1,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,2,2011-04-05 17:36:51,0.9,,1,,"b'b"" Hm. Looking into the different SHA1", it shouldn\'t happen. I think it\'s because the ordering is different for the old and the new SHA1 OIDS," but I don\'t know which one is the proper one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,reopened,2011-04-08 18:04:22,1.0,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,3,2011-04-05 17:36:51,85.9,,,1,"b'b"" Yo", fixed the issue with the different trees. It turns out we were using a higher compression level than we used to," so the compressed object was different. I\'ve rolled back to  . Cheerios!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,closed,2011-04-10 19:30:10,85.8,0,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,4,2011-04-05 17:36:51,243.18,,,1,"b""b' i got it. thank you for your help!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,121,closed,-,-,-,0,2,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,opened,2011-04-07 17:36:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,title,2011-04-07 17:36:22,00:00,,1,,"b""b' git_tree_entry_byname fails apparently because of wrong sort order (in some cases)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,body,2011-04-07 17:36:22,00:00,,1,,b'b\' git_tree_entry_byname returns NULL when it should not in some specific cases. Apparentlythis is because the sort order of the tree is wrong, for instance with libgit2, within the \\\'include\\\' folder, the entries are ordered this way: While it should be the inverse," first the shortest string. And then bsearch fails (in function git_vector_bsearch2). Below a test program that reproduces the problem. It prints ""git2.h not found"" while it should print ""git2.h found"".  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,1,2011-04-07 17:36:22,1063.08,,,1,"b""b' I found the problem: git_ uses 2 different algos to sort the entries: entry_search_cmp and entry_sort_cmpentry_search_cmp makes an alphabetic sort", but entry_sort_cmp is more sophisticated (directories and files are not sorted the same way). So i see 3 solutions:1We need to sort the list alphabetically before make the search (problem: git_vector_bsearch2 makes a sort)2We split entry_search_cmp into 2 functions: entry_search_file_cmp and entry_search_dir_cmp, we use gitfo_cmp_path and we search for a file and after for a directory.3Maybe we can always (everywhere) use an alphabetic sort???4An other better solution," ... I made this patch: url  to test the solution and it works fine with git_tree_entry_byname. But it is not very clean (i change a private member (_cmp)) and incomplete (we must find a solution for all bsearch2 in the code). '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,2,2011-04-07 17:36:22,399.42,,,1,"b'b"" also i encounterd this problem. i\'","m looking forward to fix that :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,3,2011-04-07 17:36:22,257.53,,1,,"b""b' I stumbled onto this also. I created a test case for this before kind souls pointed me towards this issue. Is anybody working on this? The fix in @8ee19a25ab4b54ff583bb46093610db0f53d2ab5 corrects my test case @8af9b61663dbee227620f02a53260524c24de779. That also fixes my original failing case in haskell.  There is still one case using insert"," remove and entry_byname which fails even with versmisses commit -or then it is the late hour... if it turns out to be a real failure I turn it in to a test case for libgit2 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,4,2011-04-07 17:36:22,1204.93,,1,,"b""b' yes the other test failure I got is a result of the same problem but now with git_treebuilder_remove (test @30c1d261272700481af8be466a7151906b05c6a6).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,5,2011-04-07 17:36:22,1165.38,,1,,"b""b' I had totally missed this. Fixing asap.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,6,2011-04-07 17:36:22,118.77,,1,,"b'b"" What\'s the status of this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,7,2011-04-07 17:36:22,26.58,1,,,"b""b' Last I heard about this was that tanoku was going to fix this asap. Idid not start work on it due to this. But maybe I should have as Iseem to recall that the problem is still present in 0.13 release andit really bothers me. Sakari On Tue", Jul 12, 2011 at 6:45 PM," carlosmnreply@wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,8,2011-04-07 17:36:22,487.12,,1,,"b""b' Working on this now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,closed,2011-07-13 01:37:59,481.62,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,9,2011-04-07 17:36:22,80.35,,,1,"b""b' Paging everyone: does this fix make sense at all? I think I have trascended reality and the bytes no longer make sense to me. 761aa2aa35d5427b8b22d342ef2116bc22252648'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,10,2011-04-07 17:36:22,880.4,,1,,"b""b' Not yet fixed. A user has found a broken case with the Linux kernel Git repo"," see url  I have translated it to C. Here is the test program:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,11,2011-04-07 17:36:22,106.58,,1,,b'b\' I had a little time this weekend to look for the cause of the bug. It seems to be because the assumption in 761aa2a, that the path we\\\'re searching for is of the same kind () as the tree entry we\\\'re comparing with," will cause different orderings when searching vs. when sorting. For example when comparing the directory ""i2c"" with the file ""i2c.h"" in the sort phase"," git_futils_cmp_path will know the first is a directory and treat it as if it was named ""i2c/"" and so produce this ordering:but when comparing the name we\\\'re searching for",i2c," with the file ""i2c.h"" in the search phase"," it will assume ""i2c"" is _not_ a directory and so order it as:so the binary search will fail. I guess that when sorting the tree for the purpose of doing a bsearch", it should always be sorted in plain alphabetic order, but the special treatment for directories seems to be required in other cases to follow the behaviour of Git exactly (see 35786cb). \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,12,2011-04-07 17:36:22,1032.18,1,,,"b'b"" I\'m sorry but this is not yet fixed and must be reopened"," right?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,reopened,2011-09-06 11:36:45,598.77,2,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,13,2011-04-07 17:36:22,18.27,1,,,"b""b' Apologies"," I missed this. Looking into it (again)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,14,2011-04-07 17:36:22,0.37,,1,,"b'b"" If the bug still exists", then yes," it should be reopened. Is there any reason why we can\'t use \'s sorting function everywhere?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,15,2011-04-07 17:36:22,114.87,,1,,"b""b' I think there are only 2 solutions1. On every search we must know what we are searching for a blob", or a tree (also a commit can be in tree in case of submodules)2. We always performing 2 searches for tree and for blob. Also," we can optimize it like one search with some split on the end. An assumption  to use entry->attr in comparison in entry_search_cmp is wrong'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,16,2011-04-07 17:36:22,1039.48,,1,,"b'b"" Any progress on this? I\'m kindof blocked on this issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,17,2011-04-07 17:36:22,269.23,,1,,"b'b"" I\'ll jump into this this afternoon again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,18,2011-04-07 17:36:22,79.08,,1,,"b""b' How was the jump? :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,19,2011-04-07 17:36:22,663.07,,1,,"b'b"" Alright", after some more thought, I decided to go with @itroot\'s first solution: letting the library know what kind of object we\'re looking for. Instead of adding a explicit argument to the API, I\'ve changed the search callback internally: if you\'re looking for an entry called  , and that entry is a folder, then just call  . That should cut it. I\'m looking for some feedback, i.e. cases where you don\'t know beforehand if the entry you\'re looking for is a folder or a normal file. I think this would be extremely rare, and the only way to handle this would be the two binary searches, or probably a single linear search," which at first strikes me as more optimal on 90% of the cases...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,20,2011-04-07 17:36:22,68.87,,1,,"b'b"" I don\'t think that\'s so rare. I have that scenario right now and my workaround for this bug does a linear search when git_tree_entry_byname() doesn\'t find anything.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,21,2011-04-07 17:36:22,0.85,,1,,"b""b' Can you give me some background on what are you trying to accomplish?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,22,2011-04-07 17:36:22,3.27,,1,,"b'b"" I\'m writing an scm-independent library that uses libgit and the path strings are provided by the caller. My api does not require the user to supply an entity type.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,23,2011-04-07 17:36:22,488.55,,1,,"b'b"" Use case", Git: That\'s the input provided by the user, an it must work whether is a directory or a file. The question is whether libgi2 should provide a function for this or whether it should be implemented at a higher level. In my opinion it\'s be better if there is a libgit2 function, otherwise we will find an implementation in every binding (rugged, pygit2, etc.) Regarding implementation, I prefer two binary searches over a linear search, because it scales. Then it is about testing, you could for instance check the length of the tree object and choose one strategy or the other based on that. What about something like this : So if the caller knows you get the best performance. If the caller does not know," it still works.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,24,2011-04-07 17:36:22,61.47,,1,,"b'b"" Just would like to add. A linear search would be enough for me today"," like @erikvanzijst that\'s my current workaround. The important thing is that it works.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,25,2011-04-07 17:36:22,663.43,,,1,b'b\' Often, the caller can\\\'t _know_ that a particular path refers to a file. Not even if they look at the working tree. They can have a good idea," but not know. If the user says they\\\'re interested in ""foobar/""", you know they\\\'re only interested in a directory called foobar, so it won\\\'t match if it\\\'s a file," but the user only types ""foobar""", it needs to match whether it\\\'s a file for a directory. I believe the best solution is to use two linear searches like this:use the path as-is; return if foundif the path has a trailing slash  return failureOtherwise  try to find a directory with that name.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,26,2011-04-07 17:36:22,218.32,,,1,"b""b' url  ![Check it out yo]url  Check out this fix yo. Two-pass binary-linear hybrid. Nebody finding any issues?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,27,2011-04-07 17:36:22,503.32,,,1,"b""b' @tanoku Works very nicely from a binding angle!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,28,2011-04-07 17:36:22,70.07,,,1,"b""b' The test programs work"," bravo!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,29,2011-04-07 17:36:22,389.75,,,1,"b""b' Most riveting! Looks like we can close this for good then... Until it breaks again. :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,closed,2011-10-20 16:50:57,314.2,3,20,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,127,closed,-,-,-,3,20,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,opened,2011-04-24 14:51:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,title,2011-04-24 14:51:18,00:00,,1,,"b""b' Fix fake wstream write'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,body,2011-04-24 14:51:18,00:00,,1,,"b""b' Fix writing uninitialized data after fake_wstream__write() fails.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,closed,2011-05-01 21:55:51,424.55,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,1,2011-04-24 14:51:18,424.9,,,1,"b""b' Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,2,2011-04-24 14:51:18,905.17,,1,,"b""b' Hi"," it seems you forgot to merge this changes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,reopened,2011-06-02 22:11:59,16.13,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,3,2011-04-24 14:51:18,551.07,,,1,"b""b' Duh! Forgot to click the button. Cheers for reminding me. :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,closed,2011-06-02 22:12:38,0.65,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,144,closed,-,-,-,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,opened,2011-05-31 12:51:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,title,2011-05-31 12:51:12,00:00,,1,,"b""b' [idea] References backend concept'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,body,2011-05-31 12:51:12,00:00,,,1,"b""b' Hello", at libgit2 we have odb backend concept we can decouple and store git object not on filesytem, but in any entity, that correctly support odb backend interface.I think, that the same concept maybe will be useful for references then we can store references as we want, providing not filesystem, but a references backend. If one of authors of project will found this idea worthy of attention, then I can implement this concept and contibute code. Thank you," waiting for you response!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,1,2011-05-31 12:51:12,42.3,,,1,"b'b"" Hm. This sounds like an interesting idea", but I can\'t really come up with any situations where it might be worthwhile to store references in a custom format other than Git\'s default one," specially since references need to be queried by the Git network protocol. What use cases do you have in mind?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,2,2011-05-31 12:51:12,20.27,,,1,"b'b"" For example", someone can use git object model as a base of versioned hierarchical key-value storage. And reference storage that tightly connected to disk i/o is not appropriate each reference is a file, that takes a lot of space in perspective of 1M databases per physical machine. So, object storage decoupling was made perfect, we can use any backend as we want, but references are still on disk.  Of couse, in that case we just can impement our own references and do not use a git one\'s, but I think that custom backend for references will be quite useful maybe libgit2 will provide later some merge functions," and so on it is always better use native library structures then reinventing the wheel.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,3,2011-05-31 12:51:12,1145.95,,1,,"b""b' Up?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,closed,2011-07-25 08:59:43,1208.52,0,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,reopened,2011-07-25 08:59:55,0.2,0,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,4,2011-05-31 12:51:12,161.13,,1,,"b'b"" If you feel like working on it"," it\'s probably the best to just come up with some code for further discussion.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,5,2011-05-31 12:51:12,283.58,,1,,"b'b"" As the reference handling needs a big overhaul", we might as well do it through back-ends. We can\'t have a non-git default reference storage," because we need to be compatible with the command-line client. A big site _cough_ github _cough_ might find it worthwhile to store the references in a database instead of on disk. Maybe.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,6,2011-05-31 12:51:12,535.27,,1,,"b""b' This recently landed in the library as  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,closed,2013-03-08 01:19:42,979.78,0,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,221,closed,-,-,-,0,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,opened,2011-06-14 13:38:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,title,2011-06-14 13:38:13,00:00,,1,,"b""b' Port MSVC specific Waf compilation flags to CMake and remove dynamic dependency to msvcr100.dll on Windows'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,body,2011-06-14 13:38:13,00:00,,,1,"b'b"" Port MSVC specific Waf compilation flags to CMake and remove dynamic dependence to msvcr100.dll on Windows The \'/MT\' and \'/MTd\' flags replace the dynamic link to \'msvcr100.dll\' with a static link to \'\'. This has the nice effect to ease the deployment of libgit2 by removing the dependence on \'msvcr100.dll\' which is not deployed by default on Windows. This should fix #255 as well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,closed,2011-06-14 13:52:34,14.35,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,reopened,2011-06-14 14:06:25,13.85,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,1,2011-06-14 13:38:13,30.17,,1,,"b""b' Everything works as expected. No dependency to msvcr100.dll in depends22_x86 ()C tests passLibGit2Sharp tests pass'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,2,2011-06-14 13:38:13,91.15,,1,,"b""b' Very handy for dropping Waf support. Merged. :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,closed,2011-06-14 15:39:37,93.2,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,257,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,opened,2011-06-30 17:17:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,title,2011-06-30 17:17:44,00:00,,1,,"b""b' libgit2 cmake build fails on Solaris'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,body,2011-06-30 17:17:44,00:00,,1,,"b'b\' When I follow the standard build instructions (""mkdir build; cd build; cmake ..; gmake"") on Solaris 10 the build fails. Looks like pretty simple stuff. I have a change that fixes it though it may not be the right fix", and will try to attach the build log and patch if I can figure out how to attach files to bug reports here on GitHub.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,1,2011-06-30 17:17:44,6.92,1,,,"b'b\' Apparently attachments are not possible. Here\\\'s a sample of the build problems; some of these messages are repeated for each source file. /:7:1: warning: ""_FILE_OFFSET_BITS"" redefinedIn file included from /:18",       from /:29,       from /:4,       from /:11,       from /:34,       from /:22,       from /:16,       from /:37:/-pc-solaris2.10/4.3.3/include-:197:1: warning: this is the location of the previous definitionIn file included from /:119:/:100: warning: visibility attribute not supported in this configuration; ignored/:116: warning: visibility attribute not supported in this configuration; ignored/:410: warning: visibility attribute not supported in this configuration; ignored/:883: warning: visibility attribute not supported in this configuration; ignored/:919: warning: visibility attribute not supported in this configuration; ignored/:1020: warning: visibility attribute not supported in this configuration; ignored/:1071: warning: visibility attribute not supported in this configuration; ignored[ 40%] Building C object In file included from /:11,       from /:34,       from /:22,"       from /:8:/:7:1: warning: ""_FILE_OFFSET_BITS"" redefinedIn file included from /:18",       from /:29,       from /:4,       from /:11,       from /:34,       from /:22,       from /:8:/-pc-solaris2.10/4.3.3/include-:197:1: warning: this is the location of the previous definitionLinking C shared library libgit2.sold: fatal: relocation error: R_386_GOTOFF: file : symbol zcalloc: relocation must bind locally:1022: recipe for target  \\\' failedmake[1]: **\\\\* [] Error 2Makefile:123: recipe for target \'',,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,2,2011-06-30 17:17:44,0.82,,,1,b'b\' And here\\\'s the workaround: diff git  index 258fa88..e04ffb8 100644+++ @@ -13,11 +13,"14 @@ #ifndef ZUTIL_H #define ZUTIL_H +#if 0 #if ((**GNUC**-0) \\\\* 10 + **GNUC_MINOR**-0 >= 33) && !defined(NO_VIZ) #  define ZLIB_INTERNAL **attribute**((visibility (""hidden""))) #else #  define ZLIB_INTERNAL #endif+#endif+#  define ZLIB_INTERNAL  #include ""zlib.h"" diff git  index b6a6b4 100644+++ @@ -4",7 +4,"13 @@ #include ""git2/common.h""  /*\\\\* Force 64 bit off_t size on POSIX. */-#define _FILE_OFFSET_BITS 64+//#define _FILE_OFFSET_BITS 64+#ifndef _LARGEFILE64_SOURCE+#define _LARGEFILE64_SOURCE+#endif+#ifndef _LARGEFILE_SOURCE+#define _LARGEFILE_SOURCE+#endif  #include ""git2/thread-utils.h"" #include ""cc-compat.h""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,closed,2011-06-30 17:26:08,8.4,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,reopened,2011-06-30 17:26:45,0.62,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,3,2011-06-30 17:17:44,1.8,1,,,"b""b' Closed by mistake"," sorry. First time through this UI.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,4,2011-06-30 17:17:44,189.33,,,1,"b'b"" Hey boyski", thanks for the heads up. There\'s two issues I can see here:1. is being redefined. I fixed this by adding the define as a compile-time flag, instead of having it on the header itself. Note that defining only silents the warning, but doesn\'t build libgit2 with 64-bit file support (which it requires to run properly): the LG64 extension enables an alternate 64 bit API, but this API wouldn\'t be used on the library. The offset bits define, on the other hand, replaces the default API with the 64-bit one, so it\'s used by default.2. The second issue with visibility: I\'ve declared on the file to disable the visibility declarations on POSIX systems; it\'s not a widespread enough feature to use it everywhere, and it only works on GCC anyway. Hopefully this will fix compilation on Solaris without any further issues. Please shout if you find any issues. PS: In the future, submitting changes through GitHub is easier if you fork the libgit2 repository, work your changes in," and then submit a pull request so we can review and discuss it. Cheers!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,closed,2011-06-30 20:36:36,189.85,2,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,5,2011-06-30 17:17:44,348.92,,1,,"b'b"" Thanks for the fast response. This fixes the _FILE_OFFSET_BITS warnings but unfortunately the visibility problem remains. It looks like there are some files which open zutil.h before (or without) reading zconf.h", so the NO_VIZ is not seen. BTW I am using gcc (4.3.3) here," not the Sun compiler. Below is a summary of the remaining problem: In file included from /:119:/:100: warning: visibility attribute not supported in this configuration; ignored/:116: warning: visibility attribute not supported in this configuration; ignored/:410: warning: visibility attribute not supported in this configuration; ignored/:883: warning: visibility attribute not supported in this configuration; ignored/:919: warning: visibility attribute not supported in this configuration; ignored/:1020: warning: visibility attribute not supported in this configuration; ignored/:1071: warning: visibility attribute not supported in this configuration; ignored[ 35%] Building C object /:324: warning: visibility attribute not supported in this configuration; ignored[ 36%] Building C object /:330: warning: visibility attribute not supported in this configuration; ignored[ 37%] Building C object /:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored/:1834: warning: visibility attribute not supported in this configuration; ignored[ 38%] Building C object /:1480: warning: visibility attribute not supported in this configuration; ignored/:1480: warning: visibility attribute not supported in this configuration; ignored/:1480: warning: visibility attribute not supported in this configuration; ignored/:1480: warning: visibility attribute not supported in this configuration; ignored[ 39%] Building C object /:308: warning: visibility attribute not supported in this configuration; ignored/:316: warning: visibility attribute not supported in this configuration; ignored[ 40%] Building C object Linking C shared library libgit2.sold: fatal: relocation error: R_386_GOTOFF: file : symbol _length_code: relocation must bind locally:1022: recipe for target  \' failedmake[1]: **\\\\* [] Error 2Makefile:123: recipe for target ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,6,2011-06-30 17:17:44,350.72,,1,,"b""b' BTW"," a little off topic but can I ask cmake to build a static library instead?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,7,2011-06-30 17:17:44,711.65,,1,,"b'b"" @boyski You\'d have to pass -DBUILD_SHARED_LIBS=NO to CMake when configuring your build.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,8,2011-06-30 17:17:44,1162.72,,,1,"b'b"" Yes", as Romain says, you should disable  , either through the commandline or through the configuration wizard  . Regarding the NO_VIZ issue, I fixed it by moving those defines to the build system too. Also, I\'ve just merged a patch that will let you use your system\'s ZLib at build time," if CMake can find it. Hopefully that\'ll fix all the issues you\'ve been encountering. Cheers!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,9,2011-06-30 17:17:44,1181.48,,,1,"b""b' Yes"," builds cleanly now. Thanks!!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,289,closed,-,-,-,2,5,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,opened,2011-09-12 09:08:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,title,2011-09-12 09:08:08,00:00,,1,,"b""b' Fix compilation issues with mingw64 headers'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,body,2011-09-12 09:08:08,00:00,,1,,"b""b' This fixes an issue when using the new mingw64 headers"," that are meant to replace the old mingw32 headers on both win32 and win64.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,1,2011-09-12 09:08:08,231.15,,1,,"b""b' Note that this should fix #275'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,closed,2011-09-12 12:59:17,231.15,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,reopened,2011-09-12 12:59:21,0.07,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,2,2011-09-12 09:08:08,841.0,,,1,"b""b' Cheers!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,closed,2011-09-19 03:00:20,840.98,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,397,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,opened,2011-09-13 04:14:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,title,2011-09-13 04:14:27,00:00,,1,,"b""b' Fix up examples code'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,body,2011-09-13 04:14:27,00:00,1,,,"b'b"" The current code in the examples subdir is out of date with the current API and also not great sample code because it ignores error returns", etc. This pull request improves the  to be closer to working out of the box (library location still needs to be specified), gets the C code to compile and link, and adds some error checks making use of git_lasterror(). Note that one warning was addressed by a tweak to the git_signature_new API rather than to the example code; please check whether this was right. These fixes aren\'t sufficient to get the  program working but at least now it compiles, links," and fails with an error message rather than dumping core. I may send a second pull request with an eye toward getting actual working example code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,1,2011-09-13 04:14:27,4.78,,1,,"b'b"" BTW I also think the  should be changed to build the ./examples code along with the tests (not run it"," just build it). This would ensure that the example code will stay in sync with API changes. I don\'t know enough about CMake to make that happen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,2,2011-09-13 04:14:27,375.35,1,,,"b'b"" If it\'s meant to teach people how to use the API", I really don\'t think that hiding the error-checking is going to help much. I do like the idea of compiling the examples, which would force us to keep them up-to-date. I\'m not quite sure how you get the signature changes to compile without warnings, but adding to is a bad idea. It\'s not const at all," the memory is allocated on behalf of the user and it\'s the user\'s responsibility to free that memory afterwards.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,3,2011-09-13 04:14:27,48.13,,1,,"b'b"" What do you mean by hiding the error checking? The macros? It\'s not the way I would write a program either; I was trying to keep my changes as small as possible. As you say", the library itself gets warnings with the const added, and I\'ve changed it back and pushed an update. However, this exposes a flaw in the API as far as I can see because it shouldn\'t be necessary to cast in the example code. Looking at the declarations of \'author\' and \'cmtter\'," you\'ll find that with the const present there\'s a warning from one git_\\\\* function and with it gone there\'s a warning from another. Shouldn\'t the API be consistent with itself?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,4,2011-09-13 04:14:27,19.57,,1,,"b'b"" Yes", I mean the macros, I don\'t feel that it adds much to put a macro around each call. Doesn\'t it say somewhere that we\'re not using it for the sake of simplicity? The example code does indeed declare those pointers to be to a const value, which is the right idea, as you probably shouldn\'t be changing the signature," but that\'s not how C works. That should be removed and a few calls to added.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,5,2011-09-13 04:14:27,41.97,,1,,"b'b\' I agree with Carlos. The point of the examples is to show how to use the API. Those error checking macros are redundant and add no new information to the example suite -just clutter. We should find a less obtrusive way of letting people know how error handling works. I\\\'m thinking an ""error handling"" section at the beggining where we use and properly", with a note that error handling should always be done on all library calls.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,6,2011-09-13 04:14:27,17.48,,1,,"b""b' Ack. We should provide clean", up-to-date," real-world examples or drop examples at all. Maybe general.c could be split up into small single-purpose examples for better maintainability.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,7,2011-09-13 04:14:27,92.13,1,,,b'b\' I have to say that I\\\'m puzzled by this response. The current example code is, to put it politely, absolute tripe. I\\\'d ask if any of you have seen it lately but I\\\'m sure the answer is no because if any competent programmer had read through this stuff he\\\'d be too horrified to let it stand. It doesn\\\'t compile, it uses functions which have been removed from the API, it assumes the existence of a pre-existing repo at /and it blithely ignores its non-existence and goes on to dump core! Further," I find the statement ""The point of the examples is to show how to use the API. Those error checking macros are redundant and add no new information to the example suite -just clutter"" actually offensive (not personally", just from a programming point of view). The very purpose of a coding example is to show people what they _should_ do; when the major how-to example tells people that they should be ignoring error conditions left and right, that\\\'s a very bad thing. And showing them that they should be checking return codes is not at all redundant it\\\'s professional. People are going to cut and paste this code this was my intention, as a new user of libgit2, until I saw it. I think the main example should go through the exercise of creating, populating, querying, and destroying a repo. And I may be able to make that happen as I come up to speed, but I will absolutely not deliver any code, to you or anyone else, which fails to check error conditions. If you want to request a different style of checking errors let\\\'s try to agree on something. In the meantime, I would accept this pull request to end the short term disaster of having an example program, which is the first thing any new user would look to, that\\\'s an embarrassment to the project. The standard for a patch should not be perfection but whether it makes the existing, awful situation better. I\\\'m happy to supply further patches to make it better still.\'',,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,8,2011-09-13 04:14:27,6.57,,1,,"b'b"" On Tue", Sep 13, 2011 at 8:41 AM, schureply@wrote:I don\'t think size is the issue here. The problem is that the existingexample code is isolated and never built against the current API.Breaking it into smaller isolated," never-built pieces would accomplishnothing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,9,2011-09-13 04:14:27,33.42,,,1,"b'b"" I don\'t think size is the issue here. The problem is that the existing sample code is isolated and never built against the current API", and can\'t be run except on the single machine which has a repo in /-. Breaking it into smaller isolated, never-built pieces would accomplish nothing. General.c is only 400+ lines (more with error checking :-) I think the better fix, as mentioned above, would be to make it a round-trip program which creates, manipulates," and optionally removes a repo in a temp directory. BTW general.c printf\'s an unterminated string too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,10,2011-09-13 04:14:27,30.93,,,1,"b'b"" Your effort in cleaning this up is appreciated we just didn\'t agree on how to do that yet.Me neither. What I wanted to say: If we split it up", it would be not just easier to maintain, but user could find what they are looking for much faster. (For example: list-tree.c," log.c etc)Example code could start like this:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,11,2011-09-13 04:14:27,25.1,,1,,"b'b"" Yes", the examples code is a mess (that\'s what you get when a ruby guy writes C) and it should be updated, but I think you\'re making too much out of the pre-defined repository path. We need to have something, and whoever is looking at the examples should put in whatever repo they care about. Adding the option to pass it in as is certainly a good change. The problem with error checking is that it overwhelms the actual code that deals with the API, and just sticking a macro around the API calls might make it safer to use, but won\'t give any clarity nor does it show how to actually deal with the errors. I believe it would be more useful to show full error checking in the first few calls and then not show it at all (with a mention that a real user should continue checking). I do find the amount of commit and tree hashes is a bit problematic and we should use more branch names and get hashes out of that (which would also show more of the API). As for cut-and-paste, it is true that some might do it blindly, but if you don\'t read the docs for the API you\'re using, then you can\'t really complain when it blows up in your face. Related to this, it might make sense to add a general notice to the main API page explaining that pretty much all the functions either return an error code or a pointer to const. I don\'t see the role of the example code to be a way to get ready-made snippets of code that will work under any situation, but rather a way to see how the developers expect different parts of the API to be used and how they relate to each other. IIRC there is a way to make GCC shout at you if you don\'t check the return code," though I\'m not sure if we want to activate that. This reminds me that I should probably put my network code in as an example.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,12,2011-09-13 04:14:27,78.1,,,1,b'b\' Maybe the issue here is two different visions of what the code in examples/*.c is for. If you\\\'re thinking there should be a file which shows some expected call sequences, without the clutter of error checking or being expected to actually work, that could make sense. My view is that there should be an example of actual working code which uses libgit2. There\\\'s room for both perspectives however:1. If it\\\'s not intended to be actual compilable, runnable code it should have a comment at the top to that effect and it should not be mentioned in the Makefile. The comment should note that error checking is left out for clarity but is needed in real usage.2. The problem with that of course is that if it\\\'s not built it will drift out of alignment with the current API. This is why I think it\\\'s impractical to maintain this kind of example and prefer actual working code with (arguably cluttering) error checks. Maybe there\\\'s a good compromise: a program that builds but cannot be run? I.e. make the first lines be fprintf(stderr,"DO NOT RUN THIS PROGRAM, IT\\\'S ONLY HERE TO PROVIDE CODING IDEAS!\\\\n"";exit(2) For my own purposes I expect to write a simple program which creates a repo and adds some files to it, and would contribute it to examples if desired. It would have full error checks and make every effort to be a robust, self-contained program.\''
libgit2	400	closed	13	vmg	2011-09-13 04:14:27	9.7			+1	b'b\' Right on @boyski. The initial idea was to have a kind of file like that -with no error handling, just to show some usual call sequences and use cases for the library, and to be compiled into a Docco document (see url  I think it fills that purpose rather nicely). Now: if you\\\'re willing to contribute more specific examples, I\\\'m all for getting rid of the current file and sticking a  couple ""actual compilable examples"" inside of the examples folder. I\\\'m talking of actual examples, each one of them in their own subfolder. If you go ahead and write one of those (and @carlosmn writes another for his networking code) I\\\'ll gladly merge them and plug them into CMake to make sure they don\\\'t get out of date. Whatever you write, please ensure that it\\\'s properly documented and that it gets parsed by Docco properly. Literate examples are awesome. :) Looking forward to your new examples!\''
libgit2	400	closed	closed	 - 	2011-09-13 17:17:41	783.23	3	8	4
libgit2	400	closed	14	boyski	2011-09-13 04:14:27	150.67	+1			b'b"" OK, I did not know about url  and things make more sense now. But I don\'t think this pull request should be dismissed just yet because the error-checking wrappers are not the whole contribution, just the largest by bulk. There are quite a few other non-controversial improvements here. Would you like me to remove the wrappers and re-push?""'
libgit2	400	closed	reopened	 - 	2011-09-13 19:58:02	160.35	4	8	4
libgit2	400	closed	15	vmg	2011-09-13 04:14:27	9.97			+1	b""b' Oh, please do upgrade the file to the recent API changes. That would be lovely to have.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,16,2011-09-13 04:14:27,160.88,,,1,"b""b' A change to sneaked in in commit c69624dc. As this is still a PR"," could you squash the last two commits into the earlier ones? That would give us a much nicer history. Other than that it looks nice.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,17,2011-09-13 04:14:27,203.08,,,1,"b'b"" WRT ", I\'m pretty sure it\'s a good fix to a pretty obvious warning. Just something I ran across. Are you objecting to not getting it separately, or to the fix itself? I\'m reading up now on how to squash commits. I\'ve seen it referenced," not done it yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,18,2011-09-13 04:14:27,36.93,,1,,"b""b' I hope I did it right I squashed the last two commits down", then made a little further tweak to  and squashed that commit too," then deleted the fixup-examples branch on my remote fork and pushed the cleaned up branch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,19,2011-09-13 04:14:27,41.43,,1,,"b'b"" Arghh the change to  was obviously not right. The warning should still be fixed but I shouldn\'t have mixed it in with this change anyway"," so I\'ve reverted it entirely for now and re-squashed and re-pushed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,20,2011-09-13 04:14:27,1406.92,,,1,"b""b' This is perfect. Keep up the good work.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,closed,2011-09-19 02:47:36,409.57,4,10,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,400,closed,-,-,-,4,10,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,opened,2011-10-03 04:43:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,title,2011-10-03 04:43:35,00:00,,1,,"b""b' Heads up: usage of static TLS on Windows.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,body,2011-10-03 04:43:35,00:00,,1,,"b'b"" I noticed you\'re using static TLS: Just an FYI: this won\'t work if libgit2.dll is explicitly linked[4] into some EXE on platforms earlier than Vista (i.e. XP",2000, etc). You have to use dynamic TLS if you want to support explicit linkage on those platforms. I.e. Using TlsXxx apis to manipulate the TLS yourself.## Footnotes [1] Implicitly linked means linked via __declspec(dllimport), which will make an entry appear in the IAT[2] of the module[3] and cause the loader resolve DLL exports at process startup," as opposed to explicit linkage[4].[2] Import address table; a table in the PE header of a module[3] which the loader uses to load and resolve implicitly linked module entry points.[3] DLL or EXE (or any PE image).[4] The opposite of implicit linkage: The application explicitly calls LoadLibrary[Ex] and GetProcAddress to do what the loader normally does for you during startup.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,1,2011-10-03 04:43:35,497.47,,1,,"b'b"" _sigh_ So pre-Vista"," TLS doesn\'t work if an app links properly? That is bad. Has XP been end-of-life\'d yet?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,2,2011-10-03 04:43:35,431.03,1,,,b'b\' Sorry, I think I made this sound more dramatic than it is. Most applications will link implicitly," I.e. they will link against the import library () and have the loader automatically resolve and bind DLL entry points at process startup via the IAT. This will work on all platforms. The only case that will fail is if an application explicitly calls LoadLibrary("""") and GetProcAddress on each entry point manually. This will break on pre-Vista if static TLS is used (declspec(thread)). I imagine this is an uncommon scenario", as most people will use implicit linking for simplicity.  Usually, the only time people go the explicit route is when they\\\'re writing some app with some kind of plugin architecture where user plugins can be loaded at runtime. I don\\\'t see this happening with . So probably nothing to worry about. Just a heads up in case some application tries to call LoadLibrary on  and wonders why they get random AVs. (I think XP still has a few years before EOL)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,closed,2011-10-03 20:12:05,928.5,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,reopened,2011-10-03 20:12:12,0.12,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,3,2011-10-03 04:43:35,3.15,,1,,"b'b"" Oh", I see. I understood it the wrong way around. It\'d say it\'s quite a rare thing to do," specially since we don\'t provide anything that a plug-in system would want.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,4,2011-10-03 04:43:35,1289.4,,1,,"b'b""   Think", this doesn\'t apply anymore," right?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,closed,2013-03-08 01:17:47,305.58,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,440,closed,-,-,-,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,opened,2011-10-15 02:29:48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,title,2011-10-15 02:29:48,00:00,,1,,"b'b\' ""Access violation"" error on windows\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,body,2011-10-15 02:29:48,00:00,1,,,b'b\' Hi, I\\\'m going to try and provide as much information for this bug report as I can...Currently this issue is occurring on commit: a014a083d9010e7f1ad0a00e6b48b75d6616edde  The file is mwindow.c on line 131.  The operating system is Windows XP," compiled with Visual Studio 2008 SP1 C++. The exact ""error"" thrown by VS is ""Access violation reading location 0x00000008."" The biggest issue is that I can\\\'t reproduce this issue in any other repository", and I can\\\'t provide this one as it contains proprietary code.  I\\\'ve run git fsck full and it found no issues with the repository.  Here you\\\'ll find screen shots from the debugger, not sure if this is of any use... sorry I can\\\'t be of more help up front, happy to answer questions help debug url  \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,1,2011-10-15 02:29:48,11.32,,,1,"b'b"" Thanks for this thorough bug report! From what I see in  ", seems like @carlosmn brainfarted when writing this... The will always set to  , so the following will segfault everytime. It\'s weird that this happen more often. Carlos," any idea on what was the original goal of this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,2,2011-10-15 02:29:48,19.33,,,1,"b'b"" That\'s exactly what I was about to write. However", most of that code was copied from your copy of the  code, so... What that code is trying to do is close the window for the current user," but it looks like it\'s not doing a very good job. @pro-logic could you move the call to where the is just above and delete the  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,3,2011-10-15 02:29:48,41.13,,,1,"b'b"" That explanation wasn\'t very good... This function tries (or should try) to free the least-recently-used window (that\'s not in use anymore). It gets called when we\'re trying to open a new window but we\'re trying to allocate above what the system allows us. I\'m not sure why it\'s written this way", probably a copy-paste error. As to why we haven\'t seen it earlier, it was probably just luck (and most of us use 64-bit machines," so we have a lot more leeway). @pro-logic does your repo have huge packfiles?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,4,2011-10-15 02:29:48,164.05,1,,,"b'b"" @carlosmn Yeah", I\'ve got a 360MB pack file. As for your instructions about what to do with source code," I don\'t really follow... I\'m not a C++ programmer :(""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,closed,2011-10-15 06:25:38,235.83,2,1,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,reopened,2011-10-15 06:25:49,0.18,2,1,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,5,2011-10-15 02:29:48,0.33,1,,,"b'b"" Sorry! hit the wrong button. I\'ll be away for a week so I won\'t be able to check back till... well pretty much 7 days from now. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,6,2011-10-15 02:29:48,736.88,1,,,"b'b"" It\'s C not C++ and C# looks a lot like it", don\'t be afraid. Just remove that call, it\'s not really doing anything useful. 360MB is not that much (I was expecting close to 2GB), but it does seem to be above the limit. Vicent, any idea why it\'s so low? EDIT: Rereading the issue, I\'m not sure where I got the idea that you were using C#. At any rate," just delete that line.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,7,2011-10-15 02:29:48,30.05,,1,,"b'b"" 350mb is way under the limit. I don\'t know why is it trying to free windows there. Either way", I\'m going to  -trace back these changes," because most of the window code comes from Core Git. We need to find out where this got broken.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,8,2011-10-15 02:29:48,9.37,,1,,"b'b"" If you look at the debug screenshot", we\'re limiting ourselves to 256MB. A recent-ish patch changed the way we calculate the limits," IIRC. That may be it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,9,2011-10-15 02:29:48,71.85,,1,,"b'b"" I can\'t find a way to reproduce. What functions are you calling to make this fail?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,10,2011-10-15 02:29:48,36.23,,1,,"b""b' This is clearly a series of ODB reads that hit enough packfiles to cap the max mmap size. Try loading the Rails repo and fetching a couple hundred oids from different packfiles.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,11,2011-10-15 02:29:48,16.0,,1,,"b'b"" It turns out that index-pack wasn\'t such a good choice", as it moves sequencially. I reduced the limit to 1K and it turns out that it worked even with our test suite. That function was a mess," I\'ve fixed two bugs in the same 10 lines or so. This had been hidden from view as the limit is 8GB on 64-bit machines. I\'m pushing a fix to the development branch right now which fixes this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,12,2011-10-15 02:29:48,27.93,,1,,"b""b' You mean the dev brach changes fix this issue?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,13,2011-10-15 02:29:48,6.6,,1,,"b""b' Yes. That commit takes care of this and a related issue when freeing the LRU.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,14,2011-10-15 02:29:48,76.12,,,1,"b'b"" Great job"," Carlos. Let\'s wait one week until  @pro-logic comes back so we can confirm the fix.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,15,2011-10-15 02:29:48,675.63,,,1,"b""b' Just did a pull. Looks like it works!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,closed,2011-10-22 10:32:38,246.82,4,8,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,460,closed,-,-,-,4,8,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,opened,2011-11-07 09:51:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,title,2011-11-07 09:51:56,00:00,,1,,"b'b\' Fix ""clang warning: expression result unused""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,1,2011-11-07 09:51:56,14.2,,,1,"b""b' Heh"," I bet you decided to compile with because of the posts in :) I did the same last night.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,2,2011-11-07 09:51:56,9.2,,1,,"b""b' Maybe unconsciously triggered running compileagain at last :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,3,2011-11-07 09:51:56,1104.27,1,,,"b'b"" Sorry"," I missed this. Are you sure that  ing out the return is the correct fix? Shouldn\'t we be rethrowing the error code?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,4,2011-11-07 09:51:56,363.77,1,,,"b'b"" Since it\'s all memory related inline wrapper functions", expected to return NULL in case of ENOMEM.? We could drop the calls, but it seems to me as good thing to do the caller would just return GIT_ENOMEM, leaving an unrelated," misleading error string in error->last. We avoid that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,5,2011-11-07 09:51:56,22.43,,1,,"b""b' Ping.?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,6,2011-11-07 09:51:56,75.38,,,1,"b""b' This is going away with the new error handling code we talked about in FOSDEM. Cheerios!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,closed,2012-02-13 12:21:11,149.25,2,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,7,2011-11-07 09:51:56,6.68,,1,,"b""b' 573bde0 seems legit though.?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,reopened,2012-02-13 12:28:26,7.25,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,8,2011-11-07 09:51:56,1.07,,1,,"b""b' Oh"," indeed. Can you change the PR to only 573bde0? I totally overlooked that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,9,2011-11-07 09:51:56,4.87,,1,,"b""b' Done.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,closed,2012-02-13 15:02:42,154.27,2,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,10,2011-11-07 09:51:56,149.07,,1,,"b""b' \\\\m/'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,474,closed,-,-,-,2,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,opened,2011-11-25 20:55:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,title,2011-11-25 20:55:43,00:00,,1,,"b""b'  threads for tests on threadsafe builds'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,body,2011-11-25 20:55:43,00:00,,1,,"b""b' Unit tests segfaulting on OS X Lion with THREADSAFE=ON. Adding a call to git_threads_init() in BEGIN_TEST and git_threads_shutdown() in END_TEST fixes the segfault.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,1,2011-11-25 20:55:43,674.78,,,1,"b'b"" Hey! Thanks for spotting this bug! I don\'t quite like the idea of killing the TLS storage after each test in the suite"," though... Looks like it could slow us down a little bit. I\'ll fix this by setting the initialization and cleanup calls in the test framework initialization functions. Cheers!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,closed,2011-11-28 08:10:30,674.78,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,reopened,2011-11-28 08:11:22,0.87,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,2,2011-11-25 20:55:43,1.47,,1,,"b'b"" ...Actually", reopening this. The same issue also happens in Clay," and there\'s no proper way to set global-level initialization functions there. We\'ll have to come up with something.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,closed,2011-12-15 01:10:42,1019.33,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,496,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,opened,2012-02-15 14:14:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,title,2012-02-15 14:14:38,00:00,,1,,"b""b' The libgit2 function import export is incorrect on Windows. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,body,2012-02-15 14:14:38,00:00,,1,,"b""b' Code in git2/common.h When under external libraries"," __declspec(dllexport) type turn out to be  __declspec(dllimport) type  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,1,2012-02-15 14:14:38,10.92,,,1,"b'b"" You\'re showing a linking error arising from the pygit2 build system. libgit2 is linkable just fine under Windows. Please don\'t open two issues for the same bug.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,closed,2012-02-15 14:25:33,10.92,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,2,2012-02-15 14:14:38,5.3,1,,,"b'b"" I am sorry", do you really verify this bug? First of all,  libgit2_test is not link with dll, it\'s directly compiled all sources into an executable binary," so what kinds of test can make sure libgit2 is linkable unde windows?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,3,2012-02-15 14:14:38,4.32,1,,,"b'b"" I never mentioned and you don\'t seem to have tested the linkability of libgit2. You\'ve found a problem building pygit2 and are blaming libgit2 instead of trying to figure out the cause.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,4,2012-02-15 14:14:38,30.4,,1,,b'b\' I means libgit2_test is the only testcase, so that there is no testcase make sure DLL is linkable.Because I am familiar with DLLs creating, so that I know that\\\'s the problem of libgit2.Now, I created a whole new simple project to linkage with libgit2, but it\\\'s failed.Code: #include  int main(){  git_repository *x;  git_repository_init(&x,D:\\\\First, 0);} Compile Result: 1>-Build started: Project: test_linkage," Configuration: Debug Win32 1>Linking...1> : error LNK2019: unresolved external symbol _git_repository_init referenced in function _main1>D:\\\\CI\\\\bld\\\\vcs\\\\libgit2\\\\build\\\\Debug\\\\test_ : fatal error LNK1120: 1 unresolved externals1>Build log was saved at ""file://d:\\\\CI\\\\bld\\\\vcs\\\\libgit2\\\\test_linkage\\\\Debug\\\\""1>test_linkage 2 error(s)", 0 warning(s)========== Build: 0 succeeded, 1 failed, 2 up-to-date, 0 skipped ==========\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,5,2012-02-15 14:14:38,44.65,,,1,"b'b"" Hey @dreamkxd! By the looks of it", this issue looks mostly unrelated to  / ... I can assure you we\'re linking the libgit2 library as a Windows DLL all the time without issues. I\'m thinking this may be related to the calling convention you\'re using on your C code. libgit2 is build by default with  : if your program expects another convention, the linking resolution will obviously fail. You can change the convention on your solution settings, or if you build libgit2 through CMake," you can change the convention for the library itself (see the option). See if this fixes the issue. Cheers!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,reopened,2012-02-15 15:50:15,84.7,2,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,6,2012-02-15 14:14:38,2.47,,1,,"b'b"" I am found the bug where it is. It\'s the problem of "," about stdcall.I\'ll create pull request for this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,closed,2012-03-03 16:41:21,51.1,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,560,closed,-,-,-,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,opened,2012-03-07 22:10:49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,title,2012-03-07 22:10:49,00:00,,1,,"b""b' Incorrect statuses reported'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,body,2012-03-07 22:10:49,00:00,,1,,"b""b' I am trying to track down the cause behind libgit2/libgit2sharp#123 Running version 242a1cea8d66d9ec185044f345b22fec1940178f of libgit2'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,1,2012-03-07 22:10:49,10.5,,,1,"b""b' Actually this my misreading of the debug. Forgive the noise'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,closed,2012-03-07 22:21:19,10.5,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,reopened,2012-03-08 17:02:18,1120.98,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,2,2012-03-07 22:10:49,1122.27,,1,,"b""b' [I was able to debug and start poking around.]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,3,2012-03-07 22:10:49,1.22,1,,,"b'b"" It\'s strange"," because in the call to is pointing to a different file.....""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,4,2012-03-07 22:10:49,158.58,,1,,"b""b' Yes there appears to be some point during execution in where there is a mismatch between the and the variables'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,5,2012-03-07 22:10:49,619.98,,1,,"b'b"" I\'m getting a lot of these as well.  Files from a newly cloned repository are coming back as modified.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,6,2012-03-07 22:10:49,302.7,,1,,"b""b' @sc68cal Please check libgit2/libgit2sharp#123.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,7,2012-03-07 22:10:49,3.03,,1,,"b""b' @JustinBeckwith It _might_ be related to a issue with line endings. Could you open a separate dedicated issue?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,8,2012-03-07 22:10:49,676.97,,1,,"b'b"" @nulltoken  I\'m going to track the issue here", since it\'s really libgit2 where the bug is happening.master is a branch 5 commits ahead of , they are synced using Git-Tfs. Anyway, for the commands you asked for, I substituted master with a branch called \'test\' since I had donesome work during the day," so master and  were synced up. Test is only one commit ahead of master. url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,9,2012-03-07 22:10:49,1358.18,,1,,"b'b"" I\'m seeing the same behavior as @JustinBeckwith is with a fresh repo. I put together a sample project that demonstrates the behavior I\'ll work on making it a unit test in the libgit2sharp project later.  url  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,10,2012-03-07 22:10:49,36.6,,,1,"b'b"" @sc68cal Wow! Following your instructions"," I\'ve succeeded in reproducing this (unexpected) behavior.  Looks like I\'m going to have a busy bug hunting week-end ;-) Thanks a lot for the time you spent working on this! :+1:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,11,2012-03-07 22:10:49,175.48,,,1,"b'b"" @nulltoken Thank you for your praise!  Please let me know when you plan on hunting the bug I can coordinate via Skype or IRC to help out", I want to follow along," and I may help you save some time since it\'s fresh in my mind.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,12,2012-03-07 22:10:49,1309.4,,1,,"b'b"" @JustinBeckwith Would you be so kind as to describe the steps to reproduce this?It might be very helpful in order to ensure @arrbee\'s PR will fix known problems.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,13,2012-03-07 22:10:49,1102.68,,1,,"b'b"" I\'m doing a clean clone from repository:  switching into the directory and doing a shows no changes.  Next I run this little app", which has a reference to the nuget package for libgit2sharp (0.8): Obviously change the input path to wherever you cloned the repo on your local machine.  When I run this app right after clone," ALL of my text files come back as modified.  Hope this helps!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,14,2012-03-07 22:10:49,950.42,,,1,"b'b"" @JustinBeckwith Awesome bug report! :smile: ...and quite helpful. It\'s currently being tackled by @arrbee as part of libgit2/libgit2#610. I\'ll make sure to keep you updated.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,15,2012-03-07 22:10:49,578.28,,,1,"b'b"" Hey @JustinBeckwith thanks for the report. I think between @nulltoken and myself we\'ve managed to work out all the issues and we used ExpressStarter as one of our test cases. The fixes just got merged into the branch of libgit2 which will hopefully make its way into a new release fairly soon.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,16,2012-03-07 22:10:49,177.67,,,1,"b""b' Thanks guys looking forward to getting the next release!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,17,2012-03-07 22:10:49,1113.65,,,1,"b""b' I am pleased to report that the issue has been resolved! Thank you @nulltoken and @arrbee I am very excited about moving forward with libgit2 in Git-Tfs'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,closed,2012-04-02 15:48:26,1366.13,1,11,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,18,2012-03-07 22:10:49,23.25,,,1,"b""b' @sc68cal Glad this worked :smile: All we have to do now is wait for the branch merge into the branch. A new version of LibGit2Sharp should be released soon after this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,reopened,2012-05-14 19:27:28,219.03,1,11,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,19,2012-03-07 22:10:49,196.73,,1,,"b""b' I updated to 8f12d136c9fb216 and appear to be experiencing a regression.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,20,2012-03-07 22:10:49,3.75,,1,,"b'b"" @sc68cal Could you give us a bit more detail about the regression you\'re encountering?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,21,2012-03-07 22:10:49,12.83,,1,,"b""b' Lots of files being returned with a status of missing"," while a returns just an untracked file.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,22,2012-03-07 22:10:49,54.48,1,,,"b'b"" OK so the [old test]url  where a delete would throw the status code for a loop", and files would be reported as is still fixed. There just seems to be a corner case around the status. What is strange is that most of the files should be ignored, due to entires in my url  I\'ll set my environment up again and start stepping through the code," to see if anything jumps out at me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,23,2012-03-07 22:10:49,18.3,,,1,"b""b' @arrbee     Awesome proposal. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,24,2012-03-07 22:10:49,57.12,1,,,"b""b' Some changes did go in recently to the way that .gitignore files are loaded"," so I suppose it is possible that the loading of the ignore file was messed up. @sc68cal Can you tell me how to recreate this? What is the actual state of the repo? Is it files that should be ignored are being reported as missing? Or is the problem that files that are present and added are being reporting as missing?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,25,2012-03-07 22:10:49,1166.7,,1,,"b""b' @arrbee You are correct"," regarding the ignore file code. Removing the file results in correct behavior.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,26,2012-03-07 22:10:49,0.77,,1,,"b""b' Contents of .gitignore:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,27,2012-03-07 22:10:49,2.67,,,1,"b'b"" @sc68cal Thanks a lot for this. Would you be able to point to a public cloneable repo against which the issue can be reproduced? I\'ve spent some time today trying to repro it without success. The tested repositories were bearing .gitignore  .gitattributes files.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,28,2012-03-07 22:10:49,0.58,,1,,"b'b"" I\'ll try and whip up a small repo that replicates this behavior. I have a feeling it\'s something to do with the fact that some of those patterns in the gitignore file match items that were committed to the Git repository (such as the nuget packages)"," and subsequently added to the ignore file so that changes will be skipped.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,29,2012-03-07 22:10:49,1.73,,1,,"b'b"" @sc68cal  Please hold on for a few minutes. I\'m about to update LibGit2Sharp vNext branch with the latest libgit2 and I\'d be easier if you work from this version.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,30,2012-03-07 22:10:49,12.07,,1,,"b'b"" Ok. I\'ve updated the vNext of **my** repo. You can check it out @ url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,31,2012-03-07 22:10:49,20.13,,,1,"b'b"" @sc68cal Yipppeee :)Please don\'t. We\'re **always** eager for bug reports.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,32,2012-03-07 22:10:49,2.25,,1,,"b'b"" I completely concur with @nulltoken Thank you @sc68cal for the report. It\'s nice to know that the latest version resolves your issues. I\'m going to close this"," but feel free to reopen or file a new issue if you see other strange behavior.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,closed,2012-05-15 18:01:49,1354.35,3,20,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,33,2012-03-07 22:10:49,4.55,1,,,"b""b' Hmm spoke too soon. Hang on while I trace my steps back.... Sorry !!!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,34,2012-03-07 22:10:49,1.67,1,,,"b'b"" My bad I had moved my file out of the repo and did not put it back in before running my test code. Ok well at least we know it\'s something in the file. Again"," sorry!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,35,2012-03-07 22:10:49,13.12,,1,,"b'b"" Can\'t seem to reopen this issue"," but it\'s definitely something in how libgit2 processes a .gitignore file. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,reopened,2012-05-15 18:23:16,21.45,5,21,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,36,2012-03-07 22:10:49,224.02,,1,,"b""b' Have you had any success?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,37,2012-03-07 22:10:49,176.45,,1,,"b""b' Not yet. Something just came to my mind: I might be able to just do a filter-branch on the repo where those items marked  are"," and publish it depending on if the bug continues to manifest.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,38,2012-03-07 22:10:49,1302.4,,,1,b'b\' I\\\'ve finally got a track on what the issue is here. I think the problem occurs when an ignored directory contains a subdirectory which in turn contains a tracked file. In this case," you have a directory named ""packages"" which is ignored. It contains tracked files (which we actually should process correctly) but it also contains directories which themselves contain tracked files and those are incorrectly skipped when we are examining files in the working directory. I have written a small test that replicates the issue and I\\\'m working on a fix. @sc68cal and @nulltoken Thank you both for so much in your persistence in identifying this subtle bug.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,39,2012-03-07 22:10:49,86.87,,,1,"b""b' Woo!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,40,2012-03-07 22:10:49,6.68,,,1,"b""b' Okay", that PR #706 will hopefully fix this. Thanks to all," again!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,41,2012-03-07 22:10:49,915.45,,,1,"b""b' @sc68cal So that PR was merged to the development branch. Is there a change that you could update your libgit2 and try again? Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,42,2012-03-07 22:10:49,8.03,,1,,"b""b' @arrbee Will do stand by'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,43,2012-03-07 22:10:49,6.12,,1,,"b""b' :cake: :beer:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,44,2012-03-07 22:10:49,1.4,,,1,"b'b"" Yay! Thanks again. This was a great catch I\'m glad to get it fixed before the next library release.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,closed,2012-05-17 15:48:33,1285.28,5,25,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,45,2012-03-07 22:10:49,83.27,,1,,"b'b"" I\'ve got a report from @DanRigby that there may be another bug in the status code when running the bleeding edge of Git-Tfs. Hopefully he can give us some additional information.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,46,2012-03-07 22:10:49,118.22,,,1,"b'b"" @DanRigby @sc68cal Thanks for the report.  When you\'re ready", please open a separate issue in the libgit2 project. It will be easier to track for us. Status troubleshooting is quite complex," please add as much information as you can in order to help us reproduce the issue.Do not hesitate to zip the current state of the repo and send it to us if this becomes too long or a bit tricky.We might need as well your  settings Cheers :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,592,closed,-,-,-,5,26,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,opened,2012-05-13 19:10:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,title,2012-05-13 19:10:23,00:00,,1,,"b""b' Add git_note_foreach()'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,1,2012-05-13 19:10:23,1.13,,1,,"b""b' This pull request [passes]url  (merged e21228da into b72969e0).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,2,2012-05-13 19:10:23,3.98,,1,,"b'b"" The iterator commit is also in the other PR"," isn\'t it?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,3,2012-05-13 19:10:23,1.02,,1,,"b""b' Yes. I initially needed it for this PR"," but eventually thought it might be merged earlier.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,closed,2012-05-13 19:22:01,11.63,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,reopened,2012-05-14 17:29:59,1327.97,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,4,2012-05-13 19:10:23,1334.62,,1,,"b""b' This pull request [passes]url  (merged e21228da into b72969e0).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,5,2012-05-13 19:10:23,0.5,,1,,"b""b' This pull request [passes]url  (merged 4195159e into 8f12d136).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,6,2012-05-13 19:10:23,1.35,,1,,"b""b' @carlosmn @schu now with a callback :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,7,2012-05-13 19:10:23,0.4,,1,,"b""b' This pull request [passes]url  (merged 71abc3fb into 8f12d136).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,8,2012-05-13 19:10:23,15.68,,1,,"b'b"" Callback methods need to end with  . Also"," I\'d drop the typedef and insert the function pointer declaration in the main function declaration.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,9,2012-05-13 19:10:23,140.33,,1,,"b""b' This pull request [passes]url  (merged 86ecd844 into 1c3a5a03).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,10,2012-05-13 19:10:23,1.12,,,1,"b'b"" @tanoku Argh. I didn\'t think about this while updating the signature. Thanks. It\'s now fixed.Fixed as well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,closed,2012-05-14 20:17:20,167.35,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,696,closed,-,-,-,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,opened,2012-05-26 18:42:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,title,2012-05-26 18:42:02,00:00,,1,,"b""b' %PROGRAMFILES%\\\\\\\\Git\\\\\\\\etc not working for x64 libgit2 with msysgit'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,body,2012-05-26 18:42:02,00:00,,,1,"b'b\' ""%PROGRAMFILES%\\\\Git\\\\etc"" won\\\'t work on x64 systems with 64-bit libgit2 in combination with msysgit. msysGit is a 32-bit application"," so it is located in ""%ProgramFiles(x86)%\\\\Git\\\\etc"". So a fallback is required. If msysgit gets installed one could also use the registry: However", this only works if msysgit gets installed and no portable version is used (same as the enviroment variable). For other tools, like TortoiseGit, I\\\'d like to have an easy way to set the git-system-root. Right now I don\\\'t know how to add special git-config-file-locations to libgit2, so that this is also consultated for a -manipulation (so that  gets correctly respected).\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,1,2012-05-26 18:42:02,14.02,,1,,"b'b"" The library won\'t take environment variables into account", that\'s application\'s job. The way you set your own config files is what you see here: url  It\'s in C#, but most of that is just calls to the library, so it\'s easy to follow. Once you have your object set up, you use  . Currently we only look at  ," so it\'s safe to swap out the config after calling  . Passing a custom config to should be possible before too long.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,2,2012-05-26 18:42:02,3.22,,,1,b'b\' Thanks for the info. However,"The library won\\\'t take environment variables into account"": url \''
libgit2	733	closed	3	csware	2012-05-26 18:42:02	2.0		+1		b'b\' Also ""%USERHOME%"" url  was reported to TortoiseGit as problematic. Better use %HOME% first, then fallback to %HOMEDRIVE%\\\\%HOMEPATH%.\''
libgit2	733	closed	4	carlosmn	2012-05-26 18:42:02	20.78			+1	b'b"" Fine, _specific_ variables. %USERPROFILE% and %PROGRAMFILES% exist independently from libgit2, and they don\'t instruct the library to do anything. I believe @tanoku is working on a way so we don\'t have to ask the OS directly without having to go through environment variables. And regardless of you saying we shouldn\'t use %USERHOME% and pointing to %USERPROFILE%, what\'s the problem? Why is it problematic? What does  say should be the order of variables to check? Is there even a canonical way to inquire where user data is stored?""'
libgit2	733	closed	closed	 - 	2012-05-26 19:23:46	41.73	0	3	3
libgit2	733	closed	5	csware	2012-05-26 18:42:02	5.83		+1		b'b"" Even if these variables do not instruct libgit2 to do anything, libgit2 provides methods on which other ppl. (might) rely. And those should not points to known problematic locations. That\'s a typo: I mean\'t %USERPROFILE%. On most systems %USERPROFILE% is the same as %HOMEDRIVE%\\\\%HOMEPATH%, however, for windows machines in an AD or domain environment this might be different and %HOMEDRIVE%\\\\%HOMEPATH% seems to be better.""'
libgit2	733	closed	6	scottjg	2012-05-26 18:42:02	44.42	+1			b'b"" so given these two snippets using env variables to fetch canonical locations...   i\'m wondering if we should replace the use of env vars with calls like:   it does seem odd to me that we\'re hardcoding a path (C:\\\\Program Files) in libgit2 which is known to be wrong on x64 machines...""'
libgit2	733	closed	7	scottjg	2012-05-26 18:42:02	3.9		+1		b""b' do you know offhand what happens for AD domains where the user has a UNC path (i.e. \\\\\\\\servername\\\\sharename\\\\...) to store their profile? what happens to %HOMEDRIVE% in that case?'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,8,2012-05-26 18:42:02,14.77,1,,,"b'b"" Yes", the was the solution I was referring to. %PROGRAMFILES% was put in there because it was the least wrong thing to put at the time. IIRC the library would only build cleanly on Windows for x86 and matching the default system config file to what uses made sense. As for  , this isn\'t something we can do by ourselves and we\'d need to coordinate it with git if %PROFILEPATH% isn\'t a good place to put it. Having different tools use different global configurations would probably be worse than not using the perfect variable. (if msysgit does use a different one," then we should move to that).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,9,2012-05-26 18:42:02,23.32,,1,,b'b\' Iirc the userprofile is always copied to the homedrive (roaming profiles). So %USERPROFILE% might contain an UNC path," but the real userprofile is ""cached"" on a harddrive", so %HOMEDRIVE%\\\\%HOMEPATH% points to the local copy.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,10,2012-05-26 18:42:02,19.92,1,,,"b'b"" Wait a second", does not properly resolve to on x64 systems? Microsoft makes me a sad panda. SHGetFolderPath makes me uneasy," because it\'s  in Vista/7. We\'ll need some compat logic around it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,11,2012-05-26 18:42:02,206.18,1,,,"b'b"" FWIW",  (and I think Win8) already have the compat logic in the OS. As in," I\'m pretty sure SHGetFolderPath() just calls SHGetKnownFolderPath() on Vista+. So it probably doesn\'t hurt to just use the old one for the near future.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,reopened,2012-08-14 19:19:18,1435.53,4,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,12,2012-05-26 18:42:02,958.68,,1,,"b""b' Closed by merging PR #952.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,closed,2012-10-16 16:39:04,1279.77,4,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,733,closed,-,-,-,4,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,opened,2012-08-20 06:37:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,title,2012-08-20 06:37:12,00:00,,1,,"b""b' Winxp compile fix'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,body,2012-08-20 06:37:12,00:00,,,1,"b""b' Hello! Fixed compilation for Windows operating systems.major1. Excluded __cdecl compilation flags", since  would not import functions from openssl dlls.2. For Windows XP call to inet_pton changed to WSAStringToAddressA, since Windows XP does not support this function.minor1. Projects in deps/\\\\* are created as static libs. Compilation was checked for Windows XP, Windows 7, Solaris 11, Sabayon 9 with Cmake 2.8 and Fedora 12 with CMake 2.6. All tests by libgit2_clar pass," except for Windows XP.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,1,2012-08-20 06:37:12,2.55,,1,,"b""b' This pull request [fails]url  (merged 4aa79766 into 6cb64ce3).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,2,2012-08-20 06:37:12,52.78,,,1,"b'b"" Well", Travis CI seems to miss ranlib," that\'s why the test build failed. I hav just downloaded MinGW and used it to compile for Windows XP compiles OK (but fails some tests).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,closed,2012-08-20 07:32:33,55.35,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,reopened,2012-08-20 07:32:38,0.08,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,3,2012-08-20 06:37:12,2.85,,1,,"b""b' This pull request [fails]url  (merged 4aa79766 into 6cb64ce3).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,4,2012-08-20 06:37:12,129.83,,,1,"b'b"" What\'s the advantage of building the dependencies as static libs if we\'re going to be linking them in anyway? The movement of the MSVC options makes the differences harder to read. Why did you move it? Commenting out the precompiled headers looks like a local optimisation that shouldn\'t make it upstream. I don\'t get the problem", either, works. Do we need all those defines? It\'s good to get OpenSSL linking," but what about the comment above the setting that says that not setting it causes problems with the CRT? The commit doesn\'t explain why that warning is dismissed. The last commit simply undoes a change from the previous commit. Please squash them together.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,5,2012-08-20 06:37:12,25.03,,1,,"b'b\' ""What\\\'s the advantage of building the dependencies as static libs if we\\\'re going to be linking them in anyway? The movement of the MSVC options makes the differences harder to read. Why did you move it?""This is not strongly needed"," when compiling with command line tools. But cmake -G ""Visual Studio xxx"" . creates project files for git2 and messes up deps/\\\\* files with the ones", included in git2 project. If we create separate projects for deps/*, we may focus at git2 files in Visual Studio IDE (well, it was convenient, when I was discovering," why  does not import from openssl dlls). ""Commenting out the precompiled headers looks like a local optimisation that shouldn\\\'t make it upstream. I don\\\'t get the problem", either," cmake build . works.""To build with nmake utility successfully"," I commented out precompiled headers. It seems the command sequence for creating precompiled headers should be changed (I can\\\'t say right now how). ""Do we need all those WINVER defines?""I use Windows XP and Windows 7. The _WIN32_WINNT define should be set to switch between WSAStringToAddress() and inet_pton() as Windows XP does not support the latest. Concerning WINVER", I don\\\'t think this is a vital define," but at MSDN they accompany each other. ""It\\\'s good to get OpenSSL linking"," but what about the comment above the __stdcall setting that says that not setting it causes problems with the CRT? The commit doesn\\\'t explain why that warning is dismissed.""I have never had (or heard) problems linking MSCRT. Can you point me out for some? And the problem is: using __stdcall interferes linking with any other library (at least using MSVC). ""Please squash them together.""Excuse me? You mean integration?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,6,2012-08-20 06:37:12,90.73,,1,,"b""b' This pull request [fails]url  (merged 74ba307c into 6cb64ce3).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,7,2012-08-20 06:37:12,9.93,,1,,"b'b\' ""Please squash them together.""As you say.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,8,2012-08-20 06:37:12,0.47,,1,,"b""b' This pull request [fails]url  (merged 63fb434b into 6cb64ce3).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,9,2012-08-20 06:37:12,179.22,1,,,"b'b"" There was discussion some time back that not using would break any callbacks we give to Windows. There\'s also the issue with linking the bindings", which may need to be told or use something similar. @nulltoken @xpaulbettsx  is there something there, or can we disregard this? It feels like we keep jumping between the conventions. Even if the warning is bogus, that should be stated.You can build with nmake if you want, but the project uses CMake and the precompiled headers save time when building on Windows. If it\'s such a big deal to build with CMake instead of nmake, adding an option might be desirable, but it shouldn\'t be mixed in with a commit that does other things.Windows 7 surely supports  ," no? Why can\'t we use that one for Windows and for the other OSs? That would simplify the logic quite a bit.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,10,2012-08-20 06:37:12,20.72,,1,,"b""b' @carlosmn more information on this topic is available at #3 and #356'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,11,2012-08-20 06:37:12,78.3,,1,,b'b\' ...would break any callbacks we give to Windows. MSDN clearly declares callback functions, programmer has to define the callback with exact declaration. No need to declare the WHOLE set of functions in a program to be __stdcall (exactly, what is done by /Gz switch with . BTW, is it done with mingw or in unix-like oses or for Mono?). An article of July 2003 url  clearly states, that C# programmer may point out the calling convention for an imported DLL (Optional DllImportAttribute Properties: CallingConvention). You can build with nmake if you want, but the project uses CMake... I use CMake to generate makefiles for different targets," one of them is nmake: cmake -G ""NMake Makefiles"" ... Why can\\\'t we use that one for Windows... Hm", that\\\'s just one of plenty decisions. I think it may be handy in the future to have precise _WIN32_WINNT, but your remark makes sense.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,12,2012-08-20 06:37:12,25.58,,1,,"b'b"" That article (and more specifically that part) does not talk about what we\'re doing. The problem isn\'t calling C functions from the bindings"," but calling C# code from C.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,13,2012-08-20 06:37:12,32.4,,1,,"b""b' ...calling C# code from C. url I think libgit2sharp has some work to do about bindings"," not libgit2.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,14,2012-08-20 06:37:12,9.85,,1,,"b'b"" If that works cross-platform"," then it looks like it\'s solvable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,15,2012-08-20 06:37:12,18.48,,1,,"b'b"" @igor-gorbunov Can you tell me the specific thing you\'re trying to do that you cannot do right now because it is  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,16,2012-08-20 06:37:12,12.68,,1,,"b'b"" I was trying to build libgit2 using cmake .. && cmake build . on Windows XP with Visual Studio 2005. The first problem arised I had no OpenSSL installed. When I installed OpenSSL and cmake found it\'s libs",  could not import a single function from OpenSSL\'s dlls (by means of ). I tried it in with different combinations of  Studios. Finally, I discovered that the switch /Gz interferes the import of dll functions. That seems the  must also be compiled as __stdcall (I haven\'t tried though). The problem may repeat if lbgit2 is to be compiled against .Anyway," this is weird to have git2.dll compiled under MSVC using __stdcall for all the calls and not using __stdcall for mingw.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,17,2012-08-20 06:37:12,647.63,,1,,b'b\' According to MSDN, is available since Windows 2000, so we should use it on Windows this way," we won\\\'t require that #ifdef\\\'s for newer Windows versions and can simply (continue to) rely on the fact that all ""windows.h""-defined functions are available from Win2000 upwards.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,18,2012-08-20 06:37:12,15.07,,,1,"b'b"" Okay", great. It sounds like we have a few concrete changes to make at this point. @igor-gorbunov would you be willing to adjust a few things to move this forward?1. Update to use your new version on all Windows builds, without differentiating between the versions. It sounds like it should work everywhere. :sparkles:2. Remove the code that distinguishes between Windows versions. I realize we may need it at some point in the future, but we would all like to keep things simple for as long as possible.3. Please move the platform specific configuration flags in the main  back into the original position so it is easier to see your changes. Relocating the section makes it harder to review the details of what you actually changed and just adds noise to the patch. We will still have to resolve what we\'re doing about and the precompiled header flags, but if you can fix up the above three things," it should simplify the patch here and move us closer to a mergeable patch. Would you also make a note of what version of CMake you\'re using? I want to make sure that none of the Visual Studio project file issues stem from an old CMake. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,19,2012-08-20 06:37:12,3.03,,1,,"b'b"" @arrbee Ok"," I\'m working on it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,20,2012-08-20 06:37:12,20.0,1,,,b'b\' @xpaulbettsx, it probably starts with this comment: of which I personally still think that it is bullshit. Because it\\\'s not the CRT that has any problems with vs.  . libgit2 compiles and runs fine using  . This comment should really state the reason, _why_ we sometimes (!!!) want a __stdcall build: Because it allows us to do PInvoke from .NET\\\'ed code. I\\\'m emphasizing the _sometimes_ here  so much, since folks seem to forget, that the Windows world consists of more than just .NET.If I wanted to link anything against libgit2 compiled with /Gz, I would have to turn on /Gz for _my_ code and for almost all of the code I externally depend on (as @igor-gorbunov stated in this PR, it causes problems even for libgit2 itself). Maybe I\\\'m a bit fundamental here, but that /Gz ought to be removed at all from the compiler switches. It\\\'s a _fast, yet very silly_ way to make _some_ things work (but teaches a lot of other things to fail). Since this topic pops up every now and then (including my own worries, this is the 3rd time i remember since I\\\'m watching libgit2 closely), maybe we _should_ find the time and make it finally right. Where right means: Being able to expose our API either with stdcall or cdecl, not depending on a compiler switch. Like in: Notice, that this does state the calling convention explicitly for the exported function _and_ it\\\'s callback (the former is obvious while missing the latter would result in randomly-looking crashes). We still would have to leave LIBGIT2API (Maybe find a better name then," Microsoft named their decl-macro just ""WINAPI"") out on functions with variable parameters", though. But these can\\\'t be used form .NET anyway. As for a very specific thing: Try to link any C++ project to libgit2 compiled with /Gz without using /Gz on the C++ code (which is rather rarely used in C++).\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,closed,2012-08-21 06:55:06,1402.47,2,16,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,21,2012-08-20 06:37:12,103.8,,1,,"b'b"" Why is it closed? Have I done something wrong?The C language has standard rules for calling conventions. No need to define blah-blah-blah. All the modern languages are aware of the C calling conventions and must have mechanisms to call C functions and provide callbacks to these functions (if not this is not the C language\'s problem).See also [libgit2sharp #205]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,22,2012-08-20 06:37:12,119.1,,,1,"b'b"" Cool to see that it is indeed possible to use cdecl functions from within .NET code. What about Pascal / Delphi? Is there still some Delphi around which is not .NET based and requires STDCALL Calling-Conventions? Given that"," could somebody be so kind to explain me why we cannot follow @igor-gorbunov \'s intention and remove the support for OPTION( STDCALL ....)?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,23,2012-08-20 06:37:12,131.4,,1,,"b""b' Please"," follow [#888]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,885,closed,-,-,-,2,18,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,opened,2012-09-10 15:12:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,title,2012-09-10 15:12:36,00:00,,1,,"b""b' WIP Add git_config_level support when handling config files'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,body,2012-09-10 15:12:36,00:00,,,1,b'b\' This is linked to libgit2/libgit2sharp#161 and libgit2/libgit2sharp#162. The current code is currently in a very  shape, but as always, I\\\'m all for a little feedback if you have better ideas on how it should be done. What I am aiming at is:Being able to specify a when adding a file to a  Retrieving this information when getting a config value (this would be done by making the get methods return a  , which contains the key, the value and the store of the config element)Being able to specify a config store when calling (should there be an overload that takes no config store?)Being able to specify a config store when calling (should there be an overload that takes no config store?)Being able to specify a config store when calling (the existing overload which takes no config store should keep looking in all config files based on the priority) I already:Modified and to get the config store informationModified to send a in the callback Current  that I have, and would love to hear your ideas:I think priority and config store are two different things. I tried playing with the idea of keeping only the config store notion, but I thought I didn\\\'t feel rightCurrently, it\\\'s possible to add several config files with the same priority. I\\\'m not really willing to change that. However," this raises the question of ""Can we have several config files with the same config store defined?"" (if yes", would this mean returning EAMBIGUOUS in the  methods?) =I currently have a (used in submodule.c for example). I\\\'m still wondering if I need it. I\\\'m sure I\\\'m missing other things yet. I will continue working on this and try to provide something consistent. Thanks!\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,1,2012-09-10 15:12:36,1052.93,,1,,"b'b"" Latest progress:====Following my thoughts given in the first comment of this PR:I don\'t think we need a afterall", gonna remove it soon unless I finally find a usage for itAfter two days of playing with this idea, I now tend to think that priority and config_store may be the same thing. Maybe we can remove the priority thing, keep only the store enum," and document it so that the clients know that libgit2 will resolve config keys with this priority: LOCAL =""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,2,2012-09-10 15:12:36,1012.13,1,,,"b'b\' Your concept of ""store"" and the existing priority do serve the same purpose. For the user-visible interface I don\\\'t really like either name"," though. Something like ""level"" or so seems more appropriate (but whatever). We\\\'d define the three standard ones (with the names given in the store enum) in libgit2", which the user can take as-is or ignore depending on what they\\\'re looking for. There is no need for this  , as git doesn\\\'t define it, and if the user needs it, she can define her own values. As for adding two files with the same priority, I believe it should replace the existing one. @nulltoken may feel a bit different (something about tracing the origin of odd errors if your config suddenly loses a whole config file). I don\\\'t like breaking by requiring a new parameter that most users have no use for; but I\\\'m sure we can find something.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,3,2012-09-10 15:12:36,792.07,,,1,"b'b"" Thanks for the comments @carlosmn !I renamed to  ", is it OK with what you had in mind?Thanks! It\'s removed!Ack, I had already made it so that we return a before reading your comment. I felt that returning an error when adding two files with the same priority would make it more obvious to the clients about what is happening. Maybe it means we should be able to remove an existing config_file (using a new function in the API), or maybe add a bool to the existing to override the error and always replace (some kind of  )?This is exactly what I ended up thinking! I feel that:the existing currently have the right behavior (looking first in local, then global, then system) =the existing currently have the right behavior too (they only update in the local ) In the latest push, I added the function. Here is what I\'m planning to do next:Add new API functions =Add new API function =Expose the parse functions (for int32/64, bool), so that if the client gets a config_entry," he can just call the parsing methods instead of calling back the  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,4,2012-09-10 15:12:36,1407.17,,1,,"b'b"" Latest progress:Added  Added  Added  Exposed parsing functions ( ",  ,  ,  ) I also fixed a bug related to config files having no newlines at the end (separate commit). In the previous behavior, adding a variable to such a file was appending the new variable to the last previously existing variable. Remaining things to do:Check if we need a for the multivar Add a bool to the ? What do you think about the new functions added to the API? Also, I didn\'t add tests for the parsing functions," as they are already covered by config-related tests. Do you think they should have tests on their own?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,5,2012-09-10 15:12:36,147.77,,1,,"b'b"" Latest progress:Added  . I didn\'t add a method for the because as it returns a  ", the store can be easily retrieved by the client.Modified the behavior of  . It was previously setting the var in all files, whereas it is now only setting the var in the local file.Added as a parameter to  , for when you want to replace an existing for a given level. @carlosmn I think I did all I could think of. When you have time," would you be so kind as to perform a review?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,6,2012-09-10 15:12:36,344.45,,1,,"b'b\' There are a couple of places where it still stays ""store"" in the tests. I\\\'d make the functions take an instead of a as the point is that the user is able to specify whatever value they see fit (it\\\'s also missing the prefix). Same for the field in  . The setters now mention that they act on the local config. While usually true", it should say that they act on the config with highest level, as it may or may not be true that it\\\'s the local one. I don\\\'t like the asymmetry in the names and  . Something like or hopefully still makes sense English-wise and gives us names where the only difference is .\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,7,2012-09-10 15:12:36,1016.67,,,1,"b""b' Fixed! Ready for review.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,8,2012-09-10 15:12:36,1339.73,,,1,"b""b' I ended up adding in the enum", and modifying (thanks for the suggestion @arrbee). I felt this new constant had its place in the enum, but if you prefer having it in a separate  ," I can also do it that way.Edit: or I can also pass -1 directly in the code...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,9,2012-09-10 15:12:36,375.57,1,,,"b'b\' I missed the leftover ""store"" on the first review as well", so don\\\'t worry :) It\\\'s probably useful for somebody to be able to ask for the highest level by name so they don\\\'t have to decide which function to use, but only the value. And it doesn\\\'t hurt. I\\\'m happy with it as it stands, especially as it doesn\\\'t break the API. Anybody have more comments or should we merge this in?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,10,2012-09-10 15:12:36,41.87,,1,,"b""b' @Haacked can you please peek at this? This should help resolving **[this]url  and libgit2/libgit2sharp#162.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,11,2012-09-10 15:12:36,50.07,,1,,"b'b"" I\'m probably not qualified to review the changes since I have no idea what XDG is and what idiomatic C should look like. ;) However", from the gist of the discussion," it sounds like we can build a proper libgit2sharp C# api on this that\'ll satisfy our needs. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,12,2012-09-10 15:12:36,45.27,1,,,b'b\' So, my main reservation with this PR is the addition of so many new functions into the API. It pains me just because it seems like so much for a library user to have to wade through. I can think of a few alternatives to the current version that I think we might want to discuss: remove the APIs without a level, only expose the string functions with the level param, move the level into the object as something you can set," or let you get a new config that is focused inside another config. The first two alternatives are not very appealing to me. Requiring a level on every API call sounds irritating and only having string functions for level-specific calls just means extra code with new bugs. For the third option (moving config level into the object) we would add just 2 new APIs: The first would basically ""focus"" the config on a particular level and calls to the existing APIs would now explicitly read from and write to that level. The second call (or the first call with a negative level?) would ""unfocus"" the level and go back to the searching behavior. I realize this idea is fraught with problems it makes the behavior of the API calls very dependent on the internal state of the object", which is pretty bad but it does keep the API surface area small and relatively simple, while still giving you access to the new behaviors. The fourth option is actually pretty appealing to me. Since we have explicit objects that contain the set of files, what if you could make a single-level focused config object from a multi-level one very cheaply: Combined with a little bit of extra ref-counting logic, the above call could be quite efficient. This approach doesn\\\'t make the config object stateful and keeps the current API largely the same. You do have to release the child config when you are through, but that doesn\\\'t seem unreasonable.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,13,2012-09-10 15:12:36,1.9,1,,,"b""b' Fucking nailed it one more time.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,14,2012-09-10 15:12:36,2.33,,,1,"b""b' I love this. It lets us be persistent"," use levels and keep the API small.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,15,2012-09-10 15:12:36,712.28,,1,,"b'b"" @yorah can you check how @arrbee\'s proposal would fit from a binding\'s perspective?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,16,2012-09-10 15:12:36,300.1,,1,,"b'b"" Sure. I only have access to my phone for the next two days"," but I\'ll look into it on monday.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,closed,2012-10-20 15:14:54,2.3,4,9,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,reopened,2012-10-20 15:15:17,0.38,4,9,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,17,2012-09-10 15:12:36,482.03,,,1,"b'b"" Hey @yorah Let me know what you think. If you want to collaborate on a type of API"," I\'d be happy to work together.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,18,2012-09-10 15:12:36,593.75,,1,,"b'b"" @arrbee I actually like the idea of  !  I removed most of the methods I had previously added", so the API looks cleaner now. I also started playing with the refcounting thing, but it\'s a bit trickier than I anticipated. Here are my findings so far:there is already some refcounting logic for  , but I don\'t think this is what we are interested in. It means that would return a new each time it is called, but the inside will be the same instance than the one in the parent  . Can you tell me if I\'m mistaken here, or not?it means that refcounting can be applied either on  , or on  . I almost had it working for  , but then I realized it meant exposing to config backend implementators. So I\'m now trying to only have it on  ," which would mean that this refcounting logic would stay an implementation detail of libgit2.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,19,2012-09-10 15:12:36,298.63,,,1,"b'b"" Well", it seems to be working ;) I left the in the API, along with the modification of the and the addition of  , because those two modifications are actually what we are the most interested with for LibGit2Sharp. We need to know what level is a config entry," in order to be able to then delete it or modify it from a specific config file. @arrbee Can you tell me if it\'s what you had in mind?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,20,2012-09-10 15:12:36,135.35,,,1,"b'b"" @yorah Looks great to me! :metal: This is what I was thinking and I appreciate that you\'ve got tests to check that the refcounting works", etc. Let me pull down the branch and run with valgrind just to make sure all the memory referencing is clean," then we\'ll get this merged! :sparkles:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,21,2012-09-10 15:12:36,16.02,,,1,"b""b' Looks great"," @yorah. Ship it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,22,2012-09-10 15:12:36,1.73,,,1,"b'b"" @yorah Sadly"," you\'re now expected to send a LibGit2Sharp PR as awesome as this one ;)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,23,2012-09-10 15:12:36,10.43,,,1,"b'b"" Valgrind looks clean. Let\'s go!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,closed,2012-10-23 16:53:15,97.97,4,10,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,24,2012-09-10 15:12:36,258.52,,,1,"b'b"" :love_hotel: Thanks to everyone for your feedback! I\'m on my way for the LibGit2Sharp PR I guess :smiley: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,923,closed,-,-,-,4,10,12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,opened,2012-09-22 10:59:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,title,2012-09-22 10:59:36,00:00,,1,,"b""b' Deploy git_repository_set_head()'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,body,2012-09-22 10:59:36,00:00,,1,,"b""b' Use constants for well-known refs related names and namespacesEnhance branch moving test coverageMake reset rely on  Deploy usage'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,1,2012-09-22 10:59:36,389.27,,1,,"b'b"" @carlosmn @scunz How about this?Added to identify local reference names from transformation of a remote one3 TODOs have been added and I\'d really like to have your feeling about them""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,2,2012-09-22 10:59:36,43.27,,1,,"b'b"" @nulltoken to test each PR", one of my jenkins instances has a clone which has only this refspec: So," indeed it is a valid use case to clone with a refspec that doesn\'t involve at all.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,3,2012-09-22 10:59:36,5.53,,,1,"b""b' Dammit! Thanks. I will work further on this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,4,2012-09-22 10:59:36,3.55,,1,,"b""b' @nulltoken and even more valid: sets  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,5,2012-09-22 10:59:36,77.38,,1,,b'b\' @nulltoken, I don\\\'t think that trying to lookup where HEAD should point looking at the is always right. For my own better understanding, I have put up a summary on how git clone works. There are quite a few things where we differ. See below. I ommited tag and mirror handling: ### git clone logic1.  setup transport and connect it2.  ls-remote3.  if ls-remote returned something give the result into (to determine the refs we want to have at all) if remote is not local and contains refs we don\\\'t have, fetch now guess where the remote HEAD points to determine where our head should point to (uses  )   if -b, search for that remote branch and die if not found   else our head shall point to where we guessed the remote head to point to   remember this for 7.4.  if ls-remote returned nothing If not cloning bare   setup a master branch tracking origin\\\'s master branch5.  if remote _is_ local or we have refs and not yet fetched, fetch now6.  update the matched remote refs7.  update our head (if we shall update it, which is not the case if we passed 4.)8.  disconnect9.  checkout ### guess_remote_head:  (in fetch.c)if transport supports, copy symref directly form there and returnif the all flag is set  return a list of all refs whose SHA1 is matching the remote HEAD\\\'s sha1else:  if \\\'s SHA matches HEAD\\\'s SHA," the remote head is ""master""  the first ref whose SHA is matching to remote HEAD\\\'s sha is the remote head ### wanted_peer_refs: (in fetch.c)if clone single-branch:  if -b is given", use that as remote-head else use result from guess_remote_head()  if we have no remote_head but -b, warn about it, else apply refspec to  remote-head and return the resultelse apply refspec to input and return result\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,6,2012-09-22 10:59:36,840.6,,,1,b'b\' @scunz Thanks a lot for this very detailed analysis! It\\\'s a very worthwhile and easy to grasp brief. But... I\\\'m not sure I\\\'m willing to fully leverage it right now. Indeed this PR was originally scoped at deploying the new methods. Moreover, the current clone API doesn\\\'t exposes many options, and I\\\'m a bit reluctant to update it right now. However, unless @ben throws a rock at me for this :smile:, I\\\'m volunteering to enhance it in another PR. However, as I\\\'ve started to work on this, I\\\'d like to go a little bit forward and deliver something coherent, keeping the scope on the HEAD  area. Currently, the API doesn\\\'t allow cloning from a local repo or passing the option. Considering this, I propose to make sure the following works and is correctly implmented. As part of the proposal I\\\'ll also add a test covering the cloning of an empty repository. How do you feel about this? ### git clone logic1. setup transport and connect it2. ls-remote3. if ls-remote returned something give the result into wanted_peer_refs (to determine the refs we want to have at all) if remote ~~is not local and~~ contains refs we don\\\'t have, fetch now guess where the remote HEAD points to determine where our head should point to (uses guess_remote_head) ~~if -b, search for that remote branch and die if not found~~ else our head shall point to where we guessed the remote head to point to remember this for 7.4. if ls-remote returned nothing If not cloning bare setup a master branch tracking origin\\\'s master branch5. ~~if remote is local or we have refs and not yet fetched, fetch now~~6. update the matched remote refs7. update our head (if we shall update it, which is not the case if we passed 4.)8. disconnect9. checkout ### guess_remote_head: (in fetch.c)~~if transport supports, copy symref directly form there and return~~~~if the all flag is set~~  ~~return a list of all refs whose SHA1 is matching the remote HEAD\\\'s sha1~~else:  if \\\'s SHA matches HEAD\\\'s SHA," the remote head is ""master""  the first ref whose SHA is matching to remote HEAD\\\'s sha is the remote head ### wanted_peer_refs: (in fetch.c)~~if clone single-branch:~~  ~~if -b is given", use that as remote-head else use result from guess_remote_head()~~  ~~if we have no remote_head but -b, warn about it, else apply refspec to remote-head and return the result~~else apply refspec to input and return result\'',,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,closed,2012-10-03 09:47:49,1368.22,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,reopened,2012-10-03 09:47:59,0.17,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,7,2012-09-22 10:59:36,541.23,,,1,"b'b\' Indeed I think it\\\'s perfectly fine to ""just"" adjust it as far as we\\\'ve already implemented the clone. Adding the whole bunch of options to the clone-mechanism is for sure another cow to milk...\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,8,2012-09-22 10:59:36,219.2,,,1,"b'b"" I :heart: what you\'ve done here. This fixes several bugs that were hiding in clone", and brings it closer to the official behavior, which is great. And no, I won\'t be throwing stones if you want to bring clone totally in line," but I agree with @scunz; that work should go in a separate PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,closed,2012-10-08 22:25:45,757.77,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,949,closed,-,-,-,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,opened,2012-10-22 20:54:07,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,title,2012-10-22 20:54:07,00:00,,1,,"b""b' CRLF logic does not work for non ASCII / UTF-8 encoded files'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,body,2012-10-22 20:54:07,00:00,1,,,b'b\' This is an issue I noticed while using checkout logic. I created a UTF-16 encoded file (e.g., using on my Windows machine): Checked this into git using msys git. Later, when I switched back to this branch using the libgit2 function," the checked out file was ""modified"". Looking at the contents of the file in a hex editor", it seems that libgit2 is not correctly applying line endings here.  In particular," the file contents after were :  fffe6f00 6e006500 0d000d0a 00 The file contents after checking out with msys git:expected file contents:  fffe6f00 6e006500 0d000a00 There is a ""0d0a"" (\\\\r\\\\n) in the middle of the UTF-16 ""0d000a00"" (\\\\r\\\\n).\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,1,2012-10-22 20:54:07,7.88,,1,,"b'b"" libgit2 has no support for UTF-16 files anywhere (not in smudge filters", not in diff). The main issue here is that we don\'t know when a file is actually UTF16, and we assume all text to be ASCII-compatible. The main issue here is that there\'s no way to find out if a file is UTF-16 when performing the CRLF conversion. We\'d have to read the .gitattribute, but obviously in your case that wasn\'t even set. For diffing, this is usually solved by manually setting the diff attributes for the file to use a third-party diff tool with support for multibyte encodings. For CRLF conversion," this is simply not solved at the moment. Does MSVC still generate UTF16 files by default?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,2,2012-10-22 20:54:07,55.58,,1,,"b""b' I created a VC++ project does not look like it (let me know if I missed your questions...)Just to make sure I understand you are saying that this is in general an unsolved problem at the moment (larger than libgit2)? In this case at least", it appears that msys git is correctly putting the file contents back on disk (and both libgit2 and msys git indicate that the files are modified compared to the index). Anyway, not sure if this is a high priority but just wanted to see if the difference in behavior from msys git was expected. Maybe msys git is looking at the Byte order marker in this case," which identified the file as UTF16 (the at the beginning of the file)?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,3,2012-10-22 20:54:07,13.2,,1,,"b""b' Yes"," UTF-16 is mostly an unsolved problem in Git. /cc @peff are you guys handling smudging properly for UTF16 upstream? Do you check for the BOM in smudge filters?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,closed,2012-10-22 22:11:10,77.05,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,reopened,2012-10-22 22:11:13,0.05,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,4,2012-10-22 20:54:07,0.85,1,,,"b""b' Woops. Wrong button. :blush: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,5,2012-10-22 20:54:07,0.6,,1,,"b""b' Well", our CRLF filter was ported from Core Git, so unless MSysgit rolled their own," their must be performing transcoding somewhere...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,6,2012-10-22 20:54:07,11.6,,1,,"b'b"" It shouldn\'t work. The CRLF converter works byte-by-byte"," which means it doesn\'t work on anything that isn\'t ASCII-compatible.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,7,2012-10-22 20:54:07,39.08,,1,,b'b\' Well, I think the main thing here is that there is no way that a UTF-16 file should be considered a text file. The heuristic for detecting a binary file should be setting off alarms for UTF-16 because of the NUL-bytes embedded in the data. From what I can tell, core git uses the merge engine to perform the checkout and the merge engine uses the routine to decide what to do (including, presumably, if CRLF filtering should be applied). Right now, our checkout code does not include a merge engine and does not check. It just filters based on attributes only. Interestingly, since our checkout implementation is diff-based, diff actually can classify files as binary based on content and the flag could be used to disable CRLF filtering for binary files. For speed purposes, I\\\'ve set checkout to disable binary detection while executing diffs, because diff actually attempts to classify both the left and right side of the diff which is not needed for checkout. As a quick fix, you could remove the flag from checkout and start disabling filtering if the diff delta is binary. The correct fix is probably to run the is-binary checker on the left side of the diff (but not the right side," since that\\\'s a waste of time for checkout). A simple way to do that might be to add a flag to diff so that the binary-ness of the left side of the diff would ""win"" without reading the contents of the working directory. Alternatively", we could wait for checkout to be using the merge engine.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,8,2012-10-22 20:54:07,264.7,1,,,b'b\' No, git-core doesn\\\'t deal with BOMs anywhere except in config files (where we skip past them as a convenience). UTF-16 works fairly horribly as text, not the least of which is because we will embed it along with ASCII diff headers in a diff. So there are a lot of fundamental assumptions all through git that your encoding will be an ASCII superset like latin1 or UTF-8. After discussing encodings with @brianmario many moons ago, I looked at having git detect UTF-16 by BOM. But it ended up being kind of pointless, since there\\\'s nothing useful to _do_ with them at that point. The right place to intercede is at the gitattributes level," and either textconv them (if you are diffing existing UTF-16 blobs) or use a clean filter (if you are checking in new content). One thing we could do is have a special gitattribute match for ""this thing has a UTF-16 BOM""", so you don\\\'t have to match based on the pathname.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,9,2012-10-22 20:54:07,874.53,,,1,"b""b' Thanks for the explainations everyone! At this point I assume the issue as @arrbee explained. I am not blocked on this at the moment"," but might try one of his suggestions if needed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,10,2012-10-22 20:54:07,4.68,,,1,"b'b"" The checkout functions are now more careful about not applying filters to binary content than they were when this issue was first opened", so I don\'t think the specific problem mentioned in the description is stil happening. Also, as discussed, there is no particular handling for UTF-16 files and the conversion of file endings, so there is not much to do on that front (or rather, a feature request to have libgit2 support CRLF logic for UTF-16 files should be a separate issue, I think). Therefore, I think I\'m going to close this issue. If there is a specific fix or update that we want," let\'s open a new issue that details the specific action to be taken more narrowly. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,closed,2013-07-05 18:06:50,1195.62,3,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1009,closed,-,-,-,3,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,opened,2012-10-27 23:34:42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,title,2012-10-27 23:34:42,00:00,,1,,"b""b' Cmake flags clean'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,body,2012-10-27 23:34:42,00:00,,1,,b'b\' 4 commits on Aimed at improving maintainability and ability of compiling developer to control via cmake.Clarifies but does not change present behaviour. Remove duplicate CMAKE_C_FLAGS inside CMAKE_C_FLAGS_DEBUG.  For Debug builds, CMake uses concatenated  CMAKE_C_FLAGS and CMAKE_C_FLAGS_DEBUG  This reverts commit 291f7122927d2cc170dc63c378a08fa78515d987.  (CMAKE_C_FLAGS is still controllable from cache," pre-filled from environment\\\'s CFLAGS) Remove ""-O2 -g"" from default CMAKE_C_FLAGS.  Those are the RelWithDebInfo flags.  They should be controlled from CMAKE_BUILD_TYPE Removed overwrite of CMAKE_C_FLAGS_DEBUG.  No overwriting allows control from cmake cache or cmdline  -g is already the CMake default  -O0 is already gcc\\\'s default Leave CMAKE_BUILD_TYPE absent on those generators which don\\\'t use it.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,1,2012-10-27 23:34:42,1222.98,,,1,"b""b' Yeah"," this looks great. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,2,2012-10-27 23:34:42,25.82,,,1,"b""b' Cheers.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,closed,2012-10-29 20:23:30,1248.8,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,reopened,2012-10-29 20:24:05,0.58,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,closed,2012-10-29 20:24:08,0.05,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,3,2012-10-27 23:34:42,0.88,,,1,"b""b' Hey"," you closed before I could merge! Here it goes. :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,4,2012-10-27 23:34:42,2.07,1,,,"b""b' Oops.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,5,2012-10-27 23:34:42,3.33,,,1,"b""b' Great"," thanks for the merge.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1027,closed,-,-,-,1,2,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,opened,2013-01-09 17:44:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,title,2013-01-09 17:44:56,00:00,,1,,"b""b' Add a failing test for CRLF filters'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,body,2013-01-09 17:44:56,00:00,,1,,"b""b' This PR contains a test which fails due to CRLF filters being applied to files which they probably should not be. I have not tried to root cause this yet but I figured I would send it along. The repo contains:1. A UTF-16 text file with BOM that contains 2 character (4 byte) CRLF line endings. For this encoding",  appears to not turn these into 1 character (2 byte) LF line endings," so it is stored in the repository with its full CRLF endings.2. Just a simple JPEG file.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,1,2013-01-09 17:44:56,367.4,,1,,"b'b"" So", right now, checkout calls to find the filters that should be applied to a given blob. Internally, doesn\'t appear to try to do any smart checking of file content it just looks at attributes. Actually, the API only gets the file name so it can\'t look at the content. I can fix this issue very easily in with a call to on the blob data, but I\'m wondering if that check should really be moved inside of either or so that other places get the same fix. The problem with putting it in is that that function doesn\'t currently get the blob contents, so it can\'t examine them for binary-ness. The problem with putting it in is then we will still have to allocate a second buffer and copy data into it, even if we aren\'t making crlf conversions," which is wasteful and bothers me. An alternative would be to change the filtering API so that the decisions about which filters to apply can access both the filename and the possible content if it is present.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,2,2013-01-09 17:44:56,11.37,,1,,"b'b"" I think the minimal fix is @830c58f0ba07dae5cc5619a0c4388a1e91e33e2f If you like", you can try to cherry pick that commit and see if it resolves this for you. To be honest," I didn\'t really test it beyond making sure that it didn\'t break existing tests...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,3,2013-01-09 17:44:56,1168.45,,1,,"b'b"" @phkelley As I\'ve thought about it more"," I believe we should probably pull in the @830c58f0ba07dae5cc5619a0c4388a1e91e33e2f fix for now. What do you think?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,closed,2013-01-11 22:32:22,287.43,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,reopened,2013-01-11 22:34:36,2.23,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,closed,2013-01-12 01:16:55,162.32,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1215,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,opened,2013-01-13 03:14:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,title,2013-01-13 03:14:15,00:00,,1,,"b""b' refdb abstract reference '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,body,2013-01-13 03:14:15,00:00,,1,,"b""b' An abstraction on ref storage allows for pluggable ref backends and includes a standard filesystem based ref storage mechanism that allows for loose and packed refs.[x] unit tests[x] docs in the cc @jwiegley'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,1,2013-01-13 03:14:15,68.13,,,1,"b""b' Now with test goodness"," squashed and rebased. /cc @vmg '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,closed,2013-02-26 04:22:23,68.13,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,reopened,2013-02-26 04:22:39,0.27,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,2,2013-01-13 03:14:15,0.83,1,,,"b""b' (Oops"," re opening because I fat-fingered the close button.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,3,2013-01-13 03:14:15,753.27,,,1,"b'b"" The only thing I don\'t like this is having as an external API for the refs DB. It\'s soooo implementation specific that I\'d prefer it was hidden behind the on-disk refs backend. Do you think this would be possible?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,4,2013-01-13 03:14:15,24.5,,1,,"b'b"" I agree with you"," it exists _only_ for the on-disk format and it\'s a really leaky abstraction.  But this abstraction is going to leak as long as exists. Can we kill and make consumers deal with the knowledge of the backend they\'re using?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,5,2013-01-13 03:14:15,87.37,,1,,"b""b' How about something more high level such as  ? Each backend would implement it accordingly to the kind of storage. would call a static method."," for instance. It might even be a no-op for some backends.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,6,2013-01-13 03:14:15,9.92,,1,,"b""b' This is a not-unreasonable compromise.  @vmg  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,7,2013-01-13 03:14:15,2.2,,,1,"b'b"" Meh", GC is a flaky term, because it implies that references could be removed if they are not in use. That\'s what GC does after all, while packing references doesn\'t remove them. :p  Let\'s go with  ," which doesn\'t sound as gnarly.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,8,2013-01-13 03:14:15,35.68,,1,,"b""b' How about?   :trollface: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,9,2013-01-13 03:14:15,2.15,,1,,"b'b"" Anything related to gives the wrong idea. We\'re not cleaning up", we\'re not removing references. We\'re simply optimizing them... So, yeah," either go with or  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,10,2013-01-13 03:14:15,303.28,,,1,"b""b' This looks great", guys," thanks for all the good work!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,11,2013-01-13 03:14:15,46.02,,1,,"b'b"" OK", this is less leaky -a lot less leaky.  While I was looking at the packed leakage, I realized that the first pass of this wouldn\'t really work at all, since the backends needed to still write directly to the components," which of course aren\'t public. Backends are now not expected to have any knowledge of internal structure.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,12,2013-01-13 03:14:15,1152.02,,1,,"b""b' Fixed with url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,closed,2013-03-07 20:39:38,976.98,1,9,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1240,closed,-,-,-,1,9,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,opened,2013-01-20 09:00:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,title,2013-01-20 09:00:38,00:00,,1,,"b""b' fetch from in memory remotes without fetch refspec'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,body,2013-01-20 09:00:38,00:00,,1,,"b'b"" The docs for state:  Downloading from in memory remote does nothing with NULL as the fetch refspec. The only call that I managed to properly use on this remote was  . I\'m not sure if this is a bug or missing documentation. Here is a test that fails"," callcount is 0:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,1,2013-01-20 09:00:38,231.85,,1,,b'b\' This looks to be a left-over from the docs of dangling remotes. If youdon\\\'t provide any refspec," then you\\\'re asking the library not todownload anything. I suppose it could default to ""HEAD:""", but you need to figure out whatthe refspec should be from user input anyway, so it doesn\\\'t help much. /cc @ben \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,closed,2013-11-11 12:46:44,226.1,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,2,2013-01-20 09:00:38,46.33,,1,,"b""b' #1914 has been reverted. Reopening.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,reopened,2013-11-11 13:38:49,52.08,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,3,2013-01-20 09:00:38,426.53,,1,,"b""b' Closing now that #1956 is merged'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,closed,2013-11-11 20:45:29,426.67,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1261,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,opened,2013-02-04 09:34:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,title,2013-02-04 09:34:11,00:00,,1,,"b""b' how to cancel clone progress?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,body,2013-02-04 09:34:11,00:00,,1,,"b""b' There are function GIT_EXTERN(void) git_remote_stop(git_remote *remote) to stop download.  but git_clone function use local variable to record git_remote information.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,1,2013-02-04 09:34:11,660.83,,1,,"b'b"" Hey", you\'re right! I have two ideas of how this could be solved:1. Give the network-transfer progress callback a pointer to the remote. This would open up the whole API to the progress handler, though, and may have unintended consequences.2. Allow the callback to return a non-zero value, which would cause the clone logic to cancel the transfer and clean up the mess. This would take a bit of work to make sure all the protocols support canceling the transfer based on the return value of the callback. This has precent with the [diff API]url  and would behave similarly. I\'m leaning towards option 2. It has a minimum impact on the API (the callback returns now)," and seems to fit the problem space. What do you think?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,2,2013-02-04 09:34:11,114.32,,1,,"b""b' :+1:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,3,2013-02-04 09:34:11,287.95,,1,,"b""b' I also prefer option 2. 2013/2/5 nulltoken notifications@'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,closed,2013-02-14 09:42:48,8.62,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,reopened,2013-02-14 09:42:52,0.07,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,4,2013-02-04 09:34:11,389.82,,1,,"b""b' It should be fixed with #1316 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,closed,2013-02-14 09:47:06,4.23,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1310,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,opened,2013-03-07 07:10:29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,title,2013-03-07 07:10:29,00:00,,1,,"b""b' git_buf_vprintf fails when parsing repositoryformatversion = 0 on windows'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,body,2013-03-07 07:10:29,00:00,,,1,b'b\' Originally posted on [stackoverflow]url  git describe returns On a Windows XP, 32-bit machine I\\\'ve cloned the libgit2 repository using Then I configured from trunk_build_debug for mingw using: and build-ed it The .git directory is created and I can use git status to query it. Also, I have git installed in Program  and it works just fine. The file that is mentioned does not exist in user directory," that is true. I\\\'m not happy because I can\\\'t check the returned error code (the error may be ""real""). So I\\\'ve created an empty file in D:\\\\Documents and Settings\\\\User \\\\git\\\\config The .git directory is again created but I get the same -1 error code. This time returns NULL. Debugging libgit2 I arrived at following failure: So computes an expected size based on the format (%s.%s)  repositoryformatversion = 0 is longer than this", so the call to p_vsnprintf() fails.Changing the line to prevents the failure. but I don\\\'t think is a proper solution (nor do I have other suggestion).\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,1,2013-03-07 07:10:29,297.65,,1,,"b'b"" The first error string you can ignore. It is not the cause of the error", it\'s simply leaking; it seems we\'re not clearing the buffer correctly. only fails (returns -1) if the underlying system\'s vprintf tells it something went wrong. If there is not enough space tell us how long it should be, and we allocate that much space (rounded). Allocating more memory simply shouldn\'t have any effect on that. is simply a way to make most calls need a single memory allocation instead of having to try again. Windows for some reason only ever returns -1, but in that case is called, giving us the right return code again. Thus for Windows, we never return -1. This could only happen if you\'re building inside MinGW (maybe cygwin?) and the library encounters an error," which  the library wouldn\'t be able to handle in any case.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,2,2013-03-07 07:10:29,42.52,,1,,"b""b' I am building inside MinGW"," yes.  So the problem is __mingw_vsnprintf?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,3,2013-03-07 07:10:29,16.38,,1,,"b""b' How about:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,4,2013-03-07 07:10:29,29.9,1,,,"b'b"" First of all", you need to start by telling us you\'re on MinGW, because that\'s not the same as Windows. Hiding an error from the system and returning some random value isn\'t a viable solution. What it looks like is that MinGW is in fact using the from the MSCRT," so the define isn\'t needed at all and the function under MinGW should get the same broken status as on Windows. So try with simply the code inside the before ignoring error codes from the OS.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,5,2013-03-07 07:10:29,22.02,1,,,"b'b"" First of all", you need to start by telling us you\'re on MinGW, because that\'s not the same as Windows. My bad. Hiding an error from the system and returning some random value isn\'t a viable solution.... So try with simply the code inside the #ifdef before ignoring error codes from the OS. The error code means that the buffer is not large enough. Are there any other error cases?The return code is not ignored, it is handled. The value is not random," is the size of the buffer plus half its size a method to request a larger buffer. git_buf_vprintf() would handle this well: If I\'m using the version for MSC an exception is raised: DLL entry point not found""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,6,2013-03-07 07:10:29,49.6,,1,,"b'b""   means format error and it\'s the only actual error you can get from it according to POSIX", which is what we\'re simulating with the functions. If there is an actual error," your proposed solution would take us into an endless loop where we keep allocating more memory. The issue is assuming behaves like POSIX instead of like MSCRT. Change that assumption instead of trying to assume what errors can happen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,closed,2013-03-07 16:13:50,543.35,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,7,2013-03-07 07:10:29,86.6,,,1,"b'b"" link me", please, because the [msdn page]url  is telling us that: Return Value  vsnprintf,_vsnprintf, and _vsnwprintf return the number of characters written if the number of characters to write is less than or equal to count; if the number of characters to write is greater than count, these functions return -1 indicating that output has been truncated. The return value does not include the terminating null, if one is written.  If buffer or format is NULL, or if count is less than or equal to zero, these functions invoke the invalid parameter handler, as described in Parameter Validation. If execution is allowed to continue, these functions return -1 and set errno to EINVAL. The [POSIX standard]url  states that: If an output error was encountered, these functions shall return a negative value.If the value of n is zero on a call to  snprintf(),  nothing  shall  be written,  the  number  of bytes that would have been written had n been sufficiently large excluding the terminating null  shall  be  returned, and s may be a null pointer. note that [vfprintf]url  redirects to linked page. I see no mention about -1 being a hint that a format error occurred. Is the linked page inaccurate? So, maybe the issue is that I don\'t get what the purpose of p_vsnprintf() is. It is true that proposed solution may not return the size of the buffer that\'s needed the first time it is called, but p_vsnprintf() is called in a loop, anyway. The code that uses p_vsnprintf() does not set n to 0, so its not POSIX compliant anyway (again," according to the linked page). ""'",,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,reopened,2013-03-07 16:15:09,1.32,2,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,8,2013-03-07 07:10:29,41.77,,1,,"b'b"" Some places call it \'output error\'", others \'format error\'. That is not the issue. functions simulate what POSIX does so we can program the library with those assumptions. Thus needs to return what would return on POSIX. The code in the   does this. As it seems MinGW is using those functions underneath, the same functions (though apparently without the leading underscore," for whatever reason) need to be called so we get the result we\'re asking of it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,9,2013-03-07 07:10:29,107.15,,1,,"b""b' This compiles (and should work", but I have no MinGW environment handy), assuming you do have in the environment," and avoids assuming how the higher layers work by returning the length rather than some random number.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,10,2013-03-07 07:10:29,275.85,,1,,"b'b"" Are you using an old version of MinGW? I can\'t reproduce their behaving like Windows. It seems from 3.15 onwards"," they implement the C99 versions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,11,2013-03-07 07:10:29,86.87,,1,,"b'b"" It\'s in fact when and friends started behaving like in C99. It was released in 2007 and it doesn\'t seem realistic to support anything older. If you do have a newer version of the runtime and it behaves like the MSCRT version"," the bug would lie with them.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,12,2013-03-07 07:10:29,324.9,,1,,"b""b' I am using the MinGW version that ships with Qt 5.0.1.  file states: It seems that [Qt 5]url  uses [MinGW-builds]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,13,2013-03-07 07:10:29,3.68,,,1,"b""b' I have tested provided patch and it works just fine.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,14,2013-03-07 07:10:29,260.57,,1,,"b""b' MinGW-Builds is a collection of compilers. It has no bearing on the runtime version. Look at to see the runtime version.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,15,2013-03-07 07:10:29,53.98,,1,,"b'b"" __MINGW32_VERSION is not defined in $install_ The script [here]url  modified to use the i686-w64-mingw32 directory",  returns: The string __MINGW32_VERSION is not to be found in the directory.The file D:\\\\qt\\\\5.0.1\\\\tools\\\\mingw\\\\i686-w64-mingw32\\\\include_mingw_mac.h is the only one to define something that responds to MINGW.*VERSION regular expression: But then again," there\'s a big elephant in the room: **mac**. This may mean that MinGw is version 3.11. It ships with Qt 5.0.1 so it may be as current as it gets.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,closed,2013-03-08 11:29:55,1154.77,2,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,16,2013-03-07 07:10:29,0.53,1,,,"b'b\' I simply hate that ""Close & Comment"" button\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,reopened,2013-03-08 11:30:28,0.55,3,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,17,2013-03-07 07:10:29,101.97,,1,,"b'b"" So you\'re not using MinGW but **mingw-w64**. That\'s a different environment yet again. The change I pasted here _happens_ to work"," but it\'s not something we should be shipping. It looks like we might we able to get proper behaviour even out of mingw-64 by defining to 1. Try adding that to the CFLAGS (something like should work for gcc) with what libgit2 ships.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,18,2013-03-07 07:10:29,32.47,,1,,"b'b"" Running  Results in a library that does not throw any messages with and without the config file. And", since we\'re getting somewhere," -compat.h generates warnings for  adding  just before hides the warnings but I suspect you will find this solution superficial. :) Should we investigate the [output of libgit2_clar]url  in a new issue?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,19,2013-03-07 07:10:29,67.33,,,1,"b'b"" I\'ve updated the development branch with a CMake rule that should ask any MinGW  to use the C99-style calls. I\'ve installed the Qt stuff in a VM and it seems to workt here. I\'m not sure what we should do about the redefinition. Maybe is the right thing"," but I\'d have to look more carefully about what the mingw environment wants us to use. My output is clean on Windows 7. I have an XP VM somewhere that I\'d have to dig out to figure out whether it doesn\'t quite like using the Unicode functions on that OS. What language is your installation in?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,20,2013-03-07 07:10:29,204.5,,1,,"b'b"" I will not be able to access the machine in question until Monday. Most probably the language is English.  Until then I\'ve installed Qt 5.0.1 on a VirtualBox image with XP on it to see if libgit2_clar produces same output. And it seems that it does not. The only thing that is seen is: For this machine  returns 0409 English These two should have been the same (Qt 5.0.1 downloaded days apart", Qt Creator used to build both using the CMake extension) so there is something messing around with first machine," I suppose. I will look into that Monday.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,21,2013-03-07 07:10:29,21.13,,,1,"b'b"" I\'ve ran this on XP now manually and through Qt Creator"," and see no errors with either run.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,22,2013-03-07 07:10:29,1043.13,1,,,"b""b' The machine that experienced failures also returns 0409 English", so the language is the same. Strangelly enough," only 3 tests fail today:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,23,2013-03-07 07:10:29,524.7,,1,,"b'b"" Those errors suggest that you checked out libgit2 using an older version of msysgit which mangled some UTF-8 filenames in the test data. Never versions of msysgit (i.e. those released roughly in the last 12 months) don\'t have this problem. Can you check what version of msysgit you used to grab the libgit2 code?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,24,2013-03-07 07:10:29,575.12,,1,,"b""b' Git (version 1.7.8-preview20111206)msys-1.0.dll reports:API version 0.46Build date: 2011-05-22 01:19File version 1.0.12Product version 1.0.12  This is a standard installation for Windows of the Git package downloaded from [here]url  I can see that there are newer versions so I will get latest"," pull the libgit2 and see if it happens again.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,25,2013-03-07 07:10:29,60.35,,1,,"b""b' The test program shows no failed test cases after pulling again with new version of (msys)git.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,closed,2013-03-12 11:30:35,0.12,4,18,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1400,closed,-,-,-,4,18,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,opened,2013-03-29 06:10:47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,title,2013-03-29 06:10:47,00:00,,1,,"b""b' Segmentation fault when fetching a empty repository'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,body,2013-03-29 06:10:47,00:00,,,1,b'b\' When I use to fetch an empty git repository a segmentation fault occurs. Program received signal SIGSEGV," Segmentation fault.__strcmp_ia32 () at ../:40(gdb) file: ""../"""," line number: 1000000(gdb) file: ""../"""," line number: 1000000(gdb) file: ""../"""," line number: 1000000(gdb) file: ""../""", line number: 1000000 To reproduce it:1. Create a bare repo : mkdir  && cd / && git init bare2. init a git repo : mkdir bar && cd bar/ && git init .3. use git2 to fetch foo into bar : /  fetch / == Received 0/0 objects in 0 bytes Erreur de segmentation (core dumped) backtrace(gdb) bt#0  __strcmp_ia32 () at ../:40#1  0x00ef8289 in git_remote_write_fetchhead (remote=0x9616798, update_heads=0xbf9ba98c) at /:745#2  0x00ef8894 in git_remote_update_tips (remote=0x9616798) at /:889#3  0x08049511 in fetch (repo=0x9616058, argc=2, argv=0xbf9bab58) at fetch.c:133#4  0x08048e56 in run_command (fn=0x8049334 , argc=2, argv=0xbf9bab58) at git2.c:34#5  0x08048f61 in main (argc=2, argv=0xbf9bab58) at git2.c:59 First analysis :As I downloaded nothing,"spec"" is empty and function ""git_refspec_src"" return NULL(gdb) print spec$1 = (struct git_refspec *) 0x96167b8(gdb) print *spec$2 = {next = 0x0, src = 0x0, dst = 0x0, force = 0, pattern = 0, matching = 0}But strcmp does not like NULL to compare strings and then SIGSEGV occurs Workaround : I ""goto cleanup"" if git_refspecs_src returns NULL. But I\\\'m not sure this is the right solution. libgit2 version : v0.16.0-2495-g8cfd54fI can provide the coredump if you want\''
libgit2	1444	closed	closed	 - 	2013-03-29 06:11:12	0.42	0	1	1
libgit2	1444	closed	reopened	 - 	2013-03-29 06:11:25	0.22	0	1	1
libgit2	1444	closed	1	txdv	2013-03-29 06:10:47	51.48		+1		b""b' Could you please provide the code for the step number 3?'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,2,2013-03-29 06:10:47,2.38,,1,,"b""b' @txdv Here it **[is]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,3,2013-03-29 06:10:47,17.33,,1,,"b""b' Yes"," it is hereBut we must move the call to git_remote_disconnect(remote); after the call to git_remote_update_tips or git_remote_update_tips will return the remote is not connected.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,4,2013-03-29 06:10:47,186.38,,1,,"b""b' @Lionelon I cannot reproduce this through a test. Below my passing attempt. FWIW", in remote.c:745," spec is   Can you add this to your local suite and check if it passes as well in your environment?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,5,2013-03-29 06:10:47,15.62,,1,,"b'b\' I may have found the **[issue]url  is passed as a refspec to  . @carlosmn How should we handle this? Shouldn\\\'t we add some kind of ""guessing"" there? Regarding this function", the doc states  . However, it looks like there\\\'s no _default_ implemented in  .\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,6,2013-03-29 06:10:47,109.92,,1,,"b""b' Yes if I use a correct refspec instead of NULL"," the issue does not exist.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,7,2013-03-29 06:10:47,8.15,,1,,"b'b"" That defaults thing has bit us before in some other issue and it\'s plainly false currently. If there is no refspec configured"," we should fetch and put it in  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,8,2013-03-29 06:10:47,11.9,,1,,"b""b' So", find the current local reference points to, then determine its matching remote reference through  ," eventually build a refspec out of this and use it as the fetch refspec?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,9,2013-03-29 06:10:47,3.22,,1,,"b'b"" We guess the default branch on the remote", fetch that commit and write to  . It\'s what we do anyway," but we only do it for the default branch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,10,2013-03-29 06:10:47,79.93,1,,,"b'b"" The segfault was fixes in the refspec revamp that got merged as a472f88. failing was fixed a bit earlier. We don\'t quite behave like git (where it complains loudly there is no remote HEAD) but that\'s more of tool-specific behaviour.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,closed,2013-04-23 14:17:07,485.7,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1444,closed,-,-,-,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,opened,2013-04-27 09:47:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,title,2013-04-27 09:47:45,00:00,,1,,"b""b' GIT_INLINE does not export the functions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,body,2013-04-27 09:47:45,00:00,1,,,"b""b' For example the function used to be declared GIT_EXTERN", but is now declared GIT_INLINE. The unfortunate side effect is that is now no longer an external symbolin the libgit2 shared library. Which in turn makes it impossible to call this method from a non C based language. I can still work around this by just calling  ," however it is a bit disconcerningwhen methods that used to work and are still documented suddenly are not exported anymore.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,1,2013-04-27 09:47:45,308.28,,,1,"b'b"" You can\'t call that function because it doesn\'t exist. It\'s inlined because it\'s just a convenient way of avoiding a cast and it\'s nicer than a macro", but that\'s all there is. You can\'t call the function from C either," it\'s being replaced by the call to at compilation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,2,2013-04-27 09:47:45,28.25,,1,,"b""b' Ok", that is fair, but why is it documented in the libgit2 API reference? I assumed that functions documented in the libgit2 API document are callable.If that is not true," how do I get a list of exported functions?  (Besides running nm on the resulting shared library)?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,3,2013-04-27 09:47:45,126.37,,1,,"b'b"" It\'s documented in the API reference because it\'s part of the API. The only hierarchical objects the library has are the ones given by the Git object model", and that\'s where we have helpers for the common object  to avoid having to cast pointers. There isn\'t really anything else in the library with the same relationship (towards the outside), but if what you want a list of functions in a shared object," then is what you use.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,4,2013-04-27 09:47:45,186.13,1,,,"b""b' So this means that the documented libgit2 API is only applicable to C. It does not describe the APIexposed by the libgit2 shared library. This is a bit unfortunate.  I am updating the common lisp libgit2 bindings.  And the way to accesslibraries in common lisp is by loading them dynamically and call the defined methods in the library.This is (besided the calling conventions) language agnostic", and because lisp is not C, it will not read theheader files to understand that the git_commit_id is actually an alias for git_object_id. So for every function which is declared GIT_INLINE we have to inspect the implementation and writeour own work arounds. (that is reimplement it.)  In case of git_commit_id it is trivial, we just use git_object_id. However, it is a bit of a pity that libgit2 does not expose this method in the library. If this happens for more complicated code there are two options:1. Reimplement the missing featurs in Lisp2. Write an additional wrapper library (written in C), just to export the symbols. I wonder how other language bindings solve this issue. Kind regards,"Wim Oudshoorn.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,5,2013-04-27 09:47:45,23.12,,,1,"b'b"" @woudshoo I\'ve found out that there\'s a third option which is pretty efficient way to deal with this. Send a Pull Request and explain my . It works surprisingly well. Cheers!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,6,2013-04-27 09:47:45,46.12,,,1,"b'b"" As always @nulltoken gives excellent advice. I\'m not averse to removing inlines from the documented public API to make things easier on binding authors. If you have the chance to put together a pull request"," that would be great.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,7,2013-04-27 09:47:45,134.78,1,,,"b'b"" @woudshoo there are no missing features. All those inlines are helpers to avoid  annoying C code. All of them are the ones where you call the underlying  . The bindings are either written in C  use whatever form of inheritance the language provides to call the version of the function"," because that\'s all there is to it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,8,2013-04-27 09:47:45,358.97,1,,,"b'b"" @carlosmn I am not opposed to having the functions in the API to avoid ugly C", I just would like to document itif it indeed is just a wrapper, and clarify the status that they are not available in the library themselves. I will prepare a pull requests documenting for the GIT_INLINE functionswhich function they wrap, and adding a note that they are not present in the shared library. Just a quick question.  I saw that and are also GIT_INLINE and I didn\'t see an obvious equivalent.  Is it ok if I make these two functions GIT_EXTERN again? (I hope that the making of functions into GIT_INLINE is a conscious decision," not just because the functions are short and can easily be written in the .h files.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,closed,2013-04-28 06:00:28,1212.72,4,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,reopened,2013-04-28 06:00:31,0.05,4,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,9,2013-04-27 09:47:45,287.6,,,1,"b""b' This is an interesting case. The structure is a public structure so implementing a comparison function can be done transparently. However", I can see that an exported comparison function would be useful for some languages. The rationale behind this change is documented in the commit that introduced it f6b26e770ffae621408532c5b2c1aae4fa1c9e49 namely that this is what core git does to have a fast OID comparison. For C-based languages that can use or wrap the existing inlines, it is nice to have it as is. I propose we introduce as an exported function (that just calls of course). Then for equality," either we can either just leave as is since it is merely a convenience function wrapping or we could start exporting and introduce a for the inlined version. That would leave  exported and  as inlines.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,10,2013-04-27 09:47:45,370.95,,,1,"b'b"" Hm"," I do not really care abot git_oid_cmp etc.  However I thought for consistency (all the other functions have some alternative) it might be nice to export them. But isn\'t it possible to make these functions inline and have a (non-inline) version in the library?(It has been quite a while since I programmed C) but I remember that being possible.However I remember also that it was a bit tricky with the right combination of inline  / extern etc.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,11,2013-04-27 09:47:45,111.93,,,1,"b'b\' I\\\'m pretty sure there is no portable way to mark a function as both inline and also have the library generate a external symbol with the same name. It sounds like there is a combination of ""extern inline"" that can generate this with some compilers if you are careful about where things are and aren\\\'t included", but it\\\'s probably not for us. I agree that it would be nice to have exported versions of the OID comparison functions, at lease since that provides the baseline functionality for comparing the binary OID data efficiently.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,12,2013-04-27 09:47:45,49.57,,1,,b'b\' Hm," I briefly looked up internal and external inline functions and according to the C99 standard this is possible.1. Declare in the function header the function as  1. and in one compilation unit put: This will make the function inline and exports it. However this requires the compilers to implement and use the 14 year old C standard.  But I guess that is too much to ask :-( (As reference see section:  6.7.4 of the C99 standard.) Or using a C++ compiler with extern ""C"" { ...} should do the trick to.  But I am to lazy to look up in which versionof the standard this was included", but I think a loooong time ago. [This reminds me why I don\\\'t like to program in C anymore.]\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,13,2013-04-27 09:47:45,49.07,1,,,"b'b"" Unfortunately", this doesn\'t work with MSVC," even with the latest VS12 compiler. I tried it with [similar files to what you suggest]url  but the release-mode binary doesn\'t export the symbol: Boo. :stuck_out_tongue_closed_eyes: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,14,2013-04-27 09:47:45,48.2,,1,,"b""b' Yes", I know.  Microsoft refuses to support C99.  (Also you have to tell gcc with gcc -std=c99 to use c99 instead of c89.) I am so glad I have not to deal with the mess that is the C standard compliance anymore.If I where you I would just refuse to support any compiler that does not support C99," but I guess you still  have to deal with the microsoft compiler (AFAIK almost all other C compilers support C99).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,15,2013-04-27 09:47:45,12.33,,1,,"b'b"" Wow", all this hating on MSVC. I don\'t think this is an issue of MSVC not supporting C99, I don\'t think C99 specifies the mechanics of shared library loading.  That sounds like an implementation feature, though feel free to correct me if I\'m wrong. In any case," I\'m pretty sure you can combine and in MSVC.  I\'ll investigate.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,16,2013-04-27 09:47:45,23.82,,1,,"b'b"" It doesn\'t matter. @vmg suggested and I implemented making the external versions of these functions non-inline. See #1518 for the latest (it now includes not just the OID functions).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,17,2013-04-27 09:47:45,451.57,,1,,"b""b' @ethomson It is not the loading of the shared library that is defined in C99.  However it is defined that if you specify just inline the function might not be exported but if you also add an reference in a compilation unit the function is exported. So as far as I can tell", the behavior is standardized in C99. [See section 6.7.4 point 6.] As said it does not matter, @arrbee is implementing a workaround in #1518.  But I have wasted to much time in my life figuring out these incompatibilities and it is not just MSVC, but in my experience it is the worst offender by far. Also," big thanks to @arrbee for taking this seriously!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,18,2013-04-27 09:47:45,370.55,,,1,"b'b"" Okay", the fixes for this have all been merged. is the only function left that is still inlines in the public API because it is really just a check that returns zero. This was a good opportunity to make sure that blob, tree, and tag objects all had common functions for accessing the properties anyhow," so I\'m pleased with the end result. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,closed,2013-04-30 11:35:21,334.83,5,8,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1508,closed,-,-,-,5,8,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,opened,2013-05-30 05:19:07,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,title,2013-05-30 05:19:07,00:00,,1,,"b""b' Added support for setting transport flags (No check SSL cert) to git_clo...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,body,2013-05-30 05:19:07,00:00,1,,,"b""b' As issue #1147", I was unable to git_clone a repository from github that used https, because it complained that the SSL certificate is invalid, so I added an option to git_clone to set the transport flags that will be used during the clone. More specifically," it checks to see if the transport flags == and if so it calls to set the correct options.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,closed,2013-05-30 13:03:27,464.33,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,reopened,2013-05-30 13:04:45,1.3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,1,2013-05-30 05:19:07,287.55,,1,,"b""b' @carlosmn what do you think?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,2,2013-05-30 05:19:07,127.62,,,1,"b'b"" It\'s fine as far as functionality goes", though the struct is getting somewhat unwieldy.  @NHDaly can you squash this into a single commit? The last two are fixups," and at least one of them doesn\'t compile.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,3,2013-05-30 05:19:07,31.07,1,,,"b""b' Yeah definitely. ... How do I do that? Do I need to make a different branch and start a new pull-request? Sorry; this is my first pull-request ever!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,4,2013-05-30 05:19:07,3.82,,1,,"b""b' You can use '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,5,2013-05-30 05:19:07,7.12,,,1,"b'b"" great", thanks!Also, I was wondering: If this wasn\'t exposed before, how were people successfully cloning from github?Was everyone just doing init," pull instead of clone?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,closed,2013-05-31 13:02:00,1437.25,2,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,6,2013-05-30 05:19:07,19.37,,1,,"b'b\' @NHDaly what do you mean ""how were people successfully cloning from github""?  Are you getting cert failures from ?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,7,2013-05-30 05:19:07,23.2,,1,,"b'b"" GitHub cert failures are most often associated with old linux distros such as RHEL"," where the root certificate for  isn\'t known to openssl. You get this issue using git-core as well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,8,2013-05-30 05:19:07,24.45,,1,,"b""b' @NHDaly if this is the case"," I would recommend you upgrade your file.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,9,2013-05-30 05:19:07,35.38,1,,,"b'b"" Okay yeah I will look into it", thanks a bunch. Yes, I was getting cert failure from GitHub. I don\'t think I ever upgraded my ca_certs file, i just downloaded openSSL and started. So the issue is that that process doesn\'t provide the most up-to-date certificates by default? That makes sense, I guess.How often do certificates change? If I were to distribute an ios app that uses openSSL," do I have to worry about its certificates expiring eventually?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1621,closed,-,-,-,3,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,opened,2013-06-28 03:17:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,title,2013-06-28 03:17:57,00:00,,1,,"b'b"" Don\'t bail out after failing to read submodule configs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,body,2013-06-28 03:17:57,00:00,1,,,"b""b' :warning: Not ready to merge As the config may only exist in only one of (or neither of?) the HEADor the index. This fixes dirty submodule diffs for me. /cc @jspahrsummers @arrbee'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,1,2013-06-28 03:17:57,81.28,,1,,"b""b' Not finished with this"," closing for the moment.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,closed,2013-06-28 04:39:14,81.28,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,reopened,2013-06-28 04:48:44,9.5,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,2,2013-06-28 03:17:57,43.97,,,1,"b""b' closing for good"," as this is not the correct place to fix this :-/'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,closed,2013-06-28 05:23:12,34.47,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1687,closed,-,-,-,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,opened,2013-06-29 06:50:00,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,title,2013-06-29 06:50:00,00:00,1,,,"b""b' Clarify behavior of  operations on a case insensitive platforms'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,body,2013-06-29 06:50:00,00:00,,1,,"b'b"" This **[LibGit2Sharp test]url  doesn\'t pass any longer when being run against f2c4188. The failing test has been stripped down to put this issue under the bright light of Clar.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,1,2013-06-29 06:50:00,1.72,,1,,"b""b' /cc @arrbee '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,2,2013-06-29 06:50:00,25.28,,1,,"b""b' Of course", in order to see the failure," this has to be run on a Windows box ;-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,3,2013-06-29 06:50:00,773.58,,1,,b'b\' I haven\\\'t had a chance to run this yet," by I think that: at the end of the new test should actually fail. Based on some other failing tests that @ethomson wrote in 1540b19990fa5c566d607785c7b3651756e706ff we intentionally changed the behavior of tree-to-index comparisons so that they would always be case sensitive. If the tree contains ""new_file"" and the index contains ""NEW_FILE"" then those should be treated the same even on a case insensitive platform only the filesystem is case-insensitive", not the actual data in the index. However, you point out an interesting dilemma. Although tree-to-index comparisons should be done case sensitively, pathspecs should probably be applied case insensitively for filtering purposes on platforms where the filesystem itself is case insensitive. This suggests that the fix for @ethomson\\\'s use case that I wrote in eefef642c8c0d9d527633294acdf9d7a0c9e94c0 is probably the wrong approach. I think on a case-insensitive filesystem," the traversal of the tree and index still need to be done with case-insensitive ordering (or actually semi-case-insensitive ""FILE"" should still sort before ""file"")", but using case-sensitive filename comparison to decide what the true deltas are. Ugh, That is a mess because the case-insensitive tree and index iterators currently collapse a sequence of case-mismatched entries into a single albeit conflicted entry. That behavior is actually important for checkout where these multiple files are going to get mapped onto one another. Hmm. _contemplation commences_ For the time being, I think applying pathspecs case-sensitively seems like the least bad thing to break of the many pieces that can be broken here. I\\\'ll need to think more about how to get all scenarios unbroken.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,4,2013-06-29 06:50:00,814.95,,1,,"b'b"" @arrbee Thanks for your answer. That indeed makes sense. Playing a bit further with this"," it looks like  isn\'t _that_ case insensitive on Windows. **git-status** **git-add**  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,5,2013-06-29 06:50:00,2.67,,1,,"b'b"" Closing this", as there\'s no need to keep the issue open any longer. 1ec680b may be worth cherry-picking," though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,closed,2013-07-02 09:48:12,178.2,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,6,2013-06-29 06:50:00,293.15,,1,,"b'b"" I think I\'m a bit lost. What would be the expected status then? We currently get  "," but I don\'t see what it actually means.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,7,2013-06-29 06:50:00,2.23,,,1,"b""b' Actually reopening this issue and giving it a more meaningful name'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,reopened,2013-07-02 14:43:35,295.38,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,8,2013-06-29 06:50:00,9.6,1,,,"b'b"" I\'m starting to wonder if we shouldn\'t try and mimic ... Indeed this might be a bit confusing to expose a different behavior depending whether the file actually exists or not in the index. Indeed", @yorah\'s right. is returned when querying the status of file (when  ) exists in the index. And I can\'t find a valid explanation regarding this behavior.If we were case sensitive, we should return  If we were case insensitive, we should return Beside this, I _think_ I\'ve found a bug: When exists in the workdir and not the index, calling with a parameter value for the path," actually creates an entry in the index with the name in uppercase.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,9,2013-06-29 06:50:00,1.8,1,,,b'b\' Sorry to spam, but after stepping through the code," did you mean ""... then those should **not** be treated the same ..."" ?Or am I just lost beyond any hope? (Edit: please don\\\'t answer this one ;)\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,10,2013-06-29 06:50:00,235.77,,1,,"b'b\' Okay. This is a mess. Thanks for teasing out all the subtle points! Let\\\'s talk about some of the cases: ### when """" exists on disk Here the behavior depends on whether  has already been added to the index or not. In 6ea999bb88e1c5d0be17d823c23728d11adfed47 I made it so that will preserve the capitalization of the existing entry in the index if there is one. So", let\\\'s not worry about that case. If there is no existing entry," there is no API that I know of to read the ""true"" capitalization of a file from disk without scanning the whole directory. Well", maybe but that has its own set of problems like making it impossible to add symlinks. On a case-insensitive filesystem," I\\\'m not even sure if there is a ""true"" capitalization. On a case-insensitive-but-case-preserving filesystem", there definitely is one, but I think we\\\'d have to make do pattern matching to get it. It\\\'s even worse because to get the true caps of every path component," you have to do that scan in every directory up the tree (i.e. you give """" and the ""true"" caps is """" discovering that is a lot of directory scanning). Core Git always runs pattern matching. You", too," could call with of """" and I would expect it to do the right thing because it will actually read the working directory entries and find one that matches that pattern. That is essentially where we do with to get around this same situation"," but I don\\\'t think we want to impose that overhead on  . ### returns when """" is used This is an interesting artifact of the changes that make the tree-to-index diffs case sensitive", but leave the index-to-workdir diffs as case insensitive, interacting with the way that status decides what to return. In this case," we end up with a record for the index-to-workdir comparison that shows (because """" in the index compared to """" in working directory and they both matched the pattern """" case insensitively)"," and we get no at all for the tree-to-index comparison because no entries matches """" case sensitively. In order to get  ", we would need a record from the tree-to-index comparison, which we don\\\'t get. In order to get we would need no record from either comparison, which we don\\\'t get. Does that make it clear why this behavior is happening? Obviously this pattern of behavior is confusing. I suspect that knowing this odd interplay you may be able to come up with some combination of paths and patterns that gives a more seriously incorrect result. So, let\\\'s think for a second about what we want to get as results. I started to make a table, but it gets pretty big. If you consider that HEAD, Index," and Working Directory can each have either ""A""",a," or no entry and you can try matching against ""A"" or ""a""", then the table is large. Some interesting examples though...HEAD:  , Index:  , WD:  , Pattern:  Status matches in head-to-index, and in index-to-workdir detecting diffs as needed  Add by path matches Pattern \\\'A\\\' to \\\'a\\\' in workdir but preserves \\\'A\\\' capitalization found in indexHEAD:  , Index:  , WD:  , Pattern:  Status doesn\\\'t match pattern in head-to-index, and does match in index-to-workdir detecting diffs as needed this is the case from above  Add by path matches Pattern \\\'a\\\' to \\\'a\\\' in workdir but preserves \\\'A\\\' capitalization found in indexHEAD:  , Index:  , WD:  , Pattern:  Status does not match between HEAD and index, so is considered ADDED in head-to-index; if there was no pattern, this could be detected a \\\'A->a\\\' rename however  Add by path matches to workdir which already matches capitalization in index. Anyhow, there are so many variants. I don\\\'t want to go on too long. We want to be able to detect case-changing renames, but we also want pathspecs to match correctly across the three areas. I\\\'m open to suggestions about what the correct behaviors are in the various cases and then we can try to plan out how to get those behaviors. I\\\'d prefer to understand all the cases well, first, however, because spot fixing issues tends to make others arise.\''
libgit2,1689,closed,11,2013-06-29 06:50:00,1345.52,,,1,b'b\' I think I have come up with reasonable short-term and long-term solutions for this issue not that I\\\'ve coded the solution, but I have a plan. Let me write up my thoughts here and see if you think that it will work. I\\\'d really appreciate some feedback! **Short Term**Because actually considers it an error if there is more than one file specified by the path, for this API we can perform the HEAD-to-index comparison case-insensitively (on a case insensitive filesystem, that is) and then verify after the diff that the actual case of the HEAD and index items actually match one another. This will fix the situation where a pathspec that does not match the filename case is used and matches the working directory but not the actual HEAD and index filenames.Alternatively, we could turn off case-insensitive pathspec matching completely, even for working directory entries. This will make our behavior more like core Git where will not match even on a filesystem that is case insensitive. This would probably break a bunch of existing tests and, to me, is not the most intuitive behavior," but at least it would be explainable.We can make call on the file to be added (assuming that tests show that would yield the ""true"" capitalization of the file on disk) so long as says that it is not a symlink. If the resulting path is no longer prefixed by the working directory of the repo or no longer matches the original path when compared case-insensitively", then we would ignore the version and just use the uncorrected original, but in the vast majority of cases this could allow us to match the on-disk capitalization for a newly added file.  We would not change the behavior of preserving the case an existing index entry for a file that is already present in the index.  If we add this, we should fix and to bypass the call, since they invoke and would not want to do this. **Long Term**First off, I\\\'m assuming that on the long term we want pathspecs to match (or at least have the option to match) case insensitively on a case insensitive filesystem. If we don\\\'t want that, then the following is irrelevant. It sounds like we could have more discussion about this, but I\\\'d love to talk more with the Windows and MacOS based users of the library to determine what their expectations are.Let\\\'s break general case-insensitivity into file ordering vs filename comparison. For tree-to-index diffs, we should always be doing case-sensitive filename comparison because both of those places are always case sensitive. For -to-workdir filename comparison, case-sensitivity should match the platform / file-system. For file ordering, all diffs should use either case-sensitive order or case-insensitive ordering that matches the platform filesystem. This would mean that pathspecs can match a range of files correctly.To clarify,"case-insensitive ordering"" actually means case-insensitive but stable. It would mean case-insensitive and then case-sensitive within the case-insensitive equivalents (i.e. fully consistent ordering ""A, a, B, b, C, c"" not ""a, A, B, b, c, C""). Frankly, I think we do this already for case-insensitive sorting just so we can be consistent.We already have flags to sort the results of status either case sensitively or case insensitively after the status has been calculated. We can offer equivalent flags for diff if the user wants that level of control.The other related long-term project is to rewrite the index so that it can be simultaneously accessed case sensitively and case insensitively, where case insensitive traversal and file lookups are handled by a secondary index. This is critical for thread safety because some operations require case sensitive traversal and some require case insensitive. If we do this, we could potentially make the index contents update somewhat transactionally, so that the index iterator could operate on a snapshot of the index content and not mess up if another thread attempted to modify the index while the iteration was occurring. I\\\'m pretty pleased about the idea of distinguishing iteration order from filename comparison and how it can resolve this situation. The basics of doing so are already present in the iterator code, so I don\\\'t think it will be too disruptive to add this capability and have a more elegant solution for this problem. And the short term fixes are something that I can probably knock out over the next week if we think they are worth addressing. Please let me know what you think!\''
libgit2	1689	closed	12	yorah	2013-06-29 06:50:00	1272.25	+1			b""b' Sorry for letting this thread sleep, especially after the time you took to write your explanation and proposals.I like the predictability of that solution. And from what I understand, it would simplify things a lot?'",,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,13,2013-06-29 06:50:00,1437.28,1,,,"b'b\' @arrbee I like the idea of providing a ""better"" service than . However", I think that in this particular case I\\\'d indeed prefer to rely on a case sensitive pattern matching behavior. As we\\\'re going to store tree entries in a case insensitive container, I\\\'d prefer to be picky regarding what we accept. I have the feeling that dealing with the platform preferred case handling in one tree, whereas we\\\'re case insensitive in the two others may turn into a gigantic magnet for corner-case issues. Maybe am I not seeing the bigger picture, but I can\\\'t think of real life use cases when we would _need_ a case insensitive pattern matching behavior.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,14,2013-06-29 06:50:00,825.98,,1,,"b'b"" _Bump._ My 2\\xc2\\xa2: it\'s not unreasonable for libgit2 to require the correct case when given a path. The internal representation is case-sensitive", we shouldn\'t hide that. Also, I don\'t want to think about [  vs. vs.  ]url  We don\'t have a full Unicode-compliant capitalization engine, let\'s not pretend we do. But I\'m no expert," and I **certainly** haven\'t thought about this as much as @arrbee has.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,15,2013-06-29 06:50:00,775.32,1,,,"b'b"" It\'s been 1.5 years since anybody last thought about this and we\'ve had a lot of case insensitive changes since then to better match . @nulltoken is there still some unit test in LibGit2Sharp that is failing?  Or some other behavior that we think maybe incorrect?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,16,2013-06-29 06:50:00,58.55,,1,,"b""b' @ethomson I believe those may be more or less related to this case sensitivity concern:url url url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,17,2013-06-29 06:50:00,167.52,,1,,"b'b"" Looking at the totality of this", and the issues (here and in LibGit2Sharp) that are now closed, I think that these are mostly resolved.  If there are other, small," specific issues that I\'ve missed then we should raise those separately.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,closed,2016-12-30 20:53:14,369.65,6,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1689,closed,-,-,-,6,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,opened,2013-07-02 22:39:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,title,2013-07-02 22:39:14,00:00,1,,,"b""b' Folders called .git will confuse libgit2'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,body,2013-07-02 22:39:14,00:00,,1,,"b'b\' 1. Create a folder FOO under your repo root2. Now create a folder "".git"" under FOO this is an empty folder that you can create with ""mkdir .git""3. Now use libgit2 to discover untracked files... FOO is listed as an untracked item", as if .git was a file. Msysgit completely ignores .git as an item, and actually will refuse to add any files under these fake .git folders to the index. I think for consistency (and probably safety), you should also ignore anything under .git but at least, you shouldn\\\'t treat it as a file when detecting untracked items.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,1,2013-07-02 22:39:14,26.88,,,1,"b'b"" We\'ll have to look at what the behavior is once #1685 is merged. In this case", libgit2 treats FOO as special sort of submodule and should ignore it. That used to be the behavior, but I think this a regression that has crept in. Once #1685 is merged, I think it is a one line change to shift the result for this case from untracked to ignored. Actually, I\'m looking right now to see if I can add a commit to that PR to shift this behavior back to what it should be. It\'s pretty straightforward, but it\'s showing that while the test data contains this case," the tests themselves are not validating that the FOO directory is being treated as an ignored file. Working on it!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,2,2013-07-02 22:39:14,41.07,,1,,"b'b"" Okay"," will it looks like this actually ends up being about 10 lines of extra code to restore the behavior here. I\'ll add the change to #1685 once I make sure the functionality is appropriately covered in the test suite.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,3,2013-07-02 22:39:14,10.32,,,1,"b""b' Okay", a fix for this is pending and once that Pull Request is merged," it will be closed. Thanks for the bug report!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,4,2013-07-02 22:39:14,830.93,,,1,"b""b' Thank you for the quick fix Russell!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,closed,2013-07-03 13:48:26,909.2,1,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,5,2013-07-02 22:39:14,0.47,1,,,"b""b' Oops"," closed by accident'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,reopened,2013-07-03 13:48:54,0.47,2,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,closed,2013-07-10 20:15:29,386.58,2,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1697,closed,-,-,-,2,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,opened,2013-07-26 07:33:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,title,2013-07-26 07:33:02,00:00,,1,,"b""b' Help for pull API'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,body,2013-07-26 07:33:02,00:00,,,1,"b'b\' I\\\'m wondering if there is any ""git pull"" API in 0.19.0 or newer version.If the answer is no", any advice about implementing a pull API of my own? I\\\'ve tried to analysis the implementation of git_clone, but it turned out to be wrong... Great thanks.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,1,2013-07-26 07:33:02,256.95,,1,,b'b\' Hey there, right now, libgit2 does not yet fully support merging, and as pulling depends on merging, it does not work yet. Merging might land in the next libgit2 version," which will make implementing ""git pull"" possible.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,2,2013-07-26 07:33:02,32.1,,,1,"b""b' What a pity.any way"," great thx. wating for new version...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,closed,2013-07-26 12:22:06,289.07,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,reopened,2013-07-29 08:45:11,1223.08,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,3,2013-07-26 07:33:02,1154.38,,1,,b'b\' Again," I wonder when the version that supports """" will come to us.@arthurschreiber \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,4,2013-07-26 07:33:02,129.43,,1,,"b""b' @hjason  As stated by @arthurschreiber above", merge is still a work in progress. Some lower level features have already been merged in libgit2, though (cf. libgit2/libgit2#1592 , libgit2/libgit2#1389 , libgit2/libgit2#1185, libgit2/libgit2#1011 and some other minor ones). In order for you to be kept up to date," the main PR to follow would be libgit2/libgit2#1007.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,5,2013-07-26 07:33:02,250.98,1,,,"b'b"" How about git_merge_trees? In what sense is it incomplete? Sorry"," I\'m new to libgit2 and some things are not obvious to me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,6,2013-07-26 07:33:02,69.87,,,1,"b'b""   (as you probably guessed by the name) merges two trees and produces a resultant index.  You could use this to merge two commits and built a resultant commit.  However if you had conflicts"," you could not then check out the resultant conflicting index into the working directory until url  is merged. We\'re getting closer!  Thanks for your patience.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,7,2013-07-26 07:33:02,1355.62,,,1,"b'b"" Thank you for your quick answer"," @ethomson!So there is no option for stuff similar to git conflict markers until #1702. But could I manually tell the index to stage the upstream version of the conflicted file? Is it also related to things coming in #1702?PS. It\'s very nice of you that you actively help people on the Issues page.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,8,2013-07-26 07:33:02,1265.48,,1,,b'b\' I am new to libgit2 and I have some problems correctly implementing PULL. Basically it is fetch+merge, however repository does not show any changes after fast-forward merge.  Fetch works ok, mergeresult is fastForward and I also get fast-forward id. I expected also that repository state will be in sync with remote repo," Also if I set GIT_MERGE_NO_FASTFORWARD option then local repo is updated with new index and also written to disk but commit history is still not there. git_merge ""Merges the given commits into HEAD"," producing a new commit."" is this yet to be implemented? What am I missing here?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,9,2013-07-26 07:33:02,374.92,,,1,"b""b' Hi @ravselj ", if returns a fastforward, then you should check out the fastforward oid to perform the fast forward.  If does not return a fastforward, then your changes will be staged, you should review them and to complete the merge.  It will not perform the commit for you so that you, the caller, can provide any signatures and ref updates that you want to perform. It seems like the documentation was a little deficient here," I opened url  to address these issues.  Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,10,2013-07-26 07:33:02,376.27,,1,,"b'b"" Libgit2 now has merge", with the analysis and actual merge split out, you can use that information together with the fetch information to implement whichever face of pull you\'re thinking of. You can take a look at libgit2sharp\'s implementation and git\'s own implementation to see what it does and which parts you actually want to implement. The pull script isn\'t something that fits with the level libgit2 generally operates at and the important bits are all UI. For questions about the concepts or usage, we generally prefer to make them on stackoverflow," which works as a QA.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,closed,2014-06-07 23:19:02,873.85,1,6,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1751,closed,-,-,-,1,6,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,opened,2013-09-24 14:17:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,title,2013-09-24 14:17:16,00:00,,1,,"b""b' Avoid failing in fs_iterator race conditions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,body,2013-09-24 14:17:16,00:00,,1,,b'b\' During filesystem iteration, a file may disappear between calls to and subsequent calls to  ," which would cause to return of  .  Iterators and users overload to mean ""empty directory"".  Unfortunately"," confusing the aforementioned race condition with an ""empty directory"" is dangerous: The error handling in will call which memsets the pointer to zero.  Later the diff function ( :932) will continue as if indicates empty directory and may dereference  . This PR proposes that we indicate to callers that we cannot perform filesystem iteration because it has been changed.  I propose returning to callers to indicate this race condition has occurred"," appropriate here as is typically defined to mean ""resource temporarily unavailable"". This", of course, means that callers will have to expect this (very non-fatal) error code and retry their operations which may be disappointing to the current users.  It would be nice to have some of them weigh in on this as calling functions or will now have to be protected and retried. Another option is to simply remove entries that stopped existing from the path vector entirely.  But I prefer this fail-fast mechanism to something that is likely to continue and provide inaccurate data. (Note that there is no documentation about this new return code yet; I suspect this proposal will create some discussion, so I will document this if this is the direction we intend to take.) /cc @arrbee/cc @jamill\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,1,2013-09-24 14:17:16,27.8,,1,,"b'b"" Note that we also probably need to make sure that the internal users of workdir iterators will always pass back to callers and never simply return when faced with an error.  It looks like this _may_ get converted to a -1 somewhere in reference iteration but I haven\'t had a chance to chase that down yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,2,2013-09-24 14:17:16,187.15,,,1,"b'b"" Hmm", I\'m on the fence about this. Part of me says that if a file disappears between the and the that we should just treat it as if the file did not exist in the first place. The theory there is that can, at best, return a snapshot of the filesystem, and eliminating the missing item is really just updating the snapshot with the latest information. But I can also see the logic of aborting with a distinct error code. If the user renamed a file and so it no longer exists with the old name but now the new name version is missing from the listing, that results in a pretty unsatisfying behavior. If we return to the caller an error code indicating that we have good reason to believe that the filesystem was changed while the operation was in progress, then they can choose to either warn the user, restart the operation, or what have you. Part of me wants to add a option into the for when this case is detected, but I suspect that is a bad way to go. If there really is a file copy going on, then you could easily be midway through the copy and the stat information could be inaccurate or the source file could be momentarily still present," etc. I\'d love to hear from some of the library users about what they would expect to have occur if the library detects filesystem changes mid-iteration / mid-diff / mid-status and how they would like to handle it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,3,2013-09-24 14:17:16,6.82,1,,,"b""b' Thinking about this a little bit more", I think my main reservation about aborting here is that this will apply to any file that gets removed during the diff scan, regardless of whether it is tracked by the repository or not. This means if you have something that randomly creates and deletes ignored files in the working directory (imagine a local continuous integration server than is dropping and removing PID files), even if those files are ignored by Git," it will prevent libgit2 from finishing a diff successfully. That makes me nervous. I assume that core Git would have no problem generating a diff in that case.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,4,2013-09-24 14:17:16,0.57,,1,,"b'b"" For what it\'s worth", I\'m on the fence as well," and becoming less impressed with this solution the more I think about it. This will only detect the exact scenario described (a deletion between and  ) and will ignore the other myriad ways we could have somebody concurrently modifying the workdir.  So we would only return on this _one_ case.  Which is sort of disappointing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,5,2013-09-24 14:17:16,1.77,,1,,"b'b"" Yeah"," I\'m unhappy about this.  Let\'s do something superior.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,closed,2013-09-24 18:01:23,224.12,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,6,2013-09-24 14:17:16,54.12,,,1,"b'b"" I still don\'t like this"," but I was perhaps hasty in closing it and want to reopen it to invite discussion from users of the library.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,reopened,2013-09-24 18:55:29,54.1,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,7,2013-09-24 14:17:16,1154.92,,,1,"b""b' There has been no further discussion on this for two weeks now...  I think that url  is the superior approach and that we should close this issue.  Any further thoughts?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,8,2013-09-24 14:17:16,6.05,,,1,"b'b"" This is a Windows-only issue"," so it\'s 100% up to you. I really don\'t know what would be the best way to go around it -I think silently skipping the missing entries is just fine. :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,9,2013-09-24 14:17:16,7.97,,1,,"b'b"" It\'s not actually windows-only...  We do the same then routine on all the systems"," so there\'s a possibility of files disappearing between the two calls.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,10,2013-09-24 14:17:16,154.47,,,1,b'b\' I\\\'m inclined to leave this with the #1869 solution for now. In the long term, I think we should consider options for the user to dictate other behaviors when it appears that the file system has been changed underneath libgit2," but that could be tied into some sort of warning mechanism where libgit2 says ""I can continue from this situation"," but I wanted to notify you of the problem"" which could have responses of continue", retry, or abort. ![Abort, Retry, Fail]url  Also, it would be nice if libgit2 itself had a protection mechanism so that multiple threads could operate on the repository safely i.e. if one thread is doing a checkout to the repository, a diff started in another thread could either wait on a lock on the working directory (or on a per-directory lock of some sort). That type of inter-thread consistency would be nice to guarantee at some point. Nonetheless, I\\\'m going to close this issue because I don\\\'t think this behavior is significantly better than #1869 for now. :kissing_cat: \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,closed,2013-10-09 16:58:53,1323.4,1,6,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,1866,closed,-,-,-,1,6,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,opened,2014-01-18 15:18:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,title,2014-01-18 15:18:35,00:00,,1,,"b""b' Convert config file and libgit2_opts directory paths to posix on Windows'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,closed,2014-01-18 15:59:27,40.87,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,1,2014-01-18 15:18:35,614.63,,1,,"b""b' Reopen'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,reopened,2014-01-19 01:33:13,573.77,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,2,2014-01-18 15:18:35,3.23,,1,,"b'b"" I\'m not sure I understand yet why forward slashing these paths useful?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,3,2014-01-18 15:18:35,9.45,,1,,"b'b"" When does an issue arise if we don\'t store the path with slashes?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,4,2014-01-18 15:18:35,270.0,1,,,"b'b"" I think there may be some confusion about when to use mkposix based on my recent change to gitdir support. When libgit2 reads a path from the end user (i.e. not via an API call) we probably should mkposix it", so that Windows users can use Windows paths naturally. However, when the path is coming via a binding to an API, it is expected that it will already be in POSIX form we don\'t convert every API provided path. In the case of these API calls," the data is not coming from a file written by the end user and should already be in POSIX form. Perhaps my comment on the earlier change did not leave this policy clear. Sorry!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,5,2014-01-18 15:18:35,350.32,,1,,"b'b"" @arrbee", so just to be clear: You really want that is passed to i.e.  ? Then it would also have to be instead of  , right? I don\'t see anything wrong with that; just being curious. Apart from that, I actually don\'t see a reason to convert _input_ paths either. If at all, I would have expected that the posix abstraction layer on windows would have to ensure that paths are all using backward-slashes," just to ensure the Windows API works correctly (which it _usually_ does too for forward slashes).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,closed,2014-01-19 13:48:30,735.28,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,6,2014-01-18 15:18:35,107.07,,1,,"b""b' The Windows API should _always_ deal with slashes as path separators", the library needs the slashes whenever it needs to figure out what the basename for a path is, or the directory," or similar.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2060,closed,-,-,-,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,opened,2014-02-07 11:03:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,title,2014-02-07 11:03:56,00:00,,1,,"b""b' Can not use proxy with password'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,body,2014-02-07 11:03:56,00:00,,1,,"b'b"" I have a global config entry like the following: libgit2\'s fetch fails withThe problem is that  [WINHTTP_PROXY_INFO]url  does not support authentication for proxies (see also [this question]url  This is bad because official git does support authentication for proxies and thus libgit2 can not perform network operations in perfectly valid git configurations.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,1,2014-02-07 11:03:56,2.47,,1,,"b'b"" @Yogu Shouldn\'t it be ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,2,2014-02-07 11:03:56,46.78,1,,,"b""b' @nulltoken  Sorry"," that was a typo in the issue description. The config file is correct.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,3,2014-02-07 11:03:56,93.52,,1,,"b""b' I can see some options with some promising names in this **[documentation]url  describing the options flags supported by  WINHTTP_OPTION_PROXY_PASSWORDWINHTTP_OPTION_PROXY_USERNAME /cc @phkelley '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,4,2014-02-07 11:03:56,125.52,,,1,"b'b"" Indeed"," win http absolutely supports proxies with passwords.  We just need to set the options. Can\'t look at this today but I can dig in this weekend if nobody beats me to it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,5,2014-02-07 11:03:56,626.78,,1,,"b""b' Did this ever get looked at?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,6,2014-02-07 11:03:56,712.82,,1,,"b""b' The WinHTTP transport (which is the only one which supports a proxy) does look up the proxy from the config and env variables.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,7,2014-02-07 11:03:56,1355.75,,1,,"b""b' Closing as it seems it was actually fixed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,closed,2014-08-26 12:27:34,83.63,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,reopened,2015-03-02 18:06:05,338.52,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,8,2014-02-07 11:03:56,342.6,,1,,"b'b"" Reopening as it seems that we still **[don\'t extract the proxy username and password]url  from the url that returns""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,9,2014-02-07 11:03:56,813.92,,1,,"b""b' @ethomson Are you still up to take a look at this? This would be a neat addition as currently libgit2 users behind a corporate proxy are compelled to rely on local proxy (eg. cntlm", ntlmaps," ...)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,10,2014-02-07 11:03:56,685.37,,1,,"b""b' @FeodorFitsner In order to ease the implementation of this feature"," we were thinking about starting with a failing test. Would you have any idea how we could set up some kind of NTLM proxy during our AppVeyor builds? Would you know any product we could download and install to this purpose?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,11,2014-02-07 11:03:56,50.47,,1,,"b""b' Look at this thread: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,12,2014-02-07 11:03:56,11.32,,,1,"b'b"" @FeodorFitsner Awesome! Thanks for the tip @ethomson There\'s a chocolatey **[package]url  for privoxy (which _looks_ like **[supporting]url  NTLM). Would that fit our need?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,13,2014-02-07 11:03:56,19.05,,,1,"b""b' Hmmm. Not sure Privoxy actually supports user authentication by itself. It supports forwarding up to a parent proxy.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,14,2014-02-07 11:03:56,16.82,,1,,"b'b"" Another option might be **[DeleGate]url  which is also available as a chocolatey **[package]url  However", I\'d really like someone with proxy skills to take another look at the manual," as I\'m a bit out of my depth here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,15,2014-02-07 11:03:56,27.6,1,,,"b""b' Right", this is a bullet point that it has session persistence.  NTLM andKerberos authenticate the entirety of a kept-alive session.  If you are aproxy and do not honor this notion, then you will require users toauthenticate for every request (at best).  If you are painfully unaware ofconnection affinity, and assume that everything is cookies and basic, thenyou will mix up authenticated connections. It looks like privoxy does not support authentication itself:says the manual.  Which is a shame. Does the Appveyor image have a JRE installed?  If so, I may be able to makesomething work. On Fri, Apr 24, 2015 at 4:47 PM," nulltoken notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,16,2014-02-07 11:03:56,19.33,,1,,"b""b' @ethomson url  states that the following are installed: Java SE Development Kit (JDK)JDK 1.7 x64 (C:\\\\Program Files\\\\Java\\\\jdk1.7.0\\\\bin default in PATH)JDK 1.7 x86 (C:\\\\Program Files (x86)\\\\Java\\\\jdk1.7.0\\\\bin)JDK 1.8 x64 (C:\\\\Program Files\\\\Java\\\\jdk1.8.0)JDK 1.8 x86 (C:\\\\Program Files (x86)\\\\Java\\\\jdk1.8.0)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,17,2014-02-07 11:03:56,2.72,,1,,"b'b"" OK"," I think I have a proxy that I can bring to the party that I\'ve used for testing previously.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,18,2014-02-07 11:03:56,162.38,,1,,"b'b"" I\'ve also tried setting up squid with ntlm_fakeauth viaurl  butsomething goes wrong and the connection is terminated (at least with curl)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,19,2014-02-07 11:03:56,642.83,,1,,"b'b"" I started looking into it", and while we can have a guess that a server will support Basic, it opens up a can of worms about whether people do want to have their password in plaintext or whether a  would prefer to be asked for them as needed," possibly using the same cred callbacks we already have for the endpoint. It also opens up whether we\'d like to allow the user to specify the want NTLM auth or what.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,20,2014-02-07 11:03:56,1327.6,,1,,"b""b' Fixed as part of #3110 we now extract the auth info from calleror config-provided urls.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,closed,2016-04-20 09:09:34,903.48,2,17,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2106,closed,-,-,-,2,17,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,opened,2014-04-21 15:51:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,title,2014-04-21 15:51:55,00:00,,1,,"b""b' Out of memory when cloning local repository (creation of upload pack)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,body,2014-04-21 15:51:55,00:00,,1,,"b'b"" I\'m experimenting with cloning a local repository. I\'m facing an problem however", originating form in zstream.c. Somehow, just keeps growing up to one gigabyte," even though the repository only holds 136 (very small) objects; is always 0. The repository I\'m using for local clone is this one: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,1,2014-04-21 15:51:55,1182.7,,1,,"b'b"" I can\'t reproduce locally with libgit2 from development"," with a fresh copy of that repo off of GitHub. Possibly the repacking done by git make us not trigger an option. Can you try to reproduce from a repo you just cloned?  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,2,2014-04-21 15:51:55,241.12,,,1,"b'b"" I\'ve created a small bash script that will compile libgit2 with the options I use and then does a local clone with a fresh copy of the repository:  #!/ This script does show the out of memory problem on my system: I\'m on OSX 10.9.2 (64-bit). Note that I compiled everything for 32-bit. GCC: CMake: Anything else you need to know?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,closed,2014-04-26 15:35:44,1423.82,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,reopened,2014-04-26 15:35:50,0.1,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,3,2014-04-21 15:51:55,4.15,,1,,"b""b' Oh", heh; I ran it under valgrind," and it does indeed ask for a quite a bit of memory. I forgot how eager Linux is to overcommit. This suggests that we never actually touch the memory.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,4,2014-04-21 15:51:55,17.75,,,1,"b'b"" I think I\'ve found the cause. When we ask zlib for a suggested output length", we always add it on top the current size," which is not so nice when we reuse the buffer and already have quite a bit allocated.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,5,2014-04-21 15:51:55,26.13,,1,,"b""b' #2301 should fix it"," could you give it a try?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,6,2014-04-21 15:51:55,1037.27,,,1,"b""b' Works perfectly! Thanks a lot. Great turnover time :)Issue can be closed from my point of view.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,closed,2014-04-27 10:57:55,1162.08,0,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,7,2014-04-21 15:51:55,77.32,,,1,"b""b' Neat. Thanks for the report :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2285,closed,-,-,-,0,5,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,opened,2014-04-28 13:36:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,title,2014-04-28 13:36:13,00:00,,1,,"b""b' Bump required CMake version to 2.8.3'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,body,2014-04-28 13:36:13,00:00,,1,,"b""b'   used in url  requires at least 2.8.3"," fails with 2.6'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,closed,2014-04-28 13:37:01,0.8,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,1,2014-04-28 13:36:13,2.88,,,1,"b'b"" Gah", I\'m not 100% happy about this. RHEL / CentOS 6.x ship only with 2.6.x," so this would make it impossible to e.g. use libgit2/Rugged without modification on those systems.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,reopened,2014-04-28 13:39:16,2.25,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,2,2014-04-28 13:36:13,0.5,,1,,"b""b' Yeah"," right now rugged fails on 2.6'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,3,2014-04-28 13:36:13,4.23,,1,,"b""b' Building rugged:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,4,2014-04-28 13:36:13,48.17,,1,,"b""b' Closing"," 2.6 compat in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,closed,2014-04-28 14:32:00,52.73,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2305,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,opened,2014-05-18 15:04:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,title,2014-05-18 15:04:12,00:00,,1,,"b""b' Fix compiler warning (git_off_t cast to size_t).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,body,2014-05-18 15:04:12,00:00,,1,,"b""b' Use size_t for page size", instead of long. Check result of sysconf.Use size_t for page offset so no cast to size_t (second arg to p_mmap).Use mod instead  pair," so no cast to size_t is necessary. @carlosmn: another minor compiler fix for #2352.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,closed,2014-05-18 18:55:50,231.63,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,reopened,2014-05-18 18:58:17,2.45,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,1,2014-05-18 15:04:12,98.8,,,1,"b'b"" You are quick! I was going to write", there is a second place in our code base with the equivalent code," and it relies on being able to get a valid value on platforms that don\'t have  . In there is a function which uses the system page size to set a natural allocation block size for memory pools. I\'m wondering if you would move into and move the implementation to be with the other POSIX emulation code. Then we can get rid of the implementation in and just have it call  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,2,2014-05-18 15:04:12,668.22,,1,,"b""b' @arrbee"," @carlosmn: any updates on this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,3,2014-05-18 15:04:12,22.92,,1,,"b""b' @carlosmn Did you have any final thoughts on this or should we merge this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,closed,2014-10-27 09:06:58,848.68,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,4,2014-05-18 15:04:12,326.42,,1,,"b'b"" I didn\'t realise this was still against development; I\'ve manually merged this to master.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2366,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,opened,2014-05-18 15:08:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,title,2014-05-18 15:08:23,00:00,,1,,"b""b' Fix compiler warning: compare signed and unsigned.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,body,2014-05-18 15:08:23,00:00,,1,,"b""b' @phkelley: minor fix to a previous revision.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,1,2014-05-18 15:08:23,87.98,,,1,"b""b' On Linux x64 this takes two types of the same size", one signed and one unsigned, and performs a subtraction. The subtrahend is effectively -1 if we interpret the value as a signed value," so we are adding 1 to the minuend to form the difference. This is generally going to yield a value greater than zero -thus the failures from Travis. So the dilemma about exactly what to do here continues :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,closed,2014-05-18 18:55:50,227.45,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,reopened,2014-05-18 18:58:05,2.25,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,2,2014-05-18 15:08:23,445.33,1,,,"b""b' @phkelley: the most recent patch should address the dilemma you talked about.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,3,2014-05-18 15:08:23,261.53,,1,,b'b\' Merging this is probably a good idea just to clear up the compiler warnings, but I\\\'m not overall a big fan of how this code is now structured at all. It is mostly the fault of the stuff that was pulled over from core Git, I think," but I believe we can do better. We should not just be silently returning a value from this code without setting an error message. That will result in canceling the print request without an error message. I think we should probably fall back to the ""Binary files %s and %s differ"" message when the files are too large to generate a binary delta.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,4,2014-05-18 15:08:23,556.27,1,,,"b'b\' @arrbee: two questions:The ""Binary ... differ"" message is accompanied by the full paths in the calling method below; would you like to add them to the parameters of this one?The entire method doesn\\\'t set a single error message", even though it errors out because of problems; should those be revisited, too?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,5,2014-05-18 15:08:23,850.4,,,1,"b""b' @arrbee"," @phkelley: is there still interest in merging this solution?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,6,2014-05-18 15:08:23,620.82,,1,,"b""b' Hi @kitbellew"," it looks like @arrbee made some comprehensive changes at the end of May which fixed this problem. Please send another PR if there is anything remaining that you feel needs to be addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,closed,2014-06-07 14:10:43,1152.63,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2367,closed,-,-,-,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,opened,2014-05-18 15:10:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,title,2014-05-18 15:10:41,00:00,,1,,"b""b' Fix mkstemp open flags.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,body,2014-05-18 15:10:41,00:00,,1,,"b""b' @carlosmn: make sure that the temporary file is truncated.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,1,2014-05-18 15:10:41,77.93,,,1,"b'b"" Thanks for the submission", but as far as I can tell, this doesn\'t do anything. If we look at the publically available source for the C runtime library (CRT), and examine how the flags map onto parameters to CreateFile," both combinations yield CREATE_NEW. This is from open.c.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,2,2014-05-18 15:10:41,107.53,,1,,"b'b"" @phkelley: you\'re right; the page below says that will be returned if are used which makes redundant: url  Originally"," I was simply going by documentation (on the same page above) which says that (which was used here earlier) is equivalent to  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,3,2014-05-18 15:10:41,26.98,,1,,"b""b' Removed the unnecessary but set the permissions to  : url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,closed,2014-05-18 18:55:50,225.15,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,reopened,2014-05-18 18:57:50,2.0,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,4,2014-05-18 15:10:41,241.67,,1,,"b'b"" What\'s the rationale for the change in requested mode?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,5,2014-05-18 15:10:41,32.97,,1,,"b""b' Standard opens files with  ; the Windows emulation should probably do the same: url url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,6,2014-05-18 15:10:41,17.28,,1,,"b'b"" I\'d like to know the specific problem you\'re trying to solve by doing this.  We are seeing many reports of people running Visual Studio as administrator and having permissions problems because of these sorts of things", so it\'s not clear to me that this is necessarily the right thing, even though it matches posix semantics. I would like to understand better why we\'re changing this instead of just doing it to match posix. I wonder if we shouldn\'t set proper ACLs instead of trying to emulate this through a mode (that doesn\'t really map as well)," perhaps one that provides the appropriate permissions to both administrator and the logged-in user.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,7,2014-05-18 15:10:41,56.77,,1,,"b""b' @ethomson: no other reason than posix.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,closed,2014-05-19 00:31:49,333.98,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,8,2014-05-18 15:10:41,121.45,1,,,"b""b' Okay; I think that this does deserve more attention.  Do you have any thought about using ACLs like that or does it seem crazy?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,9,2014-05-18 15:10:41,150.45,,1,,"b'b""   is called in two places", in (where it seems to be unlinked soon thereafter) and in which calls explicitly right after. So, for now, it will affect nothing how we set the permissions; however, if in the future another execution path uses  , it seemed prudent to make sure it does what it\'s expected to do, especially now that we have just discovered it wasn\'t and fixed one aspect of it (opening instead of  ). As to ACLs, it probably depends on what happens to the file later, and whether it\'s really temporary. Running VS as administrator is similar to running  as root in which case one shouldn\'t be surprised when permissions problems arise later. However, if Windows users are naturally accustomed to this," perhaps some treatment of real UID vs effective UID might help.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,10,2014-05-18 15:10:41,1002.47,,1,,"b'b"" Yeah", they are.  Unfortunately, there doesn\'t seem to be the separation between administrator and non-administrator by most Windows users / developers that you see on Unix where running privileged is a Big Deal.  Since you closed this issue," I\'ll open a new one for discussion.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2368,closed,-,-,-,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,opened,2014-07-04 13:59:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,title,2014-07-04 13:59:43,00:00,,1,,"b""b' Provide a callback for certificate validation'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,body,2014-07-04 13:59:43,00:00,,1,,"b""b' Call the user if they want to in order to check the  info. Always call but provide our decision in the HTTP case. The user gets the last word if the callback is set.[x] Implement for HTTP  [x] Tests for HTTP[x] Implement for SSH  [x] Tests for SSH[x] Implement for WinHTTP  [x] Tests for WinHTTP'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,1,2014-07-04 13:59:43,1221.52,,1,,"b'b"" I\'m slowly coming to think that we should expose the basic information as a struct. Otherwise"," bindings (or an application author) would have to figure out what  combination libgit2 is running on top of and then go and use whatever ssl we\'re using themselves to go and extract the data.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,2,2014-07-04 13:59:43,136.53,,,1,"b'b"" Related to issue #1366 (I thought you didn\'t want to implement this so special thanks for this PR!).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,3,2014-07-04 13:59:43,18.55,,1,,"b""b' For WinHTTP I think the TortoiseGit team might be able to help if the interface is properly designed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,4,2014-07-04 13:59:43,150.82,1,,,"b'b"" Currently you can return to let it though", not to let it through and error out with or you can return to pass that error (if something else happened). I\'m not completely happy with that (since I even forgot the 0-1 thing coming back to this, so I may just go to for success and anything else gets propagated," and the user can return if they\'re not happy with the cert.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,5,2014-07-04 13:59:43,37.32,,1,,"b""b' :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,6,2014-07-04 13:59:43,1226.15,,1,,"b'b"" We now implement our normal return-value rules and support WinHTTP as well. What we now need is some tests against certificates which the respective stacks wouldn\'t consider valid. We might yet need to set up apache with a cert on Travis to test", though I\'m more worried about the implementation with WinHTTP since it involves re-issuing a request instead of simply not stopping," like we do for our own HTTP.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,7,2014-07-04 13:59:43,144.72,,1,,"b'b"" What do we want to do about the flag to ignore certificate errors? Should we replace it with this or do we want to make it easier for the user to say they don\'t care at all?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,8,2014-07-04 13:59:43,228.72,,1,,"b'b\' My gut tells me that we should replace it with this.  I do _not_ want to make it easy for people to just say ""oh hell"," let\\\'s blindly trust everything!""  I find that people tend to very understandably write blog posts and tweets and the like that suggest that their problems were solved by just flipping the security switch to the off position entirely. Every time I have some ""hey don\\\'t even check certificates"" option even when they\\\'re very quietly implemented and not documented somebody blogs it and I am saddened.  Because the person who wrote the blog post had to dig in understand what was going on and make these decisions about their security", but the person who stumbles across it googling their problem just has a recipe to defeat their security (without necessarily having to understand the underlying problem or decide that this is really a great idea for them.) This won\\\'t stop that, of course, but I think that it\\\'s a bit more in your face to have to explicitly provide a callback instead of just passing a boolean in.  Maybe I\\\'m wrong about that, though?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,9,2014-07-04 13:59:43,56.42,,1,,"b""b' I feel ya. Getting around any cert check is still just an empty function away"," but at least we can make it a bit ceremonious to ignore everything.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,10,2014-07-04 13:59:43,894.33,,,1,"b""b' @carlosmn: are you going to remove the flag"," then? I think this is good to merge once you do.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,11,2014-07-04 13:59:43,30.53,,1,,"b'b"" Yeah"," I\'ll remove the flag and see if we can actually test this somehow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,12,2014-07-04 13:59:43,870.17,,,1,"b'b"" I still need to test the HTTP stuff on Windows", but though it should be fine. The SSH stuff has become a bit more hairy, as the user may only know one of the host hashes, depending on how they get the data (e.g. we get the MD5 hash for some reason via  ), so we expose both... We also won\'t support the ECDSA keys," but that\'s probably for the better.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,closed,2014-09-16 13:18:55,1399.2,1,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,reopened,2014-09-16 13:23:24,4.48,1,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,13,2014-07-04 13:59:43,725.63,,1,,"b'b"" After the little detour with the ssh stuff"," I think this is ready to go in @vmg and we\'ll squash any edge cases as they appear.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,14,2014-07-04 13:59:43,143.02,,1,,"b""b' Is this gonna break Rugged? :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,15,2014-07-04 13:59:43,52.85,,1,,"b'b"" Maybe... :innocent: If it exposed the option to ignore cert errors it will. Otherwise it shouldn\'t affect it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,16,2014-07-04 13:59:43,18.92,,1,,"b""b' @arthurschreiber can you please double-check? I need Rugged to be at libgit2-master tip before we can merge this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,17,2014-07-04 13:59:43,4.4,,,1,"b'b"" I\'ll check as soon as I\'m back at home give me 2-3 hours. :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,18,2014-07-04 13:59:43,1.27,,1,,"b'b"" Also", I don\'t think we expose that option," but I can\'t verify that right now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,19,2014-07-04 13:59:43,196.35,,1,,"b""b' So", I just tried to build rugged against this," and I run into crashes when executing the test suite:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,20,2014-07-04 13:59:43,8.67,,1,,"b""b' @vmg Merging url  will fix any rugged crashes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,closed,2014-09-17 12:56:40,1413.27,1,17,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2464,closed,-,-,-,1,17,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,opened,2014-07-23 10:10:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,title,2014-07-23 10:10:19,00:00,,1,,"b""b' Access denied on webserver'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,body,2014-07-23 10:10:19,00:00,,1,,b'b\' Hi all, I\\\'m using Bonobo gitserver for windows, which in turn uses libgit2() and I\\\'m running it on a webserver at unoeuro. When I try to create a new repository I an error and I have found out its because the repository path used (d:/), is for some reason traversed in fileops.c But the user that is running the IIS webserver," does not have access to the first part of the path ie:d:/web and therefore returns an Git OS error: Failed to make directory I have ""solved"" the problem by just returning no errors", if the giterr_system_last() is ERROR_ACCESS_DENIED But I guess it shouldn\\\'t be necessary to traverse the path? just use the full one provided? regards, Lars Glud\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,1,2014-07-23 10:10:19,343.03,,1,,"b'b"" In order to track this down at the libgit2 level", we need to know what functions you\'re calling. You seem to have tracked it down to some specific code, but this issue doesn\'t mention how or what function you think is the culprit. Since you mention traversing the whole tree, it seems likely to come from trying to figure out what the real path for a repository is, but without knowing what function(s) you\'re calling," we can\'t see where the issue might lie.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,2,2014-07-23 10:10:19,76.05,1,,,b'b\' @carlosmn is right that it would be most helpful to know what libgit2 API you\\\'re invoking," but I suspect from the phrase ""When I try to create a new repository"" that you are invoking  . Looking at that function", I see: You\\\'ll notice :grimacing: the comment, which I think I made back in 2012. The simple function does walk all the way up the given path making sure that all the directories are present. If my interpretation is correct and you are calling this API, then instead you could try and leave off the flag. I think you might still want to include the flag to make the directory itself, but you can test with and without that flag.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,3,2014-07-23 10:10:19,7.37,,1,,"b""b' It seems reasonable", though, that we would support exactly this experience, and peel off the target path, stopping when the first parent is found," instead of walking it forward.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,closed,2014-07-23 17:17:57,427.63,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,4,2014-07-23 10:10:19,1.48,1,,,"b'b"" Sorry folks"," I\'m all click happy today.  _sigh_""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,reopened,2014-07-23 17:18:16,0.32,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,5,2014-07-23 10:10:19,192.38,,1,,"b'b"" Hi all and thanks for all the response. It is indeed that is used through libgit2sharp but unfortunately they initialize the the git repository options as: And do not expose any method for parsing in the full options structure. I could ofc propose this or mayby try implement it myself though I\'m a bit out of time right now. Regards"," Lars""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,6,2014-07-23 10:10:19,1331.55,1,,,"b'b"" Okay", this has come up again. It sounds like we should change the behavior of so that it doesn\'t walk down the whole path, or at least doesn\'t mind if it has no read permission on parent directories. That is going to make the code a little more complex," but it\'s not too bad I suspect.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,7,2014-07-23 10:10:19,884.57,,1,,b'b\' Just wanted to add some more comments. I\\\'ve also found that the same issue occurs when committing into the repository. See the stack below. The function git_futils_mkdir in fileops.c traverses the directories from the root of the path and creates them one by one. Maybe it would make sense in this call stack to consider the repository init flag? So for example, if the repository was created with GIT_REPOSITORY_INIT_MKDIR," don\\\'t create directories above ""dir"".  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,8,2014-07-23 10:10:19,443.43,,1,,"b'b"" @dennisfrostlander Thanks for the additional information. Using the repository initialization flags for this particular case is going to be pretty tricky", I suspect, because the refdb backend has a bit of a complex relationship with the repository, but we can try it. I\'m hoping if we make with smarter," then it will probably just handle all the cases.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,closed,2014-08-25 19:04:09,105.88,3,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,9,2014-07-23 10:10:19,204.1,,1,,"b""b' @larshg This fix has been embedded in libgit2/libgit2sharp#798'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2486,closed,-,-,-,3,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,opened,2014-11-06 12:08:05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,title,2014-11-06 12:08:05,00:00,,1,,"b'b"" Insert extern function \'oid_str_free\' for free OID string that allocated...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,body,2014-11-06 12:08:05,00:00,1,,,"b'b"" This change made sice my application crush .My application compiled on  win64 machine debug version.My application use pygit2 (that use libgit2).pygit2 allocate oid string using git_oid_allocfmt but free it by itself because git__free is not extern function.As result of that beffer allocate and free with different compiled code.To Solve that i insert new API \' oid_str_free\' and call it form pygit2 instead free.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,closed,2014-11-06 12:08:36,0.52,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,reopened,2014-11-06 12:08:52,0.27,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,1,2014-11-06 12:08:05,7.0,,1,,"b""b' We have got rid of that function in master and instead have a function which uses a per-thread static buffer", so this is no longer necessary in libgit2, and we cannot fix change the API on the existing release. The bug is in pygit2," as it is impossible to correctly free a string allocated with  . It should be using its own allocation functions and asking libgit2 to put the formatted string there.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,2,2014-11-06 12:08:05,144.78,,,1,"b'b"" Indeed.  Please don\'t use this function"," it was meant for debugging and _not_ meant to be used for the reasons you outlined.  It has been removed in latest. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,closed,2014-11-06 14:39:52,151.0,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2690,closed,-,-,-,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,opened,2015-01-07 12:26:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,title,2015-01-07 12:26:38,00:00,,1,,"b""b' Assertion failed in p_mmap'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,body,2015-01-07 12:26:38,00:00,,1,,"b'b"" Excuse me if this is the wrong place", but it looks to me that the underlying problem is with libgit2 (let me know if not, and I\'ll move this to pygit2\'s issue tracker). I\'m cloning (using ssh transport), from pygit2. My compilation process: As you can see, I\'m using libgit2 0.21.2," I will now try the RC and see how that goes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,1,2015-01-07 12:26:38,27.13,,1,,"b""b' It is actually working now. Perhaps it was in fact a problem on the side of the git server. I suppose the upshot of this is that pygit2 should be perhaps handling this assertion with a clearer exception?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,closed,2015-01-07 12:53:46,27.13,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,2,2015-01-07 12:26:38,12.32,,1,,"b""b' What OS are you using? What code are you running? If you can reliably reproduce"," a backtrace would be helpful (via gdb or lldb).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,3,2015-01-07 12:26:38,19.47,1,,,"b""b' pygit2 cannot handle this. The assert happens in libc and it indicates that there is a bug somewhere in the call stack. Even if the server sends bad data"," this still should not happen.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,4,2015-01-07 12:26:38,8.55,,1,,"b'b"" How to get you a stacktrace? I\'m launching from python""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,5,2015-01-07 12:26:38,0.9,,1,,"b'b"" I\'m running on Ubuntu 14.04", with standard git-core. The python code is just cloning from a repo using a Keypair," that\'s all.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,6,2015-01-07 12:26:38,1.88,,1,,"b""b'   and then when it aborts'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,7,2015-01-07 12:26:38,11.98,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,reopened,2015-01-07 13:48:52,55.1,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,8,2015-01-07 12:26:38,1.12,,1,,"b""b' Is that sufficient? Not sure if gdb is finding all of the necessary debugging symbols.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,9,2015-01-07 12:26:38,8.53,1,,,"b""b' It is strange. Sometimes it fails", and sometimes it works. Leaving the code unchanged,  deleting the failed clone folder then running the script again," it may either fail or work (but more often fail).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,10,2015-01-07 12:26:38,1245.42,,1,,"b'b"" It looks like a bug which was fixed. If you can reproduce with 0.21.3 (or better yet"," with the tip of  ) then it\'s worth taking a look. Otherwise it should be fixed already.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,11,2015-01-07 12:26:38,41.18,,1,,"b""b' So I can reproduce on 0.21.3 (now using latest venvgit matched pair). Presently trying to make you another trace.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,12,2015-01-07 12:26:38,7.3,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,13,2015-01-07 12:26:38,0.53,,1,,"b""b' Will try on '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,14,2015-01-07 12:26:38,7.63,,1,,"b""b' Oh"," it looks like we never fixed that in 0.21'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,15,2015-01-07 12:26:38,2.1,,1,,"b'b"" OK"," so I guess you don\'t need another trace (from tip)?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,16,2015-01-07 12:26:38,2.25,,1,,"b'b"" I just pushed the fix to "," it\'ll go out with the 0.21.4.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,17,2015-01-07 12:26:38,1.22,,,1,"b""b' Excellent! Thank you. Do you have an idea of when 0.21.4 will be out?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,18,2015-01-07 12:26:38,1.33,,1,,"b'b"" It should be out soon"," we\'ll release it at the same time as 0.22 as a last maintenance release for the 0.21 series.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,19,2015-01-07 12:26:38,22.47,,1,,"b'b"" I assume this isn\'t pushed to 0.22.0-rc1 either", correct? I tested the RC also," got the same issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,20,2015-01-07 12:26:38,2.72,,1,,"b'b"" That\'s been fixed in master for quite a while now (which is where the commit comes from). This cannot have the same issue. How you are you testing against master?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,21,2015-01-07 12:26:38,34.87,,1,,"b'b"" Okay so with a new virtualenv (this time not using venvgit2)", I run from the following Makefile: So as you can see from the above, I\'m using 0.22.0-rc1. : I still get the same issue when cloning directly after this setup process: Now I see that it is still somehow using libgit-0.21.2! That folder doesn\'t exist! Am I going crazy? Right now trying to find out how that call to map.c is ever being initiated, presumably pygit2 is doing this. Perhaps I need to use a matching version of pygit2? Gah," so confused""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,22,2015-01-07 12:26:38,148.33,,1,,"b'b"" It\'s using a v0.21 libgit2 because that\'s the libgit2 which pygit2 0.21 works with. Have you tried installing from \'\' into your venv?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,23,2015-01-07 12:26:38,86.2,,,1,"b""b' Cheers Carlos", appreciate all your help. That worked. Thanks for all your work on libgit2 btw, it is an incredible piece of work! I guess I will close this," since the actual bug has been fixed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,closed,2015-01-09 16:42:06,173.23,2,21,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2807,closed,-,-,-,2,21,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,opened,2015-01-20 22:55:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,title,2015-01-20 22:55:34,00:00,,1,,"b'b\' clone from OpenShift accounts fail with ""Found invalid hex digit in length"" error\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,body,2015-01-20 22:55:34,00:00,1,,,"b""b' I have trouble cloning from RedHat OpenShift accounts. They require public-key ssh authentication and if this succeeds the cloning stops with the error message: I have verified that command-line git will clone without problems.  The following code will trigger the error for v0.16.0-5730-g2136240 Accounts can be created free of charge at [OpenShift]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,1,2015-01-20 22:55:34,697.52,,1,,"b""b' Is it reproducible on libgit2 v0.22?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,2,2015-01-20 22:55:34,28.53,,1,,"b""b' Yes.Just tried on the v0.22.1 release where it is reproducible.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,3,2015-01-20 22:55:34,45.83,1,,,"b""b' While debugging i found out that the hex-digit that cannot be parsed is in response to something like: I did not include the full URL which is unfortunate as this was part of the problem. It seems ~ in the clone-URL is not properly translated into the home-directory. Specifying a clone-URL without ~ works without problems. I will dig a little deeper and see if I can find out why ~ is not properly translated. I can see that home directories on OpenShift are in a non-standard location: and perhaps the server-end spills a error-message into the ssh transport.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,4,2015-01-20 22:55:34,334.07,,1,,"b""b' I cannot see that libgit2 does anything wrong. A bug request has been filed at  regarding OpenShift.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,closed,2015-02-02 17:21:31,1105.95,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,5,2015-01-20 22:55:34,11.0,,1,,b'b\' Thanks for the update. It might be nice for us to include the four characters that we tried to parse as the hex length," since this is likely to be the usual culprit here the server sending an error message that we\\\'re trying to parse as the length.  So it might be a little bit more obvious as to what\\\'s wrong if you saw ""Failed to parse hex digits \\\'Erro\\\' or \\\'Fail\\\'...  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,6,2015-01-20 22:55:34,1185.45,1,,,"b""b' My users keep getting this error and it always covers up some other problem making debugging very hard.  How do you feel about a pull-request that improves the error message generated in [parse_len]url  I can take the 4 characters and include these", which is also what command-line git does. It outputs something like:  But I would much rather grab the rest of the line," perhaps taking the first 60 characters if the line is longer. We would then get a error message: that is much more helpful. Which of the two would you prefer?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,reopened,2015-08-05 13:17:58,1196.45,3,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,7,2015-01-20 22:55:34,12.75,,,1,"b'b"" Adding the bytes which we tried to parse as invalid is fine (assuming a server isn\'t going to send something which messes up a console or other text output) but we can\'t put the whole string in there. For one it implies we tried to parse the whole thing", which is not true," but we also do not know when the string ends. That\'s why we\'re trying to parse a length in the first place.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,8,2015-01-20 22:55:34,283.92,1,,,"b""b' There is now a [pull-request]url  that includes the 4 bytes in the error message.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,closed,2015-08-24 22:52:03,574.08,4,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2830,closed,-,-,-,4,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,opened,2015-03-19 10:17:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,title,2015-03-19 10:17:57,00:00,,1,,"b""b' Implement git_submodule_set_branch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,1,2015-03-19 10:17:57,61.25,,1,,"b""b' Any  regarding this PR or could it be merged? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,closed,2015-04-07 11:19:12,61.25,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,2,2015-03-19 10:17:57,2.58,,1,,"b""b' Dang"," wrong button.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,reopened,2015-04-07 11:21:47,2.58,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,closed,2015-04-10 09:10:10,1308.38,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,reopened,2015-04-10 09:10:11,0.02,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,3,2015-03-19 10:17:57,1308.68,,,1,"b""b' CI is having a good run"," triggering rebuild.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,4,2015-03-19 10:17:57,76.15,1,,,"b""b' :+1:  Thanks for this"," and sorry about the delay in responding.  Looks good aside from the minor error code clearing issue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,5,2015-03-19 10:17:57,429.03,,,1,"b""b' :sparkles: Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,closed,2015-04-17 17:35:41,505.5,1,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,2999,closed,-,-,-,1,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,opened,2015-03-24 15:48:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,title,2015-03-24 15:48:18,00:00,,1,,"b""b' ignore: fix negative ignores without wildcards.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,body,2015-03-24 15:48:18,00:00,,1,,"b'b\' Currently we are not able to correctly handle negative ignore patterns when they do not contain wildcards. This PR fixes the issue and adds a test that checks for a few different cases that have been checked to match the behavior of . I\\\'m not really comfortable with the function name ""does_negate_pattern"" if there are any ideas I\\\'d be glad to change its name.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,1,2015-03-24 15:48:18,6.75,,1,,"b""b' This also fixes issue #2966.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,2,2015-03-24 15:48:18,60.72,,,1,"b""b' :+1: Nice simple fix.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,3,2015-03-24 15:48:18,69.75,,1,,"b""b' The CI errors are not related to these changes"," again. Could somebody please restart the job?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,4,2015-03-24 15:48:18,54.72,,,1,"b""b' Thank you for the PR! This is lovely.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,5,2015-03-24 15:48:18,41.12,,1,,"b""b' @pks-t Failed jobs have been restarted'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,6,2015-03-24 15:48:18,17.1,,,1,"b""b' Hmmm... still failing @carlosmn Any idea?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,7,2015-03-24 15:48:18,76.73,1,,,"b""b' Travis has been pretty disappointing on the Mac build front lately. url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,8,2015-03-24 15:48:18,636.73,,1,,"b'b\' GitHub doesn\\\'t even seem to get notified of the Travis build having failed. Still reports as ""in progress."" My last two PRs had problems with Mac and Travis", as well. Hopefully it\\\'ll get sorted out soon-ish.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,9,2015-03-24 15:48:18,208.25,,1,,"b""b' Any  regarding this PR or could it be merged? The CI errors are still related to the Mac build machines missing homebrew.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,10,2015-03-24 15:48:18,91.75,,1,,"b""b' Strangely"," the Mac OS X build seems to be running an Ubuntu distribution.... ![image]url  url  ![image]url  /cc @svenfuchs @banzaiman Any idea?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,closed,2015-04-10 08:38:02,1009.73,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,reopened,2015-04-10 08:38:06,0.07,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,11,2015-03-24 15:48:18,1186.5,,1,,"b""b' Triggering a new build as my other PR went through CI without any problem.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,12,2015-03-24 15:48:18,938.97,,1,,"b""b' Thanks @pks-t for the lovely fix and apologies for the delay.  This seems like a nice fix to me!  :sparkles:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,13,2015-03-24 15:48:18,6.6,1,,,"b""b' One minor comment and a question.  Sorry again for the delay!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,14,2015-03-24 15:48:18,457.87,,,1,"b""b' Thanks for your comments"," both of them are fixed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,15,2015-03-24 15:48:18,835.55,,,1,"b""b' Awesome"," thanks again!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,closed,2015-04-17 21:57:26,799.33,2,10,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3016,closed,-,-,-,2,10,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,opened,2015-03-24 22:01:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,title,2015-03-24 22:01:44,00:00,,1,,"b""b' Stash apply'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,body,2015-03-24 22:01:44,00:00,1,,,"b'b"" A modification on #2705.  I made some notes in that PR", though actually acting on those notes was quite a bit more challenging than I had hoped.  This introduces two lower level ideas: , to allow one to merge a tree and an index and get an index out as a result.  (Interestingly had this broken out as a helper function at one point, and it was brought back in.  So now it\'s a helper function again.)  This allows us to merge the results of another merge, without having to write it out to a tree. , which behaves like except that it reads an index into the index.  This maintains the stat cache of the existing items. Sorry about the long delay in finishing this up.  Stash application is completely and totally ridiculous (put these files on disk and these in the index _unless_ this happens or this)," as I\'m sure @swisspol can attest to.  I think that with the two basic functions mentioned above that the can be a bit simpler and not necessarily have to write objects for the intermediate steps.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,1,2015-03-24 22:01:44,2.08,,,1,"b""b' Thanks @ethomson"," awesome work :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,2,2015-03-24 22:01:44,56.83,,1,,"b""b' BTW is this for performance reasons or API impedance reasons?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,3,2015-03-24 22:01:44,1259.53,,1,,"b""b' @ethomson Any idea when this will land?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,4,2015-03-24 22:01:44,1137.12,,1,,"b""b' Thank you @swisspol for all your awesome work I literally cannot express how painful it was to understand how stash application actually works in Git.  Crazy.  So thanks for digging into this. And again", sorry to bikeshed all over this (and to take so long to do so) this was mostly for perf (I work in a very large tree," a  of that is expensive.)  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,5,2015-03-24 22:01:44,270.47,,1,,"b'b"" This doesn\'t seem to return that"," testing it under libgit2sharp as we speak.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,6,2015-03-24 22:01:44,214.2,,1,,"b""b' Do you mean it returns a different error code or it succeeds?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,7,2015-03-24 22:01:44,71.15,,1,,"b'b"" It just returns GIT_EMERGECONFLICT. The tests that fail what the documentation states: [Test 1]url  It flushes the contents to the working directory regardless. [Test 2]url  Fails because it\'s not returning GIT_EEXISTS"," but GIT_EMERGECONFLICT.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,8,2015-03-24 22:01:44,197.23,,1,,"b""b' Any chance you could roll back libgit2 to c31a1ed and check if that behavior was in my original PR or a fallback of @ethomson changes?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,9,2015-03-24 22:01:44,733.07,,1,,"b""b' I get different errors by following the docs with c31a1ed:With  REINSTATE_INDEX not set", I get the index reinstated on  194, 224  With REINSTATE_INDEX set, I was expecting to get conflicts on  253 But I got the stash applied successfully? Probably _I_ did something wrong," someone should look at the tests to see if I approached them correctly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,10,2015-03-24 22:01:44,261.6,1,,,"b'b"" This is the expected git stash behavior (don\'t ask", git stash is a mess): And again with the option: Same end result, I know makes no sense. That\'s why I wrote stash API in libgit2 to mirror exactly how it\'s implemented in Git CLT (even if it was so convoluted for no good reason). You have all these peculiar behaviors you need to preserve.  Now if I try to apply that same stash using libgit2\'s API and with  , it fails with the error  . So same as CLT. If I use instead," then it also works like CLT i.e. stash application succeeds but it generates an index with a conflict on  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,11,2015-03-24 22:01:44,13.02,,1,,"b'b"" (I updated my previous comment", so read it on the web not in the email notification.) Anyway as far as I can tell c31a1ed is working correctly and like Git CLT. However," it seems @ethomson\'s changes might have broken something.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,12,2015-03-24 22:01:44,3.55,,,1,"b'b"" Okay", I\'m starting to understand how it works. Thanks for the clarifications. I\'ll study  behavior on stash and update the tests to match that behavior. Thanks a lot. There is a possibility I\'m wrong," and not something that @ethomson changed screwing stuff.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,13,2015-03-24 22:01:44,345.35,,1,,"b'b"" @ethomson I just found this tiny bug"," you should pick it up if you haven\'t already fixed it:url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,14,2015-03-24 22:01:44,1036.13,1,,,"b'b"" Yes", I dropped the since that\'s not quite what that error message means, I don\'t think.  I meant to create a new error type here, but forgot when I pushed this up. Otherwise, I\'m having a bit of trouble following this thread.  Can one of you two summarize the status here?  Is something else broken?  If so," what?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,15,2015-03-24 22:01:44,18.48,,,1,"b'b"" I was unaware of git stash\'s behavior in case of reinstate index or normal. If EEXISTS was dropped", then it\'s fine by me. Otherwise," there\'s no checkout notification called for the updated files.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,16,2015-03-24 22:01:44,277.18,,,1,"b'b"" So...  I restored the behavior when an untracked file exists in the working directory that would be overwritten by the unstash operation.  However I still feel like this is not quite the behavior that we want. Do we really need two different exit codes here?  Could we use the checkout notify callbacks to discern between this case and other checkout conflicts?  I would much prefer to simply return here... Otherwise", @Therzok I think the behavior that you\'re seeing was because if you explicitly provide a checkout option, then you must also provide a checkout strategy that is not NONE (or else we won\'t do anything)...  I added a test here, but: I added a change to imply a checkout strategy of when you use a checkout strategy (eg, from  ).  This better matches rebase," but it implies that you cannot have an unstash dry-run.  Meh.  I would like to think a little bit more about this because I think that we\'re trying to make it friendly for consumers (upgrading their checkout strategy) but cutting off the utility of  .)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,17,2015-03-24 22:01:44,7.97,1,,,"b'b\' Sorry @ethomson I missed some comments here. The point is AFAIK my original implementation is ""canonical"" since based on exactly the same heuristics as Git shell script. @Therzok noticed some suspect behavior which partially went away when switching back to my original implementation. So looks one of your change introduced a regression. Not sure why it wasn\\\'t captured by the existing unit tests though. Looks like with your latest changes in", @Therzok would need to confirm his tests behave same with both my original implementation and yours.It\\\'s like too and seems reasonable to me.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,18,2015-03-24 22:01:44,9.0,,,1,"b""b' My understanding is that @therzok was testing to the documentation"," which I had not updated to reflect my removal of the behavior. I have since updated to replace that behavior that I had removed but I think this is the wrong way to signal that condition and we should find something superior.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,19,2015-03-24 22:01:44,1319.83,,1,,"b'b"" Okay", well, there was a resounding silence there.  So I\'ve dropped the whole return code.  We now return for all merge conflicts," just like we do with all the other checkout flows. I\'ve added a progress callback to the options structure that you can use if you want to be able to discern one checkout conflict from another. Seem sensible?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,20,2015-03-24 22:01:44,3.72,1,,,"b'b"" Where are we standing unit test wise now? Are the unit tests I originally written all pass _unmodified_ with your latest version? That\'s the most important thing to me. Then I\'m curious to hear about @therzok\'s functional tests and if the results are now the same for both my original implementation and yours. I\'m afraid I don\'t have feedback on the code as I\'m not affected by it and I can\'t say I fully understand what\'s at stake"," sorry.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,21,2015-03-24 22:01:44,0.97,,,1,"b'b"" I\'m completely fine with the modified implementation BTW"," I\'d just like confirmation that the tests are passing all the way up the stack.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,22,2015-03-24 22:01:44,36.97,,,1,"b""b' The only change that I made to your tests was to assert the return code to  ", then change it back to  , and now back again.  Your tests were very helpful and comprehensive," thank you.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,23,2015-03-24 22:01:44,2.22,,,1,"b'b"" Sounds like that if @therzok\'s tests are now passing"," this should most likely land finally :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,24,2015-03-24 22:01:44,985.63,,1,,"b'b"" Yes"," it\'s all working properly now. I\'ll update all of libgit2sharp\'s tests tomorrow. I\'m only curious as of why aren\'t the Checkout options themselves used for providing the notification callbacks. But this works for me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,25,2015-03-24 22:01:44,8.22,,,1,"b'b"" Well", there\'s two checkouts...  so you may need to determine which one of them had the  s... I would love another set of eyes from @carlosmn though," if he has a moment.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,26,2015-03-24 22:01:44,88.05,,1,,"b'b"" I\'m just wondering if you can\'t push updates to the checkout_options notifications", since most likely, a user will need to know _what_ happened," not _where from_. That\'s my $0.02 here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,27,2015-03-24 22:01:44,27.33,1,,,"b'b"" If all you\'re concerned about is what happened then the checkout callbacks are appropriate and you should use them.  But if you care about whether those errors  were during the index restoration then checkout callbacks can\'t help you with that. Aside from that"," animating a progress bar is hard if you have to wait until the first checkout to see progress.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,closed,2015-05-03 17:48:38,1186.9,6,14,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,28,2015-03-24 22:01:44,0.95,,1,,"b""b' Gah"," fat fingered the close button on my phone.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,reopened,2015-05-03 17:49:35,0.95,6,15,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,29,2015-03-24 22:01:44,887.48,,1,,"b""b' The newly-added commits all seem sensible.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,30,2015-03-24 22:01:44,2.98,,1,,"b""b' This sounds like it should have its changes in the CHANGELOG; could we get a commit which adds the information there?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,31,2015-03-24 22:01:44,842.37,,1,,"b'b"" Hey @ethomson you wanna add this trivial fix to your PR since you\'re touching all this code?  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,32,2015-03-24 22:01:44,1172.02,,,1,"b'b"" Cool.  I updated this with information"," and a little bit more documentation around the change. I also included @swisspol \'s patch (above).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,closed,2015-05-12 08:29:58,880.38,6,18,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,33,2015-03-24 22:01:44,1398.58,1,,,"b'b"" I was under the impression the unit tests I added to libgit2 were covering all cases"," but I must have missed something as there\'s a regression with this PR compared to my original implementation (some of my higher-level functional tests now fail): Start with this state: Then do and verify that shows no pending changes afterwards. Using results in this state: However using libgit2\'s results in this different state (which wasn\'t the case in my original implementation): Notice that wasn\'t restored in the index.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,34,2015-03-24 22:01:44,1409.0,1,,,"b'b"" And here\'s another regression (possibly the same underlying issue): Start with this state: Then do git and verify that shows no pending changes afterwards. Using results in this state: However using libgit2\'s with the flag results in this different state (which wasn\'t the case in my original implementation): Notice how the index wasn\'t restored at all.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,35,2015-03-24 22:01:44,14.42,,,1,"b""b' I feel like there should be unit tests for this!  (In the libgit2 tests"," I mean.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,36,2015-03-24 22:01:44,24.67,,1,,"b""b' I agree. What do you make of the 2nd case though? It seems is not working at all?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,37,2015-03-24 22:01:44,227.0,1,,,"b""b' Hey @ethomson so what do you wanna do about the above issues? Current stash apply in libgit2 is not working like Git core unfortunately.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,38,2015-03-24 22:01:44,237.37,,,1,"b'b"" I think that the first step would be to add failing unit tests.  I\'m heads-down right now", so if that\'s something you can do," that would be great.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,39,2015-03-24 22:01:44,1310.08,1,,,"b'b"" Sorry for the noise above... It\'s because I have to continuously revert this stash apply implementation in my fork of libgit2"," since it doesn\'t behave like Git CLT.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,40,2015-03-24 22:01:44,1314.6,,1,,"b""b' I created a dedicated issue to track this regression: #3230.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3018,closed,-,-,-,10,20,12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,opened,2015-04-22 05:20:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,title,2015-04-22 05:20:31,00:00,,1,,"b""b' How to support HTTP Digest Authentication?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,body,2015-04-22 05:20:31,00:00,,1,,"b""b' It seems that libgit2 does not support HTTP Digest Authentication"," is that true? Or is there a way to work around?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,1,2015-04-22 05:20:31,498.38,,1,,b'b\' That is true, it is not supported.  It\\\'s not really... something that anybody has ever cared about before. Adding it should be relatively straightforward, though it raises questions like:  are you happy with only auth?  Or do you want auth with integrity?  What does your compatibility matrix look like, since nobody really seems to implement Digest fully and there are presumably effort vs completeness tradeoffs to be made. I presume that your interest here is that you have some server that speaks Digest and you simply want to auth to it.  I think that this is a fine level of compatibility," since again not a super hot issue. You should add a new auth ""factory"" for digest at url  presumably  ", which would create a new authentication context for digest auth. You should be able to look at the [Basic implementation]url  to get an idea of how to implement a very simple auth context.  (Auth contexts are important for crazy stateful mechanisms like NTLM and Negotiate, so they\\\'re overengineered for something more simple like Basic and Digest.  So I would study the Basic implementation.) Now, I did say that it would be straightforward, but I suspect it would be far more straightforward to just change your server to do Basic over SSL or Kerberos or something more (with apologies to @jeffhostetler ) modern. Another alternative is that you can think about trying to use libcurl as a connection backend for HTTP(S) connections.  Since we have a pluggable transport layer, you could plug libcurl in to do all this work for you.  This isn\\\'t what _I_ would advise doing, but (at the risk of speaking for him) I think that one of the other core contributors would suggest that you consider this direction.  You can plug in a new smart subtransport for HTTP(S) by following along at [ ]url But again, I would put this in the way more work for the reward category just to get Digest working.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,2,2015-04-22 05:20:31,86.17,,,1,"b'b"" @ethomson Yes", we just have a Gerrit service which is using Digest auth. I would like to change to SSH method to access this server since I don\'t need to change any code. If I have time," I would try the methods you\'ve mentioned. Thank you.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,closed,2015-04-22 15:05:04,584.55,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,3,2015-04-22 05:20:31,7.6,,1,,"b'b\' That makes sense.  I\\\'m going to reopen this (and add the handy ""up for grabs"" label) in case somebody else has an inkling to support this.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,reopened,2015-04-22 15:12:43,7.65,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,4,2015-04-22 05:20:31,7.82,,1,,"b'b"" Having a libcurl transport is something we will likely want to have anyway", as people insist on using proxies," and there\'s no way we\'re going to include proxy support in our own transport.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,5,2015-04-22 05:20:31,18.02,,1,,"b'b"" There\'s also #2555 which is somewhat related in that it asks for capabilities it\'s probably not worth supporting in our won HTTP layer but which are available externally.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,6,2015-04-22 05:20:31,967.55,,1,,"b'b"" We hit a year on this issue without it moving forward.  I\'m going to close it as I think that most people really aren\'t looking for Digest in 2016"," but please correct me if I\'m wrong.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,closed,2016-05-26 07:46:03,993.33,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3067,closed,-,-,-,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,opened,2015-05-22 21:17:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,title,2015-05-22 21:17:06,00:00,,1,,"b""b' Test with MinGW on AppVeyor for  branch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,body,2015-05-22 21:17:06,00:00,,1,,"b""b' backporting most of #2946 to '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,1,2015-05-22 21:17:06,100.17,,1,,"b""b' The OSX Travis failure in url  looks like a spurious timeout"," would anyone mind restarting it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,2,2015-05-22 21:17:06,599.5,,,1,"b""b' @tkelman Done!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,3,2015-05-22 21:17:06,936.55,,,1,"b'b"" Thanks much", looks better now. I\'m not really familiar enough with the MSVC build to know what that 64 bit failure is about, but it may have something to do with the build option which isn\'t being used on master? Is there some cmakery on master to decide when or when not to set that option? If so," should that be backported?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,4,2015-05-22 21:17:06,965.58,,1,,"b""b' Aha"," it looks like maybe the commits from #2832 should be backported to work around that test failure?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,closed,2015-07-30 09:49:13,752.12,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,reopened,2015-07-30 09:49:15,0.03,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,closed,2015-07-30 09:49:16,0.02,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3153,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,opened,2016-02-05 09:49:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,title,2016-02-05 09:49:23,00:00,,1,,"b""b' libgit2 assumes everything not under  are commits'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,body,2016-02-05 09:49:23,00:00,,1,,"b'b\' In my application that uses I create tags to blobs (which is unusual because tags normally point to commit objects) and create symbolic references to those tags under  . The program has no problems fetching those references: But fails with ""Object is not a committish"". In  ", function we can see a call to  , which will assume the reference must be a commit, which is not always the case.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,1,2016-02-05 09:49:23,857.98,,1,,"b""b' Which libgit2 are you using? This issue should have been fixed a while ago.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,2,2016-02-05 09:49:23,474.38,1,,,"b""b' Sorry"," I forgot to add more info:libgit2 version 0.23.4GCC 5.3.0Ubuntu Linux 14.04'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,3,2016-02-05 09:49:23,279.18,,1,,"b'b"" Can you try with  ? There\'s some stuff we don\'t backport when it depends on code changes that have happened in the main branch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,4,2016-02-05 09:49:23,171.05,,,1,"b'b"" Now that we\'ve shipped [0.24]url  these changes should have landed in a released version.  Closing this issue @asandroq please reopen if you\'re still seeing this problem in 0.24. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,closed,2016-03-17 15:32:54,343.52,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,5,2016-02-05 09:49:23,1315.2,,1,,"b""b' I have upgraded my dependency to libgit2 0.24 and I still see the issue. This is the patch I am using for now:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,6,2016-02-05 09:49:23,3.38,,1,,"b""b' @ethomson It seems I cannot reopen this issue by myself.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,reopened,2016-03-29 13:35:16,1322.37,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,7,2016-02-05 09:49:23,92.58,,1,,"b""b' Still present in version 0.25.1. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,8,2016-02-05 09:49:23,1263.65,,1,,"b'b"" I think here\'s something else at play", your change simply papers over that deficiency. As can be seen in  , we intend not to add tags in the first place:   For everything else," we sohuld be able to assume that it is a commit-ish. Which references do you have in particular which are not pointing to a commit-ish?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,9,2016-02-05 09:49:23,1099.5,1,,,"b""b' Hi",  As I mentioned in my first message," I have tags that point to blobs instead of to commits. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3595,open,-,-,-,2,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,opened,2016-04-27 11:56:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,title,2016-04-27 11:56:06,00:00,,1,,"b""b' Provide authentication error reporting to  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,body,2016-04-27 11:56:06,00:00,,1,,"b'b"" I\'m trying to implement a credential caching mechanism in function. However"," SSH session authentication [does not report]url  any error for calls that return   or error codes (see  ). The only exception is the authentication that [sets error when failed]url  Failure to report auth errors makes impossible to identify if cached credentials where correct or not.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,1,2016-04-27 11:56:06,96.13,,1,,"b""b' Same thing happens with http transport no auth error is reported.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,2,2016-04-27 11:56:06,54.87,,1,,"b'b"" I\'m not sure what you\'re asking for; do you want more information about the previous error in your  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,3,2016-04-27 11:56:06,20.83,,1,,"b""b' Yes"," I want to know if provided credentials were accepted or not.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,4,2016-04-27 11:56:06,3.3,,1,,"b'b"" If you\'re getting called a second time", then no, they were not. In the HTTP case you call out, there\'s really not much more information that we could provide," is there?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,5,2016-04-27 11:56:06,30.08,1,,,"b'b"" I\'ve seen some cases where credentials get requested more than once. I assume it\'s from a  ", but I haven\'t investigated to see if that\'s what\'s actually leading to >1 request for creds. It would be super-useful if the credentials callback got a argument, or something, so that it could tell if this is the first request for creds of if creds from the last request were bad. Here\'s some code that we\'re using to avoid infinite loops from credentials (using rugged): Obviously, in this example the creds won\'t get used because libgit2/libgit2 is public. I initially had set ttl = 1," but that led to some spurious errors. ttl=5 seems to be working well. The ttl (which is really just a backstop) could go away if [ ]url  said that it was calling because of an auth error or not.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,6,2016-04-27 11:56:06,137.5,,1,,"b""b' You could count number of requests for creds for a one repository but if the same credentials are used for multiple repositories this strategy does not seem viable. @ethomson Can error be set every time 401 code is returned? Same for SSH when is reported?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,7,2016-04-27 11:56:06,934.37,,1,,"b""b' Found a way to identify invalid credentials without error status.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,closed,2016-04-29 09:13:11,1277.08,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,8,2016-04-27 11:56:06,255.4,,,1,"b'b"" Neat @wildart would you mind sharing your solution?  I think that there\'s still an opportunity to make this easier for callers but I\'m curious about what you did.  Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,9,2016-04-27 11:56:06,47.5,,1,,"b'b"" It the same solution that @spraints suggested count number of times when the credential callback is called. I found a way in my project to reset the call counter between calls. I\'m still using error class to determine if credentials failed"," and then fall back to  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,10,2016-04-27 11:56:06,490.05,,,1,"b""b' I reopen this issue because the solution that I used for caching credentials is a half-measure after all. Even though counting auth. fails is working", but only for one credential provider. I would like to switch to different credential provide if one that was called before fails. An example would be a use of sh-agent and manual ssh key credentials. If ssh-agent credential fail for some reason," it would be nice to fallback back manually provided credentials rather then terminate operation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,reopened,2016-07-17 22:26:08,792.95,1,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,11,2016-04-27 11:56:06,1098.78,,1,,"b'b"" Relatedly", it would also be useful to get a callback when authentication succeeded (for example to tell a credential store to cache the given credentials for future use," which you ideally don\'t want to do if the callback failed). ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,12,2016-04-27 11:56:06,822.6,,1,,"b'b"" I came into a similar problem", I consider my solution a hack that solve basically my requirements. I want to be able to fetch from severalprivate repositories asking for credentials only one time if there are corrects, if not I ask again until it is correct.I use the object id to allows the reuse of the credentials for different objects for the same repository, but this doesn\'tcover the same object calling the fetch several times which it is probably expected. Probably I will expand this hack to cover this case later. I think that after the instead of returning immediately," I can mark the credentials as valid for the url(without the  ) and cover the case.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,13,2016-04-27 11:56:06,981.73,,1,,"b""b' I have the same issue. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,14,2016-04-27 11:56:06,1196.22,1,,,"b""b' In the end I add support for ssh keys that way not face the problem of enter bad password cause a typo"," but the solution I posted worked for my requirements although is quite hacky.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3761,open,-,-,-,2,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,opened,2016-06-12 14:21:32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,title,2016-06-12 14:21:32,00:00,,1,,"b""b' git_status_list_new stopped creating status'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,body,2016-06-12 14:21:32,00:00,,1,,"b'b"" Hi guys", sorry if that\'s not the correct place for asking this question, but I\'m literally desparate. I had my program working perfectly using git_status_list_new, that is the status object was properly initialized and I could do further processing of it.Yesterday I\'ve run my program and from nowhere, suddenly git_status_list_new cannot initialize status object, that is," status object is nullptr. I didn\'t touch the code. Don\'t know what have happened. I wonder if anyone of you happen to come across similar situation?Any help really appreciated.Thank you.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,1,2016-06-12 14:21:32,1421.55,,1,,"b'b"" What\'s the return code from  ?  Does it return an error"," or okay?  What error does the library set when this happens?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,2,2016-06-12 14:21:32,214.62,,,1,"b'b"" Hi", thank you for your reply. The return code I\'m getting is -1; As for what error the library sets I\'m not sure but I\'m more than happy to follow your instructions if you\'d be so kind and give them to me as to how to check that error value.Once again," thank you and looking forward to hear from you.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,3,2016-06-12 14:21:32,10.18,,1,,"b""b'   indicates that an error occurred.  Call [  to get the last error object]url For example:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,4,2016-06-12 14:21:32,3.32,,,1,"b'b"" Hi",Yes," I am aware of that -1 means error ;)When I\'ve followed with debugger I\'ve found out that function pack_backend__read returns -3;I can of course provide the repo if that would help in any way.And thanks for the giterr_last(). Will use it and write the result.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,5,2016-06-12 14:21:32,2.53,1,,,b'b\' Ok," so I\\\'ve got the message and it says:""The references cannot be peeled Cannot retrieve reference target""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,6,2016-06-12 14:21:32,8.92,,1,,"b""b' Sounds like your is pointing to a nonexistent branch.  Does on the command line work here?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,7,2016-06-12 14:21:32,1296.6,1,,,"b""b' Hi"," sorry for the delay.Yes I can confirm that git status works as intended.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,8,2016-06-12 14:21:32,729.62,,,1,"b'b"" Glad to hear that it\'s working now!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,closed,2016-06-17 03:48:52,807.33,2,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,reopened,2016-06-17 20:36:08,1007.27,2,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,9,2016-06-12 14:21:32,1008.3,,1,,"b""b' I reopened this per your request.  Can you provide additional details?  What reference is dangling?  What is it pointing to?  What type of reference is it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,10,2016-06-12 14:21:32,4.78,1,,,"b""b' Hi", of course I can provide any details you wish me to provide. I think that perhaps the best reference would be if I can send you that repo (really small and useless," I use it only for testing purposes) and you can try and execute status from your library and see what is happening. What do you think about it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,11,2016-06-12 14:21:32,16.43,,1,,"b""b' Sure.  If you link to a zipped up repo", or attach it or what not," I can take a look at it when I have the time.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,12,2016-06-12 14:21:32,548.23,,,1,"b""b' Hi", thanks for your good will," here is the link: url  Best regards'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,13,2016-06-12 14:21:32,137.7,,1,,b'b\' Yes i can defenatly help 333#22 Enter prise Rp caOn Jun 12, 2016 7:21 AM,"Artie Fuffkin"" notifications@ wrote:\''
libgit2	3819	closed	14	ethomson	2016-06-12 14:21:32	716.23	+1			b""b' This looks to be obsolete I apologize for the delay, but I can confirm that works in your repository.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,closed,2017-03-22 20:20:33,1424.42,4,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3819,closed,-,-,-,4,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,opened,2016-06-16 00:18:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,title,2016-06-16 00:18:27,00:00,,1,,"b""b' Hook support'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,body,2016-06-16 00:18:27,00:00,,1,,b'b\' This is a first pass at supporting hooks. It aims to provide the basic blocks (as per ), so enumeration, loading and saving is supported, and there\\\'s a quick skeleton of how I\\\'m planning to handle hook execution. A few  :I was under the impression there had already been some discussion around the design, but I haven\\\'t been able to find them.The list of hooks is hardcoded. This is completely debatable, but given variable argument count," I thought something that acts as a ""we support these hooks"" was preferable to YMMV.I seem to remember bindings don\\\'t like callbacks (and me too", given my current enumeration test is human-based :wink:). Should I provide an alternate way (e.g.  ) ?The plan for actually executing the hooks is to have something like and sprinkle those everywhere, but it might or might not be doable \\xe2\\x80\\x94 I haven\\\'t been that far yet.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,1,2016-06-16 00:18:27,335.45,,1,,"b'b"" Some hook support already exists. The trick with hooks is that they\'re basically shell scripts and require the platform to support executing then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,2,2016-06-16 00:18:27,613.63,,,1,b'b\' Yep, I\\\'m aware that direct hook execution does not belong in the library. The current plan is to have clients use to say they\\\'re interested in hook notifications, and then (maybe ?) provide the full path to the script to execute if applicable, or even no path at all if we want to support that. Also," what did you meant by ""already exists"" ? I haven\\\'t been able to find anything other than some references in tests", but maybe I\\\'m blind \\xf0\\x9f\\x98\\x89 .\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,3,2016-06-16 00:18:27,60.72,1,,,"b'b"" I\'m sorry", the hook support is in the C# wrapper library," not in LibGit2 core. My mistake.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,4,2016-06-16 00:18:27,229.03,1,,,"b'b\' It feels to me like you\\\'re trying to design the support in libgit2 that you think you want before you\\\'ve tried to implement any hooks in your application itself.  I feel like trying to build ""hooks support"" into libgit2 before trying to get your application to do anything is actually the wrong direction to attack this problem.  Instead", I think that you should get your application to exec some hooks so that you know _what_ you can get libgit2 to help you with. I realize it seems counterintuitive to do it in the application first, since generally you\\\'re coding a functionality or a UI on top of libgit2 and in that case the libgit2 part must already exist.  But without having actually succeeded in running a hook from your application, I think that we will merely be making wild guesses as to what we want the hooks support (if any) to look like and will very likely design this wrong. As a concrete example, it\\\'s unclear to me how would be a useful addition to the library.  You want to _run_ a hook, you never want to load a hook into memory.  It\\\'s an executable _probably_ (but not necessarily) a shell script, but it could be an ELF binary (or COFF, or , or whatever).  Heck, it could be a Java class and you\\\'re relying on to know how to execute it for you.  The point is, you need to it, you don\\\'t want to have a copy of the image in memory. Similarly, most hooks don\\\'t make sense in the context of libgit2.  Things like the and hooks are things that could never possibly be run," since we don\\\'t launch an editor to get the commit message. We think that we have callbacks in the appropriate places that you can map those to hook execution if that\\\'s something that you\\\'re interested in (though they are not called ""hooks"" callbacks", they are generally more generic than that.)  I think the best first place to start is to identify hooks that you want to support that are lacking callbacks (that _can_ be supported, that is, unlike the aforementioned hooks around commit messages).  That\\\'s a clear improvement. libgit2 certainly can provide some support for hooks, like providing the path.  This seems of limited use to me, since it\\\'s mostly just string concatenation, ( )  But I can understand wanting (say) to be able to query for that path to reduce the amount of git repository-type business logic you have in your application.  Similarly, I can imagine asking for a map of the hooks that exist in  .  Again, this is a relatively trivial but I can imagine wanting an API to provide some abstraction here. Anyway.  There are probably some things that libgit2 can help you with here, but I would like to be conservative with these APIs.\'',,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,5,2016-06-16 00:18:27,92.93,,1,,"b'b"" Thanks for the thorough reply @ethomson. Just so we\'re clear", the API I wrote is inspired from what\'s in , and is suggested there. As you point out (and I do had a pause when I sketched the API), it might not make sense every time, and I\'m now tempted to drop it completely (maybe keeping just a few helpers for path-wrangling)... Looking at that as an app developer, what I want is a way to be told when I need to exec a hook, because I want to be compatible with  break expectations. For example, I would expect (and I might be wrong \\xf0\\x9f\\x98\\x89) libgit2 to detect that there\'s a hook set up, trigger a callback to my hook execution function*, and abort or proceed with committing based on what was reported by the hook. It should not allow the commit to go through without telling me about it. I do see how the would be weird to handle though (I\'m not even sure if we support  ).This is the wacky part, because we could either pass data that makes sense to us (like in that case the commit message), or helpfully write a file and pass that so the execution function doesn\'t have to do it (which IMHO reduces duplication). But then," maybe that whole responsibility could indeed be moved down to the application (provided the same effect can be achieved through the generic callbacks). I might be worrying too much about duplicated code \\xf0\\x9f\\x98\\x89.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,6,2016-06-16 00:18:27,27.47,1,,,b'b\' Thanks for the clarification I didn\\\'t realize that was there.  :PRight so the thing is that we don\\\'t have an API that maps to the command.  We have a handful of commands, but these correspond more closely to the plumbing command. This is important because if we were to (say) fire the command in the functions, then we would be firing it every time a commit was created," not every time the user was ""performing a commit"" (like what does).  So", during merges and rebases.  If you had some hook that actually validated the contents of a message, then we would fire it when we create recursive merge bases (which have totally bogus internal messages, since they\\\'re not intended to leak out).  It would be quite disastrous.  :/ This is why we\\\'ve asked the callers to handle hooks-like things:  you know when you\\\'re going through a commit workflow like the command line, versus creating commits that are (say) part of a merge or a cherry-pick operation. Of course, the problem here is that various other libraries (say, LibGit2Sharp) may provide a commit like workflow as API.  So this makes the problem a little bit more difficult. Anyway.  I\\\'m sorry that I don\\\'t have clearer answers here yet.  This is something that\\\'s been discussed a few times, and I think that all the vendors who are building UI on top of libgit2 should absolutely be supporting.  As a result, I would love to give as much help as we can to you (and the rest) so that it\\\'s less of a slog.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,7,2016-06-16 00:18:27,580.62,,1,,b'b\' Thanks, that makes it clear why hook support is a hard problem. IIUC," if libgit2 had a (that would be considered ""porcelain""/high-level) it would make sense. I\\\'ll go ponder what the bindings are currently up to", to see if there\\\'s any common infrastructure we could bring in, but arguably this API is bound to be a simple wrapper around  / /Windows-y stuff with some sugar on top, like  .\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,8,2016-06-16 00:18:27,105.82,,1,,"b""b' #964 (I knew there had been some discussion already).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,closed,2016-06-28 19:18:09,1139.7,3,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,reopened,2016-06-28 19:19:28,1.32,3,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,9,2016-06-16 00:18:27,553.13,1,,,b'b\' Here\\\'s a first pass at hook execution. It allows the client to register a callback for hook execution and a wrapper that we (or, for some hooks, the client) can call to cause that callback to be executed with the expected arguments after the checks are done. This still needs to tackle the case of the few hooks that do I/O, but I think I\\\'ll just pass a in the and let the client do its thing. I\\\'m saddened by the fact that this is so STRINGS EVERYWHERE, with additional NULL SENTINELS \\xf0\\x9f\\x98\\x85 . There might be a way to make it cleaner," but as ""conservative"" is a keyword", let\\\'s keep it simple for now. It\\\'s related to the point above, but there will be times where the client has OIDs and  s, and the hook expects SHAs and filenames. I was thinking that there could be some wrapper (for example and have that automatically build the required strings for execution. But again,"conservative"". Right now the code has a list of hardcoded hook names, but there might be a way to make that more generic (just found out about  ). And the generic execution call could be used by clients who which to call those (with the ~~pain~~caveats of argument-building bestowed upon them).\''
libgit2	3824	closed	10	pks-t	2016-06-16 00:18:27	713.15		+1		b'b"" I like the direction this is going. The code is nice to read, barring the few comments I\'ve added, so good work. The only thing I don\'t like about it at the moment is that hooks are registered per repository. This introduces some problems with lifecycle management of the repository as the callback payload is attached to the repo and cannot be simply free\'d by the repo when calling  . So we\'d at least need to have another function at the repository struct which will be called on the payload as soon as the repo is freed.Furthermore, developers might wish to have multiple hooks registered for a repository. Currently it is only possible to have a singular hook, which feels a bit cumbersome. It sure would be possible to simply have the callback call out to multiple other functions, but this feels more like a hack than anything else. To be honest I\'ve got no obvious solution for a better execute-API. One thing I\'ve been thinking about is to have a global list of callbacks instead of a per-repository one, which might make it easier to manage them lifecycle-wise. But in fact this would introduce its own distinct set of problems. Maybe per-repo ones aren\'t that bad after all. _shrug_""'
libgit2	3824	closed	11	tiennou	2016-06-16 00:18:27	93.98		+1		b'b"" The memory management of the execution callback is an afterthought at best. My first attempt was to pass the callback on each call, but then there\'s a few times where _we_ would need to trigger a hook, but would not know the user\'s. Hence afterthought. About the multiple hooks per repo, I had the understanding that we would pretty much prefer clients to use function and callbacks provided by the API. In other words, I came to think of the hook execution responsibility of only as a way to ease the execution of the things in  , not as a general-purpose mechanism. Then, from that point of view, having a global list of callback makes no sense IMHO \\xe2\\x80\\x94 the goal is to execute hooks, which are per-repo anyway.""'
libgit2	3824	closed	12	pks-t	2016-06-16 00:18:27	101.28		+1		b'b"" Yeah, as I said, I\'ve still got no idea how I\'d actually want it implemented myself. So this was more or less just a dump of my thoughts on this topic.""'
libgit2	3824	closed	13	tiennou	2016-06-16 00:18:27	196.33		+1		b'b\' I think the API part is complete. Mostly  :[x] the memory-management of the executor\\\'s payload to tackle. I can either ask the client to provide a ""destructor", or maybe calling the executor with some kind of hook would be sufficient ? The latter feels hacky though.[ ] maybe wire up some hooks internally \\xe2\\x80\\x94 those that we can handle at least (like  ). I\\\'ll try to come up with a list of those.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,14,2016-06-16 00:18:27,13.38,,,1,"b'b"" Interesting stuff I have a couple of notes:I know that @pks-t pointed this out", but I will second his request that you please do use the API for manipulating strings.  If you\'re concerned about  s then you can pass a size hint to it for creation.  I wouldn\'t be too concerned about any perf benefits to hand tuning this, the filesystem is going to be the bottleneck.A very minor nit, but please follow [the coding conventions]url  we keep the condition and the statement on separate lines.  Eg:   or:  As for the discovery API, I wonder if an enumerator is the best approach here.  It might be a bit heavyweight?  Since we know there are a only very finite number of hooks, we might even be able to construct and return an array of structs...  Just a thought," I actually don\'t have a strong preference here one way or another.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,15,2016-06-16 00:18:27,14.4,,1,,"b'b"" Yeah", I switched to for everything \\xe2\\x80\\x94 after I found out about and friends \\xe2\\x80\\x94 is only used for hook names. If I missed some, then that\'s something I\'ll fix.Thanks for pointing out the style guide, I\'ll do a more though pass for these (likely while I write documentation," which strangely doesn\'t appear on my list \\xf0\\x9f\\x98\\x89 ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,16,2016-06-16 00:18:27,314.72,1,,,"b'b"" Documentation completed. Memory-management of the payload handled via another callback. Style _should_ be correct. @ethomson I\'m not sure about enumerating hooks", given that there\'s nothing you can do with them (since  is gone). It also bothers me that it uses an hardcoded list, but as there might be other non-hooks executables in there, it\'s been hardcoded. And it would also (with a little struct-uring) be used for internal calling of hooks \\xe2\\x80\\x94 my pipe dream would have been to add some  around the easy ones that would handle converting from to their string representation. etc. so the rest of the library can just insert one of those without doing too much string-wrangling. I think it would be most useful for the push part," where there\'s lot of things to be given to the hook through stdin.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,17,2016-06-16 00:18:27,1193.08,1,,,b'b\' Don\\\'t worry about the enum-vs-string uncertainty, it\\\'s shared \\xf0\\x9f\\x98\\x89 . My rationale for keeping strings around was that it allows the executor to be hook-agnostic, which decouples the API \\xe2\\x80\\x94 eg. let\\\'s say deprecates some hook, you\\\'re now stuck with your enum value. I think that some of the higher-level things I wanted to handle actually require something like a list of known,"automatic"" hooks, but keeping the ""lower level"" unaware of a list is better. As you say, this forces the client application to be aware of which hook _they_ actually need to call (things like the hooks), but some of those calls can be completely ""hidden"" away. Also, another thing I thought about but forgot to ask is  . I think we should delegate that to the client (because signal handlers are messy), but this isn\\\'t clearly stated in the docs yet. Thanks for the review, I\\\'ll try to find some time to handle your comments tonight.\''
libgit2	3824	closed	18	pks-t	2016-06-16 00:18:27	958.37	+1			b'b"" Hummm... I think we shouldn\'t actually worry about  deprecating certain hooks. For one, I think it rather unlikely that they\'d deprecate hooks as there will always be use-cases which are broken by removing a hook. And furthermore,  always pays strong attention not to remove existing features. And even in the case that  _does_ deprecate a hook I think there\'s a big benefit in having an enum here. If the client will just compare strings, he cannot easily know when a hook has been deprecated and may fail silently. But in the case of an enum which subsequently got removed due to deprecation, the client will fail to compile. While I agree it is not a nice thing to break API I deem it better still than causing a client to silently fail.""'
libgit2	3824	closed	19	tiennou	2016-06-16 00:18:27	954.55	+1			b'b\' I\\\'ve added  , with the goal of having the ""higher-level"" versions of hooks there, as a bunch of functions that the client can use to trigger hook execution (a missing hook is ignored, but it could be changed to if that\\\'s better). Now that I think about it, I feel like the current headers should be reversed \\xe2\\x80\\x94 contains the nice, supported versions, and has the low-level function and friends... I hooked up (pun intended) and added a quick test to see how it works and check that a hook can prevent a rebase. I\\\'m completely abusing the executor to do that but well... As for the enum vs strings discussion, providing those higher-level functions make the enum useless from the executor standpoint. As I see it, it\\\'s only concerned with executing the given hook, with the given arguments and optional input. If you (still) like where this is going, I\\\'ll add more of the high-level functions. For the record, here is my current FIXME comment \\xf0\\x9f\\x98\\x89 :  \''
libgit2	3824	closed	20	tiennou	2016-06-16 00:18:27	1215.32		+1		b""b' Closing in favor of #4620.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,closed,2018-04-11 19:45:49,26.35,8,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3824,closed,-,-,-,8,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,opened,2016-09-29 17:00:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,title,2016-09-29 17:00:13,00:00,,1,,"b""b' Implement a diff indent heuristic'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,body,2016-09-29 17:00:13,00:00,,1,,b'b\' Implement a heuristic from the Git project that, on average, significantly improves diffs. See the commit message for 19f1a8e6f289b07389d525a12a13a4aaeaabe443 for more detail than you probably ever wanted. Briefly, this patch causes to take into account the presence of blank lines and the relative indentation of other lines in the neighborhood of the diff to decide how to position ambiguous diff hunks. The result is that it very frequently improves diffs that look like into equivalent but more aesthetically pleasing diffs like The commit message that I referenced above explains how the heuristic was trained and documents the extent to which it improves on the existing diff algorithm. This change is in Git\\\'s master branch. It currently can be enabled in Git by passing the option to and similar commands. I expect that this change will be in the next Git release, though it is not yet clear how it will be enabled; indeed, it might become the default. This patch series includes the parts of the relevant Git patches that apply to and  ," but omitting the changes related to the ""compaction heuristic"" that was experimented with in the Git project but is likely to be discarded. I haven\\\'t added any tests whatsoever", nor anything more than an xdiff flag that can be used to turn on this mode. Since I don\\\'t have a lot more time to work on this, and since I\\\'m not familiar with the internals or test infrastructure of this project, I\\\'m hoping that a more regular libgit2 developer can take over from here :four_leaf_clover:\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,1,2016-09-29 17:00:13,964.12,,1,,"b'b"" I just added another commit from Git", which renames a struct in the new code from to to avoid conflicts with a from POSIX  . This commit hasn\'t been merged to Git\'s branch yet," but I think it (or something very like it) will be.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,2,2016-09-29 17:00:13,430.33,,1,,"b'b"" I see CI is failing. Are these cases where Visual Studio behavior is different than gcc? If is not supported by VS", that\'s perhaps a problem, because the two functions marked as are invoked in rather tight loops, and removing the designation results in a measurable performance hit under gcc. Does VS do equivalent optimization automatically? If not," is there an equivalent that could be used under VS? (I suppose these could be turned into macros if unavoidable.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,3,2016-09-29 17:00:13,17.98,,1,,b'b\' There\\\'s a in  that handles inlining for VS," but since xdiff.h is considered ""external"" to the project", it\\\'s not included in here.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,4,2016-09-29 17:00:13,1021.92,1,,,"b'b"" Indeed. Unfortunately inlining functions is compiler-specific. Each of the codebases we import (zlib", regex, klib) have their own macros to deal with it. I\'m surprised this hasn\'t been reported as an issue upstream yet," but xdiff is going to have to get its own macros for this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,closed,2017-10-14 06:34:45,814.53,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,reopened,2017-10-14 06:45:43,10.97,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,5,2016-09-29 17:00:13,1272.17,1,,,"b""b' Sorry", I accidentally deleted the source branch," which closed the PR. I just restored it and reopened the PR. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,6,2016-09-29 17:00:13,21.98,,1,,"b""b' I just took care of the problem.  BTW", starting with Git 2.14," the indent heuristic is now the default behavior for upstream Git. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,7,2016-09-29 17:00:13,307.38,,1,,"b'b"" With the merge from master", the tests are now passing.  Since this is already the behaviour in git, I\'m going to go ahead and merge it.  @mhagger IIUC this enables us to choose this heuristic for xdiff," we still need to ask for it?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,closed,2017-10-29 12:16:10,330.45,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,8,2016-09-29 17:00:13,1016.28,,,1,"b'b"" Thanks for merging. Correct"," as [you\'ve apparently already surmised]url  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,3944,closed,-,-,-,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,opened,2017-02-08 03:59:01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,title,2017-02-08 03:59:01,00:00,,1,,"b""b' [WIP] Add support for reading attributes out of trees'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,body,2017-02-08 03:59:01,00:00,,,1,"b'b"" Finally opening this to get a sense of direction for this functionality", and the changes.  The idea here is to allow reading files out of tree objects. For now, these new functions assume that there is no working directory to check. Meaning if a tree oid is specified, a local checkout is never looked at for files. Though we may want to allow for both? So, specifying a tree oid would be additive. This was also built assuming the tree oid passed is the root tree, but I don\'t think it actually matters.  I\'m not super happy with adding the new parameter to all of these calls, so we could definitely hang it off of a couple of the existing structs being passed around (and through) the attr APIs. That said, I\'m not sure which one(s) make the most sense so I did this for now to get things initially working.  I have a test program locally that links to libgit2," and it appears to work as expected. Though this clearly needs more work.  [ ] Decide on final API and functionality [ ] Make sure all other places that use git attributes internally (diffs?) allow for passing [through] a tree object to read from. [ ] Add tests once the API settles down [ ]  documentation  cc @mclark @tma @arthurschreiber""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,1,2017-02-08 03:59:01,1171.08,,1,,"b""b' Closing this for now as determined by further research that we may not need this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,closed,2017-02-15 23:30:06,1171.08,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,reopened,2017-02-24 18:53:01,1162.92,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,2,2017-02-08 03:59:01,1168.42,,,1,"b'b"" Turns out we do need this ;)  We\'d attempted to use the read tree functionality of the index API", which then let us use the attribute API (which looks in the index). But reading and entire tree structure into the index can be really slow, especially considering we don\'t care about the _entire_ tree, just the paths for the files we\'re interested in and if they have files that apply. So," being able to start with a tree (without first reading it into the index) would be a pretty massive optimization.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,3,2017-02-08 03:59:01,8.12,,1,,"b'b"" After thinking about this some more with some folks", we\'re going to look into taking a more efficient approach which will only look at trees related to the paths we want attributes for. That way we don\'t have to walk every tree and look at every entry for a file path nested 4 levels deep. With the new approach," we\'ll only open those 4 tree objects.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4113,open,-,-,-,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,opened,2017-02-08 10:57:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,title,2017-02-08 10:57:44,00:00,,1,,"b""b' Changes to provide option to turn  ofs_delta'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,body,2017-02-08 10:57:44,00:00,,1,,"b""b' This change provides an option in git_libgit2_opt_t which can be used in git_libgit2_opts to turn  ofs_delta capability in libGit2  This is related to Issue #1414 in libgit2Sharp repository url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,1,2017-02-08 10:57:44,1027.48,,1,,"b""b' @ethomson : please take a look at this PR this is for url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,closed,2017-02-10 10:36:31,1418.78,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,reopened,2017-02-10 10:36:35,0.07,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,2,2017-02-08 10:57:44,392.35,,1,,"b'b"" closed and reopened to trigger a build because failure in appveyor build didn\'t looked to be related to my changes""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,3,2017-02-08 10:57:44,1381.33,,1,,"b""b' @ethomson : gentle ping on this"," I have updated the comment and variable name. Please take a look'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,4,2017-02-08 10:57:44,186.97,,,1,"b""b' Thanks @gsaralms ! Looks good to me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,closed,2017-02-13 12:46:01,129.43,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4115,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,opened,2017-09-18 03:00:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,title,2017-09-18 03:00:03,00:00,1,,,"b""b' Hard to create a commit with current state of workdir'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,body,2017-09-18 03:00:03,00:00,,1,,"b'b"" I was looking at the equivalent of and I couldn\'t find one. The closes I got was:  Add all things to index Create a new commit Reload index from disk  However this seems a bit strange given that I need to undo changes. Even ability to create a temporary indecies associated with repo would make it nicer. Other possibly more generic way would be to allow apply diff to tree.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,1,2017-09-18 03:00:03,351.87,,,1,"b'b"" Hi first", you want to [ ]url What you\'ve described isn\'t a stash and won\'t be compatible with other Git implementations.  We reserve the issue tracker for _bug reports_ and _feature requests_.  If you have questions about using this API, or other APIs within libgit2," please [ask on StackOverflow]url  as this will benefit all users with increased permanence and searchability.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,closed,2017-09-18 08:51:55,351.87,1,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,2,2017-09-18 03:00:03,484.4,1,,,"b'b"" @ethomson I know about and I **do not** want it. It does a lot more than and its equivalent to", well,  . See the git man page: changes the workspace AND ref namespace. You can follow it by but than you modified all the mtimes which is not what I want. I still maintain this is a bug report as API does not provide an easy way of achiving goal but were strange one (from API perspective). if you are refering to index trick yes," you are right. But I mentioned \'the closes I got\'. I think I _could_ recreate the stash that way but it doesn\'t change the fact that commandline has a more primitive operation which api does not (without using very low-level operations).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,3,2017-09-18 03:00:03,20.35,,,1,"b'b"" Thanks for the explanation it does seem reasonable to reopen this.  This seems like it should be rather simple if you were inclined to refactor the creation logic out of into  "," it should be straightforward...  I\'ll put the easy fix and up-for-grabs tags on this issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,reopened,2017-09-18 17:16:41,504.77,2,1,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,4,2017-09-18 03:00:03,1350.3,,1,,"b""b' I have implementation but I cannot figure out how the unit tests work. Is there any description of framework?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,5,2017-09-18 03:00:03,297.58,,1,,"b""b' Yes"," we use [clar]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,6,2017-09-18 03:00:03,1404.17,1,,,"b'b"" Sorry I haven\'t yet have time to write unit tests. So far my work is on the stash branch url  I\'ll create PR once I add them but if anyone have comments RE commit I\'d be grateful (I tried to mimic the style of libgit2 as close as possible).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,7,2017-09-18 03:00:03,880.65,,1,,"b'b"" Feel free to already create a pull request for that one", even if you do not consider that branch ready yet," simply state that it\'s a work in progress right now. This would help us to review your changes right now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4354,open,-,-,-,3,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,opened,2017-10-29 14:07:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,title,2017-10-29 14:07:15,00:00,,1,,"b'b\' diff: expose the ""indent heuristic"" in the diff options\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,body,2017-10-29 14:07:15,00:00,,1,,"b""b' We default to off"," but we might want to consider changing to include it.  This is a followup to #3944  that lets consumers of the library activate it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,1,2017-10-29 14:07:15,5.63,,1,,"b'b"" What\'s the Git default now?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,2,2017-10-29 14:07:15,28.15,,1,,"b'b"" The release notes for 2.14.0 say this is now the default for git (but you can still turn it off).  Of course", docs being docs, they still say that it\'s experimental and off by default," but that\'s a bug in their docs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,3,2017-10-29 14:07:15,2.77,,,1,"b""b' Cool.  Might be nice to put this through its paces before making it the default for us"," too...  are you planning on turning this on for anything?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,4,2017-10-29 14:07:15,8.62,,1,,"b'b\' I don\\\'t have anything to ""put it through its paces"". The site has been using git to produce diffs for a while now.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,5,2017-10-29 14:07:15,0.02,,1,,"b'b"" Right", in that case," why not let\'s just make it the new default?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,closed,2017-10-30 14:52:26,45.18,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,reopened,2017-10-30 14:52:32,0.1,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,6,2017-10-29 14:07:15,8.47,,1,,"b'b"" Would you rather we set or to flip the option so it\'s  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,7,2017-10-29 14:07:15,23.35,,1,,"b'b"" The implied answer there is that I don\'t see why not.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,8,2017-10-29 14:07:15,1320.33,1,,,"b'b"" @ethomson this isn\'t _great_ but it enables the heuristic while keeping the blame output the same"," at least in the tested situations.  I don\'t see a difference in hunks when running but we\'ve diverged from that implementation anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,9,2017-10-29 14:07:15,392.03,,,1,"b'b"" Interesting.  I was going to suggest that we use and then update to set this bit in the flags", instead of defaulting it to on.  This would let the (few) users who redefine the constants themselves (like LibGit2 _only_ LibGit2Sharp?) opt-in to this instead of having a surprising behavior change.  \\xf0\\x9f\\xa4\\x94 I don\'t really know how compelling that is," and I\'m not sure that I actually have any particularly strong feelings one way or another.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,10,2017-10-29 14:07:15,0.8,,,1,"b'b"" Anyway", I\'m fine with the current strategy," so any way you want to do the defaults is fine I think you should feel free to merge this after fixing the changelog merge conflict.  Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,closed,2017-11-19 08:10:02,1037.5,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,11,2017-10-29 14:07:15,733.28,,1,,"b'b"" We should figure out eventually what\'s up with blame"," but we can probably punt on that for quite a while.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4391,closed,-,-,-,1,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,opened,2018-01-17 22:43:52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,title,2018-01-17 22:43:52,00:00,,1,,"b""b' Unnecessary syscalls on bare repository'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,body,2018-01-17 22:43:52,00:00,,1,,"b'b"" ### Reproduction steps Diff any two commits on bare repository and observe behaviour with strace.  ### Expected behavior Don\'t query stat for files on a bare repository.  ### Actual behavior Stat checked for every file in diff", if it\'s a bare repository.  ### Version of libgit2 (release number or SHA1) Master 782402c271d5467f9890af8e808af938a93bc55f  ### Operating system(s) tested Arch Linux  I just tried diffing with the current libgit2 build. While the other bug with unnecessary syscalls for and was fixed, there are still some calls for files, which shouldn\'t be necessary on a bare repository.  I\'m using pygit2 for my interaction with git repositories, but as far as I can see," this is actually a issue with libgit2.  Current  output:  pygit2 issue: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,1,2018-01-17 22:43:52,673.1,,,1,"b'b"" Hi @Nukesor and thanks for the report. I just tried to reproduce the behaviour you\'re seeing", but from using our diff example code I\'m not able to do so. All stat syscalls either refer to the gitconfig," the repo\'s references or its object store. I definitely cannot see any stats to the files inside of the bare repository.  Are you able to provide a minimal working example with libgit2 that reproduces your problem?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,2,2018-01-17 22:43:52,38.6,,1,,"b""b' Does your repository have set or just it merely lack a working directory?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,3,2018-01-17 22:43:52,24.25,,1,,"b""b' A clone all repositories with the bare flag. The config looks like this:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,4,2018-01-17 22:43:52,3.2,,1,,"b""b' Does the repository have a working directory despite having that set?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,5,2018-01-17 22:43:52,55.2,,1,,"b'b"" It\'s as bare as it gets  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,6,2018-01-17 22:43:52,25.68,,,1,"b""b' Thanks for the details.  The reason that I ask is that the presence of a workdir overrides  .  Eg", if you (and the libgit2 equivalent) then I would expect this behavior.  Out of curiosity," are you opening your repository with or  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,7,2018-01-17 22:43:52,368.37,,1,,"b'b"" I\'m using the Python standart constructor","  which calls [init_file_backend]url  itself uses [git_repository_open]url  Thereby I assume I\'m using  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,8,2018-01-17 22:43:52,230.57,,1,,"b""b' @pks-t Ok. I just tested a little and found at least the lines of code causing this behaviour.  Accessing  of a diff object causes this behaviour:  Minimal example:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,9,2018-01-17 22:43:52,920.37,,1,,"b'b"" Ok. is a wrapper around the Diff object", which is intialized with  . As far as I can see there is no additional logic for stat objects in pygit2. I\'m really sorry I can\'t provide a minimal example with libgit2. I\'m trying to dig deeper into the code," but my C is really rusty and I don\'t have enough time to relearn it at the moment :/.  Anyway thanks for your support and the great libraries :)!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,closed,2018-01-20 14:13:38,929.77,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,reopened,2018-01-20 14:13:43,0.08,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,10,2018-01-17 22:43:52,1301.08,,,1,"b""b' No problem at all"," thanks for the pygit2 reproducer. I will try to find some time for this soon-ish.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,11,2018-01-17 22:43:52,822.35,,1,,"b'b"" I think I\'ve pinpointed the problem to (here)url  It seems completely overlooks we have a bare repository"," but I\'m not sure where the fix should be\\xe2\\x80\\xa6  Stack trace :  C test case (with less memory safety) : url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,12,2018-01-17 22:43:52,585.15,,,1,"b'b"" Thanks @tiennou for digging in. I looked around a bit based on your description and think I\'ve found the issue. I\'ve created a possible fix in #4510 -while it is not really correct", we cannot do any better without a lookup into the ODB for the commits that are about to be diffed. Anyway, the optimized behavior is exactly the same as the previous one," though without additional stat calls.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,13,2018-01-17 22:43:52,62.77,,,1,"b""b' The issue seems to be fixed!  Thanks a lot @pks-t @tiennou \\xf0\\x9f\\x91\\x8d :)!!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,closed,2018-02-07 11:54:33,1300.83,0,10,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4480,closed,-,-,-,0,10,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,opened,2018-02-07 10:30:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,title,2018-02-07 10:30:16,00:00,,1,,"b""b' HTTPS proxy support with curl'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,body,2018-02-07 10:30:16,00:00,,1,,"b'b\' ### Reproduction steps Configured a local squid instance to run https with a self signed cert. Passed this https url for the proxy settings and attempting a clone a github repo  ### Expected behavior Connection should establish through proxy and allow cloning. ### Actual behavior code is quitting with the exception: ""curl socket is no longer valid"" ### Version of libgit2 (release number or SHA1) libgit2 version 0.25.1 ### Operating system(s) tested centos-release-6-8.el6  I couldn\\\'t find anywhere which stated whether https proxies are supported at this point in time or not. Is this simple a limitation of libgit right now?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,1,2018-02-07 10:30:16,52.7,,1,,"b""b' After repeating testing with v26.0 in a fresh environment I am now getting: SSL error: received early EOF'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,closed,2018-11-28 20:31:31,601.25,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,2,2018-02-07 10:30:16,551.48,1,,,"b""b' Oops", sorry," SSL proxies are _not quite_ supported yet.  Reopening.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,reopened,2018-11-28 20:34:27,2.93,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,3,2018-02-07 10:30:16,1151.98,,,1,"b""b' @ethomson What is the status for HTTPS support? Anything I can do to help this move forward? If nothing has been started"," I would be interested in contributing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,4,2018-02-07 10:30:16,1181.13,,,1,"b'b"" Hi @josebalius", we did some heavy duty refactoring of our HTTP mechanisms in #4870.  We removed curl as a dependency and modularized things a bit.  This means that we can (in theory) both create an HTTP _or_ HTTPS connection to a proxy, and tunnel through it with  .  I also updated our test proxy implementation to be able to support HTTPS so that we could validate this in our CI runs.  *However* I removed the CI tests before shipping because I was seeing valgrind complaints when testing this in our CI infrastructure.  I was _not_ seeing these complaints in my setup with a more modern version of Ubuntu.  Given that, I _suspect_ that the problem is re-entrance problems in the older version of OpenSSL.  But it\'s also possible that we\'re just not setting something up right, or defaults changed in newer versions of OpenSSL, etc.  I just created the [  branch]url  and opened #4975 which brings those tests back.  If you want to take a look and see how or if things are working, that would be awesome.  Note that I thought that I _also_ removed the ability to connect to an HTTPS proxy (basically just  d it right out) since those valgrind warnings made me uneasy.  But I don\'t see that immediately in a diff, so either it\'s just hard for me to see amidst lots of refactoring, or I convinced myself that it worked on modern systems and we could safely ship it.  At the very least, though, we should determine if valgrind is giving us credible warnings, and if so," what version(s) of OpenSSL we should support for HTTPS proxies.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,5,2018-02-07 10:30:16,1186.97,,,1,"b""b' @ethomson Thank you! I will take a look at the branch and see what I find.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,6,2018-02-07 10:30:16,1189.83,1,,,"b'b"" Cool.  Note that I did disable HTTPS proxies in 52478d7dc323ad1768bc5c6fc03c031b7adc5d20.  I reverted that in my branch.  (Note that I force-pushed", sorry I did that after pointing you to my branch," it\'s a habit.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4515,open,-,-,-,2,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,opened,2018-06-17 19:59:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,title,2018-06-17 19:59:40,00:00,,1,,"b""b' git_repository_path is incorrect for worktree from bare repo'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,body,2018-06-17 19:59:40,00:00,,1,,"b'b"" ### Reproduction steps  I reproduced this using Rust\'s tool. If you try to run inside of a worktree of a bare git repo", the command fails because git_repository_path returns null.  1. Clone any Rust project with 2. In the bare repo," use to create a worktree 3. try in the newly created worktree  4. fails because git_repository_path returns NULL  ### Expected behavior  git_repository_path should return the path of the worktree.  ### Actual behavior  git_repository_path returns NULL  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,1,2018-06-17 19:59:40,102.62,,1,,"b""b' Have you opened an issue with cargo about this issue?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,2,2018-06-17 19:59:40,379.82,,1,,"b""b' I have not yet", because it seems that this is specific to libgit2 (and when it is fixed," cargo should work correctly)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,3,2018-06-17 19:59:40,186.5,,,1,"b""b' It\\xe2\\x80\\x99s not.  Please report it to them so that they can make their tool worktree aware.  Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,closed,2018-06-18 07:08:36,668.93,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,4,2018-06-17 19:59:40,687.43,1,,,"b""b' Thanks @tiennou for chasing this down.  I was obviously wrong and this is indeed our bug.  Oops!  Thanks for reporting it @GeorgeLyon!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,reopened,2018-06-18 18:36:03,687.45,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,5,2018-06-17 19:59:40,31.68,1,,,"b'b"" Sorry", misunderstanding. I investigated this in #4686, and I\'m [confident]url  this is fixed on our side, so I suspect cargo hasn\'t updated to 0.27 (which IIRC has #4630, which fixes the underlying issue).  @GeorgeLyon You might want to file an issue with the cargo developers so they can investigate their code," just to make sure they\'re aware of the issue and can respond accordingly.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,6,2018-06-17 19:59:40,657.95,,1,,"b'b"" Yeah", the test explicitly calls on that worktree. Closing this issue again as it should be fixed. @GeorgeLyon, in case I\'m wrong," please feel free to reopen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,closed,2018-06-22 06:05:40,689.62,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,7,2018-06-17 19:59:40,54.32,,1,,"b'b"" Sigh. I reviewed @tiennou\'s PR already and thus thought it was merged already", that\'s why I already closed this issue. Anyway," as we\'re already tracking the issue in there I\'ll just keep this issue closed for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4684,closed,-,-,-,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,opened,2018-08-18 13:29:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,title,2018-08-18 13:29:50,00:00,,1,,"b""b' We should document that should not be called except after an error'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,body,2018-08-18 13:29:50,00:00,,1,,"b""b' ### Reproduction steps  1. Create a new repository  2. Create an initial commit  3. Check which returns an error even if everything was successful   ### Expected behavior should return  ### Actual behavior returns an error even if everything was successful  ### Version of libgit2 (release number or SHA1) 0.27.4 and c1ef58a  ### Operating system(s) tested macOS High Sierra (17G65)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,1,2018-08-18 13:29:50,20.8,,,1,"b""b' It shouldn\\xe2\\x80\\x99t", in fact.  If you didn\\xe2\\x80\\x99t get an error return code, you should not check the error string.  There are various errors that occur at low layers of the application (eg file not found) that we ignore and do not bother to clear.  I don\\xe2\\x80\\x99t have a strong interest in changing this behavior, as there\\xe2\\x80\\x99s no benefit," and we will _certainly_ miss cases.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,2,2018-08-18 13:29:50,16.35,,,1,"b'b"" Ok"," I see your point. Maybe it\'s a good idea to add this info to the documentation?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,closed,2018-08-18 14:13:26,43.6,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,3,2018-08-18 13:29:50,27.55,,1,,"b""b'  Yes you are 100% correct.  Going to reopen this so we can ensure that we do that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,reopened,2018-08-18 14:34:32,21.1,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,4,2018-08-18 13:29:50,247.37,,,1,"b""b' Fixed via #4773.  Thanks for reporting this"," and thanks for fixing it @RandomSort.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,closed,2018-09-12 18:41:54,247.37,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4772,closed,-,-,-,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,opened,2019-02-20 12:25:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,title,2019-02-20 12:25:11,00:00,,1,,"b""b' git_apply corrupts file if no NL at EOF'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,body,2019-02-20 12:25:11,00:00,,,1,"b""b' ### Reproduction steps  Create a file with the following contents (no NL at EOF!)   Commit the file Apply the following patch (from buffer)  ### Expected behavior  The patch applies cleanly  ### Actual behavior  The patch applies"," but produces garbage characters at the end of the resulting file  ### Version of libgit2 (release number or SHA1)   ### Operating system(s) tested  macOS 10.14.3 (18D109) '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,1,2019-02-20 12:25:11,1.13,,1,,"b'b"" As soon as has a NL at the end", this issue doesnt arise. I\'ve also noticed all files in the apply tests have a at the end," so this is not covered by tests.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,2,2019-02-20 12:25:11,87.15,,1,,"b'b"" I made a small C test. Here the patch won\'t apply at all (the binary will) ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,3,2019-02-20 12:25:11,8.43,1,,,"b'b"" Seems to be the same kind of memory corruption I had with another bug here. I\'ll debug this once and for all now. Starting to feel kind of stupid for opening bugs that are probably due to a wrongly converted cstring or something. Will reopen when I have definitive info that is also mirrored via a C example.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,closed,2019-02-20 14:01:54,96.72,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,4,2019-02-20 12:25:11,8.22,,1,,"b""b'  That probably has happened to all of us ;)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,5,2019-02-20 12:25:11,9.8,,,1,"b""b' Nope! I actually found a memory bug. Patch incoming.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,reopened,2019-02-20 14:19:55,18.02,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,6,2019-02-20 12:25:11,54.9,,,1,"b'b"" The only reason I find those is because I have turned on guard malloc in Xcode. I don\'t know what the corresponding flag would be in or but it would probably be good to run the test suites with those flags enabled.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,7,2019-02-20 12:25:11,37.65,,1,,"b""b' The CI already runs some jobs with valgind.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,8,2019-02-20 12:25:11,961.4,,1,,"b'b"" Which obviously doesn\'t seem to be sufficient. Could we maybe also enable guard malloc on macOS CI?  /cc @ethomson?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,9,2019-02-20 12:25:11,39.05,,1,,"b""b' I think valgrind would have reported this if one of the tests would have contained a blob which does not end with a newline. As @eaigner pointed out"," none of the tests triggered this out-of-bounds read.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,closed,2019-02-21 09:31:22,1151.45,1,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,10,2019-02-20 12:25:11,59.83,,1,,"b'b"" Of course", you\'re right. Anyway," we now do have a test and a fix for this issue via #4996 ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,11,2019-02-20 12:25:11,61.27,,1,,"b""b'  @tiennou do you know how to do this?  Is this as simple as setting these variables before execution?  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,12,2019-02-20 12:25:11,144.22,,,1,"b'b"" MallocStackLogging (and friends) is what\'s used to get the nice stacktraces from  . What we\'re missing might be (though I think I enabled it because it makes double-frees more visible)",  , and  ," but I\'m not certain what combination of those Xcode calls Guard Malloc.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,13,2019-02-20 12:25:11,152.08,,,1,"b'b"" It\'s a separate setting"," not a combination of both  ![screen shot 2019-02-21 at 12 04 37]url What it does is link  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,4993,closed,-,-,-,1,9,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,opened,2019-06-10 09:13:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,title,2019-06-10 09:13:33,00:00,,1,,"b""b' libgit2.so: undefined reference to '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,body,2019-06-10 09:13:33,00:00,,1,,"b'b"" target: centos5.5 32bits  gcc -v Using built-in specs. Target: i386-redhat-linux Configured with: ../configure prefix=/usr mandir=/ infodir=/ enable-shared enable-threads=posix enable-checking=release with-system-zlib enable-__cxa_atexit disable-libunwind-exceptions enable-libgcj-multifile enable-languages=c",c++,objc,obj-c++,java,fortran,ada enable-java-awt=gtk disable-dssi enable-plugin with-java-home=/-1.4.2-gcj-1.4.2.0/jre with-cpu=generic host=i386-redhat-linux Thread model: posix gcc version 4.1.2 20080704 (Red Hat 4.1.2-48) I compiled ," on this platform to report errors when using this dynamic library.  /: undefined reference to  __sync_sub_and_fetch_4\' /: undefined reference to ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,1,2019-06-10 09:13:33,19.0,,,1,"b""b' emmm....  I solved this problem and needed to add parameters at compile time\\xe3\\x80\\x82 -m32 -march=i486'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,closed,2019-06-10 09:32:33,19.0,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,2,2019-06-10 09:13:33,34.8,,1,,"b'b"" I\'m reopening this because if we\'re failing to get you building correctly using the standard steps"," then we\'re wrong.  How did you set this up?  Just a standard then (or  )?  If so then our compare and swap macros for gcc need some tuning.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,reopened,2019-06-10 10:07:21,34.8,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,3,2019-06-10 09:13:33,5.17,,1,,"b""b' Looks like a -bit intrinsic selection issue (ie. not adding whatever is in gcc-land)"," or missing those flags in the pkg-config ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,4,2019-06-10 09:13:33,1291.45,,1,,"b""b' This problem was encountered by me using libgit2 on a 32-bit system"," which needs to add -m32 -march=i486. This does not need to be modified in libgit2 undefineds cmake.  But I hope to have a note that using libgit2.so on 32-bit systems saves a lot of time.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,5,2019-06-10 09:13:33,1386.77,,,1,"b""b' I think the issue can be closed. thanks\\xe3\\x80\\x82'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,closed,2019-06-13 06:50:44,1243.38,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libgit2,5103,closed,-,-,-,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
