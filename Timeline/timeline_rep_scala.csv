REPOSITORY,ISSUE_ID,STATUS,EVENT,CREATED_AT,TIME DURATION,NEGATIVE,NEUTRAL,POSITIVE,MSG,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,opened,2012-01-14 15:12:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,title,2012-01-14 15:12:34,00:00,,1,,"b""b' Fixed  and  location'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,body,2012-01-14 15:12:34,00:00,,1,,b'b\' Depending on the file order in the directory," could end up as """" instead of """"which would cause all the specialized tests to fail. The same goes for \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,1,2012-01-14 15:12:34,7.05,,1,,"b""b' I just realized that lib could be a directory also... Fixing up'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,closed,2012-01-14 15:19:37,7.05,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,2,2012-01-14 15:12:34,1.22,,,1,"b'b"" Does this fix specialized tests? If so", I\'m forever grateful to you! Also," I\'d like some classes in how to track down this kind of problem. :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,3,2012-01-14 15:12:34,179.85,,1,,b'b\' Yes, this fixes those tests," but currently it finds the first file or directory named ""instrumented_.jar"". I figured it would match better the original behavior if it would look for a directory named ""instrumented_"" or a file named ""instrumented*.jar"". I think", giving priority to the directory would also make sense. So, this is what I\\\'m gonna do now. To be honest, I can\\\'t remember how I found this bug. :)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,reopened,2012-01-14 18:38:44,199.12,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,4,2012-01-14 15:12:34,18.18,,1,,"b'b"" I just realized that the original didn\'t accept directories", only files, just like this fix," so I\'m reopening.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,closed,2012-01-15 16:00:12,1281.47,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,102,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,opened,2012-03-04 17:37:47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,title,2012-03-04 17:37:47,00:00,,1,,"b""b' Fix deadlocks occurring during presentation compiler shutdown.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,body,2012-03-04 17:37:47,00:00,,1,,"b'b"" During shutdown", other threads can still post work items on the work queue. They will never be serviced,"leading to clients waiting forever.  The fix is to replace the implementation of the queue with a \'always fail\' implementation during shutdown.Review by @odersky.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,1,2012-03-04 17:37:47,840.43,,1,,"b'b"" I made the field  . Let me know if that\'s ok with you.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,closed,2012-03-05 16:21:37,1363.83,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,reopened,2012-03-05 16:27:36,5.98,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,2,2012-03-04 17:37:47,609.05,,,1,"b""b' Martin gave me the green light for this commit in [1]. If no one else objects"," pleeeeaaaase.. [1] private conversation'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,closed,2012-03-05 21:25:17,297.68,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,259,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,opened,2012-03-16 01:03:09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,title,2012-03-16 01:03:09,00:00,,,1,"b""b' SI-1118"," finally.  Comments welcome!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,1,2012-03-16 01:03:09,1.37,,1,,"b""b' Dammit", I missed another change-the-whole-file diff," hang on... '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,closed,2012-03-16 01:04:31,1.37,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,2,2012-03-16 01:03:09,5.67,,1,,"b""b' Hmm", Github shows 5ea83bc as changing the whole file (presumably due to line endings), but when I look at it in IDEA it looks like just a small change.  Is it OK to pull as-is," or should I rewrite the affected commits?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,reopened,2012-03-16 01:14:56,10.42,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,3,2012-03-16 01:03:09,4.85,1,,,"b'b"" I\'ll reopen for now until I hear back about 5ea83bc"," sorry for the churn.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,4,2012-03-16 01:03:09,664.02,,1,,"b""b' On some related style fixes: It might sense to squash these commits into a single one probably.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,closed,2012-03-16 18:18:30,1023.57,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,278,closed,-,-,-,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,opened,2012-05-12 11:11:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,title,2012-05-12 11:11:15,00:00,,1,,"b'b"" Another bug bites virtpatmat\'s dust.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,body,2012-05-12 11:11:15,00:00,,1,,"b""b' Test case closes SI-5029. In 2.9"," one saw:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,1,2012-05-12 11:11:15,4.42,,,1,"b'b"" thanks for going through all these! this one\'s more of an un-feature for now", though (still working on )," but it\'s good to have the test case already!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,2,2012-05-12 11:11:15,28.95,1,,,"b'b"" right"," sorry didn\'t spot that one right away -glad (though not surprised ;-)) the implementation did :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,3,2012-05-12 11:11:15,16.78,,1,,"b""b' Yep"," needs a bit more thought. 2.10: 2.9  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,closed,2012-05-12 12:01:25,50.17,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,4,2012-05-12 11:11:15,7.55,,1,,"b'b"" actually the 2.10 behaviour", I think, is as spec\'ed, since  \'s is only applicable to a  , but  (the eq vs == waters are a bit murky," but we\'d break lots of code going to eq in this case)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,reopened,2012-05-12 12:12:20,10.92,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,5,2012-05-12 11:11:15,3.43,1,,,"b'b"" More thought called", and told me this.   comes from  . It\'s unfortunate to the point of being dangerous that and don\'t mean the same thing," but given that we\'re using there doesn\'t seem to be any need for the yet-to-be-implemented  checking here: Both cases are statically reachable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,6,2012-05-12 11:11:15,29.52,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,7,2012-05-12 11:11:15,61.05,1,,,"b""b' Be aware that the implementation selectively rewrites List() to Nil.  This is unfortunate to the point of inducing hulk-like breakdowns in extempore it cost me so much time once.  [Source]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,closed,2012-05-12 18:34:38,382.3,3,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,539,closed,-,-,-,3,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,opened,2012-05-18 06:53:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,title,2012-05-18 06:53:36,00:00,,1,,"b""b' better feedback for SI-5044'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,body,2012-05-18 06:53:36,00:00,,1,,"b""b' build url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,1,2012-05-18 06:53:36,49.53,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,closed,2012-05-18 16:08:43,555.12,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,reopened,2012-05-18 16:11:28,2.75,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,2,2012-05-18 06:53:36,97.32,1,,,"b'b"" Sorry"," you\'ll need to submit a new request for the build bot to pick it up.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,closed,2012-05-19 09:20:27,1028.98,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,565,closed,-,-,-,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,opened,2012-05-30 14:02:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,title,2012-05-30 14:02:18,00:00,,1,,"b""b' new version of incremental compiler'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,body,2012-05-30 14:02:18,00:00,,1,,"b""b' Take 2: Implemented functionality to invalidate classpath entries"," to enable incremental compiles.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,1,2012-05-30 14:02:18,1.77,,1,,"b""b' This replaces pull 641", fixing the problems that @pvlugter noted and generalizing to multiple classpath entries.Review by @pvlugter, @harrah," @adriaanm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,2,2012-05-30 14:02:18,44.38,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,3,2012-05-30 14:02:18,27.5,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,4,2012-05-30 14:02:18,20.05,,1,,"b""b' I noted I accidentally squashed the first installment that was already in master. Preparing a new one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,closed,2012-05-30 15:36:01,93.72,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,5,2012-05-30 14:02:18,52.77,1,,,"b'b"" I don\'t think this commit was in master. GitHub would have complained if you tried to submit a pull request that doesn\'t merge cleanly.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,reopened,2012-05-30 16:28:47,52.77,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,6,2012-05-30 14:02:18,3.6,,1,,"b'b"" On Wed", May 30, 2012 at 6:28 PM, Adriaan Moors <reply@It only said it can\'t be merged automatically. I tried manually and gotconflicts because my previous squash included the original incrementalcompiler commit, which was already pulled.Martin ##  Martin OderskyProf., EPFL url  and Chairman, Typesafeurl PSED, 1015 Lausanne," SwitzerlandTel. EPFL: +41 21 693 6863Tel. Typesafe: +41 21 691 4967""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,7,2012-05-30 14:02:18,611.15,,1,,"b""b' Should be closed again. Replaced by #645.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,closed,2012-05-31 06:22:37,833.83,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,644,closed,-,-,-,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,opened,2012-06-01 16:55:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,title,2012-06-01 16:55:14,00:00,,1,,"b'b"" Don\'t compute least upper bounds for if-like expressions in statement positions ...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,body,2012-06-01 16:55:14,00:00,,1,,"b""b' ...inside blocks. This may save huge amount of time (Fixes SI-5862) for complicated lubs. I had to remove the a check in adapt forthe part that transforms into {  ; () } when the expected type is Unit. The reason is in the code. As a side effect", we get more warnings for pure expressions in statement positions (see the change in the test file). Review by @odersky," @adriaanm.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,1,2012-06-01 16:55:14,32.7,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,2,2012-06-01 16:55:14,45.12,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,3,2012-06-01 16:55:14,1020.45,,,1,"b'b"" @odersky sure"," that is a good point. I\'ll add the comments and re-open the pull request when I fix the failing test.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,closed,2012-06-02 11:13:32,1098.3,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,reopened,2012-06-02 18:53:22,459.83,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,4,2012-06-01 16:55:14,84.55,,1,,"b""b' please squash these commits and push -f to your pullreq branch (no need to submit a new request)each commit should pass the test suite'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,5,2012-06-01 16:55:14,252.23,,1,,"b""b' done.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,6,2012-06-01 16:55:14,21.03,,1,,"b""b' (reviewed by odersky"," but comment was discarded due to the push -f I asked for)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,closed,2012-06-03 17:12:10,1338.8,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,653,closed,-,-,-,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,opened,2012-06-18 15:34:05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,title,2012-06-18 15:34:05,00:00,,1,,"b""b' enables reification of anonymous classes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,1,2012-06-18 15:34:05,45.58,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,2,2012-06-18 15:34:05,72.45,,1,,"b""b' review by @odersky '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,3,2012-06-18 15:34:05,125.43,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,4,2012-06-18 15:34:05,284.38,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,5,2012-06-18 15:34:05,12.5,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,6,2012-06-18 15:34:05,149.27,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,closed,2012-06-19 08:53:36,1039.52,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,reopened,2012-06-19 08:53:38,0.03,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,closed,2012-06-19 08:53:46,0.13,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,737,closed,-,-,-,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,opened,2012-06-18 15:46:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,title,2012-06-18 15:46:12,00:00,,1,,"b'b"" fixes checkinit"," now it\'s for real""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,1,2012-06-18 15:46:12,33.45,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,closed,2012-06-18 17:51:18,125.1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,reopened,2012-06-18 17:51:24,0.1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,2,2012-06-18 15:46:12,91.87,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,3,2012-06-18 15:46:12,150.12,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,4,2012-06-18 15:46:12,4.43,,1,,"b'b""   @jsuereth What\'s the problem here? Worked on my laptop"," worked on a different instance of Jenkins. Is this a Jenkins bug?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,5,2012-06-18 15:46:12,6.95,,1,,"b""b' Transient failure from all the activity. PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,6,2012-06-18 15:46:12,21.42,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,7,2012-06-18 15:46:12,185.32,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,closed,2012-06-19 00:20:22,388.97,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,738,closed,-,-,-,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,opened,2012-07-11 13:08:54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,title,2012-07-11 13:08:54,00:00,,1,,"b""b' SI-5895 fixes FieldMirrors'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,body,2012-07-11 13:08:54,00:00,,1,,"b'b"" reflectField now accepts getters and setters along with the field symbols",it also checks whether a field has a reasonable binary representation(this is necessary," because ctor parameters that are unused outside of theirdeclaring constructors don\'t get compiled down to Java ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,closed,2012-07-11 13:09:42,0.8,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,reopened,2012-07-11 13:10:33,0.85,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,1,2012-07-11 13:08:54,116.17,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,2,2012-07-11 13:08:54,179.63,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,3,2012-07-11 13:08:54,159.63,,1,,"b""b' Superceded by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,closed,2012-07-11 20:44:21,453.8,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,869,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,opened,2012-07-12 22:36:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,title,2012-07-12 22:36:08,00:00,,1,,"b""b' Implement @static annotation on singleton object fields.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,body,2012-07-12 22:36:08,00:00,,1,,"b'b"" This commit introduces the annotation on fields of static singleton objects. A static singleton object is a top-level singleton object or an object nested withina static singleton object. The field annotated with is generated as a true static field in the companionclass of the object. The initialization of the field is done in the static initializer of thecompanion class", instead of the object itself. Here\'s an example. This: generates : The accessor in is changed to return the staticfield in (the companion class is generated if it isnot already present, and the same is done for getters if  is a  ). Furthermore, all the callsites to accessor are rewrittento access the static field directly. It is illegal to annotate a field in the singleton object as if there isalready a member of the same name in  . This allows better Java interoperability with frameworks which rely on static fields beingpresent in the class.The  s are one such example. Instead of havinga Java base class holding the mutable field and a static field containinga reference to the that mutates atomically,and extending this Java base class from Scala, we can now simply do: In summary, this commit introduces the following:adds the annotationfor objects without a companion class and members, creates a companion class  (this is done in  )checks for conflicting names and if is used on static singleton object membercreates the field in the companion class for membersmoves the field initialization from the companion object to the static initializer of  the class (the initialization of members is bypassed in the phase,  and added to static ctors in  )all callsites to the accessors of are rewritten to access the static fields directly  (this is done in  )getters and setters to fields access the static field directly, and the field in the  singleton object is not emitted (this is done in  )changes in  , now computing local var indices in static initializers  as well this was an oversight before," now is necessary Future work: allow the annotation on methods as well this willbe added next. Review by @oderskyReview by @dragos""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,1,2012-07-12 22:36:08,1.28,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,2,2012-07-12 22:36:08,730.95,,1,,b'b\' Copying from the closed pull request: I remember that there was an earlier hack included to fix an issue with Android compatibility," I think it would make sense to remove that hack now and check that ""static"" also works for this ""real world use case"". Look for in ", in  and the whole  file.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,3,2012-07-12 22:36:08,41.02,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,4,2012-07-12 22:36:08,547.33,,1,,"b'b"" Thinking about it again ... I guess it would make sense to check for and issue a migration warning. Probably also just deprecate the functionality"," so that Android keeps working in 2.10. But then special care would need to be taken that something like wouldn\'t emit code twice. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,5,2012-07-12 22:36:08,1355.07,,,1,"b""b' One question: why move the initialization out of the object\\xe2\\x80\\x99s constructor? The object is initialized from the static initializer anyway (at least in 2.10.0-M5 as I verified looking at some byte code)", so which problems would ensue by just having the constructor happen \\xe2\\x80\\x9cin sequence\\xe2\\x80\\x9d? It would for sure make understanding the code flow easier, since the non-static parts are intermingled lexically with the static ones. And you could remove some code," which is always good ;-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,6,2012-07-12 22:36:08,186.3,,1,,"b'b"" That\'s exactly the first thing I\'ve intended to do. The problem is that AtomicReferenceUpdaters will (on creation) check to see if the caller is the owner of the field they\'re supposed to modify"," and throw an exception if it\'s not. This is why it\'s imperative that the creation of the arfu occurs in the static initializer of the class itself.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,7,2012-07-12 22:36:08,471.02,1,,,"b""b' What a pity that this very special and extremely quirky use-case should force such a questionable design choice. If someone goes to the trouble of putting an ARFU into a static field"," why don\\xe2\\x80\\x99t they go the full nine yards and use Unsafe? The whole . package has been moved this way for JDK7 and onward.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,8,2012-07-12 22:36:08,330.73,,1,,"b'b"" I don\'t think this should go into 2.10.x since it\'s not a critical bugfix AFAICT.Please feel free to argue otherwise and reopen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,closed,2012-07-16 11:39:50,783.7,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,9,2012-07-12 22:36:08,15.33,,,1,"b""b' I think Martin was very interested to get this into 2.10. It was his idea to do this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,10,2012-07-12 22:36:08,0.93,,1,,"b""b' I can vouch for that ^'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,11,2012-07-12 22:36:08,2.47,1,,,"b'b"" I see. I didn\'t know"," sorry. It still feels like an improvement instead of a critical bug fix. Let\'s discuss it at the meeting tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,reopened,2012-07-16 11:58:37,18.78,2,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,12,2012-07-12 22:36:08,3.6,,,1,"b""b' Sure!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,13,2012-07-12 22:36:08,1437.25,,1,,"b""b' @axel22 could you please rebase on 2.10.x and push -f?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,14,2012-07-12 22:36:08,101.1,,1,,"b'b"" Yes"," I\'ll do this now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,15,2012-07-12 22:36:08,93.9,,1,,"b""b' I did a  "," should be ok for merge now. PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,16,2012-07-12 22:36:08,55.03,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,17,2012-07-12 22:36:08,1.43,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,18,2012-07-12 22:36:08,2.32,,1,,"b""b' Ok"," so now we wait for some one to sign off :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,19,2012-07-12 22:36:08,1141.4,,1,,"b""b' I will address these issues and add a commit once I do.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,20,2012-07-12 22:36:08,121.68,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,21,2012-07-12 22:36:08,97.7,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,22,2012-07-12 22:36:08,38.63,,1,,"b""b' @dragos", if the added commits address your feedback to your liking," could you sign off so that we can send @axel22 off to his vacation destination? :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,23,2012-07-12 22:36:08,1305.5,,,1,"b""b' Thanks @adriaanm :))I think that if the last commit passes the build"," pretty much everything in the feedback should be addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,24,2012-07-12 22:36:08,0.1,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,25,2012-07-12 22:36:08,46.58,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,26,2012-07-12 22:36:08,112.7,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,closed,2012-07-20 18:53:00,414.38,2,22,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,894,closed,-,-,-,2,22,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,opened,2012-07-14 13:20:47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,title,2012-07-14 13:20:47,00:00,,1,,"b""b' SI-5892 allow implicit views in annotation args'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,body,2012-07-14 13:20:47,00:00,,1,,"b""b' the problem was that lazy annotations got completed in phase pickler.the method in Typers bails out if  . now thelazy annotations completes  . test case in  . the second test case in is for another bug that is discussed ina comment of SI-5892. when type checking arguments of type parameterannotations", the class members should not be in scope. not sure whichcommit fixed this," current master already behaves as expected. review by @retronym'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,1,2012-07-14 13:20:47,1321.2,,1,,"b""b'   still includes the class member"," but 9129cfe9 prevents it from being used as a view.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,closed,2012-07-16 08:43:53,1163.1,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,reopened,2012-07-16 08:44:01,0.13,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,2,2012-07-14 13:20:47,281.5,1,,,"b""b' changed the and updated the commit message. PLS REBUILD ALL.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,3,2012-07-14 13:20:47,233.77,,1,,"b'b"" If a clean solution to problem with isn\'t forthcoming"," you could could add a note above it for future cleanup. It\'s not the only problem in that spot.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,4,2012-07-14 13:20:47,686.45,,1,,"b""b' very true added comment to  "," is that ok?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,5,2012-07-14 13:20:47,1.8,,1,,"b""b' lgtm"," for now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,6,2012-07-14 13:20:47,270.5,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,7,2012-07-14 13:20:47,32.62,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,8,2012-07-14 13:20:47,192.1,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,closed,2012-07-18 15:41:39,417.63,1,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,909,closed,-,-,-,1,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,opened,2012-07-17 17:39:01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,title,2012-07-17 17:39:01,00:00,,1,,"b""b' Increase partest timeout and emit warning when it hits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,1,2012-07-17 17:39:01,5.83,,1,,"b""b' Merge 2.10.x into master after this is merged. This was a note to self. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,closed,2012-07-17 17:44:51,5.83,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,reopened,2012-07-17 21:39:31,234.67,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,2,2012-07-17 17:39:01,235.32,1,,,"b'b\' Weird. It looks like hitting ""done"" on iPhone triggers the close & comment button and not the comment button.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,3,2012-07-17 17:39:01,0.48,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,4,2012-07-17 17:39:01,6.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,5,2012-07-17 17:39:01,103.48,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,closed,2012-07-18 15:33:29,1073.97,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,6,2012-07-17 17:39:01,963.75,,1,,"b'b"" we\'ve timed out a lot recently so I decided not to wait for a non-timed-out build for this change as it LGTM""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,7,2012-07-17 17:39:01,973.52,,1,,"b'b"" hmm", wishful thinking -the aborted builds we\'ve been seeing recently were done with partest alreadythey got aborted after 3hrs whereas the jenkins time is 4hrs... I\'m lost @lrytz," do you have any thoughts on this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,8,2012-07-17 17:39:01,989.23,,1,,"b'b"" I don\'t understand. The build did not timeout (the jenkins timeout)"," it\'s individual tests that timed out (the partest timeout). Which builds are you referring to?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,9,2012-07-17 17:39:01,1001.48,1,,,b'b\' sorry that was too vague," I was referring to the ""grey builds"" in url e.g. url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,10,2012-07-17 17:39:01,1005.02,,1,,b'b\' I think these are not timeouts. First, the timeout was at 240 minutes I think, and second, jenkins writes in the log when it times out," not just ""ABORTED"". I have no idea why they got aborted...\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,11,2012-07-17 17:39:01,1029.82,,1,,"b'b\' I can\\\'t find the string ""ABORTED"" anywhere in trunk.  At least that part originates with jenkins", yes?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,12,2012-07-17 17:39:01,1039.22,,1,,"b'b\' From jenkins source: Supposition based on what is implied by the ""if you are catching""bit: increased concurrency accompanying my partest changes is causingInterruptedExceptions to appear somewhere where it did not previously.That something", perhaps a jenkins plugin, is aborting the build. Suggestion: upgrade jenkins and disable nonessential plugins.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,13,2012-07-17 17:39:01,1069.62,,1,,"b""b' yes sure", jenkins aborts the build," we just have no idea why.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,14,2012-07-17 17:39:01,1089.35,,1,,"b'b"" it must be something in the jenkins  (I don\'t have permission to look at those though) pretty sure it\'s not us"," as it once aborted after it was done already... ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,15,2012-07-17 17:39:01,1221.55,,1,,"b'b"" i\'m pretty sure we don\'t have any un-needed plugins", i keep track of that regularly. some unneeded ones are still installed," but not enabled.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,16,2012-07-17 17:39:01,1235.68,,1,,"b'b"" My guess is it somehow comes back to the partest changes; on that front I have a day\'s worth of work i\'m trying to finish up and pullrequestize.  If it doesn\'t fix it by accident"," it will at least make it more debuggable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,934,closed,-,-,-,2,15,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,opened,2012-08-03 12:57:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,title,2012-08-03 12:57:55,00:00,,1,,"b""b' updating resolveDups() to use ()'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,body,2012-08-03 12:57:55,00:00,,1,,"b'b"" Without this patch ICodeReader doesn\'t load bytecode for some Java-compiled class files (those containing DUP_X-style instructions). review by @VladUreche or @dragos""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,1,2012-08-03 12:57:55,5.35,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,2,2012-08-03 12:57:55,0.13,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,3,2012-08-03 12:57:55,13.83,,1,,"b'b"" The patch LGTM"," but can you add a test to make sure we don\'t fail again?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,4,2012-08-03 12:57:55,8.12,,1,,"b""b' How I picture the test: the diff should compare the inlined version vs the non-inlined versionWDYT?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,5,2012-08-03 12:57:55,16.9,,1,,"b'b\' A refinements to the idea: ""to_inline_1"" should be Java file whose compiled version contains one ore more DUP_X-style instructions. With the compiler on the classpath", we could skip that file, because one of the  Java files satisfies the property above. Before getting there, I\\\'m checking what can be done about two other backend bugs, SI-6102 and SI-6157.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,6,2012-08-03 12:57:55,10.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,7,2012-08-03 12:57:55,3.87,,,1,"b""b' Good point Miguel"," so we can use a single test file :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,8,2012-08-03 12:57:55,87.9,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,9,2012-08-03 12:57:55,771.25,,1,,"b""b' Should I merge or not?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,10,2012-08-03 12:57:55,157.87,,1,,"b'b\' I\\\'m for merging even though a test is missing (as before). This patch addresses a ""corner case"" alright", but that corner case used to work in 2.9, thus we\\\'re talking about a regression.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,11,2012-08-03 12:57:55,51.15,,,1,"b'b"" @jsuereth: Since there are still 49 critical and blocker bugs", I would opt for merging once we have a test for this, so we don\'t increase our technical debt without a strong reason. @magarciaEPFL: I\'ve been thinking about your suggestion of inlining the ASM code and I think we shouldn\'t do that -the asm code might change, so we would end up basing the test on a more or less moving target -I really don\'t think we want to revisit the test each time we update asm, so we\'d be better off having our own file," even if it\'s copied from ASM\'s code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,12,2012-08-03 12:57:55,413.77,,1,,"b'b"" I too would like ot have a test case here.  I wasn\'t sure if you were planning to include it in a later commit that I hadn\'t seen or what. I\'ll wait to merge for the test case.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,13,2012-08-03 12:57:55,17.1,,1,,"b'b"" Let\'s continue the discussion at url  "," resubmit coming later.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,closed,2012-08-04 14:55:10,117.25,0,13,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,reopened,2012-08-07 21:43:28,408.3,0,13,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,14,2012-08-03 12:57:55,412.0,1,,,"b'b"" I had a look at adding a test for this -it\'s very tricky to produce the right bytecode", as the java compiler will not generate it for simple test cases. It is also incorrect to link to the asm bytecode, thus I tend to accept this patch without a test, as it\'s just too hard to produce one. Miguel," WDYT?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,15,2012-08-03 12:57:55,494.43,,1,,"b'b"" Let\'s merge what we have now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,closed,2012-08-08 07:07:09,563.68,1,14,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1043,closed,-,-,-,1,14,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,opened,2012-08-04 15:34:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,title,2012-08-04 15:34:13,00:00,,1,,"b""b' More resilience to missing classes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,body,2012-08-04 15:34:13,00:00,,1,,"b'b"" The situation (I don\'t know how to make partest test this) is package s  class A ; class S { def f(): A = ??? } If one compiles this and removes ", should references toclass S cause the compiler to explode eagerly and fail to load S,"or explode lazily if and when it needs to know something about A?This patch takes us from the former strategy to the latter. Review by @xeno-by.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,1,2012-08-04 15:34:13,6.13,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,2,2012-08-04 15:34:13,0.72,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,3,2012-08-04 15:34:13,81.2,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,4,2012-08-04 15:34:13,13.62,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,5,2012-08-04 15:34:13,3.58,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,6,2012-08-04 15:34:13,11.08,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,7,2012-08-04 15:34:13,69.72,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,8,2012-08-04 15:34:13,1054.23,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,9,2012-08-04 15:34:13,1134.42,,1,,"b'b"" I\'m closing this request since I think @xeno-by said he would submit a new one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,closed,2012-08-08 07:08:55,934.7,0,11,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,10,2012-08-04 15:34:13,29.68,,1,,"b'b"" He did? Okay"," but that\'s news to me so as pull request closer please make sure the baby arrives at the crib.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,11,2012-08-04 15:34:13,2.7,,1,,"b'b"" it solves a long-standing problem with unpickling of macro implementations", so I think he\'ll get around to it i\'ll make sure it goes in," unless you beat me to it by updating&reopening this request -it currently can\'t be merged due to the failing test I mentioned above""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,12,2012-08-04 15:34:13,4.75,,,1,"b'b"" Adriaan mentioned SI-5940 (which is critical)", and your pull request promises to solve it," hence I\'m going to look into it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,13,2012-08-04 15:34:13,1405.6,1,,,"b'b"" /cc @odersky unfortunately", this won\'t help macro implementations. Given a macro impl as follows: This patch will help you not crash when unpickling the first parameter. However, the second parameter will blow up, because to unpickle you need  .  And even if we introduced that would still not help, because macro expansions need to operate on infos of all parameters except for the first one (e.g. to find out the positions in the argument list to insert synthesized type tags into). @paulp This functionality is useful, but it won\'t help me fix SI-5940. Hence I\'m moving along," and  this pull request the ball\'s in your court.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,reopened,2012-08-09 07:24:15,15.33,1,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,14,2012-08-04 15:34:13,294.68,,1,,"b'b"" What\'s the deal here??  Merge or no merge? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,15,2012-08-04 15:34:13,285.37,,1,,"b'b"" I think we should proceed with the merge.  I didn\'t write this with the macro problem in mind; there are a number of situations where we crash (e.g. a reference to a class in a jar which is not present"," even if we would never need that jar) where we need not crash.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,16,2012-08-04 15:34:13,14.58,,1,,"b'b"" We can\'t proceed"," because a test is failing legitimately.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,17,2012-08-04 15:34:13,87.02,1,,,"b'b"" Sorry"," I didn\'t see that.  Will look.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,18,2012-08-04 15:34:13,184.88,,1,,"b""b' I opened #1123 which supersedes this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,closed,2012-08-11 21:38:12,853.95,2,17,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1053,closed,-,-,-,2,17,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,opened,2012-08-09 22:37:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,title,2012-08-09 22:37:11,00:00,,1,,"b""b' Fix raw string interpolator'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,1,2012-08-09 22:37:11,40.15,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,2,2012-08-09 22:37:11,0.18,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,3,2012-08-09 22:37:11,51.3,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,4,2012-08-09 22:37:11,71.05,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,5,2012-08-09 22:37:11,53.83,1,,,"b""b' This commit message is insufficient.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,6,2012-08-09 22:37:11,295.97,1,,,"b""b' Hi Paul", I updated the commit message," let me know if it\\xe2\\x80\\x99s still insufficient.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,7,2012-08-09 22:37:11,319.45,,1,,"b""b' OK this lgtm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,closed,2012-08-16 21:48:16,1391.08,2,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,8,2012-08-09 22:37:11,181.6,,1,,"b""b' Just for information"," why has this pull request been closed? I know that\\xe2\\x80\\x99s not an important bug and the fix is very simple but according to the current sources [the bug is still here]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,9,2012-08-09 22:37:11,13.4,1,,,"b'b"" I\'m sorry", that has to have been a mis-click.  With no comment," I can only have meant to merge it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,reopened,2012-08-28 15:44:10,1075.9,3,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,closed,2012-08-28 15:44:42,0.53,3,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1110,closed,-,-,-,3,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,opened,2012-08-10 09:07:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,title,2012-08-10 09:07:58,00:00,,1,,"b""b' patmat tweaks: compiler performance"," better error on unsupported pattern'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,body,2012-08-10 09:07:58,00:00,,1,,"b'b"" move a catch of a StackOverflowError up the call stack since @gkossakowski diagnosed it to be killing compiler performanceRoland reported hitting the unsupported pattern branch in translatePattern in akka code"," so providing some diagnostics and a nicer error message to figure out what\'s going on review by @gkossakowski (/cc @paulp)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,1,2012-08-10 09:07:58,15.12,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,2,2012-08-10 09:07:58,0.12,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,3,2012-08-10 09:07:58,65.58,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,4,2012-08-10 09:07:58,34.27,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,5,2012-08-10 09:07:58,153.88,1,,,"b'b"" I\'ll verify if this resolves the problem with performance. My performance testing infrastructure is still not fancy enough to automate this. :-/""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,6,2012-08-10 09:07:58,470.48,,1,,"b'b"" It seems like 7b6cc9f does not help. Only commenting out catching SOEs helps to improve compiler performance by 10-11%. I\'ll double check tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,7,2012-08-10 09:07:58,1222.73,,,1,"b'b"" I checked again and I\'m pretty sure 7b6cc9f doesn\'t help. Therefore I think this pull request should be closed (it doesn\'t bring fixes it promises).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,8,2012-08-10 09:07:58,194.07,,1,,"b""b' Done.  Reopen upon solution.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,closed,2012-08-13 21:04:14,716.27,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,reopened,2012-08-14 09:46:50,762.6,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,closed,2012-08-14 09:47:29,0.65,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1112,closed,-,-,-,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,opened,2012-08-15 23:41:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,title,2012-08-15 23:41:59,00:00,,1,,"b""b' cleanup of reflection and macros'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,body,2012-08-15 23:41:59,00:00,,1,,"b'b"" I\'m actually in the middle of it", but decided to give it a spin anyways, since the volume of the changes is quite big. review by @paulp," the very first commit is review by @VladUreche""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,1,2012-08-15 23:41:59,41.38,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,2,2012-08-15 23:41:59,0.1,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,3,2012-08-15 23:41:59,28.95,1,,,"b'b\' It\\\'s getting harder to find stuff to complain about.  This looks like progress to me.  (""LGTM"")\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,4,2012-08-15 23:41:59,37.9,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,5,2012-08-15 23:41:59,31.73,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,6,2012-08-15 23:41:59,216.17,,1,,"b'b"" GitHub won\'t pick my changes. Probably because of the recent maintenance. I\'ll reopen the pull request.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,closed,2012-08-16 05:38:13,356.23,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,reopened,2012-08-16 06:18:58,40.75,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,7,2012-08-15 23:41:59,50.03,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,8,2012-08-15 23:41:59,20.12,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,9,2012-08-15 23:41:59,0.18,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,10,2012-08-15 23:41:59,65.23,,1,,"b""b' LGTM for the first commit'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,11,2012-08-15 23:41:59,2.53,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,12,2012-08-15 23:41:59,30.87,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,closed,2012-08-16 08:30:37,131.65,1,13,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1145,closed,-,-,-,1,13,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,opened,2012-09-14 22:59:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,title,2012-09-14 22:59:36,00:00,,1,,"b""b' SI-6356 reflection now supports Java annotations'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,1,2012-09-14 22:59:36,1.47,,1,,"b""b' review by @paulp @retronym'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,2,2012-09-14 22:59:36,3.23,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,3,2012-09-14 22:59:36,0.1,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,4,2012-09-14 22:59:36,34.85,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,5,2012-09-14 22:59:36,16.2,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,6,2012-09-14 22:59:36,25.78,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,7,2012-09-14 22:59:36,33.23,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,8,2012-09-14 22:59:36,0.13,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,9,2012-09-14 22:59:36,58.8,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,10,2012-09-14 22:59:36,13.82,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,11,2012-09-14 22:59:36,925.8,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,closed,2012-09-16 17:33:01,1113.42,0,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,reopened,2012-09-16 17:57:53,24.87,0,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,12,2012-09-14 22:59:36,25.13,,1,,"b'b"" I\'m going to just leave this here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,closed,2012-09-16 17:58:10,0.28,0,13,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,reopened,2012-09-16 18:03:31,5.35,0,13,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,13,2012-09-14 22:59:36,5.47,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,14,2012-09-14 22:59:36,10.5,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,15,2012-09-14 22:59:36,0.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,16,2012-09-14 22:59:36,46.65,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,17,2012-09-14 22:59:36,2.1,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,18,2012-09-14 22:59:36,69.48,,1,,"b""b' See #1319 .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,closed,2012-09-16 20:12:25,128.9,0,19,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1306,closed,-,-,-,0,19,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,opened,2012-09-21 01:01:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,title,2012-09-21 01:01:26,00:00,,1,,"b""b'  should not take Any (Fixes SI-6406)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,body,2012-09-21 01:01:26,00:00,,1,,b'b\' This deprecates unapplySeq(Any) and adds overloadedunapplySeq(CharSequence) and unapplySeq(Match), with theputative advantage that you can\\\'t try to extract the unextractable. Regex is massaged so that the underlying Pattern is primary,rather than the String-valued expression.  Regex and itsunanchored companion (I almost wrote unmoored) share aPattern object, so that unapplySeq(Match) can easily testwhether the Match was generated by this Regex; in that case,the match result is used immediately, instead of reapplyingthe regex to the matched string. The documentation is massaged to reflect unanchored and also toalign with the underlying terminology, e.g.,"subgroup"" reallyjust means ""group."" Review by @jsuereth\''
scala	1369	closed	1	som-snytt	2012-09-21 01:01:26	1.53			+1	b'b"" Needs for review for consensus that it\'s a good idea, and that deprecation is correct.""'
scala	1369	closed	2	scala-jenkins	2012-09-21 01:01:26	1.42		+1		b""b' Started jenkins job pr-rangepos at url '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,3,2012-09-21 01:01:26,0.13,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,4,2012-09-21 01:01:26,48.57,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,5,2012-09-21 01:01:26,4.78,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,6,2012-09-21 01:01:26,1418.93,,1,,"b'b"" It seems like a reasonable idea"," but it is easy for a change like this to have unintended consequences. I don\'t think it would be wise to merge this for 2.10.0.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,7,2012-09-21 01:01:26,468.98,,1,,"b'b"" So this has to go into master"," right? I\'m closing it but please respond so we can still incorporate @som-snytt\'s work.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,closed,2012-09-28 09:25:47,504.35,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,8,2012-09-21 01:01:26,489.53,,1,,"b""b' But this was a PR against master"," right?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,9,2012-09-21 01:01:26,8.68,1,,,"b'b"" Sorry"," I\'m an idiot.  2.10.x on the brain.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,reopened,2012-09-28 17:44:00,498.22,1,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,10,2012-09-21 01:01:26,19.27,,1,,"b'b"" There\'s a not-so-subliminal green bar that says Milestone 2.10"," but I don\'t pretend to be a github power user.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,11,2012-09-21 01:01:26,1253.12,1,,,"b'b"" When it comes to Milestone 2.10 that\'s been another idiot in neighborhood. I removed it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,12,2012-09-21 01:01:26,507.52,,1,,"b'b"" I think there\'s no time like the present.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,closed,2012-10-04 23:23:59,339.98,2,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,13,2012-09-21 01:01:26,23.43,1,,,"b'b"" I was doing some matching and had forgotten that this change hadn\'t made it into the current release", what with the Labor Day push to get it out before New Year\'s.  (Calendar year," not Jewish New Year.) The reason @paulp had 2.10 on the brain was that the deprecation is wrongly set for 2.10.0.  I must have forgotten that by the time it came up for review.  Does this not rise to the level of a ticket? I had a feeling that my slice-of-the-2.10-pie stats were a little low.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,14,2012-09-21 01:01:26,52.03,,,1,"b""b' thanks. this caught some bad code of mine.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1369,closed,-,-,-,3,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,opened,2012-09-24 23:14:52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,title,2012-09-24 23:14:52,00:00,,1,,"b""b' Fixing -Xlint and acting on its advice for 2.10.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,body,2012-09-24 23:14:52,00:00,,,1,"b'b"" Some fixes -Xlint told me about. Moved dead code out of the standard lint"," as it has become supernoisy for some reason. Un-overloaded implicits (don\'t overloadimplicits!) Eliminated non-nullary method overriding nullary methodin the  code. Made access levels consistent in somecollections classes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,1,2012-09-24 23:14:52,25.77,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,2,2012-09-24 23:14:52,0.08,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,3,2012-09-24 23:14:52,15.48,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,4,2012-09-24 23:14:52,28.78,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,5,2012-09-24 23:14:52,125.82,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,6,2012-09-24 23:14:52,36.82,,1,,"b""b' Review by @jsuereth '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,7,2012-09-24 23:14:52,13.88,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,8,2012-09-24 23:14:52,0.18,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,9,2012-09-24 23:14:52,45.78,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,10,2012-09-24 23:14:52,13.48,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,11,2012-09-24 23:14:52,375.03,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,12,2012-09-24 23:14:52,53.45,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,13,2012-09-24 23:14:52,0.1,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,14,2012-09-24 23:14:52,58.42,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,15,2012-09-24 23:14:52,11.5,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,16,2012-09-24 23:14:52,33.88,,1,,"b'b"" Does not merge anymore. Closing. I\'ll discuss with @jsuereth if it makes sense to reopen it against 2.10.0. Those mostly cleanups that are not very essential for release right? Are any of those code changes source or binary incompatible so they cannot be introduced in 2.10.1?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,closed,2012-09-26 13:13:20,838.47,0,17,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,17,2012-09-24 23:14:52,53.62,1,,,"b'b\' It is a mistake to discard a patch like this as ""not essential for release."" The difference between an appealing piece of software and an annoying one is in the small things.  Without this patch -Xlint is basically useless.  There is nothing in this patch which presents any threat.  It also contains material fixes", like not overloading implicit conversions.  It changes access levels, which of course impacts binary compatibility. I don\\\'t know what is my capacity for seeing my work tossed aside; I know it\\\'s finite and the horizon is visible.  It is the thankless work which nobody else even considers doing, to come up with warnings like these and to act on them in our own codebase.  If the only thing I ask is that you not stand in the way, and I can\\\'t even get that, then I fear we may have crossed to the other side of the line delineating my tolerance for process.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,18,2012-09-24 23:14:52,13.73,,,1,"b""b' Hey Paul", greg and I talked.  FIRST LGTM. If the merge conflict is gone, this makes it into 2.10.0. Specifically -[collection] changes are hugeXlint dead flag move() vs not changes All are both innocuous and help prevent further .  If you have time, can we split up the commits?  If not," fixing the merge conflcits is  good for me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,reopened,2012-09-26 14:20:41,67.35,1,17,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,19,2012-09-24 23:14:52,32.9,,,1,"b'b"" @paulp: Everybody cares about his bit of work he did. I had a long discussion with Hubert yesterday because he worked hard on lazy vals refactoring and then we said it cannot go into 2.10.0 because it\'s too late. I have those discussions every day and all I\'m asking is a bit of understanding that you cannot get closer to release without setting up some deadline and stabilizng. Also", I totally do not understand why people care so deeply to get into 2.10.0? We\'ll have 2.10.1 4 months after 2.10.0 is out which is not a huge amount of time. I\'m going to do all I can to make sure that we are on time. One week ago you complained that nobody knows when 2.10.0 will be out and we are merging waay to many commits compared to what we discussed in Stockholm. I shared your frustration and took it seriously. We are getting closer to RC1 and that means it\'s getting closer (soon almost impossible) to get anything in for 2.10.0. Having said all of that," you opened your pull request before deadline and @jsuereth said he\'ll review it if you fix merge conflicts. I\'m fine with that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,20,2012-09-24 23:14:52,60.83,,1,,"b'b\' ""One week ago you complained that nobody knows when 2.10.0 will be out and we are merging waay to many commits compared to what we discussed in Stockholm."" That wasn\\\'t what I meant by that.  I meant that the estimate of ""50"" missed the lower bound by an order of magnitude", not that it would have been a good idea to ship with only 50 more commits.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,21,2012-09-24 23:14:52,5.05,,1,,"b'b"" Oh", I see. Yeah, I misunderstood. Anyway, let\'s focus on getting 2.10.0 out and yes," it means we\'ll have to turn down pull requests (does not apply to this one).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,22,2012-09-24 23:14:52,169.55,,1,,"b""b' It is rebased on 2.10.x (which happened cleanly"," I wonder why github lost the ability to merge it automatically) and broken into bite-sized pieces.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,23,2012-09-24 23:14:52,0.13,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,24,2012-09-24 23:14:52,1.0,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,25,2012-09-24 23:14:52,0.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,26,2012-09-24 23:14:52,33.23,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,27,2012-09-24 23:14:52,21.1,,1,,"b'b"" It seems josh already says this LGTH now that I\'ve swaddled the individual commits in merge blankets.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,closed,2012-09-26 19:44:58,324.28,1,25,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,28,2012-09-24 23:14:52,25.9,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1387,closed,-,-,-,1,26,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,opened,2012-09-25 08:51:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,title,2012-09-25 08:51:02,00:00,,1,,"b""b' Closes SI-6358. Move accessor generation for lazy vals to typers.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,body,2012-09-25 08:51:02,00:00,,,1,"b""b' Until now lazy accessors were handled somehow special because their symbol was created in typers but the corresponding tree was only added in Refchecks. This irregularity caused serious problems for value classes. Also it now looks just better when lazy value is treated in a similar way as other fields. I needed to adapt reifier so that it handles the new implementation correctly. Previously it had to recreate lazy val only by removing defdef and renaming. Now we basically need to recreate lazy val from scratch. There is one minor change to cps plugin but that is still fine because lazy vals were never really part of the transformation. Review by @odersky and @xeno-by'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,1,2012-09-25 08:51:02,0.98,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,2,2012-09-25 08:51:02,0.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,3,2012-09-25 08:51:02,9.95,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,4,2012-09-25 08:51:02,9.6,,,1,"b""b' Awesome"," I think this is the first time I managed to cause rangepos failure myself. I will fix that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,5,2012-09-25 08:51:02,5.27,,1,,"b'b"" Looks like this also fixes the problems with nested objects ( ); that will need a test case. @harrah \'s [test case from SI-6358]url  should also be included.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,6,2012-09-25 08:51:02,8.28,,1,,"b'b"" Right", I missed that test but it works for it as well. That doesn\'t fix nested objects," they still crash.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,7,2012-09-25 08:51:02,0.27,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,8,2012-09-25 08:51:02,7.43,1,,,"b'b"" Looks like I broke some of Eugene\'s very recent tests. Well that\'s annoying -""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,closed,2012-09-25 09:32:53,41.85,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,9,2012-09-25 08:51:02,3.03,,,1,"b""b' I see. With a bit of luck"," the nested object fix will be as simple as sprinkling somewhere else. (See url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,10,2012-09-25 08:51:02,3.95,,,1,"b'b"" Yes and no. It will work if we move accessor generator to typers"," similarly as for lazy vals. Currently it is done in refchecks. Without that we can add this changeOwner in various places and it will feel hackish and I won\'t have a confidence to say that it will not break sth more complicated.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,11,2012-09-25 08:51:02,8.03,,1,,"b""b' After some digging"," those are not my tests failing. They are caused by #1385 and 2.10 is now broken.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,reopened,2012-09-25 09:47:54,15.02,1,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,12,2012-09-25 08:51:02,10.58,,1,,"b""b' @hubertp: Are you saying that rangepos tests are failing due to #1385?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,13,2012-09-25 08:51:02,8.9,,1,,"b""b' No"," rangepos is a valid one. But for normal build all failures are because of #1385 you will see that newer PRs also fail because of that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,14,2012-09-25 08:51:02,8.9,,1,,"b'b"" Okay I\'m going to look into the failure asap""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,15,2012-09-25 08:51:02,42.87,,1,,"b""b' Fixed in #1391'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,16,2012-09-25 08:51:02,119.52,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,17,2012-09-25 08:51:02,27.88,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,18,2012-09-25 08:51:02,0.22,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,19,2012-09-25 08:51:02,52.93,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,20,2012-09-25 08:51:02,9.07,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,21,2012-09-25 08:51:02,35.4,,1,,"b""b' Given the recent discussion on the mailing list I will close this PR as this is not going into 2.10.0.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,closed,2012-09-25 15:04:10,316.27,1,18,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1389,closed,-,-,-,1,18,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,opened,2012-09-26 08:09:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,title,2012-09-26 08:09:22,00:00,,1,,"b""b' Generate links to external projects in scaladoc.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,body,2012-09-26 08:09:22,00:00,,1,,"b""b' Review by @VladUreche.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,1,2012-09-26 08:09:22,8.6,,1,,"b""b' LGTM given in #1400.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,2,2012-09-26 08:09:22,6.8,,1,,"b""b' Btw"," I filed url  for the TODO.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,closed,2012-09-26 08:24:46,15.4,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,reopened,2012-09-26 08:24:53,0.12,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,3,2012-09-26 08:09:22,0.68,1,,,"b""b' Sorry for closing"," I accidentaly pressed Comment & Close instead of Comment.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,4,2012-09-26 08:09:22,17.92,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,5,2012-09-26 08:09:22,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,6,2012-09-26 08:09:22,26.4,,1,,"b'b"" @VladUreche: Do you think it\'s safe to merge it given we are so close to RC1? I don\'t want to shut it down jus double checking because it\'s looks fairly big.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,7,2012-09-26 08:09:22,22.63,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,8,2012-09-26 08:09:22,5.57,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,9,2012-09-26 08:09:22,1.02,,1,,"b'b"" I think it\'s a safe bet to include it", because most of the stuff is just moving code around and refactoring it. And it only touches new scaladoc features (introduced in 2.10)," which all come with comprehensive tests.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,10,2012-09-26 08:09:22,49.87,,,1,"b'b"" Cool. Thanks for explanation. I\'m feeling better about merging now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,closed,2012-09-26 10:28:58,124.08,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1401,closed,-,-,-,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,opened,2012-09-26 08:59:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,title,2012-09-26 08:59:36,00:00,,1,,"b""b' reflection and macro cleanup'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,body,2012-09-26 08:59:36,00:00,1,,,"b""b' Scaladoc-driven cleanup rocks. Yesterday night the API was quite ugly"," now it looks much better.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,1,2012-09-26 08:59:36,2.65,,1,,"b""b' review @paulp @retronym @gkossakowski '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,2,2012-09-26 08:59:36,0.37,,1,,"b""b' also review @VladUreche for scaladoc commits'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,3,2012-09-26 08:59:36,28.82,,1,,"b'b"" LGTM", I added two comments," but it\'s up to you if you want to act on them or not.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,4,2012-09-26 08:59:36,7.3,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,5,2012-09-26 08:59:36,0.1,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,6,2012-09-26 08:59:36,33.48,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,7,2012-09-26 08:59:36,13.37,,,1,"b'b"" Wow. That\'s huge. Do we really want all of that to be included? Also tests are failing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,8,2012-09-26 08:59:36,2.43,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,9,2012-09-26 08:59:36,3.92,,1,,"b'b"" Given that tests are failing I\'d like to drop this for 2.10.0. If you have some essential part of this PR that absolutely has to be in then let\'s discuss it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,10,2012-09-26 08:59:36,5.82,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,11,2012-09-26 08:59:36,1.25,,1,,"b'b"" The tests were failing", because I forgot to rename a method. It\'s no Friday yet, why close? This PR is directly affiliated with scaladoc improvements (reduces the surface for documentation," provides better names for top-level traits)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,12,2012-09-26 08:59:36,3.28,,1,,"b""b' Regarding the size", well, each commit is a simple rename or removal," without any mechanisms changed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,13,2012-09-26 08:59:36,47.0,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,14,2012-09-26 08:59:36,0.13,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,15,2012-09-26 08:59:36,62.93,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,16,2012-09-26 08:59:36,45.5,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,17,2012-09-26 08:59:36,1286.13,,1,,"b'b"" We discussed this @jsuereth and it won\'t go into 2.10.0. It\'s too big change (even if it\'s only about moving code around", it also matters and introduced problems to the whole ecosystem we need to sync with). Also," it cannot be reviewed in reasonable time. If there\'s anything that\'s absolutely critical from this long list of commits let\'s discuss it. The whole PR won\'t go in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,closed,2012-09-27 10:44:20,104.73,1,17,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,18,2012-09-26 08:59:36,52.15,,,1,"b'b"" Chris and I just went through it with Eugene. I think each commit makes a lot of sense. All of it is cruft that we are much better off without. Removing this stuff is much more helpful than trying to document it", and we _have_ classified documentation as a blocker. I also like the effort to have more consistency in naming.  So I would put a vote in to accept this. 233 net deletions is a big win. It will improve the quality of what we ship a lot.Sure it\'s late," but it will be crucial to send a message that we care about API quality.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,19,2012-09-26 08:59:36,40.75,,1,,b'b\' Martin This is more about policy.  YES We care about API quality. However, we have to weight all things in context. Reflection is currently something that can drastically affect other components, like the IDE. At this point, if you touch a lot of code, there\\\'s higher risk we have undiscovered blockers show up in an RC1.  I\\\'d rather _know_ we have a problem and fix it in 2.10.1 which will release four months later.  We specifically made reflection experimental because we knew we wouldn\\\'t be ready for another 4 months. We have to draw a line in the sand somewhere, well, we drew the line for 2.10.0. If this pull request makes it into 2.10.0 we\\\'ll have to _UNDO_ a lot of work we did to draw the line. It also means delaying the release by another month or so just to make sure everything is stable. It\\\'s risk vs. reward right now. Yes the API is important, important enough to release a 2.10.1 _even sooner_ than 2 months. That\\\'s where this pull request belongs right now. I understand that a few of the items touched were introduced in M7," however we already have people depending on these things for 2.10.0.  Momentum is against us and it takes a while for the pendulum to stop swinging after any ""major refactorings"". Unfortunately", this is such a change. That said, I\\\'d like to leave this pull request up against 2.10.x. We\\\'ll be moving 2.10.0 to the WIP branch shortly and then this can immediately go into 2.10.1 where we have ~2 months to think through changes like this before trying to harden things and stop the wild gyrations of change for the community. Basically:  I\\\'d rather release with known issues than unknown issues.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,20,2012-09-26 08:59:36,40.72,1,,,b'b\' If we strictly follow the policy," then this PR doesn\\\'t violate it. It is a ""cleanup and polish to _new features_ introduced in 2.10.x """, was submitted before Wed 12:00, got an LGTM before Friday midnight. Also I\\\'m very worried about the first impression people get from the reflection API (which is something that cannot be undone in 2.10.1). This PR is a direct result of me compiling a scaladoc and taking a cursory look. Unfortunately, that look revealed a lot of ugliness," which I did my best to fix. Could you also please elaborate on ""it also means delaying the release by another month or so just to make sure everything is stable""? \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,21,2012-09-26 08:59:36,32.83,,1,,"b'b"" We reached conclusion that @xeno-by will test sbt", Akka and IDE locally to see if it breaks. Josh will check if community build breaks. If not, we\'ll consider this to be purely touching reflection so if new problems arise by merging it they will be localized in reflection that is experimental and we can release it as-is. If this affect a non-experimental area of the compiler," we\'ll revert for 2.10.0 and re-introduce in 2.10.1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,reopened,2012-09-27 13:40:39,176.32,2,19,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,22,2012-09-26 08:59:36,26.57,,1,,"b'b"" Rebased against the fresh trunk"," because a recent commit changed the code that\'s been removed by this pull request.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,23,2012-09-26 08:59:36,130.88,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,24,2012-09-26 08:59:36,45.07,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,25,2012-09-26 08:59:36,0.15,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,26,2012-09-26 08:59:36,57.15,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,27,2012-09-26 08:59:36,97.38,1,,,"b""b' Kitteh got stuck on second build"," it passed in the output.  This is good to go.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,closed,2012-09-27 19:27:53,347.23,3,24,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1402,closed,-,-,-,3,24,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,opened,2012-09-26 13:14:54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,title,2012-09-26 13:14:54,00:00,,1,,"b""b' Closes SI-6358. Move accessor generation for lazy vals to typers.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,body,2012-09-26 13:14:54,00:00,,1,,"b""b' This will need to be backported to 2.10.1 once 2.10.0 is out. Review by @odersky"," @xeno-by.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,1,2012-09-26 13:14:54,4.25,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,2,2012-09-26 13:14:54,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,3,2012-09-26 13:14:54,55.15,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,4,2012-09-26 13:14:54,16.6,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,5,2012-09-26 13:14:54,1195.98,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,6,2012-09-26 13:14:54,0.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,7,2012-09-26 13:14:54,49.93,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,8,2012-09-26 13:14:54,6.02,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,9,2012-09-26 13:14:54,122.57,,1,,"b""b' Rebased against latest master and did some renaming suggested by Paul.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,10,2012-09-26 13:14:54,596.83,,,1,"b'b"" I\'m out of pedantry for the time being; it looks good to me. (Not that I was the desired reviewer or anything.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,11,2012-09-26 13:14:54,515.07,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,closed,2012-10-05 07:57:25,1122.52,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,reopened,2012-10-05 07:57:27,0.03,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,12,2012-09-26 13:14:54,0.25,,1,,"b""b' wrong button...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,13,2012-09-26 13:14:54,3.12,,1,,"b""b' @xeno-by do the changes to reifier look ok to you?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,14,2012-09-26 13:14:54,36.92,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,15,2012-09-26 13:14:54,0.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,16,2012-09-26 13:14:54,44.17,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,17,2012-09-26 13:14:54,3.3,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,18,2012-09-26 13:14:54,343.07,1,,,"b""b' Omg sorry!! Somehow I missed all the notifications about this PR. Going to adjust my gmail filter. And looking into the PR right now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,19,2012-09-26 13:14:54,6.02,,1,,"b""b' The reifier stuff is lgtm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,20,2012-09-26 13:14:54,1328.08,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,21,2012-09-26 13:14:54,32.73,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,22,2012-09-26 13:14:54,0.08,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,23,2012-09-26 13:14:54,0.92,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,24,2012-09-26 13:14:54,0.08,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,25,2012-09-26 13:14:54,146.2,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,26,2012-09-26 13:14:54,17.67,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,27,2012-09-26 13:14:54,0.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,28,2012-09-26 13:14:54,33.05,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,29,2012-09-26 13:14:54,13.98,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,30,2012-09-26 13:14:54,115.37,,,1,"b""b' Lovely"," this is what happens when PR is just too long in the queue.Failure is due to restriction errors that were merged from 2.10.0'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,31,2012-09-26 13:14:54,193.12,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,32,2012-09-26 13:14:54,2.27,1,,,"b'b"" I run it locally", so this time it will be ok. After tests pass can someone merge it," please? I don\'t want to waste more time on rebasing against master.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,33,2012-09-26 13:14:54,27.17,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,34,2012-09-26 13:14:54,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,35,2012-09-26 13:14:54,30.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,36,2012-09-26 13:14:54,45.13,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,closed,2012-10-10 06:36:59,1359.53,2,34,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1406,closed,-,-,-,2,34,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,opened,2012-10-10 00:48:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,title,2012-10-10 00:48:22,00:00,,1,,"b""b' SI-6488: Fix for race with open I/O fds'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,body,2012-10-10 00:48:22,00:00,,1,,"b""b' Unless the I/O threads for error and output are closed prior to () there is a potential race condition that ends in the I/O threads raising an IOException.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,1,2012-10-10 00:48:22,6.65,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,2,2012-10-10 00:48:22,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,3,2012-10-10 00:48:22,56.05,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,4,2012-10-10 00:48:22,23.08,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,5,2012-10-10 00:48:22,370.03,,,1,"b""b' Three questions: (1) have you signed the scala cla?(2) can you target this at 2.10.x(3) can you include a small test case The code looks good"," but I need that test case to prevent regression.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,6,2012-10-10 00:48:22,916.97,,1,,"b""b' closing for lack of progress  @possiblywrong"," please re-open or resubmit after addressing the review comments'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,closed,2012-10-19 23:41:12,1372.83,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,7,2012-10-10 00:48:22,372.27,,1,,"b'b"" (1) Signed and submitted", it was delayed going through my employer\'s legal process, hence the lack of apparent progress.(2) Can do," but should I resubmit the patch & test against master or 2.10.x? or do you mean change the fix version in SI-6488?(3) Someone needs to give me a pointer to where in the mass of tests I should best put a test case. It\'s really not that obvious.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,reopened,2012-10-23 18:48:26,1147.23,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,8,2012-10-10 00:48:22,777.87,,,1,"b""b' Thanks! Resubmitting against the 2.10.x branch would be perfect.Tests that need to run go under  -you need a t6488.scala with a Test object that has a main method",and t6488.check (the latter contains the expected output of running the former). The original repro for the issue is not a good test as it take 10s. We have a lot of tests to run," so each should be as fast as possible (and deterministic of course).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,9,2012-10-10 00:48:22,50.27,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,10,2012-10-10 00:48:22,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,11,2012-10-10 00:48:22,44.08,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,12,2012-10-10 00:48:22,1.95,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,closed,2012-10-24 15:50:04,1261.63,0,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1484,closed,-,-,-,0,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,opened,2012-10-16 23:15:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,title,2012-10-16 23:15:59,00:00,,1,,"b""b' PluginComponent contributes description to -Xshow-phases. (Fixes SI-6446)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,body,2012-10-16 23:15:59,00:00,1,,,b'b\' In Global, SubComponent is called a phase descriptor, but it doesn\\\'t actually have a description. (Phase itself does.) This fix adds a description to PluginComponent so that plugins can describe what they do in -Xshow-phases. To avoid chaos, as per the formatting comments in , -Xshow-phases output is restricted to 80 columns.  As an aid, inlineExceptionHandlers is renamed to inlineHandlers. Phase descriptions are provided for the CPS components. A minimal test is provided for -Xshow-phases with a custom plugin.  Plugin loading and partest are modified so that a test can provide a plugin.  (Plugin loading accepts an exploded jar," and partest replaces ""dot"" or cwd with output dir.  This means a test can contribute just one plugin.) (One could imagine testing a compiler component by supplying a test phase that creates possibly screwy trees", for example to test robustness.) Moves test  from the pos test set. Footnote: Continuations tests could be mainstreamed, by adding .flags. review by: @paulp who cares\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,1,2012-10-16 23:15:59,27.17,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,2,2012-10-16 23:15:59,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,3,2012-10-16 23:15:59,43.1,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,4,2012-10-16 23:15:59,6.95,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,5,2012-10-16 23:15:59,58.88,,1,,"b""b' There are additional cogent rejoinders buried behind the outdated diffs.  I forgot that part about pushing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,6,2012-10-16 23:15:59,759.63,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,7,2012-10-16 23:15:59,0.1,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,8,2012-10-16 23:15:59,38.97,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,9,2012-10-16 23:15:59,27.15,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,10,2012-10-16 23:15:59,583.0,,1,,"b'b"" This is the partestable version of url  If it\'s not deemed to pull its weight"," I\'ll kill it before it\'s no longer mergeable.  I already see issues with the issue. @gkossakowski or @paulp might ask for a more substantial contribution to consume review-by resources.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,closed,2012-10-29 15:53:28,997.48,1,11,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,11,2012-10-16 23:15:59,1433.0,,1,,"b'b"" Reopening with rebased commit.  Writing a plugin is so much more fun with a custom description.  I understand that it may be a slow process", but worth the wait.  Also, quite a lot of elven labor frees up in about a week, so maybe it will get some cheer.  (I wasn\'t actually referring to the elves who appear in the workshop every night to work on 2.10-final, but maybe they could help," too.) I added more tests and tweaked some code. It\'s too bad the formatting logic is in global and not in reporter.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,reopened,2012-12-19 00:53:59,540.52,1,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,12,2012-10-16 23:15:59,46.63,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,13,2012-10-16 23:15:59,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,14,2012-10-16 23:15:59,14.1,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,15,2012-10-16 23:15:59,2.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,16,2012-10-16 23:15:59,1203.52,,,1,"b""b' This looks great to me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,17,2012-10-16 23:15:59,0.47,1,,,"b'b\' ""It\\\'s too bad the formatting logic is in global and not in reporter."" We have the power to move stuff.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,18,2012-10-16 23:15:59,30.63,1,,,b'b\' I remember looking at moving it, and I\\\'ve forgotten the detail," but it had to do with how the ""info"" return from compiler interacts.  (Or I don\\\'t remember.) So if desired", I would refactor that separately.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,closed,2012-12-23 05:03:59,250.0,3,16,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,19,2012-10-16 23:15:59,538.22,,,1,"b'b"" Thanks.  I noticed the sbt stack trace with the plugin classloading issue didn\'t include this commit (whew?).  My New Year\'s resolution is to always have a PR in the review queue.  Excuse the split infinitive.  Happy Holidays.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1506,closed,-,-,-,3,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,opened,2012-10-24 14:45:37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,title,2012-10-24 14:45:37,00:00,,1,,"b""b' Harden against synthetics being added more than once.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,body,2012-10-24 14:45:37,00:00,,1,,"b'b"" Don\'t add synthetic methods if they already contain syntheticmethods from the set we\'re about to add.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,1,2012-10-24 14:45:37,0.75,,1,,"b""b' Review by @dotta .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,2,2012-10-24 14:45:37,7.83,,,1,"b'b"" LOL. If it\'s up to me", you\'ll have no problem getting this merged.  From where I stand (i.e., very limited compiler\'s internal know-how)," your fix looks good to me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,3,2012-10-24 14:45:37,2.38,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,4,2012-10-24 14:45:37,0.05,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,5,2012-10-24 14:45:37,5.18,,1,,"b'b"" With no tests and no pressing bug"," I\'m not really certain why this is targetted against the RC branch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,6,2012-10-24 14:45:37,3.5,1,,,"b""b' Josh", this PR is a consequence of url  Unfortunately," it is hard to create a test.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,7,2012-10-24 14:45:37,36.4,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,8,2012-10-24 14:45:37,1.95,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,9,2012-10-24 14:45:37,4.05,,1,,"b""b' Ok"," Talked with @dotta . Review by @adriaanm '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,10,2012-10-24 14:45:37,145.02,,1,,"b'b"" I know this is an annoying problem and it\'s great we have a fix"," but we\'re in paranoid RC mode here. Only stuff that\'s either too important not to get in now (due to the now-or-never nature of binary incompatible fixes) so that we can risk the regression or that\'s a real blocker (something hit by a lot of people that cannot be worked around). Please resubmit for 2.10.x.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,closed,2012-10-24 18:12:44,207.12,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,11,2012-10-24 14:45:37,911.7,,,1,"b'b"" It was worth trying ;-) Thanks Paul for the patch", let\'s make sure this goes into 2.10.x (Paul, if your attention is needed on something else," I can open the PR on your behalf)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,12,2012-10-24 14:45:37,303.35,,1,,"b""b' I opened it yesterday"," #1525.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,13,2012-10-24 14:45:37,153.52,,1,,"b'b"" How do we know the crashes are because of this bug? Or that they will be resolved by this fix? Should we break our RC policy for something that may reduce the frequency of something by an unknown amount? When we went into RC mode we all agreed we were basically ready to ship", except for some potentially extremely serious bugs that we didn\'t know of at the time (we knew the presentation compiler was unstable before going into RC mode AFAIK)," and that could only be discovered by unleashing an RC on our users so that they can test it for us. Should we have staid in Milestone mode longer?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,14,2012-10-24 14:45:37,4.82,,,1,"b'b\' ""When we went into RC mode we all agreed we were basically ready to ship"" Only for the record", you pretty much never have my agreement on this sort of thing.  I realize that renders my opinion irrelevant, I just don\\\'t want to be called out like I\\\'m some kind of flipflopper.  I never think we\\\'re basically ready to ship. As to this patch and the general question, I think having a rigid policy is probably effective at making people feel good about fair and equal treatment and ineffective at producing the best software.  I leave it to others how to prioritize those things, but I can\\\'t help but trust my own assessment more than I trust our Policy Overlords.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,15,2012-10-24 14:45:37,13.0,,1,,"b'b"" Yes. There\'s a lot of uncertainty everywhere. That\'s why comment was all questions.The policy is meant to reduce the impact of uncertainty. I agree delivering the best possible software should be our highest priority"," but it\'s not clear to me which decision leads us there with the highest probability.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,reopened,2012-10-25 17:29:42,1396.97,1,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,16,2012-10-24 14:45:37,72.35,,,1,"b'b\' ""How do we know the crashes are because of this bug? Or that they will be resolved by this fix?"" If the presentation compiler crashes happen as often as stated", isn\\\'t it just a matter of using this branch for a few days to see if it helps? It certainly is not as good as an isolated test case, but sometimes that is what it takes to produce software that is good for users.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,17,2012-10-24 14:45:37,14.6,,1,,"b'b"" Yes. I think that would be part of the due diligence for an RC-time bug fix. If this pull request clearly improves the IDE experience for 2.10.0", I think we should consider merging it. For the record, here\'s a list of what we need to fix by RC2: url  -every time we add something here, P(timelyRelease) decreases. P(goodRelease) may go up," though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,18,2012-10-24 14:45:37,196.78,1,,,b'b\'  my opinion on this from #1527 (deferring to Josh for the ultimate decision, as he\\\'s the release manager for 2.10.0). We are allowing some fixes in so that we can ship the best 2.10.0 we can within the timeframe we have, but only if someone can make a _convincing_ case this actually _fixes_ a _serious_ regression. The deadline for doing all this and having your fix merged is Wed Oct 31. I agree this fix is not going to kill the release, but let\\\'s try to look at the bigger picture.This is not the only change that someone wants to have merged.All of them together amount to death by a million paper cuts. We\\\'re in RC mode and that means everybody was comfortable with master being released. Maybe we weren\\\'t ready, but that ship has sailed, and it\\\'s good to keep in mind for next time when we make that switch. It\\\'s a serious decision. Now we must focus on getting 2.10.0 out of the door in a reasonable amount of time and shift our focus to 2.10.1. Every little non-blocking fix (and sorry," this is not a blocker) pushes the release date a little but further down the road. First mentions of going into RC mode date back to April. Half a million ""just one more  cut"" later", it\\\'s almost november and we\\\'re at RC2. No more.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,19,2012-10-24 14:45:37,23.37,,,1,b'b\' So, here we go:  Martin, As discussed w/ Adriaan and Martin, this will have to be targeted for 2.10.1," which already has RC1 dates. For further notice: The policy during an RC process is any blocker fixes. ""Blocker"" during RC refers to anything that has absolutely no workaround. Pull requests must include tests and be well written. This PR is fine to target 2.10.1", but not 2.10.0 at this point. It\\\'s a few months behind the 8 ball. Doors have closed, but 2.10.x is open and inviting. They even have free cookies over there.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,closed,2012-10-25 22:26:14,296.53,2,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,20,2012-10-24 14:45:37,595.35,,1,,"b""b' I think this should be considered a blocker"," since it is a regression with no known workaround.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,21,2012-10-24 14:45:37,643.27,,,1,"b""b' I think we should not be too formalistic here. We should be able to accept patches for spurious errors even if we do not have a test case for these.  Paul and I looked at this. We both say the fix is a) harmless and b) will in all likelihood fix the errors. What I propose is that Iulian will build the IDE against the patched version and try it for a day or two. If none of the spurious errors appears"," we give it a go. OK? Thanks Martin'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,22,2012-10-24 14:45:37,739.97,,1,,"b'b"" +1 to @odersky\'s suggestion. I don\'t see what we will gain from releasing 2.10.0 that will result in bad publicity due to bugs that have a user-visible impact and have a relatively safe fix. It will simply encourage people to wait until .1 before they try new Scala releases.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,23,2012-10-24 14:45:37,845.07,,1,,"b'b"" Both me and Mirco have been using the patched build since Friday", without seeing this spurious error in the mean time. I suggest we keep doing that and report back on Wednesday 31. I spent a few hours yesterday trying to write a test that reproduces this bug," but I didn\'t succeed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,24,2012-10-24 14:45:37,971.0,1,,,"b'b"" @dragos @ijuma @odersky @paulp Please read: url  from other pull request.  Assuming your manual testing succeeds", we can take this patch as-is, albeit I\'m not going to close the ticket, because I still believe we have some other poor behavior waiting to explode and with no test," there\'s no way for us to know what that underlying issue is.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,25,2012-10-24 14:45:37,1382.72,,1,,b'b\' For the record," I do not think we are being ""formalistic"". I would like to see one example of a successful engineering company that does not have a policy and a process similar to ours (I\\\'d hope theirs is better", as we\\\'re just getting started here). Without process, I don\\\'t see how we can scale this project in a way appropriate for a company.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,26,2012-10-24 14:45:37,1402.63,,1,,"b'b"" A policy that we currently don\'t have is one that defines what kind of known issues we accept to go into a release"," and which ones are too critical to be left unfixed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,27,2012-10-24 14:45:37,1404.9,,1,,"b'b\' I believe we are not willing to ship with regressions without a workaround. Everything else can be a ""known issue"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1523,closed,-,-,-,3,20,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,opened,2012-10-24 19:57:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,title,2012-10-24 19:57:13,00:00,,1,,"b""b' Harden against synthetics being added more than once.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,body,2012-10-24 19:57:13,00:00,,1,,"b'b"" Don\'t add synthetic methods if they already contain syntheticmethods from the set we\'re about to add.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,1,2012-10-24 19:57:13,29.38,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,2,2012-10-24 19:57:13,0.03,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,3,2012-10-24 19:57:13,45.08,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,4,2012-10-24 19:57:13,1.97,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,5,2012-10-24 19:57:13,1033.35,,1,,"b""b' I agree this patch is not risky"," so if it is fixing a regular crasher it is being the wrong kind of conservative to exclude it from RC2.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,6,2012-10-24 19:57:13,153.43,,1,,"b'b"" How do we know the crashes are because of this bug? Or that they will be resolved by this fix? Should we break our RC policy for something that may reduce the frequency of something by an unknown amount? When we went into RC mode we all agreed we were basically ready to ship", except for some potentially extremely serious bugs that we didn\'t know of at the time (we knew the presentation compiler was unstable before going into RC mode AFAIK)," and that could only be discovered by unleashing an RC on our users so that they can test it for us. Should we have staid in Milestone mode longer?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,7,2012-10-24 19:57:13,319.98,,,1,b'b\' Martin,  As discussed w/ Adriaan and Martin, this will have to be targeted for 2.10.1," which already has RC1 dates. For further notice: The policy during an RC process is any _blocker_ fixes.  ""Blocker"" during RC refers to anything that has absolutely no workaround. Pull requests _must_ include tests and be well written. This PR is fine to target 2.10.1", but not 2.10.0 at this point.  It\\\'s a few months behind the 8 ball.  Doors have closed, but 2.10.x is open and inviting.  They even have free cookies over there.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,closed,2012-10-25 22:20:27,143.23,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,8,2012-10-24 19:57:13,5.35,,,1,"b""b' Whooops! wrong pull request.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,reopened,2012-10-25 22:25:48,5.35,0,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,9,2012-10-24 19:57:13,1.52,,1,,"b'b"" SO This is targetting 2.10.1 (had my windows crossed).  Martin gave it an LGTM"," but without tests I\'d like to see at least one more.  @dotta still ok with this one?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,10,2012-10-24 19:57:13,464.87,,,1,"b""b' My take on this is here: url  It would be more meaningful to get @adriaanm opinion.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,11,2012-10-24 19:57:13,125.6,,1,,"b'b"" I don\'t think it is the right decision to move this to 2.10.1. We all agreed that presentation compiler bugs are blockers (they definitely have no workaround). I specifically remember this discussion with you Adriaan. If that\'s no longer the case", then yes," we should have stayed in milestone mode longer. Is the missing test the only problem? I\'m pretty sure this code should have been written like that in the first place.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,12,2012-10-24 19:57:13,8.02,,1,,"b""b' @dragos I think you should move this comment in the [PR against 2.10.0-wip]url  Josh is only waiting for an additional LGTM to merge this in 2.10.x.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,13,2012-10-24 19:57:13,368.87,,,1,b'b\' @dragos As I stated elsewhere, with _no open ticket_ marked blocker," the only context we had here was ""nice for IDE"". I hope you agree that a bug fix with no open ticket and no test _and_ merely covers over a symptom without understanding the cause does not qualify for inclusion during an RC (pre-RC is fine of course). I see you\\\'ve taken care of the ticket and it is indeed a blocker. Now we can talk about this fix.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,14,2012-10-24 19:57:13,408.6,1,,,b'b\' Iulian (@dragos), I\\\'m all for fixing blocking presentation compiler bugs. We crucially rely on the work of you and your team when hacking SBT, the compiler and so on. We want (and need) it to be every bit as good as you want it to be. However, I am against fixing them blindly (without some form of testing, be it manual or otherwise) and without planning (i.e. tracked as a ticket). I know these things are hard to test, but a shot in the dark is not appropriate for an RC cycle. It needs to be tested (manually, at the very least) to verify that it actually improve the situation. Otherwise, we\\\'re taking the risk of a regression (sorry," I don\\\'t buy the ""look", it\\\'s such a simple fix," what could possibly go wrong!?"" argument simply on its own merit.) without any tangible benefit. A bug cannot be identified as a blocker without some testing (can it be worked around? does it actually happen that often? does it happen less often after the fix? does everything else still work after the fix?). Maybe this testing has happened in private", but I have not seen any traces of it anywhere. Part of the reason why we must be reluctant to fix things during RC cycles is to get milestones to be taken more seriously. Otherwise, we\\\'ll never get out of the vicious cycle of milestones-not-considered-interesting-enough-to-test-against-and-thus-we-only-discover-bugs-during-the-RC-cycle-when-it\\\'s-too-late. Milestones need to become interesting enough for people to use and test them so we can track our  on a monthly basis. RC cycles should be short.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,15,2012-10-24 19:57:13,1411.15,,1,,"b""b' Closing this request in favor of the old one for 2.10.0-wip'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,closed,2012-10-30 20:54:25,1348.62,1,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1525,closed,-,-,-,1,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,opened,2012-11-06 16:08:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,title,2012-11-06 16:08:02,00:00,,1,,"b""b' SI-6616 Check that unsafe operations are only called on the presentation...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,body,2012-11-06 16:08:02,00:00,,1,,"b'b"" ... compiler thread. The method that checks the actual constraint is @elidable", expecting it to be usedfor nightly builds but stripped-off in release builds. This way we don\'t lose anyperformance, but \'fail-fast\' in IDE nightlies. This assumes that release builds will have at least  , butthis pull request does not do that. review by @adriaanm," @paulp""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,1,2012-11-06 16:08:02,68.72,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,2,2012-11-06 16:08:02,0.17,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,3,2012-11-06 16:08:02,0.82,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,4,2012-11-06 16:08:02,0.18,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,5,2012-11-06 16:08:02,169.35,,1,,"b'b"" Yet another initialization tracker....  @paulp didn\'t you add another one of these recently in typer?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,6,2012-11-06 16:08:02,55.2,,1,,"b'b"" Yes", that is either redundant with \'isGlobalInitialized\', or we should make it so. (By which I mean, if isGlobalInitialized doesn\'t have exactly the desired semantics for this," I am sure we can find something which satisfies all uses.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,7,2012-11-06 16:08:02,1126.97,,,1,"b'b"" Thanks for pointing that out. My guess is that I can use the other method", I only need to eliminate some false positives. Even if it\'s not as precise as my variable," it would still be ok. I\'ll make the changes ASAP.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,8,2012-11-06 16:08:02,8.7,,1,,"b""b' ..the only problem being that is not in 2.10.x"," only in 2.11. Any thoughts on that?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,9,2012-11-06 16:08:02,50.95,,1,,"b""b' @paulp is there any reason not to cherry-pick isGlobalInitialzied from master -'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,10,2012-11-06 16:08:02,93.95,,1,,"b""b' No reason.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,11,2012-11-06 16:08:02,911.78,,1,,"b'b"" I\'ll close this pull request and open another one with the cherry-pick.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,closed,2012-11-08 09:34:50,1046.8,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,reopened,2012-11-08 10:22:58,48.13,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,12,2012-11-06 16:08:02,49.02,,1,,"b'b"" The commit itself is small", but depends on a bunch of other refactorings and can\'t be easily backported to 2.10.x anymore. I decided to keep this pull request for 2.10.x," and open a new one for 2.11 using the new support.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,13,2012-11-06 16:08:02,153.3,,1,,"b""b' So guys"," WDYT?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,14,2012-11-06 16:08:02,683.22,,,1,"b""b' Looks good to me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,closed,2012-11-14 00:49:09,866.18,0,14,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1583,closed,-,-,-,0,14,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,opened,2012-11-08 14:50:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,title,2012-11-08 14:50:26,00:00,,1,,"b""b' Avoid creating the temporary StreamIterator'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,body,2012-11-08 14:50:26,00:00,,1,,"b""b' When using list comprehension on TraversableOnce without Iterable or Iterator","original MonadOps would create a temporary StreamIterator. My patch avoids that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,1,2012-11-08 14:50:26,85.6,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,2,2012-11-08 14:50:26,6.65,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,3,2012-11-08 14:50:26,21.43,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,4,2012-11-08 14:50:26,1275.95,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,5,2012-11-08 14:50:26,0.25,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,6,2012-11-08 14:50:26,1.75,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,7,2012-11-08 14:50:26,0.23,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,8,2012-11-08 14:50:26,755.78,,,1,"b""b' Thus lgtm"," although it would be nice to lose a few bushels of curly braces and vertical whitespace. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,9,2012-11-08 14:50:26,1265.77,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,10,2012-11-08 14:50:26,272.75,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,11,2012-11-08 14:50:26,0.97,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,12,2012-11-08 14:50:26,1.03,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,13,2012-11-08 14:50:26,0.98,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,14,2012-11-08 14:50:26,756.07,,1,,"b'b"" Failures are random build aborts yet again. @jsuereth if this can\'t be fixed we should abandon jenkins.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,15,2012-11-08 14:50:26,542.07,,1,,"b'b"" PLS REBUILD ALL @paulp if you can give us a viable alternative"," I\'m all ears.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,16,2012-11-08 14:50:26,74.62,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,17,2012-11-08 14:50:26,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,18,2012-11-08 14:50:26,54.37,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,19,2012-11-08 14:50:26,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,closed,2012-12-06 19:44:37,294.18,0,20,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,reopened,2012-12-06 19:45:54,1.28,0,20,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,20,2012-11-08 14:50:26,936.25,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,21,2012-11-08 14:50:26,112.72,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,22,2012-11-08 14:50:26,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,23,2012-11-08 14:50:26,5.07,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,24,2012-11-08 14:50:26,0.93,,1,,"b'b\' ...one of the ""hidden"" costs of frequent failure is that we all tend to be slow to recognize real failure. The failing test is "," which asserts that ""it"" in the following expression is never evaluated:  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,25,2012-11-08 14:50:26,1.05,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,26,2012-11-08 14:50:26,217.73,,1,,"b""b' Closing this pending failure resolution.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,closed,2012-12-11 01:26:27,340.55,0,27,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1589,closed,-,-,-,0,27,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,opened,2012-11-14 09:11:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,title,2012-11-14 09:11:40,00:00,,1,,"b""b' Fix for SI-6663'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,body,2012-11-14 09:11:40,00:00,,1,,"b'b"" The first commit fixes the bug reported in [SI-6663]url  the second one another similar case as noted in [a comment]url  on that bug report. I\'d guess that there are other possible contents of cxTree not yet handled. Is there a better way to fix this than to add all such cases manually to mkInvoke?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,1,2012-11-14 09:11:40,44.08,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,2,2012-11-14 09:11:40,2.0,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,3,2012-11-14 09:11:40,41.38,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,4,2012-11-14 09:11:40,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,5,2012-11-14 09:11:40,7.7,,1,,"b""b' I think this should target 2.10.x'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,closed,2012-11-14 10:52:51,101.18,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,reopened,2012-11-14 10:52:56,0.08,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,6,2012-11-14 09:11:40,5.9,1,,,"b'b"" Oops sorry didn\'t mean to click on \'close\'. @jsuereth: anything I can do regarding 2.10.x? Check if patch applies cleanly? Switch pull request to different branch?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,7,2012-11-14 09:11:40,48.48,,1,,"b""b' Yes"," please close this PR and reopen against 2.10.x. Review by @namin '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,closed,2012-11-14 12:10:30,77.57,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1619,closed,-,-,-,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,opened,2012-11-24 22:01:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,title,2012-11-24 22:01:23,00:00,,1,,"b""b' refactors handling of parent types'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,body,2012-11-24 22:01:23,00:00,1,,,"b""b' At the moment parser does too much  handling of parent types.It checks whether a parent can have value arguments or not andmore importantly", it synthesizes constructors and super calls. This approach is fundamentally incompatible with upcoming type macros.Take for example the following two snippets of code:    In the first snippet, might be a type macro, therefore the super call  eagerly emitted by the parser might be meaningless. In thesecond snippet parser will report an error despite that might bea type macro which expands into a trait. Unfortunately we cannot simply augment the parser with the  check. This is because to find out whether an identifier refers to a typemacro, one needs to perform a typecheck, which the parser cannot do. Therefore we need a deep change in how parent types and constructorsare processed by the compiler," which is implemented in this commit.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,1,2012-11-24 22:01:23,4.28,,,1,b'b\' review @paulp @adriaanm @retronym  This is a beta version of the pull request I\\\'m going to submit next week after looking into it with Martin. It\\\'s quite polished already, so I decided to put it up for discussion. I\\\'m pretty much confident in the refactored parsing and typechecking logic, but I don\\\'t know much about positions. @dragos, if you could take a look, I would be very grateful. If you scroll all the way down," there\\\'s an printout that illustrates how positions are assigned in the new scheme of things. Finally the pull request touches a bit of the error reporting logic. I\\\'m just calling for indicate some typecheck errors affecting templates + I\\\'ve traded the ""inherits self"" error for the ""cyclic reference"" error due to the reasons explained in the comment to and  . @hubertp", I hope I didn\\\'t do anything blatantly incorrect.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,2,2012-11-24 22:01:23,31.57,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,3,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,4,2012-11-24 22:01:23,32.25,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,5,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,6,2012-11-24 22:01:23,827.2,1,,,"b'b"" @paulp I\'ve just introduced the class", which is quite similar to what we discussed. Similar, but not quite it, because after looking into usages I decided to change some aspects. See the diff for examples I think that affected code looks better now. 1) There\'s still an extractor for the common case, when we need to know core (aka methPart), targs or argss. Usage sites of former treeInfo methods suggested that it\'s a valuable thing to have. 2) Since the covers typical use cases, getting to an instance of goes through another route the method. 3) Both extraction and dissection always succeed, i.e. even can be  (in that case, core will be Ident(foo), whereas targs and argss will be Nils). This might look misleading at first, but initial inconvenience is, in my opinion, trumped by the conciseness of the code. Probably, just needs a better name," which emphasizes its optionality.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,7,2012-11-24 22:01:23,16.58,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,8,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,9,2012-11-24 22:01:23,32.25,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,10,2012-11-24 22:01:23,1.98,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,11,2012-11-24 22:01:23,76.07,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,12,2012-11-24 22:01:23,1.97,,1,,"b""b' ...this comment is now obsolete...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,13,2012-11-24 22:01:23,46.72,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,14,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,15,2012-11-24 22:01:23,2.02,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,16,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,17,2012-11-24 22:01:23,48.98,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,18,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,19,2012-11-24 22:01:23,2.03,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,20,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,21,2012-11-24 22:01:23,9.42,,1,,"b'b\' Duh so much for the ""beta"" version of the pull request. Will resubmit later", when I handle all the errors.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,closed,2012-11-25 17:08:45,1147.37,2,20,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,22,2012-11-24 22:01:23,40.35,,,1,"b'b"" btw", you can also submit a PR to on your own repo and invite previewers to comment over there. Not that this one was a problem," but in case you don\'t want to contribute to the occasionally over-full queue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,23,2012-11-24 22:01:23,2.3,,,1,"b'b"" that\'s a nice idea"," thanks! has a benefit of an automatic rangepos build though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,reopened,2012-11-25 23:51:45,403.0,2,20,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,24,2012-11-24 22:01:23,360.67,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,25,2012-11-24 22:01:23,3.8,,,1,"b""b' Reopened after a bunch of fixes and introduction of . /cc @paulp  While fine-tuning range positions I came up with the following solution"," which seems to not violate any of the position invariants. Note how super argss migrate from in parser to in typer.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,26,2012-11-24 22:01:23,44.35,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,27,2012-11-24 22:01:23,2.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,28,2012-11-24 22:01:23,34.27,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,29,2012-11-24 22:01:23,2.02,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,30,2012-11-24 22:01:23,1209.78,,1,,"b""b' rebased against the latest 2.10.x'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,31,2012-11-24 22:01:23,0.08,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,32,2012-11-24 22:01:23,68.52,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,33,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,34,2012-11-24 22:01:23,3.03,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,35,2012-11-24 22:01:23,2.02,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,36,2012-11-24 22:01:23,1395.28,,1,,"b""b' rebased against 2.10.x @paulp @retronym please review'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,37,2012-11-24 22:01:23,0.08,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,38,2012-11-24 22:01:23,1027.65,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,39,2012-11-24 22:01:23,61.62,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,40,2012-11-24 22:01:23,34.67,,1,,"b""b' Addressed the feedback. Reviewers", please," take another look.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,41,2012-11-24 22:01:23,1412.43,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,42,2012-11-24 22:01:23,0.03,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,43,2012-11-24 22:01:23,1.97,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,44,2012-11-24 22:01:23,0.03,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,45,2012-11-24 22:01:23,119.48,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,46,2012-11-24 22:01:23,215.4,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,47,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,48,2012-11-24 22:01:23,101.47,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,49,2012-11-24 22:01:23,2.02,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,50,2012-11-24 22:01:23,464.37,,,1,"b""b' The joy of rebasing. Will fix these errors soon.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,51,2012-11-24 22:01:23,144.65,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,52,2012-11-24 22:01:23,86.1,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,53,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,54,2012-11-24 22:01:23,3.03,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,55,2012-11-24 22:01:23,2.0,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,56,2012-11-24 22:01:23,299.83,,1,,"b""b' This will lg to m after the handful of comments I left have been addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,57,2012-11-24 22:01:23,358.85,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,58,2012-11-24 22:01:23,57.02,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,59,2012-11-24 22:01:23,1.02,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,60,2012-11-24 22:01:23,0.98,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,61,2012-11-24 22:01:23,1.02,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,62,2012-11-24 22:01:23,1203.48,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,closed,2012-12-07 19:22:30,1170.75,2,57,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1668,closed,-,-,-,2,57,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,opened,2012-11-28 17:30:09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,title,2012-11-28 17:30:09,00:00,,1,,"b""b' Fix for SI-6731"," dropped trees in selectDynamic.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,body,2012-11-28 17:30:09,00:00,,1,,"b""b' I rewrote mkInvoke entirely"," and boosted the test coverage.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,1,2012-11-28 17:30:09,83.63,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,2,2012-11-28 17:30:09,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,3,2012-11-28 17:30:09,1.02,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,4,2012-11-28 17:30:09,2.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,5,2012-11-28 17:30:09,17.75,,1,,"b'b\' Looks much better than the band-aid solution I submitted in url  That\\\'s exactly what I meant when I asked ""Is there a better way to fix this than to add all such cases manually to mkInvoke?"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,6,2012-11-28 17:30:09,807.0,1,,,"b""b' Sorry", I thought about this some more and I think this should go into 2.10.1," as did #1621.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,closed,2012-11-29 08:43:34,913.42,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,7,2012-11-28 17:30:09,10.12,,1,,"b""b' Okay... and the PR was opened against 2.10.x. Did you close it for some reason which I should be able to discern?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,8,2012-11-28 17:30:09,140.67,,1,,"b'b"" I\'m going to reopen this so I don\'t forget about it", in the belief you closed this thinking it was opened against -wip. If I misunderstood something," please disabuse me of my abused notions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,reopened,2012-11-29 11:14:21,150.78,1,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,9,2012-11-28 17:30:09,65.7,1,,,"b""b' my bad'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,10,2012-11-28 17:30:09,173.53,,1,,"b""b' Review by @adriaanm the rogue closer.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,11,2012-11-28 17:30:09,43.78,,1,,"b""b' lgtm"," way to kill N birds with one stone.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,closed,2012-12-05 14:52:40,218.32,2,11,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,12,2012-11-28 17:30:09,1391.83,,1,,"b""b' @paulp: just to confirm", this closes: SI-6731, SI-5726, SI-5733, SI-6320," SI-6551 and SI-6722.  Any others?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,13,2012-11-28 17:30:09,1395.15,,1,,"b""b' There was one other which was already closed after a partial fix covered its example. So"," no others.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,14,2012-11-28 17:30:09,225.35,,,1,"b'b"" (ah", this is where I meant to type my thanks cleaner-upper @paulp comment, and again," @retronym for closing the tickets i missed -i\'ll crawl back under my rock now)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1681,closed,-,-,-,2,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,opened,2012-11-30 09:00:24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,title,2012-11-30 09:00:24,00:00,,1,,"b""b' fixes the unchecked warning in '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,body,2012-11-30 09:00:24,00:00,,1,,"b""b' All those months when I thought it was yet another spurious errorin the new pattern matcher...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,1,2012-11-30 09:00:24,9.4,,,1,"b'b"" Hey","  I didn\'t call it [the world\'s most exciting trivial fix]url  for nothing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,2,2012-11-30 09:00:24,37.45,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,3,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,4,2012-11-30 09:00:24,10.67,,1,,"b'b"" ....and there it is. Jenkins doesn\'t go back far enough for you to see I failed the same way about 500 pull requests ago.  url  (broken)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,5,2012-11-30 09:00:24,5.32,,,1,"b'b"" If you don\'t mind"," I\'ll keep this hanging and will resubmit it later with the world\'s most exciting trivial fix.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,6,2012-11-30 09:00:24,11.22,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,7,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,8,2012-11-30 09:00:24,225.75,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,9,2012-11-30 09:00:24,125.22,,1,,"b""b' Closing until the range pos fix is incorporated.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,closed,2012-12-04 16:09:25,429.02,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,10,2012-11-30 09:00:24,3.55,,1,,"b'b"" I\'ve removed the workaround and suggest that we keep this hanging. Once the range pos fix is incorporated in 2.10.x", we can do a rebuild-all, it will pass," and then we can merge.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,reopened,2012-12-04 16:12:58,3.55,0,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,11,2012-11-30 09:00:24,174.5,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,12,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,13,2012-11-30 09:00:24,4.28,,1,,"b""b' The error is expected. Waiting for url  to be merged. Afterwards a simple pleze rebuild all will be enough.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,14,2012-11-30 09:00:24,31.33,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,15,2012-11-30 09:00:24,54.8,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,16,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,17,2012-11-30 09:00:24,92.23,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,18,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,19,2012-11-30 09:00:24,704.32,,1,,"b'b"" Ah I see the problem. hasn\'t yet been merged into  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,20,2012-11-30 09:00:24,928.07,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,21,2012-11-30 09:00:24,39.3,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,22,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,23,2012-11-30 09:00:24,53.63,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,24,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,25,2012-11-30 09:00:24,1021.08,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,26,2012-11-30 09:00:24,95.12,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,27,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,28,2012-11-30 09:00:24,5.03,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,29,2012-11-30 09:00:24,2.0,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,closed,2012-12-20 22:56:16,403.3,0,29,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1687,closed,-,-,-,0,29,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,opened,2013-01-15 08:48:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,title,2013-01-15 08:48:56,00:00,,1,,"b""b' SI-6969"," mishandling of SoftReferences in method cache.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,body,2013-01-15 08:48:56,00:00,,,1,"b""b' More interesting to test than it was to fix. The softreference is now dereferenced once", the locally storedunderlying value ascertained to be non-null," and theremainder of the references to the value use the local var. The enclosed test reliably NPEs without this patch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,1,2013-01-15 08:48:56,86.87,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,2,2013-01-15 08:48:56,1.93,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,3,2013-01-15 08:48:56,1.72,,1,,"b""b' Geez"," how many single points of spurious failure is it reasonable to have? PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,4,2013-01-15 08:48:56,11.15,,1,,"b""b' url  is the issue this time'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,closed,2013-01-15 10:30:36,101.67,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,reopened,2013-01-15 10:30:37,0.02,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,5,2013-01-15 08:48:56,8.15,,1,,b'b\' I know it\\\'s github," that\\\'s why I put it that way (""how many single points of failure"")\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,6,2013-01-15 08:48:56,3.05,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,7,2013-01-15 08:48:56,106.55,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,8,2013-01-15 08:48:56,2.05,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,9,2013-01-15 08:48:56,92.9,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,10,2013-01-15 08:48:56,2.0,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,11,2013-01-15 08:48:56,668.53,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,12,2013-01-15 08:48:56,0.1,,1,,"b""b' (Rebased.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,13,2013-01-15 08:48:56,64.48,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,14,2013-01-15 08:48:56,0.13,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,15,2013-01-15 08:48:56,3.28,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,16,2013-01-15 08:48:56,0.02,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,17,2013-01-15 08:48:56,103.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,18,2013-01-15 08:48:56,30.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,19,2013-01-15 08:48:56,610.52,,1,,"b'b"" LGTM.When this is fixed"," I\'ll see whether this solves the issues for Avian and JamVM.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,20,2013-01-15 08:48:56,72.25,,,1,"b'b"" Great. I\'ll come back for mono type cache. Very interested to know if this advances the ball with avian.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,closed,2013-01-25 15:57:48,327.18,0,20,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1902,closed,-,-,-,0,20,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,opened,2013-01-18 16:12:07,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,title,2013-01-18 16:12:07,00:00,1,,,"b""b' SI-6991 Remove warning message about ClassfileAnnotation ...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,body,2013-01-18 16:12:07,00:00,,1,,"b'b"" ... not being visible at run-time. That\'s the whole point of aClassfileAnnotation"," compared to a hypothetical RuntimeAnnotation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,1,2013-01-18 16:12:07,25.87,1,,,"b""b' i think we should improve the warning message instead of removing it. the correct warning would be something like  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,2,2013-01-18 16:12:07,12.98,,1,,"b""b' Unless there is to be some means of suppressing it is there? the warning must go. We should not punish people with spurious warnings which they cannot eliminate (least of all ourselves) and if we do want to do that"," I can think of better warnings to punish them with.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,3,2013-01-18 16:12:07,21.98,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,4,2013-01-18 16:12:07,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,5,2013-01-18 16:12:07,0.95,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,6,2013-01-18 16:12:07,2.02,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,7,2013-01-18 16:12:07,17.97,1,,,"b'b"" it\'s not a spurious warning there is no reason to extend  "," unless you want your annotations to be java-serialized; which is unfortunately not implemented. if we remove the warning we also have to remove the class.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,8,2013-01-18 16:12:07,8.93,,1,,"b'b"" It\'s certainly a spurious warning in the case where I see it 100 times a day: SerialVersionUID.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,9,2013-01-18 16:12:07,39.22,,1,,"b""b' Well", only since it has been [changed]url  to extend  . Maybe we should introduce a new class between and  ," which would enforce its arguments to be constant?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,10,2013-01-18 16:12:07,18.23,,,1,"b'b"" That would be fine"," but I\'m not seeing the big picture. Why are we determined to retain a class which cannot usefully be used? Now we\'re talking about creating another class which is needed solely because we want to use the (otherwise) useless class. Doesn\'t a more direct solution suggest itself?  Is ClassfileAnnotation strictly a placeholder waiting for someone to implement the missing feature? It has been waiting for 5+ years; that is good evidence that we should pursue a different approach.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,11,2013-01-18 16:12:07,1.93,,1,,"b'b"" As I said before"," I\'m not against removing it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,12,2013-01-18 16:12:07,0.6,1,,,"b'b"" Okay"," let\'s deprecate it and move the warning into the deprecation message.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,13,2013-01-18 16:12:07,0.98,,1,,b'b\' Also," you said ""if we remove the warning we also have to remove the class"" which does not mean ""I am not against removing the class""", and in fact I read it to mean the opposite.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,14,2013-01-18 16:12:07,62.07,,1,,"b'b"" Imho we just need to sit down an implement the missing functionality. I can have a look at it as soon as I\'m happy with the enum situation (which suffers from pretty much the same issues). There is just no sane reason why we need to live in this bizarre NIH-universe where reasonable expectations are broken left and right.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,15,2013-01-18 16:12:07,23.95,1,,,"b'b"" sorry i was not clear. so i\'d also vote for deprecating it and introducing a new class to be used with  . if there\'s an implementation that\'s obviously also good", but that seems very unlikely be soon (as paul says, it didn\'t happen in 5+ years," and i don\'t think it\'s high enough priority for somebody).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,16,2013-01-18 16:12:07,61.55,,,1,"b'b"" I think it should be kept", fixed and a should be added, so that our stuff matches with the existing Retention levels. There is no reason why it can\'t be fixed, even after 5 years. There are probably tons of things which where broken for a longer time. As mentioned, I\'m interested in improving the situation. I just can\'t guarantee any time-frame, though," because this is obviously not my full-time job and I also have a full-time masters course which needs a bit of time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,17,2013-01-18 16:12:07,172.27,,1,,"b'b\' ""There is no reason why it can\\\'t be fixed"," even after 5 years. There are probably tons of things which where broken for a longer time."" The second statement is a complete non-sequitur; it might be still be fixable after 500 years"," but if nobody fixes it then it won\\\'t be fixed. The quantity ""five years"" is relevant because it informs our estimate of the probability someone will be along to fix it soon. It is a low estimate. I am sure you want to fix it; I too want to fix it; our intentions are not relevant at this point", only code is.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,18,2013-01-18 16:12:07,918.92,,1,,"b""b' Regardless of fixing vs. killing annotations"," is there any remaining work to be done before this can be merged?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,19,2013-01-18 16:12:07,2.58,,1,,"b""b' I think this pull request goes in wrong direction"," the warning is correctly issued. I agree with removing the warning but only if we also remove  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,20,2013-01-18 16:12:07,6.8,,1,,"b""b' No", the warning is wrong. Even if annotations were correctly implemented," the warning is still wrong. A class-file annotation is not supposed to show up at run-time.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,21,2013-01-18 16:12:07,2.57,,1,,"b""b' OK", we can change the warning text as I originally suggested. But only removing the warning is, in my opinion," not the right thing to do.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,22,2013-01-18 16:12:07,9.63,,1,,"b'b"" Ok ... so now I\'m torn between changing the warning", removing the class, etc. I think part of the solution should be to make a source annotation (Java parlance, what did we call that class again? And why exactly do we use a different name for it?). I just realize that extending has been wrong from the beginning, because saving to the class-file is not the point of that annotation," instructing the compiler to do \\xe2\\x80\\x9csomething special\\xe2\\x80\\x9d is. Is ...... making a source annotation... fixing the warning the way you suggested an acceptable solution in your opinion?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,23,2013-01-18 16:12:07,6.05,,1,,"b'b\' What do you mean by ""source annotation""? My preferred solution would be toremove (and the warning)introduce do to exactly what does now", but without a warningmake extend  \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,24,2013-01-18 16:12:07,0.83,,1,,"b'b"" I second lukas\'s proposal.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,25,2013-01-18 16:12:07,6.22,,1,,"b'b"" What\'s with that sudden onslaught of annotation types?We already have I think is exactly what we want.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,26,2013-01-18 16:12:07,4.15,,1,,"b'b"" Nope", marks annotations that are persisted (in the scala signature, aka pickle). But it doesn\'t require the arguments to be constants, in fact, the arguments are serialized compiler trees. When the annotation is read from bytecode," the argument trees are de-serialized by the UnPickler.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,27,2013-01-18 16:12:07,4.95,,1,,"b'b"" I think I give up on the part ... I think it is OK to get rid of it until we have a working implementation. Regarding  : Either enforce the constant rules for or if this is completely impossible (because tons of people rely on passing arbitrary trees around) introduce a new one", extending  . But please," no new names. Let\'s use  . Everyone who used annotations in Java will exactly know what can be done and what cannot be done with such an annotation: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,28,2013-01-18 16:12:07,22.45,,1,,"b'b"" Changing is not an option", lots of people depend on having arbitrary trees in annotation arguments. I\'m not sure if we should follow java here. Scala has only two levels: The default (same as SOURCE in java) and persisted ( , same as RUNTIME in java). All persisted annotations are visible in (Scala) reflection (and of course in the compiler). I think this works well and I don\'t see much reason for adding a third level. The thing we are discussing here is completely Java compatibility (i.e. writing java-compatible annotations), finally, is yet another orthogonal issue. To emit java annotations we\'d need to enforce constants," and on top of that we might also want to support the three java persistence levels. The latter could be achieved with meta-annotations. But let\'s not confuse things here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,29,2013-01-18 16:12:07,31.05,,,1,"b""b' My interest is mainly to prevent having 6 or 7 different classes which do largely the same thing. For instance"," I would prefer not ending up with two different classes where the biggest difference is that one gets saved into a attribute and the other one gets saved into a attribute.Same with having and some annotation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,30,2013-01-18 16:12:07,105.77,,,1,"b'b"" We\'ll have  ",  , and  . Seems good to me. If we ever get to do the java compat thing we can check what\'s the best way to reuse existing stuff," but that should not influence the current Scala design.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,31,2013-01-18 16:12:07,185.12,,1,,"b""b' ping @soc", @lrytz," @paulp. Any final decision on this PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,32,2013-01-18 16:12:07,2.55,,1,,"b""b' i vote for closing and creating a ticket.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,closed,2013-01-29 21:55:16,343.15,5,25,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,33,2013-01-18 16:12:07,0.38,,1,,"b""b' ups"," closed it by clicking wrong button.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,reopened,2013-01-29 21:55:38,0.37,5,26,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,34,2013-01-18 16:12:07,3.52,,1,,"b'b"" That\'s one way to vote.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,35,2013-01-18 16:12:07,92.87,,1,,"b""b' I still think we should do exactly what lukas said a ways up the page: and leave everything else for future squabbles. I really do not care to see that warning another billion times.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,36,2013-01-18 16:12:07,37.37,,1,,"b""b' please squabble here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,closed,2013-01-30 00:09:24,133.77,5,29,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1924,closed,-,-,-,5,29,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,opened,2013-01-20 22:11:42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,title,2013-01-20 22:11:42,00:00,,1,,"b""b' SI-6811 Move .{automata","regexp} ...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,body,2013-01-20 22:11:42,00:00,,1,,"b""b' ... to  and make it private[dtd]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,1,2013-01-20 22:11:42,55.98,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,2,2013-01-20 22:11:42,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,3,2013-01-20 22:11:42,10.08,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,4,2013-01-20 22:11:42,1.75,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,5,2013-01-20 22:11:42,0.25,,1,,"b""b' jenkins job pr-rangepos: Failed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,6,2013-01-20 22:11:42,50.3,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,7,2013-01-20 22:11:42,2.0,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,8,2013-01-20 22:11:42,939.98,,,1,"b'b"" Excellent. Looks good to me. If there is more to do to make it possible to break off the xml capabilities (I can\'t remember) it would be a super useful thing to do I could break out scalafor 2.11 with the library and hopefully the xml parser as well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,9,2013-01-20 22:11:42,18.77,1,,,"b""b' @paulp I think the hardest part now is to get rid of the infamous value in  : url  Sadly", I have no idea how it ended up there, what it does, how it works, etc. Looking at the history," it seems you are the expert here (even if it only involved moving it from file to file). :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,10,2013-01-20 22:11:42,3.4,,1,,"b""b' Just a left-field idea: I think we could break the dependency by making a macro. If the required types from are on the compilation classpath"," it would expand into something compatible with what we have today.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,11,2013-01-20 22:11:42,13.9,,,1,"b""b' I was just looking at url  and I think moving from to could work. What would be the benefit of a macro?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,12,2013-01-20 22:11:42,62.22,,1,,"b'b"" In the current design", the default identifier has to be imported at the start of each file (  being the only way we have to do that.) When a new namespace binding is detected, this value is shadowed. See below for an example. I haven\'t thought about it too much, but you might like to consider an alternative design in which the parser inserts an import when it encounters the first XML nodes in the tree, or maybe just records whether there were any XML nodes in the tree at all," and adds just below the import as a post-processing step.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,13,2013-01-20 22:11:42,187.43,1,,,"b'b"" Mhhh", can\'t we just emit somthing like instead? Sorry if this is stupid, I\'m not familiar with the mechanism. What about requiring an import before using XML, e. g.  ? Wouldn\'t that also be more friendly to other XML libraries," which could just hook into this mechanism?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,14,2013-01-20 22:11:42,662.57,,1,,"b'b"" You can\'t emit a fully qualified  ", because as soon as you are nested in a namespace declaration, it must bind to the nearest lexically enclosing  ," if you read that desugared code carefully you should see how it works. Here\'s a sketch of what I mean: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,15,2013-01-20 22:11:42,96.13,,,1,"b'b"" @soc btw", beyond that compiler patch, the task of splitting out scalaamounts to hacking the Ant and SBT builds, the  project defintions, most likely the SBT build in the scala-dist project, and writing some documentation. So, not meaning to dampen your enthusiasm, it probably isn\'t very suitable project for an external contribution. But it is a priority for us for 2.11," so we won\'t forget about it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,closed,2013-01-22 09:18:28,666.77,2,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,16,2013-01-20 22:11:42,203.15,,1,,"b'b"" Why was this closed? The changes in this PR need to be done in one way or another"," and they don\'t depend on any specific approach to  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,reopened,2013-01-22 12:55:49,217.35,2,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,17,2013-01-20 22:11:42,14.37,1,,,"b""b' Sorry"," wrong button.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,18,2013-01-20 22:11:42,61.8,,,1,"b'b"" No problem! Your sketch looks pretty interesting", I tried to hack earlier with very limited success. I\'m wondering whether there is a more general approach, which would allow third-party libraries to hook into the syntax. Would it be possible to have some sort of interface which would not build the XML itself," but just return events to an implementation of that interface found on the classpath? Sounds a bit like a pretty standard macro with a special-cased extension.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,19,2013-01-20 22:11:42,7.57,,1,,"b'b"" It\'s an appealing idea", but I don\'t think we have the resources to open up additional extension points like that. There are a lot of downstream considerations when allowing syntax to be customised -the IDEs, editors," syntax highlighters etc wouldn\'t work for these dialects.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,20,2013-01-20 22:11:42,33.17,,,1,"b'b"" My understanding is that soc is not recommending customizing the syntax", but wants to be able to plug in a different xml library.  So, the syntax is the same, but perhaps the resulting type is different. In any case," I have wasted many hours trying to keep Proguard from pulling in xml or other packages.  It has mainly been because of things in Predef or the scala package object.  I\'ll be happy to see this go!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,21,2013-01-20 22:11:42,183.6,,1,,b'b\' Oh right. I expect Paul has a plan," given his stated modularlization of ""hopefully the xml parser as well.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,22,2013-01-20 22:11:42,114.45,,,1,"b""b' @harrah Exactly! Basically some interface with which the library can \\xe2\\x80\\x9csubscribe\\xe2\\x80\\x9d to the \\xe2\\x80\\x9cevents\\xe2\\x80\\x9d of the XML parser (like \\xe2\\x80\\x9cnew tag encountered\\xe2\\x80\\x9d) and provides the appropriate AST to the compiler in return. Or maybe it could be specified that the XML is turned into and that people can choose the library by  the string interpolator with the one they want. (But as far as I have heard"," there are certain issues with rewriting XML to string interpolation...)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,23,2013-01-20 22:11:42,1389.9,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,24,2013-01-20 22:11:42,75.57,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,25,2013-01-20 22:11:42,2.0,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,closed,2013-01-25 00:45:37,709.8,3,18,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1939,closed,-,-,-,3,18,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,opened,2013-01-22 20:25:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,title,2013-01-22 20:25:19,00:00,,1,,"b""b' Add firstKey and lastKey to LongMap"," fixing SI-5151'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,body,2013-01-22 20:25:19,00:00,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,1,2013-01-22 20:25:19,78.53,,1,,"b""b' Started jenkins job JenkinsJob(pr-rangepos) at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,2,2013-01-22 20:25:19,32.62,,1,,"b""b' Started jenkins job JenkinsJob(pr-scala-testsuite-linux-opt) at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,3,2013-01-22 20:25:19,57.43,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: successful -manually verified'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,4,2013-01-22 20:25:19,1.03,,1,,"b""b' jenkins job pr-rangepos: successful -manually verified'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,5,2013-01-22 20:25:19,1032.22,,1,,"b""b' @mt2309 can you please sign the [CLA]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,6,2013-01-22 20:25:19,329.3,,1,,"b""b' Closing pending CLA signature due to pull request overcrowding.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,closed,2013-01-26 21:56:27,91.13,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,7,2013-01-22 20:25:19,52.13,1,,,"b""b' Sorry", I signed the CLA last night," forgot to update the PR with the info. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,8,2013-01-22 20:25:19,1188.28,,,1,"b""b' Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,reopened,2013-01-30 18:36:53,1240.43,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,9,2013-01-22 20:25:19,1262.25,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,10,2013-01-22 20:25:19,0.0,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,11,2013-01-22 20:25:19,2.0,1,,,"b""b' jenkins job pr-rangepos: Failed url ![sad kitty]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,12,2013-01-22 20:25:19,0.02,1,,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url ![sad kitty]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,13,2013-01-22 20:25:19,0.83,,1,,"b'b"" Closing this and reopening another PR because I\'m failing at git.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,closed,2013-01-31 15:41:58,1265.08,3,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1950,closed,-,-,-,3,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,opened,2013-01-28 15:42:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,title,2013-01-28 15:42:19,00:00,,1,,"b""b' SI-5082 Cycle avoidance between case companions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,body,2013-01-28 15:42:19,00:00,,1,,"b'b"" We can synthesize the case companion unapply without forcingthe info of the case class", by looking at the parameters inthe tree," rather than at  . Review by @paulp. Perhaps you\'d like to try it in combination with your patch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,1,2013-01-28 15:42:19,3.08,,,1,"b""b' Okay"," that was a little optimistic.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,2,2013-01-28 15:42:19,39.32,,1,,"b""b' Found a [regression]url  en-route...  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,3,2013-01-28 15:42:19,1021.88,,,1,"b'b"" Sadly", I have to withdraw this PR. To refer the the already-renamed case accessors for non-public fields in the RHS of the unapply method, one cannot work with trees alone. Here\'s a monumental hack that actually makes this work, but it is really to inspire us to design our way out of this straight jacket," rather than mergable work: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,closed,2013-01-29 09:34:37,1072.3,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,reopened,2013-01-29 09:57:11,22.57,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,4,2013-01-28 15:42:19,33.57,,,1,"b""b' From the ashes... I think the latest approach is quite workable. Rather than generate the wrong code and patch it up when we can safely peek at the info", we can instead use our privileged seat at the compiler table to convey the accessor renamings through a  . Another look," @paulp?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,5,2013-01-28 15:42:19,868.4,,,1,"b""b' One pos failure", one neg failure," one run failure. You almost hit for the cycle!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,6,2013-01-28 15:42:19,1320.02,,1,,"b'b""   is very tempting for this one"," we change the secondary error reported after  . But I\'ll resist for a bit and see if I can\'t line up all the ducks.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,7,2013-01-28 15:42:19,699.3,1,,,"b""b' Job pr-checkin-per-commit failed for f741968e [(results)]url Failed tests:Took 93 min. ![sad kitty]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,8,2013-01-28 15:42:19,585.55,,1,,"b""b' BUILDLOG?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,9,2013-01-28 15:42:19,2.63,,1,,"b""b' (kitty-note-to-self: ignore 13201571)pr-rangepos-per-commit:9bc90e9f: [success]url  Took 107 min.", [pending]url started., [pending]url started., [pending]url started., [pending]url started., [pending]url started., [success]url  Took 124 min., [success]url  : Took 124 min., [pending]url started. pr-checkin-per-commit:9bc90e9f: [success]url  Took 156 min., [success]url  : Took 156 min., pending:  queued.," [pending]url started.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,10,2013-01-28 15:42:19,1425.97,,1,,"b'b"" LGTM but some stuff I\'m not that familiar with. @paulp wanna take a look as well?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,11,2013-01-28 15:42:19,442.33,,1,,"b""b' SPURIOUS ABORT? -PLS -checkin-per-commit@a0ee6e996e602bf5729687d7301f60b340d57061'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,12,2013-01-28 15:42:19,1.18,,,1,"b""b' (kitty-note-to-self: ignore 13274831):cat: Roger! Rebuilding pr-checkin-per-commit for a0ee6e99. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,13,2013-01-28 15:42:19,26.88,,,1,"b""b' Looks good to me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,closed,2013-02-08 05:32:54,1175.72,1,8,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,1995,closed,-,-,-,1,8,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,opened,2013-01-29 21:05:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,title,2013-01-29 21:05:10,00:00,,1,,"b""b' SI-6187 Make partial functions re-typable'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,body,2013-01-29 21:05:10,00:00,,1,,"b'b"" doesn\'t survive a / typecheck; use  a name instead.Abandon the tree attachment that passed the default  case from to  ; this tree eluded the  attribute reset performed in the macro. Instead", add it  to the match. Apart from making the tree re-typable, it  also exposes the true code structure to macros, which  is important if they need to perform other code  transformations.Install original trees on the declared types of the  parameters of the method to ensure that  references to them within the method pick up the correct  type parameter skolems upon retypechecking.Propagate through  ,  which is called during tree duplication /  .  Without this, the original trees that we installed were  not visible anymore during  . We are not able to reify partial functions yet -theparticular sticking point is reification of the parentagewhich is only available in the  . Review by @adriaanm / @xeno-by  I\'m using now," based on your prior review. The is also gone.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,1,2013-01-29 21:05:10,106.63,,1,,"b""b' Sigh...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,closed,2013-01-29 22:51:49,106.65,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,reopened,2013-01-30 14:51:22,959.55,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,2,2013-01-29 21:05:10,961.13,,1,,"b""b' Review by @xeno-by @adriaanm '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,3,2013-01-29 21:05:10,300.13,,1,,"b""b' BUILDLOG?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,4,2013-01-29 21:05:10,2.52,,1,,"b""b' (kitty-note-to-self: ignore 13201539)pr-rangepos-per-commit:2f081e49: [success]url  : Took 115 min.", [pending]url started. pr-checkin-per-commit:2f081e49: [success]url  Took 133 min., [pending]url started., [pending]url started., [pending]url started., [pending]url started., [pending]url started., [pending]url started., [pending]url started., [error]url  Build aborted., [error]url  : Build aborted.," [pending]url started.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,5,2013-01-29 21:05:10,1429.62,,1,,"b""b' @adriaanm  @xeno-by I think this PR is still waiting on review approval'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,6,2013-01-29 21:05:10,47.9,1,,,"b'b"" Unfortunately", I know close to nothing about patmat," so I don\'t feel entitled for rubberstamping here""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,7,2013-01-29 21:05:10,137.63,,1,,"b""b' rebasing and reviewing'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,closed,2013-02-07 22:55:03,483.68,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2011,closed,-,-,-,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,opened,2013-01-30 15:51:07,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,title,2013-01-30 15:51:07,00:00,,1,,"b""b' SI-6240 synchronization for runtime reflection'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,body,2013-01-30 15:51:07,00:00,,,1,"b'b"" Locks are no fun"," but it looks like that\'s our only hope of getting thread-safety in 2.10.1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,1,2013-01-30 15:51:07,0.3,,1,,"b""b' review @retronym @paulp @adriaanm @gkossakowski '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,2,2013-01-30 15:51:07,13.0,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,3,2013-01-30 15:51:07,0.0,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,4,2013-01-30 15:51:07,33.05,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,5,2013-01-30 15:51:07,7.17,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,6,2013-01-30 15:51:07,22.9,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,7,2013-01-30 15:51:07,50.2,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,8,2013-01-30 15:51:07,16.07,,,1,"b""b' We discussed the locking matter with Roland and Martin", and it looks like it might be possible to get rid of and completer locks altogether. There will still be a necessity for locks in and  , but the uses of those are much more rare. (We could also get rid of them later by making cache entries atomic if performance permits). Other locks we have include for generating names (probably can be replaced with a CAS), for BaseTypeSeqs, which involve refined types (rare!) and all sort of locks in  . The latter is a huge problem, because such widely used method as must be protected with a GIL," because it involves mutable global vars in the compiler. I plan on looking into that tomorrow.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,9,2013-01-30 15:51:07,1.93,1,,,"b'b"" Having said all that", I suggest we merge this pull request as it is," which would allow me to build upon it to elide locks in and (two blockers outlined by Roland). I see two blockers for that:1) Getting reviews.2) Proving that changing root symbols from to in ffc0c5f doesn\'t degrade performance of the compiler. What would you advise here? /cc @adriaanm @gkossakowski @retronym @paulp @rkuhn""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,10,2013-01-30 15:51:07,1.13,,,1,"b""b' Have you made friends with the undolog? I wish you great luck in pitching that one into a ravine.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,11,2013-01-30 15:51:07,3.63,,,1,"b""b' Luckily someone made undolog synchronizable before me. Optimizing the performance of synchronization would be a completely different thing"," of course.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,12,2013-01-30 15:51:07,19.05,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,13,2013-01-30 15:51:07,0.0,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,14,2013-01-30 15:51:07,10.07,,,1,"b'b"" Kitty has started building stuff", because I occasionally pushed an extraneous commit. Good job kitty," previously you weren\'t so responsive! Permanent catnips ftw.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,15,2013-01-30 15:51:07,33.0,1,,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url ![sad kitty]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,16,2013-01-30 15:51:07,10.02,1,,,"b""b' jenkins job pr-rangepos: Failed url ![sad kitty]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,17,2013-01-30 15:51:07,245.08,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,18,2013-01-30 15:51:07,0.0,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,19,2013-01-30 15:51:07,21.83,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,20,2013-01-30 15:51:07,0.0,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,21,2013-01-30 15:51:07,12.88,,1,,"b""b' Accommodated the feedback"," rebased off fresh 2.10.x. PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,22,2013-01-30 15:51:07,8.7,,,1,"b'b"" Oh nice"," now I\'m tripping my own assertion in my own test. Looks like I have to put off the fix till tomorrow morning.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,23,2013-01-30 15:51:07,13.85,,1,,"b""b' jenkins job pr-rangepos: SUCCESS url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,24,2013-01-30 15:51:07,7.62,,1,,"b""b' jenkins job pr-rangepos: Success url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,25,2013-01-30 15:51:07,12.13,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,26,2013-01-30 15:51:07,243.25,1,,,"b""b' jenkins job pr-scala-testsuite-linux-opt: Failed url ![sad kitty]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,27,2013-01-30 15:51:07,1.58,1,,,"b""b' jenkins job pr-scala-testsuite-linux-opt: ABORTED url ![sad kitty]url SPURIOUS ABORT? -PLS REBUILD pr-scala-testsuite-linux-opt'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,28,2013-01-30 15:51:07,749.33,,1,,"b""b' Needs some work"," will reopen soon.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,closed,2013-02-02 17:28:54,97.78,5,19,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,reopened,2013-02-02 17:56:10,27.27,5,19,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,29,2013-01-30 15:51:07,28.55,1,,,"b'b"" Weird. Github didn\'t pick up the update to 2.10.x.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,closed,2013-02-02 17:57:27,1.28,6,19,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,30,2013-01-30 15:51:07,2.07,,1,,"b""b' jenkins job pr-rangepos: SUCCESS url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,31,2013-01-30 15:51:07,2.08,1,,,"b""b' jenkins job pr-scala-testsuite-linux-opt: ABORTED url ![sad kitty]url tried automatically rebuilding once before"," not falling for it again!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2018,closed,-,-,-,7,20,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,opened,2013-02-01 14:09:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,title,2013-02-01 14:09:45,00:00,,1,,"b""b' SI-6017 Scaladoc: Fix dangling links on '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,body,2013-02-01 14:09:45,00:00,,1,,"b""b' As @heathermiller and @VladUreche commented in #1861"," I removed and use instead when there is no page to link to.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,1,2013-02-01 14:09:45,699.27,,1,,"b""b' needs a rebase'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,closed,2013-02-02 02:18:15,728.5,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,2,2013-02-01 14:09:45,31.8,1,,,"b'b"" Hmm... I\'m little bit confused about GitHub. Could you merge f950e25 and 5359c11 easily?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,reopened,2013-02-02 02:20:49,2.57,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,3,2013-02-01 14:09:45,799.58,,1,,"b'b"" Hey @kzys looks like you still need a rebase. It\'s showing some 23 commits and 50 changed files. Are you working off of a branch that you branched off of 2.10.x?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,4,2013-02-01 14:09:45,287.75,,,1,"b'b"" Afaik the quickest solution is to do this: Maybe @paulp has some scripts for it"," he\'s always got a trick up his sleeve :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,5,2013-02-01 14:09:45,8.8,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,6,2013-02-01 14:09:45,36.53,,,1,"b""b' Thanks @paulp! @kzys"," please ignore what I wrote in the previous comment and do the rebase as Paul suggested.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,7,2013-02-01 14:09:45,212.03,,,1,"b""b' Thanks. How about this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,8,2013-02-01 14:09:45,1153.48,,,1,"b""b' LGTM"," thanks Kato!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,closed,2013-02-05 03:43:01,82.2,1,5,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2050,closed,-,-,-,1,5,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,opened,2013-02-03 15:50:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,title,2013-02-03 15:50:19,00:00,,1,,"b""b' SI-5824 Fix crashes in reify with _*'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,body,2013-02-03 15:50:19,00:00,,1,,"b'b\' Reification crashes if ""foo: _*"" construct is used. This happens besause type tree is represented either with TypeTree", or with Ident (present case), and \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,1,2013-02-03 15:50:19,15.68,,1,,"b""b' Started jenkins job pr-rangepos at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,2,2013-02-03 15:50:19,0.02,,1,,"b""b' Started jenkins job pr-scala-testsuite-linux-opt at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,3,2013-02-03 15:50:19,49.25,,1,,"b""b' jenkins job pr-rangepos: SUCCESS url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,4,2013-02-03 15:50:19,0.02,,1,,"b""b' jenkins job pr-scala-testsuite-linux-opt: SUCCESS url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,5,2013-02-03 15:50:19,56.17,,1,,"b'b"" The predecessor of this PR has already been approved: url  Hence I\'m merging it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,closed,2013-02-07 17:51:37,121.3,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,reopened,2013-02-07 17:51:52,0.25,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,6,2013-02-03 15:50:19,0.68,,1,,"b""b' Ah"," now I remember. Let me retarget it to 2.10.x.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,closed,2013-02-07 17:52:10,0.3,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2056,closed,-,-,-,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,opened,2013-02-04 10:36:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,title,2013-02-04 10:36:08,00:00,,1,,"b""b' Merge Analyzer Plugins for Master'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,body,2013-02-04 10:36:08,00:00,,1,,"b""b' Review by @retronym. Includes the exact same commits as #2022"," plus the merge.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,1,2013-02-04 10:36:08,69.83,,1,,"b""b' it seems :cat: only tested rangepos"," but not the ordinary full build.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,2,2013-02-04 10:36:08,39.35,,1,,"b""b' PLS REBUILD pr-checkin-per-commit'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,3,2013-02-04 10:36:08,9.35,,,1,"b""b' (kitty-note-to-self: ignore 13074434):cat: Roger! Rebuilding pr-checkin-per-commit. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,4,2013-02-04 10:36:08,4.38,,,1,"b""b' aaah it was still running! so currently the symptom is that the pull request is already green once the rangepos has finished"," even if the main build is not yet done. it would be nice if the links to both builds were available somewhere.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,5,2013-02-04 10:36:08,122.52,,1,,"b""b' The merge lgtm.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,6,2013-02-04 10:36:08,40.48,1,,,b'b\' i beleive both builds succeeded," i saw ""pr-checkin-per-commit"" at some point in the green message bar. but now it\\\'s ""rangepos"" again. we\\\'ll have to ask @adriaanm how to figure out.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,7,2013-02-04 10:36:08,214.58,,1,,"b'b"" @lrytz", yes, that\'s why I want to run a single jenkins job that then forks the various jobs and joins themgithub only shows the last status of a commit -nothing we can do there," i thnk""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,8,2013-02-04 10:36:08,778.73,,,1,"b'b"" AFAICT this PR is good to go", both builds went fine:url url  i think it only built the merge commit," but that\'s ok since the others are already in the repo anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,9,2013-02-04 10:36:08,21.88,,1,,"b""b' PLS SYNCH (this makes the kitten synchronize state between jenkins and github)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,10,2013-02-04 10:36:08,1.83,,,1,"b""b' (kitty-note-to-self: ignore 13118927):cat: Synchronaising! :pray:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,11,2013-02-04 10:36:08,7.63,,1,,"b""b' PLS -checkin-per-commit@91c9c42'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,12,2013-02-04 10:36:08,0.1,,1,,"b""b' PLS -checkin-per-commit@a06d31f6'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,13,2013-02-04 10:36:08,0.15,,1,,"b""b' PLS -checkin-per-commit@7e836f83'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,14,2013-02-04 10:36:08,0.03,,,1,"b""b' coooool :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,15,2013-02-04 10:36:08,0.63,,,1,"b""b' :-) next I wanna add some /DCC SEND support :sunglasses: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,16,2013-02-04 10:36:08,6.45,,,1,"b""b' (kitty-note-to-self: ignore 13119159):cat: Roger! Rebuilding pr-checkin-per-commit for 91c9c42. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,17,2013-02-04 10:36:08,0.0,,,1,"b""b' (kitty-note-to-self: ignore 13119163):cat: Roger! Rebuilding pr-checkin-per-commit for a06d31f6. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,18,2013-02-04 10:36:08,0.0,,,1,"b""b' (kitty-note-to-self: ignore 13119164):cat: Roger! Rebuilding pr-checkin-per-commit for 7e836f83. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,19,2013-02-04 10:36:08,15.18,,1,,"b""b' I think something is off here"," but it could be jenkins:url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,20,2013-02-04 10:36:08,0.78,1,,,"b""b' maybe there should be a git clean and a git reset hard in there at the start to make sure we merge info a clean checkout'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,21,2013-02-04 10:36:08,4.63,,1,,"b""b' BUILDLOG?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,22,2013-02-04 10:36:08,0.53,,1,,"b'b"" I think this cannot work we have to think about the per-commit build logic. The problem is that we first check out master", then try to merge the individual pull request of the commit. In this case, the intermediate commits of the PR have a parent in 2.10.x, and they don\'t merge cleanly into master. Obviously the merge conflicts were (manually) resolved in the merge commit of this PR," but the other commits don\'t merge cleanly into master.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,23,2013-02-04 10:36:08,0.9,,1,,"b""b' (the conflicts in url  are exactly those i had to manually resolve)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,24,2013-02-04 10:36:08,3.53,,1,,"b""b' maybe we should build the intermediate commits just by checking out their "," and only do the merge thing for the topmost commit?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,closed,2013-02-05 09:03:22,1347.23,2,15,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,reopened,2013-02-05 09:03:25,0.05,2,15,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,25,2013-02-04 10:36:08,9.95,,1,,"b""b' (kitty-note-to-self: ignore 13120049)pr-rangepos-per-commit:91c9c420: pending:  queued.", [success]url  : Took 73 min., [pending]url started.59918ee4: pending:  queued., [success]url  : Took 98 min., [pending]url started.6697c283: pending:  queued., [success]url  : Took 122 min., [pending]url started.a06d31f6: pending:  queued., [success]url  : Took 111 min., [pending]url started.b74c33eb: pending:  queued., [success]url  : Took 75 min., [pending]url started.7e836f83: pending:  queued., [success]url  : Took 123 min., [pending]url started., [pending]url started.f3cdf146: pending:  queued., [success]url  : Took 118 min., [pending]url started.df8de906: [success]url  Took 29 min., [success]url  : Took 29 min., [pending]url started. pr-checkin-per-commit:91c9c420: pending:  queued., [pending]url started.59918ee4: pending:  queued., [success]url  : Took 165 min., [pending]url started.6697c283: pending:  queued., [success]url  : Took 151 min.a06d31f6: pending:  queued., [error]url  : Build failed.2 tests failed. Took 176 min., [pending]url started.b74c33eb: pending:  queued., [success]url  : Took 163 min., [pending]url started.7e836f83: pending:  queued., [pending]url started.f3cdf146: pending:  queued., [success]url  : Took 126 min., [pending]url started.df8de906: [success]url  Took 81 min., [success]url  : Took 81 min.," [pending]url started.'""",,,,,,,,,,,,,,
scala,2061,closed,26,2013-02-04 10:36:08,867.38,,1,,"b""b' hmm.. I guess", in general, if you rebase your commits on top of master, each individual commit should merge cleanly in this case, the fact that pr-rangepos-per-commit worked for all commits indicates something else is wrong with pr-checkin-per-commit either master had moved by the time the checkin jobs were running and the merge failed because of that," or the git scripts for the jenkins jobs are not ideal'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,27,2013-02-04 10:36:08,438.2,,1,,b'b\' when we merge from 2.10 into master," we don\\\'t want to rebase on master because we want to have the same commits in the history of both master and 2.10.x. the fail logs show that ""checkin"" and ""rangepos"" builds fail in the same way for intermediate commits", because they don\\\'t merge with master.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,28,2013-02-04 10:36:08,42.18,1,,,"b""b' ok"," sorry i missed that this is a forward port from 2.10.x -now it finally all makes sense :hamster: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,29,2013-02-04 10:36:08,1.55,,,1,"b""b' thanks for your patience -merging'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,closed,2013-02-06 07:39:17,1355.87,3,18,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,30,2013-02-04 10:36:08,14.87,,,1,"b'b"" NP it was a good test case for the grown-up kitty. What do you think of building intermediate commits without merging them into HEAD first? I think it would make sense", because that\'s what actually happens once a PR gets merged: the topmost commit is merged into HEAD," not each commit individually.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2061,closed,-,-,-,3,18,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,opened,2013-02-04 19:57:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,title,2013-02-04 19:57:34,00:00,,1,,"b""b' [nomaster] SI-6773 Makes the SI-6150 changes binary compatible with 2.10'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,body,2013-02-04 19:57:34,00:00,,1,,"b""b' The back ported fix of SI-6150 1f0e488 broke binary compatibility. This commit fixes that by removing the IndexedSeqFactory class and  its one method around to everything that extended it then re-adds some inner classes needed by the binary compatibility checker. review @retronym'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,1,2013-02-04 19:57:34,2.07,,1,,"b'b"" NVM"," this doesn\'t go far enough.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,closed,2013-02-04 19:59:41,2.12,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,2,2013-02-04 19:57:34,1.53,,1,,"b'b"" I\'m proposing in the commit title for these ones"," I think having something in the title makes it easier for the merge later one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,reopened,2013-02-04 20:14:03,14.37,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,3,2013-02-04 19:57:34,125.1,,1,,"b""b' @retronym squashed and added [nomaster]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,4,2013-02-04 19:57:34,10.47,,1,,"b'b"" I\'m assuming you\'ve MiMa-ed this; so LGTM""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,closed,2013-02-06 19:49:46,1415.72,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2064,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,opened,2013-02-04 20:55:28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,title,2013-02-04 20:55:28,00:00,,1,,"b""b' Change Doc to trait to allow it to be used as a cake slice.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,body,2013-02-04 20:55:28,00:00,,1,,"b""b' Change the implementation of getDocumentation() method.Rename and privatize symbols in CommentFactoryBase to avoid clashes when cooking a cake.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,1,2013-02-04 20:55:28,580.77,,1,,"b'b"" I think it would be best to do this in 2.11 and synchronize with Paul\'s efforts to extract scaladoc from scalac""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,closed,2013-02-05 06:37:10,581.7,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,2,2013-02-04 20:55:28,6.63,,,1,"b'b"" While I support the idea to split scaladoc and interactive from scalac in 2.11"," I really don\'t understand why this PR for 2.10.1 cannot be merged to make IDE users happy in the next release?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,reopened,2013-02-05 07:34:33,57.38,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,3,2013-02-04 20:55:28,52.52,1,,,"b'b"" I wasn\'t aware of the longer-term goal of this PR. Sorry. There are a lot of them in the queue"," sometimes I make a mistake.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,4,2013-02-04 20:55:28,195.18,,1,,b'b\' A related point, though it may need a separate pull request: all operations of the presentation compiler go through calls," defined and documented in  . We should have similar entry points for  . Such calls ensure:the correct thread is usedthey are serviced ""in order"" and are interruptible by normal (placed on the work queue)they can be \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,5,2013-02-04 20:55:28,62.62,,1,,"b""b' On Tue", Feb 5, 2013 at 2:50 PM," Iulian Dragos notifications@:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,closed,2013-02-06 07:04:51,1410.3,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2065,closed,-,-,-,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,opened,2013-02-06 06:40:46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,title,2013-02-06 06:40:46,00:00,,1,,"b""b' SI-5744 evidence params are now SYNTHETIC'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,body,2013-02-06 06:40:46,00:00,,,1,"b'b"" The macro def  macro impl correspondence check compares names of thecorresponding parameters in def and impl and reports an error if theydon\'t match. This was originally designed to avoid confusion  namedarguments (which ended up being never implemented as described in SI-5920). Sometimes parameter names are generated by the compiler", which puts theuser in a tough position. Luckily, there\'s an escape hatch built it, whichomits the name correspondence check if one of the parameters are SYNTHETIC.Everything went well until we realized that evidences generated bycontext bounds aren\'t SYNTHETIC, which led to the bug at hand. Marking auto-generated evidence parameters SYNTHETIC was only the firststep, as the correspondence checker uses parameter symbols, not parametertrees. Why\'s that a problem? Because SYNTHETIC doesn\'t get propagated from deftrees to their underlying symbols (see ValueParameterFlags). Unfortunately one cannot just change ValueParameterFlags, because thatwould break printouts generated in TypeDiagnostics, which is designed to notprint synthetic symbols. Therefore now we not only check ," but also when doing corresponce sweeps. This fixes the problem and doesn\'t mess uperror messages and debug printouts.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,1,2013-02-06 06:40:46,14.55,,1,,"b""b' Could you add a tests for:the case when both context bounds and an explicit implicit parameter section are provided?view bounds?multiple bounds? I think they should fall out naturaly", so pending that test," lgtm. Have you signed the Scala CLA?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,2,2013-02-06 06:40:46,1043.95,,1,,"b""b' I think this should target master. Feel free to convince me otherwise.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,closed,2013-02-07 00:19:16,1058.5,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,3,2013-02-06 06:40:46,411.92,,,1,"b""b' Would be cool if you motivated your decision. The change is minor and is in time for the feature freeze.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,reopened,2013-02-07 17:53:09,1053.88,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,4,2013-02-06 06:40:46,666.2,,1,,"b""b' Superseded by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,closed,2013-02-07 18:17:24,24.25,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2074,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,opened,2013-02-25 22:06:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,title,2013-02-25 22:06:39,00:00,,1,,"b""b' SI-7181 Eliminate unnecessary duplicates of finally blocks'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,body,2013-02-25 22:06:39,00:00,,1,,"b'b\' The main body of a try and each exception handler were getting a copy ofthe finally block for the ""normal"" flow case (i.e. where they don\\\'tthrow an uncaught exception or use ""return"" to exit early). But that\\\'s not necessary. With this commit the try body and each exception handler can all jumpto the same copy of the finally block on a normal exit. Two tests are included. One is a run style test that shows that logic remains unchanged. The other is a byte codetest that ensures we\\\'re getting fewer copies of the finally.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,1,2013-02-25 22:06:39,76.82,,1,,"b'b"" Hmm", one test is the exception inlining test, which," okay that needs a fixup. But the other is the test I\'m submitting here and that one works for me. Huh?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,2,2013-02-25 22:06:39,2.33,,1,,"b""b' -optimise?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,3,2013-02-25 22:06:39,2.42,,1,,"b'b"" @paulp That would explain it because the exception inliner would add another copy of one finally block. But"," I don\'t have -optimize in this test\'s flag so I shouldn\'t get optimize code in the ? Do I have to have an empty .flags file?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,4,2013-02-25 22:06:39,1.47,,1,,"b""b' All the tests are run under -optimise when you run test-opt"," which is what the usual jenkins does.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,5,2013-02-25 22:06:39,17.58,,1,,"b""b' [sigh]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,closed,2013-02-26 00:36:08,149.48,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,reopened,2013-02-26 00:40:59,4.85,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,6,2013-02-25 22:06:39,272.95,,1,,"b""b' might as well lean into it I guess.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,7,2013-02-25 22:06:39,185.17,,1,,"b""b' btw"," you can use to run an individual test under that flag.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,8,2013-02-25 22:06:39,369.12,,1,,"b'b"" @retronym Yeah", I\'ve created an alias now that I know the automated build always runs under optimize. @gkossakowski Actually I think that test needs to be rewritten. It\'s testing more than my intended change. The other test, ," already does a comprehensive test to make sure  as a whole works.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,9,2013-02-25 22:06:39,293.05,,1,,"b""b' PLS SYNCH'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,10,2013-02-25 22:06:39,1.35,,,1,"b""b' (kitty-note-to-self: ignore 14130944):cat: Synchronaising! :pray:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,11,2013-02-25 22:06:39,9.72,,1,,"b'b"" The [build]url  has finished since the kitten last visited this PR. It should notice this on the next visit. I\'m working on improving the logic that sets the commit status message. Ah"," there we go -it went green while I was typing the above :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,12,2013-02-25 22:06:39,2.68,,1,,"b""b' Hooray. review @gkossakowski '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,13,2013-02-25 22:06:39,22.72,,,1,"b""b' LGTM. Great that you split this into two commits. Work prepared like the is pure pleasure to review.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,closed,2013-02-26 19:04:16,1103.28,0,13,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2169,closed,-,-,-,0,13,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,opened,2013-03-01 18:35:04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,title,2013-03-01 18:35:04,00:00,,1,,"b""b' SI-7006 Prevent unreachable blocks in GenICode'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,body,2013-03-01 18:35:04,00:00,,,1,"b'b\' This commit makes GenICode prevent the generation ofmost unreachable blocks. The new unreachable block prevention code canbe disabled with a compiler flag. Because full unreachable analysis is no longer necessary fornormal code it makes the unreachable block analysis run only under-optimise. A test is included to make sure unreachable code doesn\\\'t cause issuesin code gen. A concrete example will help. def foo(): X = { try   return something() catch {   case e: Throwable =    throw e } unreachableCode()  ] Here unreachableCode() is unreachable but GenICode would create ICodefor it and then ASM would turn it into a pile of NOPS. A previous commit added a reachability analysis step to eliminatethat unreachable code but that added a bit of time to thecompilation process even when optimization was turned off.This commit avoids generating most unreachableICode in the first place so that full reachability analysis isonly needed after doing other optimization work. The new code works by extending a mechanism that was already in place.When GenICode encountered a THROW or RETURN it would put thecurrent block into ""ignore"" mode so that no further instructionswould be written into the block. However", that ignore mode flagwas itself ignored when it came to figuring out if follow on blocksshould  be written. So this commit goes through places like and  and uses the ignore mode of the current block to decidewhether to create follow on blocks, or if it already has, to kill byputting them into ignore mode and closing them where they\\\'ll beremoved from the method\\\'s list of active blocks. It\\\'s not quite as good as full reachability analysis. In particularbecause a label def can be emitted before anything that jumps to it,this simple logic is forced to leave label defs alone and that meanssome of them may be unreachable without being removed. However, inpractice it gets close the the benefit of reachability analysis atvery nearly no cost.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,1,2013-03-01 18:35:04,125.87,,1,,"b""b' review @gkossakowski '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,2,2013-03-01 18:35:04,1355.03,,1,,"b'b"" @JamesIry: shouldn\'t we have a test that checks whether unreachable blocks are properly eliminated?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,3,2013-03-01 18:35:04,12.13,1,,,"b""b' Also"," the commit message is not detailed enough to aid understanding of this change. @JamesIry agreed to update it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,4,2013-03-01 18:35:04,1259.08,,1,,"b'b"" I\'d like to avoid writing more icode tests so I\'ll visit ways to run a JVM test with the full reachability analysis disabled then re-visit this PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,closed,2013-03-05 16:27:11,1312.12,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,reopened,2013-03-06 14:11:48,1304.62,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,5,2013-03-01 18:35:04,41.95,,1,,"b""b' Okay @gkossakowski"," this should be better.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,6,2013-03-01 18:35:04,234.93,,1,,"b""b' Unreachability analysis would be very handy as a user-level warning"," too.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,7,2013-03-01 18:35:04,8.0,,,1,"b'b"" @dragos At the point this code runs it\'s not at all clear what was code written by the user and what was synthesized by previous stages. I\'d love to have a good reachability warning for user code"," but it\'ll take some work to prevent false warnings.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,8,2013-03-01 18:35:04,4.63,,,1,"b""b' @JamesIry I know"," it was more of an encouragement to work on a that feature. :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,9,2013-03-01 18:35:04,105.2,,1,,"b'b"" FYI: I\'m reviewing this right now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,10,2013-03-01 18:35:04,25.58,,,1,"b'b"" @JamesIry: definitively an improvement of previous iteration. The core of your patch looks good to me already. I\'d like to hear from you an opinion on points I raised.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,11,2013-03-01 18:35:04,1067.6,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,closed,2013-03-08 17:15:18,183.5,1,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2185,closed,-,-,-,1,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,opened,2013-03-02 09:25:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,title,2013-03-02 09:25:31,00:00,,1,,"b'b"" SI-7132 don\'t discard Unit type in interpreter""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,body,2013-03-02 09:25:31,00:00,1,,,"b'b"" This is my first pull request here", so apologies in advance if I\'ve (likely) screwed something up. This is to fix a bug in the REPL, apparently introduced in 4a6f54b, in which the command fully evaluates expressions of type  ," rather than just printing the type name  . @paulp I think I\'m supposed to ask you to review...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,1,2013-03-02 09:25:31,336.25,,,1,"b'b"" +1 to this PR once those two tests are updated @mergeconflict If you haven\'t", please electronically sign the contributor agreement url  and welcome to our cozy little code base. if you do the test updates, our policy is not to merge unless all commits in a pull request pass all the tests. In other words you\'ll need to do a git commit amend and git push -f, or you\'ll need to open a new PR," whichever works for you.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,2,2013-03-02 09:25:31,217.32,,1,,"b'b"" @JamesIry well", actually... seems it\'s not a simple matter of updating these tests. Evidently is supposed to work not just for expressions but for arbitrary statements. For example," in the case of something like it seems like the expected behavior is to evaluate the statement and print the type of the newly bound variable. Back to the drawing board.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,closed,2013-03-02 18:39:05,553.57,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,3,2013-03-02 09:25:31,2.53,,1,,"b'b"" No", I think you\'re on the right track. It\'s just that statements need special handling to say something useful, lest they all be of type Unit. You shouldn\'t ever have to evaluate an expression to print the type of something," that\'s what we have a compiler for.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,4,2013-03-02 09:25:31,0.5,,1,,"b""b'   should say  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,5,2013-03-02 09:25:31,0.55,,1,,"b'b"" And I see it does evaluate it"," but that\'s a bug.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,6,2013-03-02 09:25:31,3.98,,1,,b'b\' To be contrary," I think :type val hoho = ""hoho"" should say Unit because that\\\'s what its type is.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,7,2013-03-02 09:25:31,1.08,1,,,b'b\' @JamesIry that succeeds in making it useless. If you ask what the type of is," there are two possible answers we can give. Is ""Unit"" really the useful one?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,8,2013-03-02 09:25:31,1.72,,1,,"b'b\' Yes. When somebody evaluates val f = blah and def f = whatever then the repl can say ""defined f of type Whositz"" but I\\\'d rather :type not confuse the issue.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,9,2013-03-02 09:25:31,0.88,,1,,b'b\' Well, I vehemently disagree. The only reason for :t to exist is to give a human useful answers," it\\\'s not an api. ""Unit"" is not a useful answer", it\\\'s just a sharp stick in the side.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,10,2013-03-02 09:25:31,0.1,1,,,"b'b\' I say confused because \\\'val x = (val y = ""hello"")\\\' isn\\\'t going to do what :type val y = ""hello"" implies it would do.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,11,2013-03-02 09:25:31,0.82,1,,,"b""b' I prefer not to make it useless for everyone on the basis that someone might draw an unlikely and easily disabused conclusion.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,12,2013-03-02 09:25:31,0.38,,1,,"b""b' On this basis by the way we should print all identifiers as $iw$iw$iw.$iw.$iw.$iw.$iw$iw$iw$iwBippy$iw$iw too.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,13,2013-03-02 09:25:31,0.7,,1,,"b'b"" Well... the SLS doesn\'t specify a type for statements. The code I committed treats a statement as a block expression. e.g.: is treated as which isn\'t what I care about.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,14,2013-03-02 09:25:31,0.52,,1,,"b'b"" :t is what I define it to be. I define it to be the type of an expression when it\'s an expression"," and the most useful type which can be supplied otherwise.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,15,2013-03-02 09:25:31,3.95,,1,,"b'b\' @mergeconflict ""statements"" do have type Unit"," e.g.{ val hoho=""hoho"" } has type Unit without the (). What we\\\'re debating here is whether :type should always agree with that.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,16,2013-03-02 09:25:31,3.22,,,1,"b'b\' ""An expression statement e is evaluated by evaluating e and discarding the result of the evaluation."" Maybe you\\\'d be happy if it said ""discarded type String"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,17,2013-03-02 09:25:31,0.23,,1,,"b'b\' So I have a ""fix."" Sort of. @paulp tell me what you think about reversing: and in  . It fixes the problem of discarding Unit", but exacerbates the problem of evaluating its argument:  \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,18,2013-03-02 09:25:31,4.57,,1,,"b'b"" @mergeconflict that\'s all symptomatic. It should not come anywhere near evaluating the expression. Start the repl with scala and see what it is doing which leads to it being evaluated. It is 100% sure that it can discover the type of a valid scala expression without running it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,19,2013-03-02 09:25:31,4.12,,1,,"b'b"" It\'s pretty clear why it\'s evaluating the expression: in  . This is avoided in by wrapping the expression in a def and unwrapping it after interpreting the def.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,20,2013-03-02 09:25:31,17.25,,1,,"b'b\' Then the problem is just that I was thinking of ""def"" definitions (which obviously aren\\\'t evaluated) not vals. Tag all vals lazy", that should do it.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,21,2013-03-02 09:25:31,115.17,,1,,"b'b"" @paulp @JamesIry I\'ve found a decent fix"," but I\'m sort of a GitHub n00b: I used and  ... now how do I update this pull request from my branch? Better to just submit a new PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,22,2013-03-02 09:25:31,0.65,,1,,"b""b' By the way"," I have signed the CLA.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,23,2013-03-02 09:25:31,2.7,,1,,"b'b"" If this PR was still open it would just magically show up. Since it\'s closed you\'ll have to submit a new one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,reopened,2013-03-02 21:26:03,166.97,4,19,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,24,2013-03-02 09:25:31,80.27,,,1,"b""b' Okay"," Jenkins is happier. @paulp review please. And should this go into 2.10.something?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,25,2013-03-02 09:25:31,1020.25,,,1,"b""b' Okay"," great. Thanks a lot. LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,closed,2013-03-05 15:45:24,1099.35,4,19,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,26,2013-03-02 09:25:31,593.48,,1,,"b""b' @paulp any chance of getting this into 2.10.x branch?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,27,2013-03-02 09:25:31,913.95,1,,,"b""b' Unfortunately"," merges go the other direction: 2.10.1 -'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2191,closed,28,2013-03-02 09:25:31,457.18,,1,,b'b\' I had second thoughts about not adding,"(assignment always results in unit value)"" and similar for defs.  Maybe repl needs a -noob option. Or, the distro installer adds -noob to the script, which is overwritten after a 30-day noob period, after which easy disabuse (disabusement?) is suppressed. I understand noobs are encouraged to use the repl, and when you remove debug around your result expr, it\\\'s easy to wind up with a val answer = 63 at the bottom of a function; or since we\\\'re in noob mode, it\\\'s probably a var assignment. Assignment doesn\\\'t seem say anything useful. scalafoo: Int = 0 scalaFWIW, you also can\\\'t :type imports. Sure, that\\\'s nonsense. This was a pretty good thread. I can\\\'t wait to say, ""Ack, I\\\'ve succeeded in making it useless.""  Annotate that with @self-deprecated.\''
scala	2191	closed	-	-	-	-	5	21	4
scala	2202	closed	opened	retronym	2013-03-05 12:41:05
scala	2202	closed	title	retronym	2013-03-05 12:41:05	00:00		+1		b""b' [nomaster] Carve up '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,body,2013-03-05 12:41:05,00:00,,1,,"b""b' Step one of a plan to bring some order and threadsafety to this neck of the woods. More info: url url  Hand crafted backport of the #2201.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,1,2013-03-05 12:41:05,7.67,,1,,"b""b' Darn"," I branched this from a stale 2.10.x branch. Closing until I fix that up.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,closed,2013-03-05 12:48:48,7.72,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,reopened,2013-03-05 22:25:12,576.4,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,2,2013-03-05 12:41:05,459.1,,1,,"b""b' Let me know how you want me to deal with MiMa here. Just copy the suggested whitelist across? Can we do anything with a wildcard exclusion?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,3,2013-03-05 12:41:05,568.17,,1,,"b""b' Yes", we can ignore changes in  . I see a couple of differences as well," though.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,4,2013-03-05 12:41:05,1004.77,,1,,"b'b"" Getting closer: I\'ll be back in 24h to put this to bed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,5,2013-03-05 12:41:05,17.22,,,1,"b""b' Awesome. In the mean time"," enjoy your own bed :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,6,2013-03-05 12:41:05,1228.45,,1,,"b'b"" False dawn. The subsequent forward binary compatibility breakages are not resolvable. e.g. I don\'t see any way around these given the policy that on  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,7,2013-03-05 12:41:05,212.42,,1,,"b""b' @retronym should we close this one and retarget 2.11?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,8,2013-03-05 12:41:05,7.0,,1,,"b'b"" It\'s already in 2.11", this was a backport attempt. But our hands are bound too tightly to pull it off," so I\'ll close.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,closed,2013-03-20 23:05:53,40.68,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2202,closed,-,-,-,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,opened,2013-03-13 14:52:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,title,2013-03-13 14:52:02,00:00,,1,,"b""b' SI-6900 Tail call elimination + dependent method type crasher'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,body,2013-03-13 14:52:02,00:00,,,1,"b'b\' The primary contribution of this change is best expressed as a diff: The symbols of the  s in the tree agree with the (cloned) symbols in the method type that was generated by the uncurry  . One corner of the compiler universe fares a little better at the ""[usual grand problem of keeping trees", symbols," and types in tune with one another]url "". I\\\'m quoting @paulp", which is a nice thing to do before I ask him to review. In particular, should we (and, where could we) plug into the tree transformers of all phases that install info transformers? This PR also includes rework of SI-6135 which became apparent to me after spending more time in and was closely related to this change.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,1,2013-03-13 14:52:02,408.27,,1,,"b'b"" That\'s just MiMa noise"," I\'ll fix up soon.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,2,2013-03-13 14:52:02,1393.22,,1,,"b""b' Closing until I can whack all the moles...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,closed,2013-03-19 20:53:31,361.48,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,reopened,2013-03-19 22:52:03,118.53,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,3,2013-03-13 14:52:02,118.72,,1,,"b""b' PLS SYNCH'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,4,2013-03-13 14:52:02,6.03,,,1,"b""b' (kitty-note-to-self: ignore 15148664):cat: Synchronaising! :pray:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,closed,2013-03-20 21:35:42,1363.65,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2248,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,opened,2013-03-13 15:39:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,title,2013-03-13 15:39:25,00:00,,1,,"b""b' SI-7237 Always choose ForkJoinTaskSupport'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,body,2013-03-13 15:39:25,00:00,,1,,"b""b' ForkJoinTaskSupport works on Hotspot", Avian and J9,"while ThreadPoolTaskSupport causes the test-collectionsto reliably hang on all three.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,closed,2013-03-13 15:42:19,2.9,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,reopened,2013-03-13 15:43:38,1.32,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,1,2013-03-13 15:39:25,172.58,,1,,"b'b"" Looks like a single PR (#2252) on 2.10.x will do here. We merge 2.10.x into master"," so I\'d rather not have duplicated identical commits in both branches.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,closed,2013-03-13 18:32:02,168.4,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,2,2013-03-13 15:39:25,1271.6,,1,,"b'b"" Reopening", as mentioned in #2252, because the changes are now different. Mhhh ... weird," I can\'t reopen it myself. Help?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2249,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,opened,2013-03-17 05:05:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,title,2013-03-17 05:05:36,00:00,,1,,"b""b' SI-7261 BooleanSetting to Boolean conversion'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,body,2013-03-17 05:05:36,00:00,,1,,"b'b"" Add an implicit for BooleanSetting to Boolean", since while we never expect the Spanish Inquisition, we do expect a boolean in an if clause. The first cut put the implicit at AbsScalaSettings, but the more general case is at \'s MutableSettings.  There was no particular desire to privilege mutability. There is an additional implicit to convert BooleanSetting to BooleanFlag, in the second commit.  Maybe you knew there was a BooleanFlag. The second commit tries to be minimalist, just to 6x the  .  There are two or three spots where an expression has been restructured," but no intentional changes in behavior. Review by @paulp who liked the idea and @retronym who has already egged on.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,1,2013-03-17 05:05:36,173.05,,1,,"b""b' Surely there are more place to take advantage of this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,2,2013-03-17 05:05:36,634.68,,,1,"b'b"" If the concept is good"," I\'ll add a commit that converts to conversions everywhere.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,3,2013-03-17 05:05:36,1184.37,,1,,"b""b' Closing until it comes again.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,closed,2013-03-18 14:17:43,552.12,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,4,2013-03-17 05:05:36,182.67,,1,,"b'b"" Reopening with advantages. The implicit is on reflect\'s MutableSetting. Since I don\'t know why the PR has to show other history"," would it help if I closed this and created a new PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,reopened,2013-03-20 17:20:23,182.67,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,5,2013-03-17 05:05:36,103.93,,1,,"b'b"" Somehow there are 8 commits in this PR"," most of which don\'t belong. Closing for repairs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,closed,2013-03-23 19:04:18,103.92,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,6,2013-03-17 05:05:36,151.95,,1,,"b'b"" I wish I understood what sequence of keystrokes produced the bad PR after I pushed -f. It\'s like", excuse the metaphor, they keep insisting the transporter on the Enterprise is perfectly safe, you won\'t lose anything," then one day you\'re totally scrambled.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2272,closed,-,-,-,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,opened,2013-03-22 22:26:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,title,2013-03-22 22:26:34,00:00,,1,,"b""b' Sanity for : exscriptus&positus delendus est.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,body,2013-03-22 22:26:34,00:00,,1,,"b""b' Reduced  to the best of my antabilities. The next person to duplicate anything without written permission will be sentenced to a week in xmhell. While I was at it", made sure that layering is respected. The quick phase exclusively uses the locker compiler for building. The jar task will fail when trying to create an empty jar. Replaced the crazy  constructs by . Version suffix computation should now be comprehensible. I threw in some validation to make sure the various suffixes are consistent. Also, no more -foo tasks unless absolutely necessary. Introduce a couple of macros to capture the essence of staged compilation. For example, this is the entirety of the locker phase: Notes:remove , standardize on collapse * and *rename  to only repl needs jline,  =  + forkjoinmore uniform  (compiler = reflect + library)  uniformity means slightly bigger classpaths  (e.g. forkjoin is only used in library,  but inherited by compiler)  pruned: some spurious dependencies removed  compilerpathref = compiler build pathsilence , by hook or by crookcentralized clean tasksreduce duplication in property usagefix  to pack  instead of -partestTODO: necessary for library? only needed for forkjoin?document usage from jenkins," fix typo:  New targets:quick-optstrap-opt-opt  targets: -comp -continuations-plugin-jline -lib -man -partest -scalap     -comp -lib -reflect-comp-lib -reflect   -bin -comp -lib -partest-plugins -reflect -scalap -bin -comp -lib -reflect-bin-comp -interactive -lib -partest-plugins -reflect -repl -scalacheck-scaladoc -scalap   -comp -lib -reflect  -run'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,1,2013-03-22 22:26:34,2.3,,1,,"b""b' Review by everyone. @paulp", @jsuereth, @retronym, @xeno-by, @gkossakowski, @JamesIry  Working on a backport to 2.10.x,"'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,2,2013-03-22 22:26:34,1.03,,,1,"b'b"" Also"," I\'m quite pleased to point to this little nugget:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,3,2013-03-22 22:26:34,3.05,,1,,"b""b' Also", even with more docs and features,"  shed 913 lines of bloat.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,4,2013-03-22 22:26:34,2.97,,1,,"b""b' In smaller pieces: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,closed,2013-03-22 23:59:32,92.97,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,reopened,2013-03-23 06:12:24,372.87,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,5,2013-03-22 22:26:34,705.83,,1,,"b""b'   Probable solution from [MANTTASKS-203]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,6,2013-03-22 22:26:34,292.5,,1,,"b""b'   The predicate should be based on  ","  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,7,2013-03-22 22:26:34,2.53,,1,,"b""b'   '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,8,2013-03-22 22:26:34,46.78,,1,,"b'b\' I found two more typos calls to the macro (  and  ). The ""NOT SET"" checks are something of a wart. Did you try using a reference to an empty pathset as the default instead? If you\\\'re calling one of our Ant tasks", it could be modified to to treat that as an omitted argument. But that shouldn\\\'t hold this up, so LGTM pending fixes to the other issues I noted.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,9,2013-03-22 22:26:34,215.77,,,1,"b'b"" Thanks! I\'m out for the rest of the weekend. Will fix these on Sunday. On Saturday", March 23,2013, Jason Zaugg wrote:##  See you at Scala Days url  (June 10\\xe2\\x80\\x9312," NYC)!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,10,2013-03-22 22:26:34,597.07,,,1,"b""b' I spent several hours trying to do just that", but had to punt for now as extricating our antlib proved tricky.We should definitely get that out of here," but url  + #2206 looks like a more exciting way of doing that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,closed,2013-03-25 20:46:04,873.67,0,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,11,2013-03-22 22:26:34,947.8,,1,,"b'b"" Oh. I checked if it had already been fixed before I suggested fixing it", but I see I checked the  work which had actually been merged, which was in 2.10.x," which of course didn\'t need this change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2290,closed,-,-,-,0,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,opened,2013-03-23 15:51:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,title,2013-03-23 15:51:33,00:00,,1,,"b""b' SI-6289 Partest in technicolor and showing javac errors'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,body,2013-03-23 15:51:33,00:00,,1,,"b""b' Paulptest includes color and simplified test scarfing. The transcript feature handles errors in staged compilation. This is work-in-progress", merged from -sprint, nearly done.  It touches ," so more tweaking after the ant build refactor.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,1,2013-03-23 15:51:33,152.98,,,1,"b'b"" Close! At a glance it looks like you\'re missing the partest changes since it sprinted off into the woods"," especially 1dd88d9291 .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,2,2013-03-23 15:51:33,0.25,,1,,"b'b"" @som-snytt", take a look at my commits here: url At least some of the failing tests are fixed if not all. I know -showis fixed, but I also know that I won\'t have time to finish it in the near future," so take it if you want.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,3,2013-03-23 15:51:33,1230.05,,1,,"b""b' @khernyo thanks", interesting to see unsquashed history. That plug-in tweak was mine; I remember thinking last time how divergence and back-porting are a disincentive to touch code.  Or maybe the lesson is: only write code you will enjoy revisiting periodically like an old friend.  And as at those visits," you will marvel privately how he has changed for the worse and that time has not been kind.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,closed,2013-03-24 14:54:50,1383.28,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,4,2013-03-23 15:51:33,481.55,,,1,"b'b"" I\'ll try reopening on the re-pushed branch and see if it shows only my commit. I wanted to open it again to any available eyes", before it goes stale again.  Some people were drooling for their ascii art in color.  Ascii art?  No," ascii partest!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,reopened,2013-03-27 22:56:23,481.55,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,5,2013-03-23 15:51:33,1.17,,1,,"b'b"" OK", nevermind, it shows other commits, presumably due to rebasing," or some other github quirk I don\'t understand.  I\'ll reopen clean.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,closed,2013-03-27 22:57:33,1.17,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2296,closed,-,-,-,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,opened,2013-03-25 13:06:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,title,2013-03-25 13:06:58,00:00,,1,,"b""b' Use AnyVal to optimize  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,body,2013-03-25 13:06:58,00:00,,1,,"b""b' Now there is no more indirect reference.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,1,2013-03-25 13:06:58,3.6,,1,,"b""b' We need more context to review this. Was this optimization driven by performance profiling? Take a look at the [contribution guide]url  and at the history of other pull requests"," for more tips on how to submit the best pull requests. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,2,2013-03-25 13:06:58,124.48,1,,,"b""b' This patch is unuseful since JRE can inline simple method invoking in  . I am sorry to misunderstand that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,closed,2013-03-25 15:15:03,128.08,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,3,2013-03-25 13:06:58,16.35,,1,,"b'b"" Scala runs on JVMs other than Hotspot and runs (after bytecode translation) under Dalvik. Plus it can take awhile for Hotspot to figure out how to optimize something. I wouldn\'t be so quick to eliminate a static optimization just because Hotspot can do the same thing at runtime.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,reopened,2013-03-25 22:31:57,436.9,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,4,2013-03-25 13:06:58,284.35,,1,,"b""b' @JamesIry Can you opine on the status of this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,5,2013-03-25 13:06:58,1335.77,1,,,"b'b"" Sorry for the delay", I was on vacation. I\'d like to bring this or something like it in," but as @retronym says the commit message doesn\'t give enough context.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,6,2013-03-25 13:06:58,882.65,,1,,"b'b"" @Atry We need the commit message improved here to reflect the motivation and the solution. I\'d also like to see some more documentation in the code to describe the clever use of in  . I\'m going to close the PR for now (our queue is far too full right now)"," but please do reopen after addressing these points.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,closed,2013-05-17 09:14:10,642.22,2,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,7,2013-03-25 13:06:58,1238.97,,1,,"b""b' Instead of manually optimize  s to value class", I propose to allow sealed value trait," e.g.  . See url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2309,closed,-,-,-,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,opened,2013-03-28 17:47:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,title,2013-03-28 17:47:44,00:00,,1,,"b""b' Use java-diff-utils for diffing in partest.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,body,2013-03-28 17:47:44,00:00,,1,,"b'b"" It\'s not clear to me how partest\'s classpath is managed", so I hacked it in. review by @paulp, @phaller," @gkossakowski""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,1,2013-03-28 17:47:44,241.65,,,1,"b'b"" Would be nice to use the [versionMapper]url  facility to strip the from the JAR file so you don\'t need to repeat that all over the place. Disclaimer: I don\'t know how to use that"," I just found it now...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,2,2013-03-28 17:47:44,25.0,,1,,"b'b"" Agreed in principle. I just feel I\'ve had my fill after almost two weeks of XML. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,3,2013-03-28 17:47:44,41.02,,1,,"b""b' In lieu of that"," a comment at at the definition of that version number that points to the spots where it is duplicated would be needed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,4,2013-03-28 17:47:44,51.77,,1,,"b""b' You drive a tough bargain.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,5,2013-03-28 17:47:44,372.87,1,,,"b'b\' Am I the only one that finds commit message of 81c357c insufficient? What ""hack it in"" means here? Also", it\\\'s worth mentioning that the diff format has changed and that\\\'s why one of the test cases was touched.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,6,2013-03-28 17:47:44,310.97,,1,,"b'b\' Do we really need this dependency? What is wrong with running ""diff"" to diff things? Don\\\'t we only use diff to display checkfile differences to humans? Adding a dependency has a high cost when all effects are properly accounted for", as you know. In one of my partest branches (maybe even the one which has a peer pull request to this one) I use git word diff if it\\\'s available, and regular diff otherwise. Even cygwin-or-whatever users will have diff. Why add complexity to the build?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,7,2013-03-28 17:47:44,342.55,,1,,"b'b"" My understanding is that we do quite a lot of diffing so it may not be that efficient to fork a git diff all the time. Maybe it is. I don\'t think this maven dependency is such a huge deal. Invoking external commands is just another", less explicit," dependency with other things that can go wrong.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,8,2013-03-28 17:47:44,3.1,1,,,"b'b"" The new commits are strictly a rewording of the commit message according to Greg\'s review.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,9,2013-03-28 17:47:44,6.53,,1,,"b""b' working on rebasing this onto #2314'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,10,2013-03-28 17:47:44,4.02,,1,,b'b\' I do not think we do quite a lot of diffing. On a successful test run, what diffs are there? There is a lot of string comparing, yes. Then if you have failing tests, there is diffing, but this is hardly something to optimize for. You will never in a million years feel the performance cost of spinning off a couple shells to run diff for your handful of failing tests. The difference between a dependency on j random javalibrary and a dependency on a program which every system already has is that in the latter case," every system already has it. And if there ARE unix-like systems which don\\\'t have ""diff""", well again, this is hardly something to optimize for.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,11,2013-03-28 17:47:44,99.47,,,1,"b'b"" We always check check files.  In my private fastest branch", I added a strcmp before invoking diff, just for fun.  I don\'t know that it helped make fastest faster.  I did try building scala jars with compression turned off, and that took 30 secs off the test suite, which is 30 secs of CPU.  (I haven\'t tested the diff-on-failure tweak in Testicolor yet," due to lazy incompetence.  I\'ll try it on cygwin-or-whatever.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,12,2013-03-28 17:47:44,26.38,1,,,"b'b"" I honestly don\'t see the big deal depending on a 30K jar for an internal testing tool. I think the integration is much nicer than dealing with forking on multiple platforms", acros multiple versions of diff. All that gives is us more potential for spurious test failures. If we worry about the size of our distribution, how about just not distributing partest at all -isn\'t that the end goal anyway? (I.e.," it becomes a separately distributed project.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,13,2013-03-28 17:47:44,9.07,,1,,"b""b' rebased onto #2330 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,14,2013-03-28 17:47:44,42.18,1,,,b'b\' It\\\'s not the size," it\\\'s the existence of an unnecessary dependency. I can\\\'t convince myself that ""diff"" is more likely to create issues than a java lib via maven. We already use diff in partest scripts", as you know, e.g. -. Is it your plan to rip existing usages out and make everything use the java lib? You basically have to do that, or we depend on both, which must be strictly inferior to depending on one or the other. But to be doing that," it does not seem like progress. Will the java lib provide colorized word diffs like git does? I\\\'m not saying I don\\\'t see uses for a java diffing library; I do. And ""big deal"" is your characterization. My position is that it\\\'s suboptimal to ignore ubiquitous tools which can already perform the required task. And that nobody properly accounts for dependencies. I think the typical programmer (present company excepted of course) gauges the cost of a dependency the same way they estimate how long something will take: by envisioning best-case everything from here to eternity.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,15,2013-03-28 17:47:44,19.57,1,,,"b""b' Actually", we assume that a temporal incursion by a hostile alien will reset the time line to a point where the ship has not been destroyed and the captain is still alive and well and living in Nazi-occupied Brooklyn," NY.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,16,2013-03-28 17:47:44,35.9,,1,,"b'b"" My plan is to spend as little time on issues like this as possible while keeping us moving forward. I don\'t want to spend more time on this than I already have.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,closed,2013-03-29 23:46:08,358.4,5,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,reopened,2013-03-29 23:46:11,0.05,5,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,17,2013-03-28 17:47:44,183.78,,,1,"b'b"" LGTM. When it comes to using external diff I think this should be an option and not a default. I know that you can run partest from ant on Windows and I wouldn\'t want to make this more difficult. If this dependency turns out to cause troubles we can always remove it. It\'s not like it\'s being used by some core logic in the compiler. I\'m glad to see that we get rid of copy&pasted implementation of a diff algorithm from our code base.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,18,2013-03-28 17:47:44,0.45,,1,,"b'b"" I\'ll merge once kitten is done with testing rebased commits.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,closed,2013-04-01 01:33:24,107.22,5,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2330,closed,-,-,-,5,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,opened,2013-04-02 10:57:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,title,2013-04-02 10:57:12,00:00,,1,,"b""b' SI-7292 Deprecate octal escape literals'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,1,2013-04-02 10:57:12,5.1,,1,,"b""b' Thread on the mailing list: url The issues in the tests regarding vs. are also mentioned there.@paulp"," could you review it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,2,2013-04-02 10:57:12,539.48,,1,,b'b\' The normalization of slashes in test output was due to backslash in Windows paths. The commit for Testicolor has a comment about a test breaking; apparently," I deferred the issue; but I will give it more thought.  In my other branch I had taken out ""indisciminate [sic] replacement of backslash"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,3,2013-04-02 10:57:12,861.83,,,1,"b'b"" Thanks"," good points. I\'ll fix them in a few hours when I\'m done with the Avian stuff.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,4,2013-04-02 10:57:12,41.53,,1,,"b""b' @paulp", @som-snytt," I updated and pushed the changes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,5,2013-04-02 10:57:12,142.38,1,,,"b""b' @paulp", @som-snytt," updated again. Sorry for the trouble.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,6,2013-04-02 10:57:12,576.2,,1,,"b'b"" LGTM now in terms of the code itself; the remaining question is whether we actually agreed to deprecate them. It wasn\'t clear to me that was the case"," but I wasn\'t that plugged in. Any opinions? @adriaanm @retronym?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,7,2013-04-02 10:57:12,13.52,,1,,"b""b' Dare I point to url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,8,2013-04-02 10:57:12,568.38,,1,,b'b\' @paulp I didn\\\'t receive much (any?) feedback, that\\\'s when I decided to move forward with it.@adriaanm  It is slightly related to the octal literals which have already been deprecated in the sense that they are octal too," but the octal escape literals are even more obscure.In terms of the spec: remove ""A character with Unicode between 0 and 255 may also be represented by an octal escape"," i.e. a backslash \\xe2\\x80\\x98\\xe2\\x80\\x99 followed by a sequence of up to three octal characters."" from ""1.3.6 Escape Sequences"" and "" or the octal escape \\\'\\\\12\\\'"" from ""1.3.4 Character Literals"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,9,2013-04-02 10:57:12,774.73,,1,,"b'b"" I talked to Martin about this and he feels the confusion of straying further from Java on this is more expensive than the gain of cleaning this up in Scala. What\'s the motivation to deprecate this? Does the notation cause problems? Is it a source of bugs? I\'m closing this for now. Please reopen with counter-arguments.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,closed,2013-05-16 21:40:22,643.17,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,10,2013-04-02 10:57:12,30.75,1,,,b'b\' @adriaanm, these are my counter-arguments, but I lack the privilege to reopen this PR, could you do that for me?We got rid of octal literals which are similarly confusing. I have never heard a _single_ person complaining (or even asking) about what happened with octal literals. It\\\'s reasonable to assume that it will be the same for an even more obscure feature.The parsing rules of octal escapes are unintuitive and misleading for unaware readers (e. g. it\\\'s not fixed-length like  , but stops accepting symbols as soon as it encounters some char it doesn\\\'t like. Example: parses as one octal escape literal, parses as an octal escape and (because 8 is not octal, duh), parses as an octal escape and a (  would be valid octal number, but\\xe2\\x80\\x93for whatever reasons\\xe2\\x80\\x93the literal is capped to the first 255 numbers)).Those who want it," can implement it via string interpolation""straying from Java"" is reality already: See Scala\\\'s change to floating point literals", Scala\\\'s removal of octal literals, Java\\\'s addition of binary literals," Java\\\'s addition of underscores-in-literals.If you look at some of our ""competitors""", their literal syntax is even further removed from Java syntax.In general, we need less magic to happen between what-the-developer-writes and what-the-compiler-sees. See the famous let\\\'s-convert-unicode-escapes-in-comments puzzler for a similar case where we are trying too hard to be Java. (Which\\xe2\\x80\\x93again\\xe2\\x80\\x93no other languages even considers emulating.)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,11,2013-04-02 10:57:12,74.25,1,,,b'b\' Hate to say it, but is it worth a  barrier? To me," the issue isn\\\'t ""straying from Java"" so much as ""straying from our \\\'70s geek roots."" I don\\\'t know if they made octal jokes on ""That \\\'70s Show"". Maybe certain features could be enabled if the compiler is invoked with  . I\\\'m going to go google ""Octalpussy"" now and see what comes up. Well", I guess that\\\'s already \\\'80s.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,12,2013-04-02 10:57:12,8.62,,1,,"b'b"" Ok", sounds convincing. Could you do a poll on the mailing lists? If no one speaks up," we can reopen and deprecate in 2.11.0-M4 as far as I\'m concerned. /CC @odersky""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,13,2013-04-02 10:57:12,0.93,,1,,"b""b' (I mean the user lists"," I saw url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,14,2013-04-02 10:57:12,63.72,,,1,"b'b"" @som-snytt I don\'t think it is worth it. We didn\'t do it for octal literals and it went through without issues or complaints. @adriaanm Alright", thanks! I\'ll do it in a few hours," it\'s 02:34 and I really need to catch some sleep.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,15,2013-04-02 10:57:12,13.45,1,,,"b'b"" You didn\'t hear me cry"," They got rid of octal literals! Probably I won\'t need it for the posix permissions in nio.2. But part of me wishes I _did_ need it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,16,2013-04-02 10:57:12,729.63,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,17,2013-04-02 10:57:12,1400.13,,1,,"b""b' @adriaanm The mailing list seems to be in favor of removing it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,18,2013-04-02 10:57:12,676.62,1,,,"b'b"" Sorry I didn\'t know reopening required special permission. I\'ll reopen once the release is out. Don\'t want to steal cycles from that this week.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,19,2013-04-02 10:57:12,13.43,,,1,"b""b' No problem"," thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,20,2013-04-02 10:57:12,732.97,,1,,"b""b' @adriaanm Scala 2.10.2 seems to be out"," can you reopen this PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,21,2013-04-02 10:57:12,183.2,,1,,"b""b' Only mostly out"," but I think we can reopen.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,reopened,2013-06-07 15:08:04,1047.7,5,14,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,22,2013-04-02 10:57:12,264.57,,1,,"b""b' @adriaanm", @som-snytt," @JamesIry Is there anything missing to move this forward?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,closed,2013-06-21 03:00:53,712.82,5,15,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,23,2013-04-02 10:57:12,994.75,,,1,"b""b' so happy this and similar  are going through'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2342,closed,-,-,-,5,15,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,opened,2013-04-08 10:29:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,title,2013-04-08 10:29:14,00:00,,1,,"b'b\' Revert ""SI-6387 Clones accessor before name expansion""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,body,2013-04-08 10:29:14,00:00,,1,,"b""b' This reverts commit 4e10b2c833fa846c68b81e94a08d867e7de656aa. Add relevant tests to pending. Review by @retronym.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,1,2013-04-08 10:29:14,115.38,,1,,"b""b' LGTM The problem we uncovered shows up: where:  "," and '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,2,2013-04-08 10:29:14,22.67,,1,,"b""b' On Mon", Apr 8, 2013 at 4:24 PM," Jason Zaugg notifications@:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,3,2013-04-08 10:29:14,18.58,,1,,"b'b"" Yep"," that\'s what I observed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,4,2013-04-08 10:29:14,1031.1,,1,,"b'b"" FWIW I have a fixed version of the change ready", so if we don\'t need to merge immediately," maybe it\'s ok to close this and open a new one?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,closed,2013-04-09 07:37:19,1268.08,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,5,2013-04-08 10:29:14,122.55,,1,,"b""b' It is preferable to merge the revert first. If for some reason we haveto revert the second fix", we would be back in a clean state. You canjust base your next PR on this one. On 4/9/13," Eugene Vigdorchik notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,reopened,2013-04-09 08:54:08,76.82,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,closed,2013-04-09 09:19:45,25.62,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,reopened,2013-04-09 11:46:59,147.23,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,closed,2013-04-09 17:10:07,323.13,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,6,2013-04-08 10:29:14,748.05,,1,,"b""b' For the record"," this closed url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2367,closed,-,-,-,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,opened,2013-04-30 20:19:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,title,2013-04-30 20:19:13,00:00,,1,,"b""b' SI-6488 Interrupt i/o threads on process destroy'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,body,2013-04-30 20:19:13,00:00,,1,,"b'b"" The previous fix uses ", but should do something orderly. This commit interrupts the threads, which must check isInterruptedbefore attempting further i/o. Similarly, i/o handlers must preserve and communicate interruptedstatus; see the test. There was a recent ML thread on whether there is a judicious use of stop. In this case, the process code owns the threads performing the reads, but also invoke arbitrary callbacks. One could argue that the callbacks are arbitrary and this might be a Coursera exercise so use stop, or inversely," don\'t stop arbitrary callbacks; or stop if the thread is still alive after some period.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,1,2013-04-30 20:19:13,310.47,,1,,"b'b"" That\'s guaranteed to fail 100% of the time"," because it has never been implemented. All implementations I have ever seen throw a  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,2,2013-04-30 20:19:13,114.55,,1,,"b'b\' I misspoke.  I had destroy on the brain.  I\\\'ll correct it to ""stop"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,closed,2013-05-02 07:25:44,666.52,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,reopened,2013-05-03 07:30:28,4.73,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,closed,2013-05-08 23:28:58,958.5,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,3,2013-04-30 20:19:13,390.18,,1,,"b""b' What happened to this pull request?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,4,2013-04-30 20:19:13,247.18,,1,,"b""b' Just stewing a bit.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,5,2013-04-30 20:19:13,4.32,,1,,"b""b' Alright"," this seems to have a become a fashion lately. :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,6,2013-04-30 20:19:13,364.2,1,,,"b""b' Updated to reflect lame comment by @som-snytt. Thread is interrupted tout court", no waiting," and i/o thread ignores both interrupted and i/o exception (if interrupted).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,reopened,2013-05-15 20:10:07,1241.15,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,7,2013-04-30 20:19:13,1.32,,1,,"b'b"" Since the PR has picked up various other commits like burrs when I rebased", I\'ll close this and try," try again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,closed,2013-05-15 20:11:26,1.32,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2478,closed,-,-,-,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,opened,2013-05-04 14:24:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,title,2013-05-04 14:24:33,00:00,,,1,"b""b' makes sense of implicit macros!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,body,2013-05-04 14:24:33,00:00,,1,,"b""b' Supersedes url  review @paulp @retronym'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,1,2013-05-04 14:24:33,4.13,,1,,"b""b' @heathermiller @phaller @milessabin @mandubian @non @tixxit @larsrh please verify that this pull request meets your requirements for macro-based type class materializers  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,2,2013-05-04 14:24:33,20.23,,1,,"b'b"" What is the meaning of all the nomasters? This isn\'t all being backported I take it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,3,2013-05-04 14:24:33,2.33,,1,,"b'b"" Master has an incomplete and incompatible fix to SI-5923 of its own. Also SI-7291 is indeed backported. As almost everything in the PR depends on either of those"," it will be difficult to merge it into master as is. I\'ll submit a follow-up PR once this one gets in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,4,2013-05-04 14:24:33,0.83,,1,,"b""b' The failures are my fault. Will fix.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,5,2013-05-04 14:24:33,30.22,,1,,"b""b' The failures were the fault of the not entirely correct hack put in place to ensure backward compatibility with SI-5353. Now should be fixed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,6,2013-05-04 14:24:33,53.5,,1,,"b'b"" @paulp My attempts to emulate current behavior of SI-5353 for the sake of ultimate backward compatibility haven\'t been very successful"," so once again I propose to just disable in 2.10.x. To quote the commit message for motivation:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,closed,2013-05-04 16:15:49,111.27,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,reopened,2013-05-04 16:15:53,0.07,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,7,2013-05-04 14:24:33,108.77,1,,,"b'b"" Apparently introducing methods in isn\'t binary compatible. Okay"," moving the offending method away from  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,8,2013-05-04 14:24:33,1.25,1,,,"b'b"" You are allowed to add exceptions for that package. Unfortunately wildcards aren\'t supported.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,9,2013-05-04 14:24:33,1.98,,1,,"b'b"" Hmm", okay. Let\'s have it pass all the tests first," and then we can think about prettification.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,10,2013-05-04 14:24:33,75.03,,,1,"b'b"" Well", I just tried it out with Spire\'s Auto type classes. Had to adjust the macros to not take any argument lists and it worked great. This will definitely be quite the feature," thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,11,2013-05-04 14:24:33,148.08,,,1,"b""b' @tixxit Thank you for taking a look!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,12,2013-05-04 14:24:33,19.23,,1,,"b'b"" I\'ll try to test it with Play\'s macro on next week. In those macros", we mainly infer simple typeclass implicits... BTW," I\'ve also seen a few tests showing some potential improvements in resolving implicit requiring implicits and this might be cool ;) Thks for hard work""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,13,2013-05-04 14:24:33,851.82,,1,,"b""b' Oh man"," almost forgot. review @hubertp '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,14,2013-05-04 14:24:33,275.85,,,1,"b""b' LGTM ... awesome work ... many thanks :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,15,2013-05-04 14:24:33,1187.12,,,1,"b""b' +1 from me. Works like a charm for shapeless-contrib. Thank you!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,16,2013-05-04 14:24:33,1286.43,,1,,"b""b' Handling diverging implicit expansions lgtm.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,17,2013-05-04 14:24:33,249.13,1,,,"b'b"" @all Unfortunately we had a disagreement about whether it makes sense to allow implicit macros to affect type inference (as in synthesize Iso\'s). Therefore I\'ve moved the controversial bits into a separate pull request: url  Sorry"," @milessabin ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,18,2013-05-04 14:24:33,9.92,1,,,"b""b' What was the nature of the controversy?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,19,2013-05-04 14:24:33,27.52,,1,,"b'b"" @milessabin Let\'s switch to the discussion of the follow-up pull request to proceed. I\'ll try to get @odersky to elaborate on that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,20,2013-05-04 14:24:33,43.12,,1,,"b'b"" Some feedback from Jason:1) Provide a test for the commit.2) In the pull request explain why isn\'t good enough"," and why we have to scan for undets.3) in the fix to Si-7261 could be simplified.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,21,2013-05-04 14:24:33,1248.57,,1,,"b""b' @retronym et al. Could we please have a review before the 2.10.2-RC1 deadline?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,22,2013-05-04 14:24:33,1227.23,,,1,"b'b"" This cannot be merged now. Also"," do we think merging this right before RC1 is a good idea? I\'m asking reviewers.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,23,2013-05-04 14:24:33,22.08,,1,,"b""b' Can be merged now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,24,2013-05-04 14:24:33,34.42,,,1,"b'b"" Guys", before we exclude this pull request from our 2.10.2 agenda, please note its significant value. On the one hand, this PR fixes an important use case for macros, which will immediately improve user experience for Play, Spire, scalaz and shapeless among others.  On the other hand, it is the key enabler for scala-pickling, which we\'ve managed to successfully port to 2.10.x, solely thanks to this pull request. If this PR doesn\'t get in by 2.10.2, we will have to wait 3 more months to release scala-pickling. Finally this approach has been discussed extensively on reflection meetings, together with Adriaan and Jason. We have arrived at the conclusion that it\'s a good idea," and it should be included into 2.10.x.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,25,2013-05-04 14:24:33,8.92,,1,,"b""b' also /cc @adriaanm '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,26,2013-05-04 14:24:33,14.17,,1,,"b""b' Recent test failures here have nothing to do with this pull request. They are caused by the fact that 2.10.x is currently broken: url  Now I fixed the breakage"," submitted a fix as a pull request url  and rebased this one on top of the fix.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,27,2013-05-04 14:24:33,328.1,,1,,"b'b"" LGTM. This is a big improvement"," and looks to be carefully enacted. You\'ve already addressed my comments from last week.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,28,2013-05-04 14:24:33,10.07,,1,,"b""b' LGTM2. Except for the fact that it will crash into half a dozen works-in-progress of mine"," but such is the life we lead.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,29,2013-05-04 14:24:33,1.35,,,1,"b""b' Thank you! I will do the requested minor changes and push them shortly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,30,2013-05-04 14:24:33,1.12,,1,,"b'b\' Feel free to throw in a backport of devWarning (it hardly merits the word ""backport""", it\\\'s just a line of code.)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,closed,2013-05-11 19:14:20,178.45,4,20,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2494,closed,-,-,-,4,20,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,opened,2013-05-08 14:15:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,title,2013-05-08 14:15:23,00:00,,1,,"b""b' SI-7383 call  in '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,body,2013-05-08 14:15:23,00:00,,1,,"b""b' url  Review by @phaller"," @adriaanm  is meant to be used as a way to capture context like ThreadLocals etc and then reinstating them when the the Runnable is executed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,1,2013-05-08 14:15:23,61.6,,1,,"b""b' 2.10.x is merged to master as a matter of course"," no extra PR is required.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,2,2013-05-08 14:15:23,1.18,,1,,"b""b' Can you please expand the commit comment with a quick mention of the _why_ of this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,3,2013-05-08 14:15:23,8.62,,1,,"b""b' Added comment'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,4,2013-05-08 14:15:23,52.45,,1,,"b""b' LGTM!I guess the comment could be part of the commit message"," not only the PR summary.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,5,2013-05-08 14:15:23,354.52,,,1,"b""b' Closing this PR so that the commit message will be prettier'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,closed,2013-05-09 22:13:45,478.37,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,reopened,2013-05-09 22:19:33,5.8,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,6,2013-05-08 14:15:23,6.35,,,1,"b""b' Reopened due to Github being awesome. Better commit message inc.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,7,2013-05-08 14:15:23,644.53,,1,,"b""b' @phaller: can you have another look?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,8,2013-05-08 14:15:23,262.1,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,9,2013-05-08 14:15:23,496.0,,1,,"b""b' LGTM"," too.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,closed,2013-05-15 00:00:54,101.35,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2502,closed,-,-,-,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,opened,2013-05-10 18:01:24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,title,2013-05-10 18:01:24,00:00,,1,,"b""b' General SIP-14 Future method implementation cleanup'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,body,2013-05-10 18:01:24,00:00,,1,,"b""b' Cleaning up implementations of Future methods to try to keep method size down to allow for easier JIT-ing (smaller method sizes) and increasing code reuse. Review by: @adriaanm & @phaller'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,1,2013-05-10 18:01:24,392.0,1,,,"b'b\' suggested commit message: ""Faster Future: reduce byte code of its methods [explanation about JIT-ing etc goes here]""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,2,2013-05-10 18:01:24,1344.98,1,,,"b'b"" Aside from repeating my request for documenting the reasoning about the optimization", I\'m not qualified to LGTM this. We\'re already a week past the 2.10.2 deadline," so I\'m afraid this will have to wait.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,3,2013-05-10 18:01:24,1188.92,1,,,"b""b' Commit message updated'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,4,2013-05-10 18:01:24,1263.52,,1,,"b""b' @adriaanm", @phaller," is this ready to go?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,5,2013-05-10 18:01:24,333.03,,1,,"b""b' I defer to @phaller.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,closed,2013-06-06 10:20:59,979.58,3,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,6,2013-05-10 18:01:24,777.98,,,1,"b'b"" I\'m closing this for a little while", I am working on the feedback and have discovered some issues in the TCK that I am addressing before reopening," thanks for all the feedback!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,reopened,2013-06-07 19:47:09,566.17,3,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,7,2013-05-10 18:01:24,567.45,,1,,"b""b' Reopening this ticket. Addressed all comments AFAICT but also rewrote and fixed an arguably quite suboptimal test suite. @phaller"," @retronym please let me know what you think'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,8,2013-05-10 18:01:24,201.85,,1,,"b""b' PLS SYNC'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,9,2013-05-10 18:01:24,1101.75,,1,,"b'b"" @phaller"," @retronym: What\'s the status of this PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,10,2013-05-10 18:01:24,203.8,,,1,"b'b"" Can you please separate the refactoring of the test suite from the refactoring of the implementation? They should arrive in separate commits", for our reviewing pleasure :) Sorry about asking for the busy work," but our usual mild paranoia really must be amplified when we\'re dealing with concurrency.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,11,2013-05-10 18:01:24,24.85,,1,,"b""b' Done'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,12,2013-05-10 18:01:24,1011.98,,1,,"b'b"" I\'ll have another look as soon as I\'m at a quiet place with wifi (currently on vacation where these things are not always readily available)"," which is probably going to be this evening.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,13,2013-05-10 18:01:24,837.95,,1,,"b""b' Apart from the above nitpick"," LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,14,2013-05-10 18:01:24,576.32,1,,,"b""b' Considering the massive amount of Boyscouting and cleanup and the extremely long time it has taken to get this PR accepted"," could I have some slack for the line of code which already contains an ugly cast @phaller ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,15,2013-05-10 18:01:24,33.4,,,1,"b'b"" OK", sure! I agree," it\'s (very) fine to merge.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,16,2013-05-10 18:01:24,0.08,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,17,2013-05-10 18:01:24,4.37,,,1,"b""b' Thanks :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,18,2013-05-10 18:01:24,20.15,,1,,"b""b' Ok"," who does the honors?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,19,2013-05-10 18:01:24,4.63,,,1,"b""b' Can you merge"," @adriaanm? Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,closed,2013-06-25 00:39:39,292.5,4,12,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2511,closed,-,-,-,4,12,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,opened,2013-05-22 21:03:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,title,2013-05-22 21:03:27,00:00,,1,,"b""b' SI-7265 Buy some time to fix '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,1,2013-05-22 21:03:27,1222.17,1,,,"b'b\' ""I\\\'ve forgotten why split was deemed too high-level?"" split is the same as using a regex", and apparently regexes drag in a lot.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,2,2013-05-22 21:03:27,279.25,,1,,"b'b"" Going to close this PR this week unless it gets updated. It\'s had pending review comments for over 10 days.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,3,2013-05-22 21:03:27,1061.47,1,,,"b'b"" @adriaanm Sorry", broken nose, hospital, etc... Reading through the comments, I don\'t see stuff which would be applicable to the issue here. (I sympathize with the version which takes integers instead of a string, but that doesn\'t really fix the issues with the string-based one," does it?)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,4,2013-05-22 21:03:27,551.28,1,,,"b'b"" @soc"," sorry to hear it! Hope it\'s healing well!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,5,2013-05-22 21:03:27,1.13,,1,,"b'b"" I\'m still in favor of my oneliner as opposed to the convoluted status quo (before this PR).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,6,2013-05-22 21:03:27,113.47,,1,,"b'b"" @soc my condolences", too.  I guess you have to be pretty careful how you give feedback on github," you never know how it will be received.  I\'d also suggest preferring one-line to involution or convolution. The one line does give different answers for and  .  Maybe the is a typo for  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,7,2013-05-22 21:03:27,484.42,,1,,"b""b' The thing is that if you want to make that one-liner work reliably", you end up with exactly the change which was rejected before. So we have either Something easy which will breakSomething imperative, which works," but was already rejectedSomething which uses regexes and pulls in tons of dependencies'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,8,2013-05-22 21:03:27,669.77,,1,,b'b\' Here is something between a 1-liner, the 3-liner requested by @paulp and the original forty-niner I mean forty-liner. url  There\\\'s a shorter take that assumes , and a longer version that takes as many parts as you want to try to compare against whatever the actual version string is.  I preserve the original strategy of taking the numeric prefix of the part for purposes of comparison," so ""0_52"" is 0","5b"" is 5, ""b"" is 0. I think somewhere in the repo is version munging logic for the sbt build, or similar endeavor.\''
scala	2580	closed	9	soc	2013-05-22 21:03:27	31.92		+1		b'b"" I don\'t want to imagine how many classes this creates for something as trivial as comparing a version number ...""'
scala	2580	closed	10	paulp	2013-05-22 21:03:27	32.53		+1		b""b' Hey everyone, what are we doing?  '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,11,2013-05-22 21:03:27,145.3,,1,,"b""b'   A little spec humo(u)r.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,12,2013-05-22 21:03:27,486.82,,1,,"b'b"" So @soc would you like to take a shot at this based on "," which makes it easy unless you\'re trying to future-proof against java 10.x.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,13,2013-05-22 21:03:27,470.9,,1,,"b'b"" @soc: what\'s the status of this PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,14,2013-05-22 21:03:27,324.95,,,1,"b'b"" @gkossakowski Without @paulp \'s help we can\'t figure out how to perform the calculation in acceptable time and space such that the code is maintainably write-once read-many!  But maybe @soc will bounce back. Maybe there\'s a  method that could be made public.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,15,2013-05-22 21:03:27,841.03,,,1,"b'b"" Not sure about a good solution ... I\'ll close it and will reopen if I or someone else has a new idea.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,closed,2013-06-20 12:59:51,956.4,3,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,reopened,2013-06-20 13:00:26,0.58,3,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,16,2013-05-22 21:03:27,1.7,,,1,"b'b"" Wait", isn\'t this just the temporary fix?Ok, my suggestion is to merge it as-is (it is just adding a few version strings)," until we figure out a nicer implementation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,17,2013-05-22 21:03:27,228.73,,,1,"b'b"" I\'ll have a PR in a minute after I figure out how to submit against 2.10 under the new github interface", argh.  The PR includes a junit test! ha!  That\'s great.  And corrects the scaladoc in this PR, which is backward. :8ball:  I\'m not sure I\'m using 8ball correctly," but github suggested it.  I kind of want my old github back.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,closed,2013-06-20 18:15:54,315.47,3,11,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2580,closed,-,-,-,3,11,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,opened,2013-05-27 12:29:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,title,2013-05-27 12:29:14,00:00,,1,,"b""b' Add  method'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,1,2013-05-27 12:29:14,3.3,,1,,"b""b' I did sign the CLA'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,2,2013-05-27 12:29:14,254.37,,1,,"b'b\' Needs more documentation instead of just ""Return coarsest value or self"," for example 60 minutes will be converted into 1 hour."" What does ""coarsest value"" mean? The example suggests something"," but perhaps you mean something more like ""an equivalent duration with the coarsest possible unit"" rather than ""coarsest value""  Also should be clear on when it returns self. Finally", needs a few tests.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,3,2013-05-27 12:29:14,38.15,,1,,"b'b"" To clean out the queue a bit"," I\'m going to close pending rework on the comments. Feel free to reopen when it\'s ready.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,closed,2013-06-03 17:25:03,295.82,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,4,2013-05-27 12:29:14,398.65,,1,,"b""b' (Or", add a comment asking us to reopen," as I think that privilege is reserved for core committers.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,5,2013-05-27 12:29:14,646.9,,1,,"b'b"" Going to finish this"," but don\'t understand where should I put my test file. Could someone give me a hint where should I look?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,6,2013-05-27 12:29:14,44.98,,1,,"b""b' @adriaanm"," @JamesIry could you reopen pull request?Commit is here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,reopened,2013-06-08 11:35:51,1090.8,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,7,2013-05-27 12:29:14,0.7,,1,,"b""b' See  (or "," but hopefully these will be merged before long) for numerous test examples.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,8,2013-05-27 12:29:14,1.25,,1,,"b""b' @paulp Could you verify? I added tests to /'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,9,2013-05-27 12:29:14,1.2,,,1,"b'b\' ""pos"" tests aren\\\'t run (that\\\'s why there are no checkfiles in )"," they are only to test the compiler for a ""pos""itive outcome. Similarly","neg"" are to confirm that things fail. You want ""run"".\''
scala	2602	closed	10	paulp	2013-05-27 12:29:14	0.83		+1		b'b\' Okay, ""no checkfiles"" for medium-ish values of none. They\\\'re all bogus though.\''
scala	2602	closed	11	t3hnar	2013-05-27 12:29:14	10.42		+1		b""b' What do you mean by?'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,12,2013-05-27 12:29:14,3.9,,1,,b'b\' I meant I looked in pos and found about ten .check files," so I was correcting my previous statement ""there are no checkfiles in pos.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,13,2013-05-27 12:29:14,2.15,,1,,"b""b' Ah"," clear....So commit ready for review'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,14,2013-05-27 12:29:14,298.17,,1,,"b""b' You could just lose the check file.  This form keeps expected close to the actual"," like a regular unit test.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,15,2013-05-27 12:29:14,55.1,,1,,"b'b"" @som-snytt", it won\'t verify that toCoarsest method works correctly," as  Because equal method designed this way: However I  got your point:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,16,2013-05-27 12:29:14,34.92,,,1,"b'b"" Ha", yes," it helps to assert something useful. I\'m glad the point wasn\'t lost.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,17,2013-05-27 12:29:14,12.82,,,1,"b'b"" Since warnings make it into the ", you\'ll want to enable postfixOps.  For the record, I had to grit my teeth typing ms out in all caps, so," a nice change in style.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,18,2013-05-27 12:29:14,9.47,,1,,"b'b"" But I don\'t understand why build fails...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,19,2013-05-27 12:29:14,21.1,,1,,"b'b"" You can just git rm since it is empty. The previous build failed because the compile output is also compared against the check", so the test must compile cleanly," or the warning output can be put in the check (since sometimes you\'re actually looking for a warning).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,20,2013-05-27 12:29:14,23.48,,1,,"b""b' Ah.. :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,21,2013-05-27 12:29:14,78.43,,1,,"b""b' Additional review", please," by @rkuhn (who was involved in the version of this code back when it used to call Akka home.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,22,2013-05-27 12:29:14,611.28,,1,,"b""b' @rkuhn"," are you saying about something like:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,23,2013-05-27 12:29:14,306.72,,1,,"b""b' yes"," exactly (apart from the last case which need more MICROSECONDS). With that it LGTM. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,24,2013-05-27 12:29:14,114.78,,,1,"b'b"" Ha", I coded it for fun yesterday, and the use case was not missing any of the units! url  You might want to add the test cases," though.  I also added text to the assert so when it fails it\'s easy to see which case failed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,25,2013-05-27 12:29:14,2.93,,,1,"b'b\' The following seems to be missing from the API: val d = Duration(""1 Mississippi"") That is how children at play count seconds"," plus or minus depending on whether they are ""it."" (Yesterday\\\'s joke.)\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,26,2013-05-27 12:29:14,5.1,,,1,"b'b"" Sober comment: it\'s a tiny bit surprising that Duration fromNanos 0 yields 0 Day", and similar for toCoarsest. This is as promised, but seems unintuitive.  Maybe people who deal with units all the time know how to handle it.  Naively, I\'d expect 0 nanos," because 0 < 1000.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,27,2013-05-27 12:29:14,43.08,,1,,"b""b' I added  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,28,2013-05-27 12:29:14,106.75,,1,,"b""b' @som-snytt: should force the result to be given in nanos? The unit chosen is the coarsest which can accurately describe the time interval for this reason.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,29,2013-05-27 12:29:14,295.58,1,,,"b""b' @rkuhn I see", thanks.  My intuition was wrong because durations have to be expressible in nanos; there is no sense of loss of precision.  I can tell the duration limit has special significance because the cases use the unicode arrow. Sometimes when visiting a shrine," one sees an ancient symbol and is overcome with a sense of history.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,30,2013-05-27 12:29:14,1250.63,,1,,"b""b' Reviewers"," where are we on this PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,31,2013-05-27 12:29:14,869.0,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,32,2013-05-27 12:29:14,1.72,,1,,"b""b' @rkuhn might have an opinion on  eq zero"," but you could always (d + zero).toCoarsest. LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,33,2013-05-27 12:29:14,3.7,1,,,"b""b' @som-snytt what do you mean? should be true"," and should always have the same unit as  ; or did I misunderstand?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,34,2013-05-27 12:29:14,9.65,,1,,"b""b' I meant the length == 0 test means 0 is Nanos"," unlike Duration fromNanos 0.  I might fall asleep before I can test that addled adding.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,35,2013-05-27 12:29:14,189.22,,1,,"b""b' @som-snytt", my Idea is if the Duration is coarsest do not change it," thus not change the Unit for zero duration as well.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,36,2013-05-27 12:29:14,321.83,,,1,"b""b' Merging since it was signed off by both reviewers. Congrats on your first merge to "," @t3hnar!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,closed,2013-06-18 17:41:50,365.98,2,28,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2602,closed,-,-,-,2,28,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,opened,2013-06-06 11:43:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,title,2013-06-06 11:43:50,00:00,,1,,"b""b' SI-7151 Emit final in bytecode for final inner classes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,body,2013-06-06 11:43:50,00:00,,1,,"b""b' As we did before a regression in 18efdedfb / SI-5676. This commit tightens up the condition in which the FINALmodifier is omitted; it now _only_ does this for the moduleclasses of nested objects. Review by @JamesIry'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,1,2013-06-06 11:43:50,17.42,,,1,"b""b' Closing and submitting against 2.10.x; this was a regression from 2.9.2 to 2.10.0"," so it would be nice to deliver the fix in 2.10.3.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,closed,2013-06-06 12:02:11,18.35,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,reopened,2013-06-07 19:54:34,472.38,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,2,2013-06-06 11:43:50,433.75,,1,,"b""b' @JamesIry could you please re-review now that I have targeted master?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,3,2013-06-06 11:43:50,38.28,,1,,"b""b' @JamesIry: ping'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,4,2013-06-06 11:43:50,3.75,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,closed,2013-06-19 19:58:38,4.07,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2635,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,opened,2013-06-06 13:01:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,title,2013-06-06 13:01:03,00:00,,1,,"b""b' SI-7439 Avoid NPE in with stub symbols. \\xe2\\x80\\xa6'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,body,2013-06-06 13:01:03,00:00,,1,,"b""b'   can return null for stub symbols; deal with thatas we used to before a regression in 016bc3d. After this change", we can once again delete A_1.class and still compilecode instantiating B_1. (A_1 is only referred to in a method signatureof B_1 which is not called from our code.) In practice," this situation arises when someone uses a thirdparty class that was compiled against other libraries not avaialableon the current compilation classpath. Review by @paulp'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,1,2013-06-06 13:01:03,17.33,1,,,"b""b' Oops. I wonder what made me think that was safe.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,2,2013-06-06 13:01:03,517.78,,1,,"b""b' Closing for a moment; I need to make the test less fiddly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,closed,2013-06-08 21:56:10,535.12,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,reopened,2013-06-13 15:52:39,1076.48,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,3,2013-06-06 13:01:03,1247.53,,1,,"b""b' @paulp Fixed the test"," ready for a rubber stamp...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,4,2013-06-06 13:01:03,175.55,,,1,"b""b' Last call for the review train"," all aboard!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,5,2013-06-06 13:01:03,11.05,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,6,2013-06-06 13:01:03,0.38,1,,,"b""b' Sorry about the inattention.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,closed,2013-06-23 21:50:45,358.1,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2637,closed,-,-,-,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,opened,2013-06-12 09:44:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,title,2013-06-12 09:44:39,00:00,,1,,"b""b' SI-6221 inference with Function1 subtypes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,body,2013-06-12 09:44:39,00:00,,1,,"b""b' There appears to be no upper bound on the number of places we have to removecalls to typeSymbol and introduce calls to baseType. This one was typeinference for function parameter types: worked when expected type was A =but not if there was an implicit conversion from A ='""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,1,2013-06-12 09:44:39,242.92,,1,,"b'b"" Here\'s also one more test case:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,2,2013-06-12 09:44:39,1241.02,,1,,"b""b' Review by @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,3,2013-06-12 09:44:39,172.52,,1,,"b'b"" How about pattern matching anonymous functions? I\'m actually in two minds about this one. It seems quite useful"," but it feels a bit sketchy to infer the parameter types based on the base type just to leave things open for an implicit to finish the job.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,4,2013-06-12 09:44:39,18.22,,1,,"b'b\' What is the rest of the ""how about"" ? Pattern matching anonymous functions are still Function1", right? These non-uniformities which arise when one tries to accomplish something via implicit method instead of extension are huge friction contributors.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,5,2013-06-12 09:44:39,86.22,,1,,"b'b"" I\'d like to see tests for a pattern matching anonymous function with an expected type of  "," and one with expected type of  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,closed,2013-06-14 03:42:05,1077.43,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,reopened,2013-06-14 04:11:31,29.43,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,6,2013-06-12 09:44:39,294.0,,1,,"b'b"" @paulp: what\'s the status of this PR? Are we waiting for additional tests?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,7,2013-06-12 09:44:39,43.92,,1,,"b'b"" I\'d like to discuss this one in the broader context of SAM types. /cc @JamesIry @adriaanm ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,8,2013-06-12 09:44:39,480.77,,,1,"b'b"" Just a short note + some context on this PR. The resolution of this ticket is essential for spores to be able to be integrated into Spark. Without this", we lose the ability to support a lot of existing Spark programs (as most folks rely upon type inference for function literals when passing them to Spark combinators). The reason this ticket is relevant is because the goal was for Spark to provide an implicit conversion from Function1 to Spore. Not resolving this before 2.11 would likely mean not having Spark on board as a user of spores (initially, Spark was the motivating use-case, and would be a huge user of spores). On the topic of the broader context of SAM types\\xe2\\x80\\x93 sure, it\'s a great question, and we will eventually need to solve the problem of type inference for general SAM types once the need for Java 8 support draws nearer. But, when chatting with @adriaanm at ScalaDays about how to approach this issue from an  standpoint, since spores could immediately reap those benefits, the sentiment was that that this would be very unlikely before 2.11. Given that," I think it\'s essential that we have something in trunk (at some point before the release of 2.11) which will address the (less general) issue raised in this ticket so we can at least have type inference for spores.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,9,2013-06-12 09:44:39,11.23,,,1,"b""b' +1 this will be a boon to Spark.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,10,2013-06-12 09:44:39,20.5,,,1,"b""b' A partial fun test would be good"," but the implementation LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,11,2013-06-12 09:44:39,1.42,,1,,"b'b"" Also", SAM types are on our TODO for M4/5, but this can go in already," I\'d say.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,12,2013-06-12 09:44:39,1121.68,,1,,"b'b"" So", I\'ve been thinking about this and it\'s a pure bug fix to me. Whenever you see symbol tests followed by extraction of type arguments, it\'s a bug and is the fix. This is related to SAM types (I\'m working on those next week), but I don\'t see any way in which it could interfere. I\'ll leave another day for reviewing," but merging tomorrow unless I hear opposition.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,13,2013-06-12 09:44:39,521.27,,1,,"b'b"" The compiler is only able to synthesize the exact type of  . I find it analogous to this implicit search: We don\'t try in the hope that we can adapt the result with an implicit  . You could imagine that SAM support might provide a into the search. The spec seems to be pretty intentional with requiring an exact type:I can definitely see the utility of this change"," but I\'m concerned about the ad-hoc-iness.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,14,2013-06-12 09:44:39,2.32,,1,,"b""b' The interference with SAM types might come if the SAM type was itself a subclass of  . Would SAMs be tried before or after this approach?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,15,2013-06-12 09:44:39,846.45,,1,,"b""b' This somehow breaks a refactoring test in the IDE. url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,16,2013-06-12 09:44:39,16.63,,1,,b'b\' As far as the spec goes," I think it\\\'s reasonable to interpret ""a type T is of the form TC[U1",...," UN]""as taking from  .\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,17,2013-06-12 09:44:39,3.4,,1,,"b""b' We should not consider a SAM type a subtype of the corresponding FunctionN type since that will create problems with overloading. The SAM functionality I propose is purely target-typing as in PartialFunction synthesis: when the expected type is a SAM type", and we have a Function, synthesize an instance of the SAM type with its method given by the Function body," similar to what we do when expecting a PartialFunction with a Match in hand.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,18,2013-06-12 09:44:39,7.38,1,,,"b'b"" Sorry", could you elaborate a bit on your example? The implicit isn\'t found because is not a subtype of the expected  . I don\'t see how that relates to SAM typing (under the assumption that SAM typing does not affect subtyping in any way -it\'s just a convenience in synthesizing anonymous classes based on expected type," like for PartialFunction).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,19,2013-06-12 09:44:39,4.45,,1,,"b""b' (pending) LGTM"," in other words :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,20,2013-06-12 09:44:39,536.77,1,,,"b'b"" I was wondering about what might happen if you has a SAM type that happened to subclass the existing Function types. That is the what is handle by this patch pre-SAM-support: the compiler will adapt use base type at to infer the parameter type", and hope it can adapt the result to the subtype with an implicit view. Where would the adaptation to SAMs live? We need to extract the parameter type to drive inference, so the typing of Function nodes has to be SAM aware; we can\'t wait for  . My example with was trying to model the compilers synthesis of and with a typeclasses. With such an approach, I wouldn\'t expect a creator of to step up to the plate when I\'m really after a  ," and of course type inference doesn\'t suggest that. What error message will we give under this patch for the following? I\'m worried it will be   I would prefer to err on the side of conservatism and SIP this change together with SAMs. Maybe we can discuss on Tuesday?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,21,2013-06-12 09:44:39,29.18,,,1,"b'b\' Adriaan writes: ""As far as the spec goes"," I think it\\\'s reasonable to interpret ""a type T is of the form TC[U1",...," UN]""as taking U1",...," UN from ().typeArgs."" I agree. In fact that seems to be already the case for PartialFunction. So I believe the change is good to go. I believe once we go for SAM types we should change the spec to something like this: If the expected type of the anonymous function is a SAM type with a single abstract methodof type (S1", ..., Sn)R, the expected type of e is R and the type Ti of any of the parameters xi can be omitted, inwhich case Ti = Si is assumed. If the expected type of the anonymous function is someother type, all formal parameter types must be explicitly given, and th expected type ofe is undefined. Question: How to handle SAM types with polymorphic applies? Right now I do not see how we could accommodate them. No way to infer the type parameter and no way to write it either. But that\\\'s a restriction we could live with IMO.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,22,2013-06-12 09:44:39,6.25,,1,,"b'b"" I\'ll withdraw my objection for now then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,23,2013-06-12 09:44:39,478.32,1,,,"b'b"" @retronym you were in the right ballpark: As opposed to without this patch: We may have beaten him into submission"," but it sure does make me nervous to proceed with something jason thinks is boneheaded (not that he\'d put it that way.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,24,2013-06-12 09:44:39,646.28,,1,,"b'b"" Agreed"," I\'ll defer merging until we can discuss this in the meeting.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,25,2013-06-12 09:44:39,157.93,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,26,2013-06-12 09:44:39,3.32,,1,,"b""b' I agree the snippet below is problematic. The error should be about not being a  .  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,27,2013-06-12 09:44:39,3.45,,1,,"b""b' Prototype: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,28,2013-06-12 09:44:39,113.6,1,,,"b""b' @retronym", I see what you mean now regarding the confusion with SAM types that extend FunctionN. I propose the following rule:1. If the expected type is a SAM but not itself, use the SAM translation (derive parameter types from the sam method).2. Else, if the expected type is a subtype of  ," use the regular Function translation (derive parameter types from -as implemented by this PR)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,29,2013-06-12 09:44:39,53.27,1,,,"b'b"" Sounds okay", other than cases like  . But I doubt that would come up much in practice. Incidentally," what\'s our story for SAMs vs existing implicit conversions? Would we try the SAM before or after implicits? (Or at the same time?)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,30,2013-06-12 09:44:39,404.23,,1,,"b'b"" We\'ve been thinking that SAMs should come after becausea) a user imported implicit may be something more specific that the user really wants"," andb) using SAMs before implicits could break existing code""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,31,2013-06-12 09:44:39,25.67,,1,,"b'b"" In this implementation", SAM conversion actually comes first.Traits aren\'t supported yet, but Btw," have a look at url  for the three test failures that may shed some light on the change in behavior.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,32,2013-06-12 09:44:39,93.1,,1,,"b""b' FYI: I started a thread discussion our definition of a SAM: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,33,2013-06-12 09:44:39,229.85,,1,,"b""b' IDE validation running at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,34,2013-06-12 09:44:39,310.8,,1,,"b""b' This will soon be subsumed by sammy.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,closed,2013-07-05 02:53:00,1361.48,5,27,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,35,2013-06-12 09:44:39,1407.98,,1,,"b""b' (where sammy == url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,reopened,2013-07-08 15:28:20,755.33,5,28,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,36,2013-06-12 09:44:39,787.68,,1,,"b'b"" I won\'t get my branch in shape in time for 2.11.0-M4"," so let\'s already get this in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,37,2013-06-12 09:44:39,456.27,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,closed,2013-07-08 23:05:06,456.77,5,30,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,38,2013-06-12 09:44:39,632.13,,,1,"b""b' :D![]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,39,2013-06-12 09:44:39,273.02,,,1,"b""b' Haha", that is exciting! So is the idea that with this change, we can have an API that takes Spore," but still add an implicit conversion macro from Function1 to Spore? That definitely sounds doable.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,40,2013-06-12 09:44:39,391.9,1,,,"b""b' Spore will need to extend in addition to having that implicit conversion. But yeah"," you can rig this up.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,41,2013-06-12 09:44:39,502.08,,1,,"b'b"" We\'re planning to add Java 8-style SAM support to Scala"," so the compiler will synthesize the anonymous subclasses of SAM types based on a provided function literal.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,42,2013-06-12 09:44:39,502.57,,1,,"b""b' (Implementation is here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,43,2013-06-12 09:44:39,505.55,,1,,"b'b"" @mateiz yes"," that\'s the goal. A revision of the SIP is soon forthcoming as well as a revised implementation to go along with the SIP revisions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2650,closed,-,-,-,6,33,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,opened,2013-06-13 18:39:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,title,2013-06-13 18:39:03,00:00,,1,,"b""b' SI-7433 Fix spurious warning about catching control throwable'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,body,2013-06-13 18:39:03,00:00,,1,,"b""b' In the same vein as SI-6994", such warnings should only be runin the typer phase, and not in later typechecking (usually inerasure.) Why? After translation of pattern matching," we end up with: Review by @gkossakowski'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,1,2013-06-13 18:39:03,1185.98,,1,,"b""b' @retronym: it seems like you have a real test failure:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,2,2013-06-13 18:39:03,1.87,,1,,"b""b' Please reopen once the test failure is addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,closed,2013-06-14 14:26:55,1187.87,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,reopened,2013-06-23 21:17:02,410.12,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,3,2013-06-13 18:39:03,411.42,,1,,"b""b' @gkossakowski This patch has a better shot at correctness '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,4,2013-06-13 18:39:03,534.62,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,closed,2013-06-24 06:13:03,536.02,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2653,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,opened,2013-06-21 23:30:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,title,2013-06-21 23:30:58,00:00,,1,,"b""b' Modularize parsing'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,1,2013-06-21 23:30:58,1.95,,1,,"b'b"" this depends on the #2667 (to avoid conflicts in )"," will rebase once that\'s merged""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,2,2013-06-21 23:30:58,0.22,,1,,"b""b' review by @soc '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,3,2013-06-21 23:30:58,0.7,,1,,"b'b"" I\'ll also create an eclipse project before merging this PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,4,2013-06-21 23:30:58,15.23,,,1,"b'b"" Looks pretty good to me", although I wonder whether the rest of isn\'t pretty pointless now ... Wouldn\'t it make more sense to keep and get rid of instead? Edit: Having looked into it, I definitely think that the one in should be kept. The package is pretty much consistent and self-contained and not some bag of random functionality like  .In fact," I\'m currently cleaning up to use the functionality of and the results look promising. See url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,5,2013-06-21 23:30:58,24.73,,,1,"b'b"" Ok", cool. Make sure to also look at what the IDE & SBT are using," if anything. I\'ll close this PR in the mean time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,closed,2013-06-22 00:13:49,42.85,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,6,2013-06-21 23:30:58,1.93,,1,,"b'b"" @adriaanm What\'s your plan? Do you want to push the XML stuff forward first?I can pick up your parser changes and incorporate them into my partest improvements"," if you want.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,7,2013-06-21 23:30:58,18.03,,,1,"b'b"" Sounds good", thanks. Yeah, I\'ll do the xml one first. I\'m busy with lifethis weekend, so it\'ll have to wait until next week. Also need tocoordinate with SBT and IDE. On Friday, June 21,2013," soc wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,8,2013-06-21 23:30:58,173.08,,1,,"b'b"" @soc FWIW", a branch using command-line paulptions.  url  Whenever I see another CLI option lib, I wish paulptions was standalone. Yes, I just started calling it paulptions a second ago," and now I can\'t stop.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,9,2013-06-21 23:30:58,731.73,,,1,"b'b"" Ah nice", yes," that\'s what I meant.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,10,2013-06-21 23:30:58,126.47,,1,,"b'b"" @soc"," I\'m assuming I\'ll push this to the finish line unless I hear otherwise.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,11,2013-06-21 23:30:58,3.18,,,1,"b'b"" Yes", sure that would be nice ... my workstation display died today, which has a negative effect on my productivity. There wasn\'t much left to do anyway, right? Except the thing," it looked pretty good.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,12,2013-06-21 23:30:58,10.1,,,1,"b""b' Ok. Hope you get a  display soon!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,13,2013-06-21 23:30:58,2.03,1,,,"b'b"" To be clear", I don\'t plan on reworking partest more than I absolutely have to," so I intend on shipping this PR as-is (modulo addition of the forgotten bnd file). I think the first step should be a minimal rewrite that allows us to cut some cords. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,reopened,2013-06-24 18:00:31,1066.7,1,7,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,14,2013-06-21 23:30:58,20.82,,1,,"b""b' @adriaanm What I meant was we should just switch our treatment for and  .Instead of deleting and fixing  "," apply the fixes to and delete  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,15,2013-06-21 23:30:58,1369.67,,1,,"b""b' Ok", this is ready for re-review, @soc. /cc @harrah," @huitseeker'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,16,2013-06-21 23:30:58,0.63,,1,,"b""b' Note that this does not change which jars we build"," but it does change some of the internal api in '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,17,2013-06-21 23:30:58,20.15,,1,,"b'b"" LGTM.  sbt doesn\'t use CommandLine\\\\* that I know of or could find.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,18,2013-06-21 23:30:58,184.78,1,,,b'b\' @adriaanm My recommendation is to keep using as a name, it will reduce the amount of unrelated changes due to the rename. Additionally, I think it would make sense to move to  , too. Anyway, I\\\'m a bit confused ... everything you need is in already," why refactor stuff which has been marked as ""obsoleted by  ""? Nevertheless", let\\\'s get this moving.LGTM, I\\\'ll do the remaining cleanup afterwards.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,19,2013-06-21 23:30:58,12.82,,,1,"b""b' I wanted to move away from since we have one of those and it does a very different thing.Have to change package names anyway.. Thanks for the prompt reviews guys!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,20,2013-06-21 23:30:58,3.83,1,,,"b'b"" Sorry"," I don\'t follow. The only changes under  are removals and name changes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,21,2013-06-21 23:30:58,45.65,,1,,"b""b' d863c715 [ok for IDE]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,closed,2013-06-27 22:05:38,245.12,3,12,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2669,closed,-,-,-,3,12,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,opened,2013-06-28 17:11:04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,title,2013-06-28 17:11:04,00:00,,1,,"b""b' Merge 2.10.x into master'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,body,2013-06-28 17:11:04,00:00,,1,,"b""b' Review by @gkossakowski'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,1,2013-06-28 17:11:04,8.4,,1,,"b'b"" @adriaanm: it looks like you made some mistake while doing merge conflict resolution. Please reopen once that\'s fixed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,closed,2013-06-28 17:19:28,8.4,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,reopened,2013-06-28 18:22:42,63.23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,2,2013-06-28 17:11:04,64.35,,1,,"b""b' ping @gkossakowski '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,3,2013-06-28 17:11:04,27.72,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,closed,2013-07-01 18:51:37,28.92,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2694,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,opened,2013-07-05 15:18:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,title,2013-07-05 15:18:31,00:00,,1,,"b""b' SI-7624 Fix -feature and some -Xlint warnings'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,body,2013-07-05 15:18:31,00:00,,1,,"b""b' Changes  to build Scala with enabled.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,1,2013-07-05 15:18:31,7.08,1,,,"b'b"" I have not modified BCode-related source files"," because I don\'t want to cause any trouble when @magarciaEPFL pushes the next round of improvements.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,2,2013-07-05 15:18:31,8.52,,1,,"b""b' Review by @adriaanm/@phaller.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,closed,2013-07-05 15:34:15,15.73,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,reopened,2013-07-05 15:34:25,0.17,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,3,2013-07-05 15:18:31,660.57,,1,,"b""b' IDE validation running at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,4,2013-07-05 15:18:31,0.3,,1,,"b""b' IDE validation running at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,5,2013-07-05 15:18:31,0.32,,1,,"b""b' IDE validation running at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,6,2013-07-05 15:18:31,0.08,,,1,"b""b' Nice! We should really get to a state where people can compile with -fatal-warnings (this may include a switch that suppresses inliner warnings). Also"," one improvement to deprecation warnings would be not to warn when a deprecated member is called from a member that is similarly  deprecated (as they will both disappear together)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,7,2013-07-05 15:18:31,304.67,,1,,"b'b\' @adriaanm Deprecation is already suppressed as you describe.  I don\\\'t know about ""similarly"".  If two members are differentially deprecated", one will disappear first.  In that case, -Xfuture -Xlint could emit the warning,"Don\\\'t you know that the method you\\\'re calling will be removed before you will?""\''
scala	2705	closed	8	adriaanm	2013-07-05 15:18:31	672.08		+1		b'b"" Sorry, this can\'t be merged anymore, and I didn\'t want to merge it right before a release.Could your rebased and resubmit next week -thanks!""'
scala	2705	closed	closed	 - 	2013-07-12 18:52:10	197.75	1	8	1
scala	2705	closed	9	soc	2013-07-05 15:18:31	68.33		+1		b""b' @adriaanm: Rebased and submitted: url '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2705,closed,-,-,-,1,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,opened,2013-07-09 07:52:01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,title,2013-07-09 07:52:01,00:00,,1,,"b""b' SI-6574 Support @tailrec for extension methods.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,body,2013-07-09 07:52:01,00:00,,1,,"b""b' Currently", when the body of an extension method is transplantedto the companion object, recursive calls point back to the originalinstance method. That changes during erasure," but this is too latefor tail call . This commit eagerly updates the recursive calls to point to theextension method in the companion. It also removes the @tailrecannotation from the original method. Review by @adriaanm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,1,2013-07-09 07:52:01,44.93,,,1,"b""b' Hmmm. Shutting this one down for now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,closed,2013-07-09 08:37:00,44.98,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,reopened,2013-07-10 00:45:41,968.68,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,2,2013-07-09 07:52:01,684.78,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,closed,2013-07-10 20:01:52,1156.18,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2717,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,opened,2013-07-24 10:43:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,title,2013-07-24 10:43:55,00:00,,1,,"b""b' SI-7622 Clean Up Phase Assembly'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,body,2013-07-24 10:43:55,00:00,,,1,"b'b\' Asking kitteh for sanity check. ""Clean"" here means that a component can declare cleanly if it is ""enabled""","whether it is an ""initial"" or ""terminal"" phase", and the user can tell from-Xshow-phases what phases are configured, and by adding -Ydebug, whatcomponents are available but not turned on. Disabled components are listed with an icon instead of a phase number:xx for phases that are not enabled (such as by a compiler option),"and oo for phases that disabled by -Yskip. Compiler options that take phases as settings (""PhasesSettings"") are nowsanity-checked at phase assembly. As usual", phases can be specified as name prefixes or ranges of ids. The few options that exclude a phase from the run (-Yskip and -Ystop) arerequired to name the phase. (A future improvement may be to permit-optimise -Yskip:23-27, i.e., turn on the flag but skip the phases withoutwriting -Yskip:inline,inlinehandlers,"etc.) Generating the .dot file is an ""info"" option like -Xshow-phases. If ""phase assembly""hits an error"," it will dump the .dot file instead of asking you to re-run.  That\\\'sbecause if a phase assembly caused the problem it might not be easy toreproduce. The current ""phase assembly"" code works a lot better when the object youput into hash tables actually have meaningful hash codes.  The unstabletest of detecting cycles is moved out of pending.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,1,2013-07-24 10:43:55,54.35,,1,,b'b\' Thanks for the insanity check, kitteh.  I was indeed fearful that runsRightAfter would torpedo it.  IMHO, a useless thing to require of every component.  Only intimate components want to follow each other.  Case in point," global has a comment for patmat not to follow typer because sbt wants to; ""as long as we run before superaccessors""", but then doesn\\\'t set runsBefore.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,closed,2013-07-24 11:38:16,54.35,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,2,2013-07-24 10:43:55,495.85,,1,,"b""b' Maybe.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,reopened,2013-07-24 19:54:07,495.85,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,3,2013-07-24 10:43:55,186.87,,1,,"b""b' I knew the tests had to deal with -optimise"," then I forgot.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,closed,2013-07-24 23:01:00,186.88,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,4,2013-07-24 10:43:55,335.9,,,1,b'b\' Includes partest fixes and enhancement to allow a checkfile to ifdef -optimise (or any arg in SCALAC_OPTS). The changes are split across ten commits.  That was good git practice. I didn\\\'t run the whole ant build locally for each commit like kitteh can do, but I did partest neg run.  Yeah," that\\\'s one of the partest fixes. Thanks to @paulp for the previous ""compiler chain"" init with the init order issues resolved", which I merely bike-shedded, though as Wallace tells Gromit,"It\\\'s amazing what a lick of paint will do.""\''
scala	2768	closed	reopened	 - 	2013-07-26 04:36:53	335.88	0	4	2
scala	2768	closed	closed	 - 	2013-07-26 08:50:29	253.6	0	4	2
scala	2768	closed	5	adriaanm	2013-07-24 10:43:55	842.8		+1		b""b' Please submit partest fixes to url  I think the test category one is covered.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,6,2013-07-24 10:43:55,39.25,1,,,"b'b"" This is not yet rebased around the new regime", but fixes the bad checkfile merges, and also an extra space in a check file that took forever and a day to track down," hence extra debug support in partest. Let\'s see if the last tests pass ok.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,reopened,2013-07-31 19:18:56,628.45,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,7,2013-07-24 10:43:55,7.15,,1,,"b""b' This is no longer clean from a github perspective.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,closed,2013-07-31 19:26:05,7.15,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2768,closed,-,-,-,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,opened,2013-07-25 04:25:37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,title,2013-07-25 04:25:37,00:00,,1,,"b""b' SI-7694 @uncheckedBounds"," an opt-out from type bounds checking'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,body,2013-07-25 04:25:37,00:00,,1,,"b'b"" Synthetic defs introduced by transforms like  arguments",ANF (in scala-async) often introduce a type tree (the tpt of the temporary)that are based on the types of expressions. These types are scrutinized inRefChecks to check that type parameter bounds are satisfied. However, the type of the expression might be based on slack a LUB thatfails to capture constraints between type parameters. This slackness is noted in  : The synthesizer can now opt out of bounds by annotating the type as follows:  val temp: ( @uncheckedBounds) = expr This facility is now used in  arguments for the temporariesused for the reciever and arguments. The annotation is hidden under , rather than inthe more prominent , to reflect the intentionthat it should only be used in tree transformers. Targetting 2.10.3 as this fix is needed by a customer. **UPDATE**  It occurred to me that we should be robust against running the 2.10.3 compiler with the 2.10.2 library," so I\'ve split this PR into two commits. More details in their comments.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,1,2013-07-25 04:25:37,61.62,,1,,"b""b' Closing while I assess the test failures.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,closed,2013-07-25 05:27:14,61.62,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,reopened,2013-07-25 05:34:27,7.22,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,closed,2013-07-25 05:34:59,0.53,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,2,2013-07-25 04:25:37,249.2,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,reopened,2013-07-26 03:53:19,1338.33,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,3,2013-07-25 04:25:37,1154.37,,,1,"b'b"" I\'ll make sure to get @adriaanm\'s attention next week. It might not closer to Thursday. From Monday to Wednesday we are busy lobbying for cool"," new features in JVM at JVM Language Summit.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,4,2013-07-25 04:25:37,578.32,,1,,b'b\' @retronym Not sure if it LGTM," but it looks at least plausible to do it this way if fixing LUZ computation is too hard. (Do we have a ticket for that?)@gkossakowski ""lobbying for cool"," new features in JVM at JVM Language Summit"" hahaha", good joke. :-)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,5,2013-07-25 04:25:37,733.0,,1,,"b'b"" I\'m sure I\'ll find a moment between talks. Please ping me to remind me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,6,2013-07-25 04:25:37,721.22,1,,,"b'b"" Martin suggested a different approach: code generators (e.g. scala-async",  args) that synthesize type trees for based on potentially inferred types could annotate the types with  . RefChecks would eliminate the annotation but disable bound checking. His worry was that even with the check for (which, BTW, might be stronger with  ), we\'d omit checks that ought shouldn\'t be omitted. This approach is a little unappealing given that it would require action from named args, scala-async, and any other macro that wants to be immune from this issue. That said, even under my proposal, macros would need to mark the enclosing symbol as SYNTHETIC," which is actually nigh-on-impossible for most macros.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,7,2013-07-25 04:25:37,258.33,,1,,"b""b' Could we (ab)use to customize checking?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,8,2013-07-25 04:25:37,1134.25,,1,,"b'b"" @adriaanm  I did look at that"," but currently can\'t be used as  .  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,9,2013-07-25 04:25:37,420.17,,1,,"b'b"" You\'re right"," but it seems like a doable refactoring. Or at least not harder than adding an annotation. I\'m weary of adding surface syntax for suppressing bounds checking.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,10,2013-07-25 04:25:37,68.43,,1,,"b'b"" @odersky suggested that the annotation could be just part of scalaso user code couldn\'t see it. It would be eliminated after refchecks"," so we should get away with that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,11,2013-07-25 04:25:37,0.85,,1,,"b""b' I also suggested a Tree annotation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,12,2013-07-25 04:25:37,106.07,,1,,"b""b' Ok", if the annotation is hidden," maybe it makes more sense to go that route. Should we rather put it in ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,13,2013-07-25 04:25:37,562.52,,1,,"b""b' Closing temporarily"," back soon.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,closed,2013-08-08 09:13:57,320.63,1,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,reopened,2013-08-08 11:30:32,136.58,1,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,14,2013-07-25 04:25:37,442.18,,1,,"b""b' SPURIOUS ABORT? -PLS -scala@2fd43d419d3558ea03e287b0d46bcc7baedd774c'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,15,2013-07-25 04:25:37,7.88,,,1,"b""b' (kitty-note-to-self: ignore 22336550):cat: Roger! Rebuilding pr-scala for 2fd43d41. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,16,2013-07-25 04:25:37,122.68,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,17,2013-07-25 04:25:37,816.65,,1,,"b""b' Sigh. Rebased", updated the whitelists," this time is a lock.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,18,2013-07-25 04:25:37,96.78,,1,,"b""b' @adriaanm Whatever could be wrong with that last run? I see [red]url  but no explanation in the console output on Jenkins.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,19,2013-07-25 04:25:37,7.27,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,20,2013-07-25 04:25:37,88.02,,,1,"b""b' :facepunch: :kissing_cat: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,21,2013-07-25 04:25:37,433.25,1,,,"b'b"" Sorry", this is because of my switching to a new jenkins setup for integrating the IDE in parallel with the test suite etc. The jenkins build flow plugin is incredibly buggy (I\'ve lost close to a week to this by now). url  shows everything went well, but then the flow," which is just orchestration mysteriously fails. I\'ve looked at the implementation of the plugin and now understand why this can never work. Shared mutable state + concurrency = :facepunch:^2 url  -enough said""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,22,2013-07-25 04:25:37,5.65,,,1,"b""b' (kitty-note-to-self: ignore 22385869):cat: Roger! Rebuilding pr-scala for 6e65b536. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,23,2013-07-25 04:25:37,1260.32,,1,,"b'b"" What\'s the status on this one? RC1 is coming up fast.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,24,2013-07-25 04:25:37,12.35,,1,,"b""b' '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,25,2013-07-25 04:25:37,0.15,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,26,2013-07-25 04:25:37,0.7,,1,,"b'b"" We\'d really like this in RC1"," it\'s ready for review by @adriaanm""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,27,2013-07-25 04:25:37,1.82,1,,,"b'b"" We\'ll make sure it can go in"," delaying the RC if necessary. Not sure why jenkins is complaing about disk space -that slave has 16 GB according to the dashboard.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,28,2013-07-25 04:25:37,3.78,,,1,"b""b' Good catch on binary compatibility!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,29,2013-07-25 04:25:37,16.73,,,1,"b'b"" LGTM", with the caveat that I\'m not sure this\'ll work for bounds checking of type constructors (those are bound-checked in  ). Since we\'re only really interested in kind-\\\\* types," it\'s probably not important.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,30,2013-07-25 04:25:37,40.05,,,1,"b""b' (kitty-note-to-self: ignore 22576234):cat: Roger! Rebuilding pr-scala for aa120e4c"," efa765fb. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,31,2013-07-25 04:25:37,5.68,,1,,"b""b' rebasing due to conflict with #2809 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,closed,2013-08-13 17:15:56,345.4,3,23,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2771,closed,-,-,-,3,23,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,opened,2013-07-31 19:28:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,title,2013-07-31 19:28:55,00:00,,1,,"b""b' SI-7622 Clean Up Phase Assembly'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,body,2013-07-31 19:28:55,00:00,,1,,b'b\' Allow phases (internal or external) to opt-out of assembly. In particular, plug-ins and optimizer phases that are not enabled will not be plugged in. Otherwise," this PR is not a clean up so much as a hosing down the sidewalk.  ""Phase assembly"" itself deserves closer inspection. Review by @gkossakowski \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,1,2013-07-31 19:28:55,386.87,,,1,b'b\' @adriaanm Can we submit partest fixes on the other repo and make a difference back here? By fixing the java6 diff in partest, the PR reveals a tab inadvertently converted to space in a check file. The other conclusion is that  needs a PR to fix update-check to handle #ifdiff notation. Yeah," I just made that up while I was typing.  ""Par-Test"," now with _#ifdiff!_""  Could that make it into the release notes?  PR for PRs.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,2,2013-07-31 19:28:55,1175.38,,,1,"b'b"" As long as partest hasn\'t been moved out of master"," ports of PRs that change anything under  are much appreciated over at -partest. I hope to switch to a released partest next week.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,3,2013-07-31 19:28:55,48.83,,1,,"b""b' PLS SYNCH'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,4,2013-07-31 19:28:55,50.47,,,1,"b""b' (kitty-note-to-self: ignore 21974136):cat: Synchronaising! :pray:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,5,2013-07-31 19:28:55,1435.62,,1,,"b'b"" The IDE failures under the new PR validation scheme are because these commits don\'t seem to have the xml refactoring as a parent. We\'ll grandfather them into success.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,6,2013-07-31 19:28:55,910.87,1,,,"b'b"" Unlikely to get attention"," and I can\'t bear to see the kitteh flail.  It\'s true that it\'s not unusual to see a cat engaged in some grotesque meaningless exercise; and sometimes a cat will just sit and stare.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,closed,2013-08-08 14:16:57,1128.03,1,4,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,7,2013-07-31 19:28:55,240.83,,1,,"b""b' I think all kitty wants is a rebase.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,8,2013-07-31 19:28:55,349.87,,1,,"b""b' Rebased and maybe useful if anyone else thinks so.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,reopened,2013-08-21 00:07:39,590.7,1,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,9,2013-07-31 19:28:55,0.77,1,,,"b""b' Well", it did that thing where it sucks in other commits," so closing and superseding.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,closed,2013-08-21 00:08:26,0.78,2,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2790,closed,-,-,-,2,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,opened,2013-08-08 18:42:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,title,2013-08-08 18:42:27,00:00,,1,,"b""b' Eliminated nooriginal TypeTrees.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,body,2013-08-08 18:42:27,00:00,,1,,"b""b' Noticed many calls reaching a spot which they should not.Added a devWarning so the next guy might find it more quickly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,1,2013-08-08 18:42:27,35.28,,,1,"b""b' PLS REBUILD ALLNOLITTER!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,2,2013-08-08 18:42:27,1301.37,,,1,"b""b' (kitty-note-to-self: ignore 22348197):cat: Roger! Rebuilding pr-scala for 941de781. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,3,2013-08-08 18:42:27,0.0,1,,,"b""b' (kitty-note-to-self: ignore 22348197):cat: cleaning up... sorry! :cat:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,4,2013-08-08 18:42:27,363.13,,1,,"b'b"" I eventually caught a glimpse through the noise that this actually doesn\'t compile. (I take it I\'m not the only one for whom that was not self-apparent.) That\'ll teach me to try to carve a little patch off a big patch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,5,2013-08-08 18:42:27,1140.85,,1,,"b'b"" That\'s a bug in the scripts. Looking into it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,6,2013-08-08 18:42:27,2.78,,1,,"b'b\' ""-e"" missing on bash invocation\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,7,2013-08-08 18:42:27,3.87,,1,,"b""b' Should be fixed by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,8,2013-08-08 18:42:27,1.9,,1,,"b""b' Please reopen. Trying to remove red from queue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,closed,2013-08-11 18:11:38,1409.18,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,9,2013-08-08 18:42:27,254.97,,1,,"b""b' Updated with less broken cherrypick.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,reopened,2013-08-12 22:26:36,254.97,1,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,10,2013-08-08 18:42:27,1.17,,1,,"b""b' PLS REBUILD ALL(Not sure if I have to do that)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,11,2013-08-08 18:42:27,15.72,,,1,"b""b' (kitty-note-to-self: ignore 22530824):cat: Roger! Rebuilding pr-scala for 02df8f3f", 466b7d29, e7876d5c, b145cb1c, b741e8ad, e5c99b1b, 8589deb4, 651e1988," e3606bf1. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,12,2013-08-08 18:42:27,37.92,,1,,"b""b' No need for an explicit rebuild if the commits are new.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,13,2013-08-08 18:42:27,1.77,,1,,"b""b' It looks like something went wrong with your rebase.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,14,2013-08-08 18:42:27,147.42,1,,,"b'b"" It\'s awfully challenging to find the part which suggests what the problem was. I took a stab.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,closed,2013-08-13 06:32:00,485.4,2,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2801,closed,-,-,-,2,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,opened,2013-08-08 19:08:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,title,2013-08-08 19:08:22,00:00,1,,,"b""b' SI-7690 ghost error message fails compile [Rebase of #2763]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,body,2013-08-08 19:08:22,00:00,,1,,"b'b"" [Rebase of #2763] I won\'t even try to explain the error reporting code"," becauseit would have no basis in reality. However this change appearsto fix the symptom reported.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,1,2013-08-08 19:08:22,1399.68,,1,,"b""b' Botched the rebase"," it seems.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,closed,2013-08-11 18:28:03,1399.68,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,reopened,2013-08-11 18:56:48,28.75,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,2,2013-08-08 19:08:22,241.43,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,closed,2013-08-12 23:39:39,282.85,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,3,2013-08-08 19:08:22,1201.07,,1,,"b""b' @paulp"," is failing in #2823 (and #2821). Both are based on this PR and seem unrelated. Is this test deterministic?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,4,2013-08-08 19:08:22,1202.32,,1,,"b""b' Test suite logs: url  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,5,2013-08-08 19:08:22,1207.38,,1,,"b""b' ('""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,6,2013-08-08 19:08:22,1214.62,,1,,b'b\' t7690.scala is going to be the world\\\'s best canary for, well, not anything being wrong," just anything changing. I think it\\\'s deterministic as long as the compiler doesn\\\'t change. As long as ""correct"" behavior depends on things like ""has anything looked at the info of some symbol""", then there will be stuff like this. I don\\\'t know what to do about it.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,7,2013-08-08 19:08:22,1219.03,,1,,"b""b' it looks like either #2797 or #2812 broke it"," as those got merged between this pr and when validation was run for #2823'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,8,2013-08-08 19:08:22,1222.73,,1,,"b'b"" I\'ll be surprised if it\'s either of those both look near-impossible. I almost think it\'s more likely #2821 and #2823 each induced the same failure independently. But I guess there\'s only way to find out.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,9,2013-08-08 19:08:22,1224.52,,1,,"b'b"" Regardless", I absolutely cannot fix it. As you can see from the content of the commit which accompanied t7690.scala, I have _no idea_ how to handle the error reporting nondeterminism. As I said somewhere else as well," it is as big a single factor as anything else why I\'m moving on.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,10,2013-08-08 19:08:22,1225.9,,1,,"b'b"" Sure", I understand -I\'m on it. Consider all this FYI. The plot thickens. Same PR," different test runs: url  v url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,11,2013-08-08 19:08:22,1229.37,,1,,"b""b' Do pos tests get a completely brand new fresh compiler? The slightest deviation from that would be enough.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,12,2013-08-08 19:08:22,1265.45,,1,,"b'b\' It was something along those lines. Explanation on scala-internals. About 1"" away from reverting to the old PR validation jobs... We\\\'d need the distpack validation job to propagate the sha of the master ref so that the downstream jobs can use the same one.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,13,2013-08-08 19:08:22,1416.08,,1,,"b'b"" The pos tests must be run in separate rooms", preferably with sheathing.  Did you order the lead sheathing?  I know you\'re not running pos and neg together," right?  Because obviously they cancel each other out.  And they have to be carefully calibrated or else they\'ll cause disk errors. And don\'t even try running partest during the perseid meteor storm.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2804,closed,-,-,-,1,14,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,opened,2013-08-12 09:52:48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,title,2013-08-12 09:52:48,00:00,,1,,"b""b' SI-3346 implicit parameters can now guide implicit view inference'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,body,2013-08-12 09:52:48,00:00,1,,,"b'b"" This simple patch makes it possible for implicit views to benefit fromfundep-guided type inference", eliminating a nasty special case inimplicit inference. Here are the changes that I had to apply to the tests (they exposedquite a number of interesting questions that I was happy to answer): 1)  now works, so I moved it to pos. That easily makes sense,because the test was just a canary to track previous state of things. 2)  and  changed their messagesto less informative ones, because inapplicable implicit views now getdisqualified early and therefore don\'t display their error messagesto the user. This is an unfortunate but necessary byproduct of thischange, and one can argue that the behavior is now completely consistentwith implicit vals (that also don\'t explain why this or that implicit valgot disqualified, but rather display a generic implicit value not foundmessage). 3) and -.Immediate culling of apriori inapplicable implicit views messes things upfor Scaladoc, because it\'s interested in potentially applicable views,having infrastructure to track various constraints (type bounds, requirementsfor implicit parameters, etc) that guide applicability of views and thenpresent it to the user. Therefore, when scaladoc is detected, implicit searchreverts to the old behavior. 4) We still cannot have Jason\'s workaround to type constructor inferencementioned in comments to SI-3346, because it\'s not really about implicit parameters of implicit views," but about type inference flowing from the implicit parameter list to a preceding parameter list in order to affect inference of an implicit view. This is something that\'s still too ambitious.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,1,2013-08-12 09:52:48,0.68,,1,,"b""b' review @adriaanm @retronym  /cc @paulp @hubertp @blaisorblade @milessabin @gkossakowski @harrah @szeiger'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,2,2013-08-12 09:52:48,485.25,,1,,"b'b"" This worries me. We should at the very least rebuild scalaz"," specs2 and scalatest to make sure this doesn\'t break them.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,3,2013-08-12 09:52:48,0.45,,,1,"b""b' (I would love to remove this discrepancy"," though!)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,4,2013-08-12 09:52:48,3.93,,1,,"b""b' @adriaanm How is this done these days? Should I learn dbuild or a manual rebuild would be enough?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,5,2013-08-12 09:52:48,7.75,,1,,"b'b"" We\'ll soon have a dbuild job as part of PR validation", but I\'m completelyswamped the next two weeks.We can probably get one set up earlier akin to scala-checkin-manual. Realistically, this is a big change and I don\'t think we can still takethis on for M5. Let\'s see about M6. On Mon, Aug 12, 2013 at 11:03 AM," Eugene Burmakonotifications@:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,6,2013-08-12 09:52:48,14.15,,1,,"b'b"" Also", scalaz 7.1.x doesn\'t currently build against M4 (could probably be fixed on our side, though," but I didn\'t get around to it yet).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,closed,2013-08-12 20:30:28,637.67,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,reopened,2013-08-12 20:30:33,0.08,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,7,2013-08-12 09:52:48,126.25,1,,,"b""b' Oops"," sorry my bad. I wanted to say that I agree about M6 and misclicked the button.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,8,2013-08-12 09:52:48,1076.47,,1,,"b'b"" @larsrh Is that still the bug you showed me at the conference but I didn\'t have time to have a look at before going on vacation?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,9,2013-08-12 09:52:48,165.23,,1,,"b'b"" @hubertp Yes", it\'s that bug. Can be fixed by adding explicit type parameters, though. I failed to produce a minimal example," though (apparently doesn\'t happen in isolation).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,10,2013-08-12 09:52:48,21.03,,,1,"b'b"" This looks awesome (conceptually I don\'t really understand the change to the compiler) and could lead to some big simplifications in Slick\'s Lifted Embedding.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,11,2013-08-12 09:52:48,1292.62,1,,,"b""b' @larsrh yeah"," I know. I really tried to minimize this thins and created very similar structure but still failed to reproduce. Really confusing. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,12,2013-08-12 09:52:48,40.45,,1,,"b""b' /cc @cvogt'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,13,2013-08-12 09:52:48,1398.2,,1,,"b""b' For the records"," scalaz now compiles with 2.11.0-M4: @c0f3a29fb9 (albeit only without tests; try  ).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,14,2013-08-12 09:52:48,2.5,,1,,"b""b' Because of a failure"," or just because of unavailability of specs2?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,15,2013-08-12 09:52:48,6.52,,1,,"b""b' @retronym Latter. I backported the relevant commit to the 7.0.x branch. @etorreborre"," anything else needed to get a specs2 1.12.x against 2.11.x?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,16,2013-08-12 09:52:48,524.07,,1,,"b""b' specs2 1.12.x is only compiled against 2.9.x. 1.13 starts being available for 2.10.x. Do you need 1.13 for 2.11.x then?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,17,2013-08-12 09:52:48,1238.67,,1,,"b'b"" @xeno-by What\'s the status of this PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,18,2013-08-12 09:52:48,526.7,,1,,"b""b' Waiting for: 1) a review"," 2) a decision on which libraries and in what manner we should test it. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,19,2013-08-12 09:52:48,464.18,,1,,"b""b' I was hoping this would take care of url  but it does not'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,20,2013-08-12 09:52:48,150.82,,,1,"b""b' For the record"," Slick (master) compiles successfully against this patch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,21,2013-08-12 09:52:48,503.2,1,,,"b'b"" I was checking the expected behavior. Since I can\'t comment there"," here\'s what implicit resolution should produce (from an interaction with the 2.10.2 REPL):  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,22,2013-08-12 09:52:48,255.88,,1,,"b""b' @retronym"," @adriaanm: ping on pending review'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,23,2013-08-12 09:52:48,1048.77,,,1,"b'b"" I\'m still scared by this one (bug fixes in implcit resolution can silently change the meaning of existing code.) I must first defer to @adriaanm to review this on its own merits", and if he\'s happy with that," we can weigh up the potential for breakage vs the improvements in power + regularity that this brings.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,24,2013-08-12 09:52:48,30.25,1,,,"b'b"" Meanwhile", specs2 and scalaz still need porting to HEAD, to be tested against this commit. @larsrh, @etorreborre: ping. What\'s the status of this porting effort? To summarize the current situation, last message was:In fact, specs2 1.12.3 _is_ [available for 2.10]url  unlike earlier said (this explains how scalaz _is_ getting tested currently)," and that\'s what Scalaz [uses]url  Any chance to disentangle this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,25,2013-08-12 09:52:48,4.2,,1,,"b'b"" @larsh: on the light side"," there\'s only one documented breaking change in all releases between specs2 1.12 and 2.2:url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,26,2013-08-12 09:52:48,140.33,,1,,"b""b' @Blaisorblade Right"," I forgot about that. If Scalaz can be pushed without tests (i.e. without needing a specs2 dependency) then I can push a specs2 version against and then we can close the loop by using the new specs2 version to finish compiling / testing Scalaz fully.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,27,2013-08-12 09:52:48,1388.52,,1,,"b'b"" This can\'t merge anymore. I\'m closing it. Please reopen a new PR with rebased commits and refer to this PR so both are linked.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,closed,2013-09-22 23:49:52,199.32,5,20,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,28,2013-08-12 09:52:48,74.23,,1,,"b'b"" I would like to get a review first please", so that we don\'t have to rebase again it if a timeout happens again. Do you think that would be possible? If yes," please reopen this PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,29,2013-08-12 09:52:48,1.5,,,1,"b'b"" @xeno-by: good point. I\'ll reopen and assign to @adriaanm.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,reopened,2013-09-23 01:05:36,75.73,5,21,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,30,2013-08-12 09:52:48,651.98,,,1,"b'b"" We can still review this on a closed PR. I\'m trying to shrink the PR queue to mitigate the build kitteh craziness. @adriaanm don\'t take the closure as reason not to review :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,closed,2013-09-23 11:57:35,651.98,5,21,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,31,2013-08-12 09:52:48,229.22,1,,,"b'b"" Guys", since M6 is very close, could we extend the deadline for this pull request to M7? It would be a shame to hastily reject it just because M6 is supposed to be the last development milestone," and we don\'t have time to have a discussion before M6.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,32,2013-08-12 09:52:48,249.75,,1,,"b""b' :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,33,2013-08-12 09:52:48,577.25,,1,,"b""b' Yes"," M7 is okay with me (M8 is not)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,34,2013-08-12 09:52:48,231.68,,,1,"b'b"" As per today\'s core meeting", the code looks good, and we just need to make sure that we don\'t get regression in community libraries, such as scalaz, spray, specs2," shapeless.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,35,2013-08-12 09:52:48,1387.32,,1,,"b""b' Superseded by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2822,closed,-,-,-,6,24,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,opened,2013-08-16 12:54:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,title,2013-08-16 12:54:43,00:00,,1,,"b""b' SI-7756 Uncripple refchecks in case bodies'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,body,2013-08-16 12:54:43,00:00,,1,,"b""b' In 65340ed4ad2e", parts of RefChecks were disabled whenwe traversed into the results of the new pattern matcher.Similar logic existed for the old pattern matcher, but inthat case the Match / CaseDef nodes still existed in the tree. The new approach was too broad: important checks no longerscrutinized the body of cases. This commit turns the checks back on when it finds the remnantsof a case body," which appears as an application to a label def. Review by @adriaanm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,1,2013-08-16 12:54:43,353.42,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,2,2013-08-16 12:54:43,3.2,,,1,"b""b' (kitty-note-to-self: ignore 22785935):cat: Roger! Rebuilding pr-scala for 3df1d77f. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,closed,2013-08-17 00:29:10,694.45,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,reopened,2013-08-17 00:29:20,0.17,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,3,2013-08-16 12:54:43,1403.97,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,closed,2013-08-19 18:15:26,1066.1,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2840,closed,-,-,-,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,opened,2013-08-16 18:14:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,title,2013-08-16 18:14:40,00:00,,1,,"b""b' Merge 2.10.x into master'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,body,2013-08-16 18:14:40,00:00,,1,,"b'b"" Merge remote-tracking branch \'\' into masterConflicts:  bincompat bincompat          This merge was rather involved.Review resolution of merge conflicts in and by @xeno-byThe rest review by @retronym""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,1,2013-08-16 18:14:40,1.67,,1,,"b""b' @xeno-by: also"," please check if my merge resolution of [nomaster] commits is correct.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,2,2013-08-16 18:14:40,34.3,1,,,"b""b' Sorry"," I was going through the PR backlog and caused conflicts. Probably best to wait with this merge until next week.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,closed,2013-08-16 18:50:46,36.1,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,3,2013-08-16 18:14:40,4.53,,1,,"b'b"" @adriaanm: I don\'t understand. Why do we need to wait?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,4,2013-08-16 18:14:40,2.53,,1,,"b'b"" GitHub says the PR doesn\'t merge""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,5,2013-08-16 18:14:40,0.35,,1,,"b""b' (Because of the [merge] conflicts I created merging the other PRs into master)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,6,2013-08-16 18:14:40,1.02,,1,,"b'b"" Well", then I need to perform another merge," that\'s not a big deal. An update will come shortly.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,reopened,2013-08-16 19:23:54,33.13,1,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,7,2013-08-16 18:14:40,26.1,,1,,"b""b' @adriaanm: I synced with latest master. In case there are more conflicts caused by other PRs being merged I can easily sync again.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,8,2013-08-16 18:14:40,0.97,,,1,"b""b' Ok great.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,9,2013-08-16 18:14:40,2.57,,1,,"b'b\' Adding the ""on-hold"" label to indicate it should be merged last. Don\\\'t want to risk causing conflicts in PRs currently open.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,10,2013-08-16 18:14:40,1.35,,1,,"b""b' My [nomaster] commits lgtm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,11,2013-08-16 18:14:40,12.6,,1,,"b""b' failure in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,12,2013-08-16 18:14:40,25.98,,1,,"b'b"" Something\'s not right. When I", compile it and run (one of the failing tests)," it comes out green.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,13,2013-08-16 18:14:40,3.45,,1,,"b""b' Same here. I cannot reproduce failing  . However"," I could reproduce other failures.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,14,2013-08-16 18:14:40,4.58,,1,,"b'b"" I fixed test failures I could reproduce. Let\'s see if this helps.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,15,2013-08-16 18:14:40,37.07,,1,,"b""b' did you run it under -Yrangepos?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,16,2013-08-16 18:14:40,4.77,,1,,"b'b"" Shouldn\'t affect this particular test", but I ran it anyway.  ," with the same successful result.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,17,2013-08-16 18:14:40,24.55,,1,,"b'b"" You might just shunt t7733 to and reopen the ticket pending investigation"," rather than blocking this merge. I\'ll review the rest of this in more detail tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,18,2013-08-16 18:14:40,526.67,,1,,"b""b' LGTM"," aside from the test failure.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,19,2013-08-16 18:14:40,575.0,,1,,"b'b"" I\'ll be looking into test failure today.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,20,2013-08-16 18:14:40,88.67,,1,,"b'b"" I tried to reproduce this problem in multiple ways and I failed. I\'ll start from scratch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,closed,2013-08-28 17:13:23,1309.48,1,20,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2844,closed,-,-,-,1,20,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,opened,2013-08-28 15:44:32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,title,2013-08-28 15:44:32,00:00,,1,,"b""b' SI-1909 SI-3832 SI-7007 SI-7223 Improved handling of larval objects'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,body,2013-08-28 15:44:32,00:00,,,1,"b'b"" Reclaims some ground lost in the first swing at SI-6666", and solves a few more issues to boot. I\'m hopeful that I\'ll be able to knock off the residuals of SI-6666 too," so I might push one or two more commits. Review by @JamesIry""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,1,2013-08-28 15:44:32,214.38,,1,,"b'b"" I\'ll close this temporarily until I address the failures.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,closed,2013-08-28 19:18:55,214.38,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,reopened,2013-08-28 21:15:57,117.03,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,2,2013-08-28 15:44:32,118.03,,1,,"b""b' Reopened for business.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,3,2013-08-28 15:44:32,1018.63,,,1,"b'b"" I\'m done with this one. I can\'t actually find anything residual from SI-6666"," so we can close that one too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,4,2013-08-28 15:44:32,420.9,,1,,"b""b' @JamesIry: ping'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,5,2013-08-28 15:44:32,1248.73,,1,,"b'b"" What\'s the status of this PR? In particular"," will it make to M5?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,6,2013-08-28 15:44:32,370.82,1,,,"b'b"" @magarciaEPFL: I hope so. I\'ll try to steal @JamesIry\'s attention tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,7,2013-08-28 15:44:32,900.75,,1,,"b'b"" @gkossakowski Did you get @JamesIry \'s attention yesterday?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,8,2013-08-28 15:44:32,449.38,1,,,"b""b' I apologize on behalf of the reviewer for this not making the deadline.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,9,2013-08-28 15:44:32,2.8,,1,,"b'b"" This one isn\'t super urgent.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,10,2013-08-28 15:44:32,1214.65,1,,,"b'b"" @retronym: please fix a19e05371fb0a57263b68c1ced0ba88e830e4a61 (both commit message and test file names). Other than that it can go in. Related to this PR: wouldn\'t make sense to perform all those checks at some late phase (genicode) when we see the final shape of trees and we perform checks that are very backend specific?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,11,2013-08-28 15:44:32,141.57,1,,,"b'b"" I\'ve just rebased and fixed the last commit message and test file name.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,closed,2013-09-15 14:21:26,1025.48,4,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2884,closed,-,-,-,4,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,opened,2013-08-31 19:52:42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,title,2013-08-31 19:52:42,00:00,,1,,"b""b' [2.10.x] assorted fixes for vampire macros'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,body,2013-08-31 19:52:42,00:00,,1,,"b""b' As eloquently elaborated and cleverly named by Travis Brown", macrosdefined in structural types are useful:url  However, since such macros are on the intersection of a number of languagefeatures, as usual," there are bugs. This pull requests fixes a couple of them.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,1,2013-08-31 19:52:42,618.37,,1,,"b'b"" From the [mailing list]url  @odersky said:@xeno-by Does this PR need refurbishment in light of Martin\'s comments?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,2,2013-08-31 19:52:42,5.25,,,1,"b'b"" @retronym That\'s what I wanted to discuss yesterday"," but we all were so carried away by hygiene :) I suggest we wait until the next week\'s reflection meeting.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,3,2013-08-31 19:52:42,2.13,,1,,"b'b"" @xeno-by I\'ll be at the office again today"," so we can discuss if you\'re @ EPFL.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,4,2013-08-31 19:52:42,44.82,1,,,"b'b"" Don\'t know whether I\'ll be at EPFL today Strange Loop is nearing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,5,2013-08-31 19:52:42,20.93,,1,,"b'b"" No probs. I\'ll close this PR for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,closed,2013-09-11 07:24:13,691.52,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,6,2013-08-31 19:52:42,341.1,,1,,"b""b' Just discussed this at the reflection meeting and decided to reopen as is.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,reopened,2013-09-24 13:05:18,341.08,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,7,2013-08-31 19:52:42,0.2,,1,,"b""b' review @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,8,2013-08-31 19:52:42,449.47,,,1,"b""b' Btw would be great to have this in M6.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,9,2013-08-31 19:52:42,961.77,,1,,"b""b' @adriaanm The build is green"," but github is still yellow. Is this spurious?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,10,2013-08-31 19:52:42,243.55,,,1,b'b\' This is how we encode that an earlier commit failed whereas the last one was fine. Github only looks at the last commit," so it needs to be marked ""failed"" if any earlier commit failed.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,11,2013-08-31 19:52:42,25.53,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,12,2013-08-31 19:52:42,8.67,,,1,"b""b' (kitty-note-to-self: ignore 25469076):cat: Roger! Rebuilding pr-scala for d9a18fb8"," b779b216. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,13,2013-08-31 19:52:42,815.83,,1,,"b'b"" Okay since our discussion is going on at url  I\'m closing this one for the time being.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,closed,2013-10-04 06:50:19,1065.02,1,10,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2902,closed,-,-,-,1,10,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,opened,2013-09-05 15:08:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,title,2013-09-05 15:08:06,00:00,,1,,"b""b' SI-7643 Enable newPatternMatching in interactive.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,body,2013-09-05 15:08:06,00:00,,1,,"b""b' Without it", the enclosed test fails with: And with that," we can remove this option altogether. Review by @adriaanm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,closed,2013-09-06 07:52:46,1004.67,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,reopened,2013-09-06 07:53:09,0.38,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,1,2013-09-05 15:08:06,1005.6,,,1,"b""b' Closed until I refactor away the option altogether. The tests passed (yay!) url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,closed,2013-09-06 07:53:44,0.58,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,2,2013-09-05 15:08:06,302.5,,,1,"b""b' Thanks @retronym! :santa: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,reopened,2013-09-06 15:30:57,457.22,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,3,2013-09-05 15:08:06,524.25,,1,,"b""b' Review by @adriaanm @dragos @VladUreche'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,4,2013-09-05 15:08:06,175.37,,,1,"b""b' LGTM -So it sneakily worked all along!? Thanks anonymous rangepos-fixer!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,5,2013-09-05 15:08:06,585.15,,,1,"b""b' LGTM"," thanks @retronym!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,closed,2013-09-07 17:00:09,89.2,0,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2912,closed,-,-,-,0,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,opened,2013-09-10 09:58:09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,title,2013-09-10 09:58:09,00:00,,1,,"b""b' merge 2.10.x to master'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,body,2013-09-10 09:58:09,00:00,,1,,"b""b' ... and a bonus commit: improve to the way partest-extras is built. Only one conflict"," which was in and was trivial to resolve. Review by @gkossakowski'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,1,2013-09-10 09:58:09,518.45,,1,,"b'b"" @retronym: doesn\'t merge anymore. Please reopen once you fix the merge.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,closed,2013-09-11 18:36:37,518.47,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,reopened,2013-09-11 21:31:31,174.9,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,2,2013-09-10 09:58:09,175.5,,1,,"b'b"" @gkossakowski reopened for business. I haven\'t run the tests locally"," earn your keep kitteh.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,3,2013-09-10 09:58:09,1191.82,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,closed,2013-09-12 17:23:57,1192.43,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2928,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,opened,2013-09-17 14:14:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,title,2013-09-17 14:14:55,00:00,,1,,"b'b\' Avoid null checks when emitting """".== and SomeModule.==\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,body,2013-09-17 14:14:55,00:00,,1,,b'b\' Although the same the code would be later optimized by -Yconst-opt,"we can offer the same lean byte code to those compiling without thatoption by being more discerning when translating ==. This helps people using bytecode based code coverage toolssuch as jacoco that would emit ""branch not covered"" warningsfor the impossible null check. Before: After: Review by @gkossakowski or @JamesIry", /cc @dragos\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,1,2013-09-17 14:14:55,10.77,,,1,"b'b"" I\'m happy to rework the tests a little"," it will be a bit less brittle if we assert the absence of null check instructions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,2,2013-09-17 14:14:55,539.7,,,1,"b""b' @retronym: rewriting those tests to test the specific property we care about would be very welcome. Also"," please reopen once test failures are addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,closed,2013-09-17 23:25:23,550.47,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,reopened,2013-09-18 15:15:58,950.58,0,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,3,2013-09-17 14:14:55,951.57,,,1,"b""b' @gkossakowski The latest push does both of those things :) I left the bytcode-diffing tests in the history as they might be easier to review"," the the last commit switches to counting null check instructions.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,4,2013-09-17 14:14:55,1001.57,,,1,"b""b' LGTM! I like the tests.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,5,2013-09-17 14:14:55,932.1,,,1,"b'b"" LGTM as well! I\'ll hold the merge until build bot comes back and can verify this branch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,6,2013-09-17 14:14:55,508.42,,,1,"b""b' Here are green builds for each commit 2bb960 url 4faaa8 url 9fee7b url 354f42 url 355eff url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,closed,2013-09-23 08:44:55,1048.95,0,2,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,7,2013-09-17 14:14:55,175.57,,1,,"b""b' The optimization is not correct for modules"," url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,8,2013-09-17 14:14:55,190.05,,1,,"b""b' Do we care? I mean", code where a module load returns is already broken," right? FTR  considers this UB.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,9,2013-09-17 14:14:55,256.1,,,1,"b'b"" well", define broken :) the example prints null, and behaves as specified i\'d love to make the assumption that module loads are always non-null. maybe we can," but it definitely changes program semantics.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2954,closed,-,-,-,0,4,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,opened,2013-09-25 14:52:21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,title,2013-09-25 14:52:21,00:00,,1,,"b""b' SI-6493 Fix existential type used to hide local classes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,body,2013-09-25 14:52:21,00:00,,1,,"b'b"" In: The inferred return type of can\'t refer to the localsymbols; they must not leak out of the compilation unit. Instead", is used to choose a less preciseexistential type,  . This is implemented as a  , which is supposed totakes care of rebinding to something valid in the newprefix ( ). If was orginally a type alias, and the originalprefix was a refinement type, this was handled in , which looks for a typein the new prefix with the name  . But for othertype refs (e.g. a class type ref, as in this case),a no-op was used, deferring the rebindingof abstract classes until  . But our case falls between the cracks, and we end uppropagating a type ref in which the prefix does notcontain the member. With the help of  , this is clear: Notice the reference to symbol  , rather than  . This commit moves the logic up to  ,"generalizing it to work for any  . This example answeredthe question in that code:Review by @adriaanm. Found this patch in a dusty corner.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,1,2013-09-25 14:52:21,0.83,,1,,"b""b' /cc @xeno-by This is the bug in existential abstraction over local types that I was reminded of in the reflection meeting yesterday.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,2,2013-09-25 14:52:21,104.53,,,1,"b""b' Interesting failure in some interesting code.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,closed,2013-09-25 16:37:45,105.4,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,3,2013-09-25 14:52:21,31.45,,1,,"b""b' Minimized:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,reopened,2013-09-25 19:13:02,155.28,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,4,2013-09-25 14:52:21,124.05,,1,,"b'b"" Let\'s have another spin.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,5,2013-09-25 14:52:21,50.07,,1,,"b""b' Btw I have a somewhat related problem in url  with a vampire structural type. The annotation blindly copied from the original macro def refers to wrong type parameter symbols"," which prevents the macro engine from passing correct type arguments to the corresponding macro impl.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,6,2013-09-25 14:52:21,33.75,,1,,"b""b' Just went to see how and friends work to make sure that annotations are indeed copied to structural type members. Indeed they are since it all boils down to  : url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,7,2013-09-25 14:52:21,49.52,,1,,"b""b' Next failure:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,closed,2013-09-25 21:27:04,134.03,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,2986,closed,-,-,-,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,opened,2013-10-04 08:13:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,title,2013-10-04 08:13:22,00:00,,1,,"b""b' [master] assorted fixes for vampire macros'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,body,2013-10-04 08:13:22,00:00,,1,,"b""b' supersedes url  review @adriaanm @retronym @paulp'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,closed,2013-10-11 09:20:32,67.17,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,reopened,2013-10-11 09:20:37,0.08,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,1,2013-10-04 08:13:22,68.43,1,,,"b'b"" Sorry", closed this PR by accident, so I\'m reopening it again. Also I accidentally posted an unfinished comment," which I\'d like you to disregard.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,2,2013-10-04 08:13:22,33.32,,1,,"b""b' Added a test for  ", and  , which as I discovered, all use  . Given the new evidence," I think we should reconsider our desire to stay away from  . See inline comments below.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,3,2013-10-04 08:13:22,226.62,1,,,"b""b' @retronym The controversial commit has been split into url  The remaining commit in this pull request seems to be universally useful.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,4,2013-10-04 08:13:22,9.95,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,closed,2013-10-15 13:51:44,271.12,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3016,closed,-,-,-,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,opened,2013-10-19 18:22:29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,title,2013-10-19 18:22:29,00:00,1,,,"b""b' SI-6840 fixes weird typing of quasiquote arguments'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,body,2013-10-19 18:22:29,00:00,1,,,"b'b"" Previously quasiquote arguments were type checked against Anywhich caused weird inference that made splicing of complex expressionsunusable: This is fixed by forcing compiler to type check against typevariable which itself isn\'t used in any other way. review by @retronym ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,1,2013-10-19 18:22:29,13.83,,,1,"b'b"" This is a real breakthrough"," but it\'d be great to get an insight about what exactly made this work.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,2,2013-10-19 18:22:29,20.18,,1,,"b""b' There has been some related discussion on url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,closed,2013-10-19 18:56:30,34.02,2,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,reopened,2013-10-19 18:56:41,0.18,2,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,3,2013-10-19 18:22:29,1316.92,,1,,"b""b' Has anyone investigated using WildcardType as the expected type when Any is the explicit type? I think the types inferred will be much improved.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,4,2013-10-19 18:22:29,116.17,,1,,"b'b"" Only macros can tell the difference as they can peek at the type of arg trees even if the formal type is fully defined. Avoiding needless Lubs when the pt is fully defined is a performance optimization we don\'t want to do without. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,5,2013-10-19 18:22:29,144.87,1,,,b'b\' I see that was already suggested in SI-6155,"The problem could be reduced by having the typechecker special-case Any as a target type, and treating it as WildcardType."" But I think you could do it when you needed to without punting on performance. Not to mention that this is an example of overloading Any in the same way Nothing is overloaded. All such overloaded uses are bad. It should not require sorcery to recognize the difference between ""Any"" expressed to mean ""Any"" and ""Any"" expressed to mean ""that\\\'s what macros make me do so I can work it out inside the macro.""\''
scala	3059	closed	6	retronym	2013-10-19 18:22:29	10.67	+1			b'b""   isn\'t really relevant in this case. The macro could have declared it wanted any other fully defined type, and been equally disappointed that the argument didn\'t arrive with something more refined. If it wants the type checker to compute a type for it, declaring a type parameter seems a reasonable way to do it. That\'s how you\'d do it for regular methods. This won\'t fly if the macro needs to override a method  . BTW, there used to be an experimental flavour of macros that didn\'t typecheck the arguments at all:  ""'
scala	3059	closed	7	paulp	2013-10-19 18:22:29	7.25		+1		b'b"" Does that last translate (in principle, after adjusting for the unlikelihood of existentials working correctly in concert with a macro) to ? Syntactically that\'s what it  mean, and not just for macros for any method.""'
scala	3059	closed	8	retronym	2013-10-19 18:22:29	21.65		+1		b""b' The argument to an untyped macro was any syntactically valid tree, untyped, and not necessarily typable. The macro implementation could choose whether, when, and with which expected type to type it. Those were the days...'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,9,2013-10-19 18:22:29,4.42,1,,,"b""b' I curse thee with nothing but BLACK BOXES for as long as ye shall live!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,10,2013-10-19 18:22:29,883.08,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,closed,2013-10-23 12:41:34,1064.88,5,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3059,closed,-,-,-,5,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,opened,2013-10-27 08:56:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,title,2013-10-27 08:56:55,00:00,,1,,"b""b' Check file maintainence'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,body,2013-10-27 08:56:55,00:00,,1,,"b""b' Removing the empty and orphaned.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,closed,2013-10-27 11:18:55,142.0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,reopened,2013-10-27 11:38:46,19.85,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,1,2013-10-27 08:56:55,349.43,,1,,"b""b' Review by @gkossakowski or @JamesIry '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,2,2013-10-27 08:56:55,317.88,1,,,"b'b"" LGTM. But why do you hate orphans so much? Haven\'t they had a hard enough life already?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,3,2013-10-27 08:56:55,19.45,,1,,"b'b"" We can ship them off to Honest Bender\'s Orphanarium if you prefer.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,closed,2013-10-27 20:23:56,525.17,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,4,2013-10-27 08:56:55,168.72,,1,,"b'b"" I guess it\'s a little late"," but -orphan-checkfiles.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,5,2013-10-27 08:56:55,748.98,,,1,"b""b' Much nicer. That directory needs a spring clean.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3080,closed,-,-,-,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,opened,2013-10-28 05:26:24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,title,2013-10-28 05:26:24,00:00,,1,,"b'b"" Delay delambdafication and put the lambda\'s body into the containing class""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,body,2013-10-28 05:26:24,00:00,,1,,b'b\' This is an experimental work in progress PR to bring us closer to using method handles. It will be entirely protected by a flag until it is as solid as the current mechanism. With the flag enabled the compiler will defer final translation from lambda to class until very late in the pipeline," and it will put the body of the lambda in a method in the original class. This PR leaves two key things undone 1) Specialization still needs to be handled.2) Logic that partially prevents the use of \\\'this\\\' in a super constructor call is bypassed. That logic needs to be redone in order to have fewer holes and be less brittle. To enable on a one off basis use -Ydelambdafy:method. For extensive testing modify ScalaSettings to make ""method"" the default and recompile. Resubmission of #2887\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,1,2013-10-28 05:26:24,35.12,,1,,"b""b' Botched rebase. Will reopen soon'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,closed,2013-10-28 06:01:31,35.12,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,reopened,2013-10-28 16:08:45,607.23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,2,2013-10-28 05:26:24,711.8,,1,,"b""b' I spotted one easy to fix failure in url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,3,2013-10-28 05:26:24,1162.65,,1,,"b'b"" This pull request fails during Scala IDE tests"," with a in some  code. I don\'t know how it gets it this state.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,4,2013-10-28 05:26:24,132.75,,1,,"b""b' Needs rebase.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,5,2013-10-28 05:26:24,33.77,1,,,"b'b"" @skyluc somehow the ordering of arguments on lambdas gets swapped around sometimes after 9bc9f55 . it creates a binary incompatibility that isn\'t detected in the Scala test suite but is detected by the Scala-IDE suite. Adriaan and I suspect that there\'s a small unintended change in ownership structure.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,6,2013-10-28 05:26:24,1386.13,,1,,"b""b' PLS -scala@f61b2cd'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,7,2013-10-28 05:26:24,0.77,,1,,"b""b' PLS -scala@e8a39b9'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,8,2013-10-28 05:26:24,7.23,,,1,"b""b' (kitty-note-to-self: ignore 27493655):cat: Roger! Rebuilding pr-scala for f61b2cdd. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,9,2013-10-28 05:26:24,0.02,,,1,"b""b' (kitty-note-to-self: ignore 27493726):cat: Roger! Rebuilding pr-scala for e8a39b9c. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,10,2013-10-28 05:26:24,92.45,,1,,"b""b' PLS -scala@f61b2cd'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,11,2013-10-28 05:26:24,0.17,,1,,"b""b' PLS -scala@e8a39b9'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,12,2013-10-28 05:26:24,7.4,,,1,"b""b' (kitty-note-to-self: ignore 27503493):cat: Roger! Rebuilding pr-scala for f61b2cdd. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,13,2013-10-28 05:26:24,0.02,,,1,"b""b' (kitty-note-to-self: ignore 27503517):cat: Roger! Rebuilding pr-scala for e8a39b9c. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,14,2013-10-28 05:26:24,40.0,,,1,b'b\' Good stuff, @JamesIry! Nicely structured code," good docs and test coverage.Let\\\'s get this in today once the (minor) comments are addressed. Could you rename your test files so that they all start with ""delambdafy""? Makes it easier to run just your tests. It also looks like you should flip the assumed setting of -Ydelambdafy"," and add -Ydelambdafy:method to ""delambdafy*.flags""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,15,2013-10-28 05:26:24,1.98,,1,,"b'b"" Also", please update the PR description with how to enable your transform, what to expect when it\'s enabled," so we can refer testers here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,16,2013-10-28 05:26:24,1073.33,,1,,"b'b"" I\'ve also got one or two unanswered questions my comments on the original PR: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,17,2013-10-28 05:26:24,1230.58,,1,,"b'b\' @adriaanm wrote:  Only 7 of those 28 have ""delambdafy"" in the path.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,18,2013-10-28 05:26:24,613.33,,1,,"b'b"" You\'re right -I\'ll add to my casual toolchest.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,19,2013-10-28 05:26:24,37.88,,,1,"b""b' +1 from everyone who benefits from mini-tutorials. Still not sure if delambdafy should be delambdify or delamdatification.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,20,2013-10-28 05:26:24,402.28,,,1,"b""b' LGTM!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,21,2013-10-28 05:26:24,1040.62,,,1,"b""b' Woohoo!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,closed,2013-11-07 18:56:47,168.03,1,14,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3081,closed,-,-,-,1,14,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,opened,2013-10-29 02:20:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,title,2013-10-29 02:20:35,00:00,,1,,"b""b' WIP: compiler modules'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,body,2013-10-29 02:20:35,00:00,,1,,"b""b' Enforce consistency of pack", docs, osgi, maven tasks. Instead of scattering properties all over invocations ofstaged-docs, staged-pack, make-bundle, copy-bundle and mvn-package,these are now all fully determined by the project they act on. The varying arguments to these macros are all centralized.They are named like  , where is one of:description, package, dir, name, namesuffix, version,targetdir, targetjar, jar, docroot, skipPackage, srcdir, src," srcjar. The defaults for these properties are computed using  .'""",,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,1,2013-10-29 02:20:35,269.55,,1,,"b""b' the last commit is work in progress -the first ones simplify the build to make the last one as small as possible todo:somehow jline breaks in sbt consolepublish virtual (and how to convince the maven task to publish without a jar?) maven artifact scala-compiler that depends on -core", -doc," and -interactive? no more scala-? scala-compiler-*.jar instead?similarly for osgi'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,2,2013-10-29 02:20:35,26.15,,,1,"b'b"" From command line maven", I think it is enough to have a pom with  . The ant task should have the same semantics," if you can\'t convince the more fine-grained ant tasks to do this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,3,2013-10-29 02:20:35,1.02,,1,,"b""b' I guess you already know about this one"," but here is an example: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,4,2013-10-29 02:20:35,25.73,,1,,"b""b' The last commit breaks the sbinary build url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,5,2013-10-29 02:20:35,461.1,,1,,"b""b' Yep", I was trying to mimic scala-library-all," but the maven ant task does not let me publish without a jar.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,6,2013-10-29 02:20:35,23.27,1,,,"b'b"" Thanks", @skyluc! I\'m abusing jenkins to speed up my integration testing as I experiment with different  for the scala-compiler split into scala-compiler-core, scala-compiler-doc," scala-compiler-interactive (and next up: scala-compiler-repl)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,7,2013-10-29 02:20:35,281.68,,1,,"b""b' Back to the original approach: slim down scala-compiler jar", moving those classes to newly introduced jars for scaladoc," presentation compiler.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,8,2013-10-29 02:20:35,0.93,,,1,"b""b' @skyluc"," @dragos: could you have a look at the changes to the *.bnd files? thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,9,2013-10-29 02:20:35,55.63,,1,,"b""b' btw"," you can compile and publish this locally pretty quickly with:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,10,2013-10-29 02:20:35,1255.53,,,1,"b""b' Closing for rebasing and dbuild upgrade. Please pardon our dust.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,closed,2013-11-08 18:21:11,960.6,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,reopened,2013-11-09 01:42:31,441.33,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,closed,2013-11-09 01:42:46,0.25,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3087,closed,-,-,-,1,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,opened,2013-11-13 20:05:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,title,2013-11-13 20:05:36,00:00,,1,,"b""b' Merge 2.10'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,body,2013-11-13 20:05:36,00:00,,1,,"b""b' Intermediate steps:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,closed,2013-11-13 21:38:28,92.87,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,reopened,2013-11-13 22:21:17,42.82,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,1,2013-11-13 20:05:36,136.28,1,,,"b""b' I redid the merge and it looks ok. Sorry", @som-snytt," I still had to drop 25bcba59ce -too much had shifted around.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,2,2013-11-13 20:05:36,1.2,,,1,"b""b' The failed intermediate commits are in the history", but their content was omitted using -s ours, so as long as the last commit passes the tests," I think this is good to go. Review by @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,3,2013-11-13 20:05:36,1.23,,1,,"b'b"" Btw", if you\'d like to redo the merge," the second time around I did:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,4,2013-11-13 20:05:36,5.45,,1,,"b'b"" I\'ll take a closer look tomorrow. For now"," here\'s what I like to add to merge PRs to justify the merge sequence:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,5,2013-11-13 20:05:36,51.98,,1,,"b""b' I did see a failure notice and looked at it", but it looked like a build context issue.  Personally," I reserve my supreme faith for our ability to refactor everything every six to twelve months thereby making history irrelevant.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,6,2013-11-13 20:05:36,979.33,,1,,"b'b"" LGTM. The only wrinkle I see is in  ", merging would have the same effect as 66c4135942 is in its history. With this in mind I\'ll let you do one last check of the sequence," but feel free to pull the trigger.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,7,2013-11-13 20:05:36,183.95,,,1,"b""b' Thanks", I noticed that redundancy on the second go," but decided not to push -f since I verified the diff between the PR and my verification was empty.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,closed,2013-11-14 18:45:08,1223.85,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3133,closed,-,-,-,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,opened,2013-11-15 09:12:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,title,2013-11-15 09:12:14,00:00,,1,,"b""b' add to '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,body,2013-11-15 09:12:14,00:00,1,,,"b'b"" Currently it\'s not possible to use easily in a functional way", since the essential method throws an exception in a common situation (dequeue on an empty Queue). Of course you can convert the exception into an Option on the user-side, but this is awkward to code, and simply annoying. This pull-request implements in the spirit of for  , yielding  , with in case of empty queue.  A possible different type signature might have been  , though this appears a bit strange, since would return for the empty case and with first element removed," else. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,1,2013-11-15 09:12:14,1362.05,1,,,"b'b"" I\'m very sorry this went without feedback for so long. I\'ve been mulling this over", and I\'m not sure about the benefit of adding another method for this -also, Option-boxing is a performance killer. What say you," @ichoran?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,2,2013-11-15 09:12:14,50.95,1,,,"b""b' @adriaanm Option-boxing is way", way, way less of a performance-killer than is throwing an exception.  Although in general I would rather deprecate methods than add more, I agree with @ziggystar that this is key missing functionality given that we support headOption.  The closest equivalent is  , which is rather awkward.  Also," LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,3,2013-11-15 09:12:14,374.52,,1,,b'b\' @adriaanm I think wrapping around the result does not matter that much performance-wise. After all, already creates a Tuple and a new instance. But on the other hand," one can locally add Ichoran\\\'s code as an extension method presumably without a substantial performance hit compared to putting it into the library. So basically it boils down to ""How many batteries are included?"". At least I am using and frequently", only seldomly switching away for performance reasons. Thinking about it, if performance matters I\\\'m switching to mutable collections; this only works if you don\\\'t need the persistence.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,4,2013-11-15 09:12:14,127.17,,,1,"b'b"" Ok! Please squash the commits and align your PR with our [PR Policy]url  please add a JUnit test under -run with  . Here\'s a recent example: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,closed,2013-12-05 15:49:22,397.13,3,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,reopened,2013-12-05 15:50:22,1.0,3,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,closed,2013-12-05 15:51:10,0.8,3,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,reopened,2013-12-05 15:53:14,2.07,3,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,5,2013-11-15 09:12:14,1369.1,1,,,"b'b"" Sorry"," I use eclipse. /cc @retronym who\'s our intellij expert.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,6,2013-11-15 09:12:14,1.82,,1,,"b""b' url url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,closed,2013-12-05 16:01:05,7.85,4,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,reopened,2013-12-05 16:01:54,0.82,4,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,closed,2013-12-05 16:12:43,10.82,4,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,reopened,2013-12-05 16:12:51,0.13,4,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,closed,2013-12-05 16:13:16,0.42,4,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3146,closed,-,-,-,4,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,opened,2013-12-02 10:54:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,title,2013-12-02 10:54:10,00:00,,1,,"b""b' SI-7982 make askLoadedType unload arguments out of the PC by default","'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,body,2013-12-02 10:54:10,00:00,,1,,"b'b"" Re-opened url  to target 2.10.x review by @adriaanm As point out by @huitseeker in url  scala-refactoring failure is expected until url  is merged. I\'m not sure what\'s the best course of action here", but merging this PR will require some coordination with @misto," because the scala-refactoring PR should be merged at the same time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,1,2013-12-02 10:54:10,38.48,,,1,"b'b"" Feel free to just merge it in scala-refactoring yourself once it\'s ready!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,2,2013-12-02 10:54:10,41.18,,,1,"b""b' @misto Ok! @adriaanm How do you want to coordinate. I can push the button on scala-refactoring side whenever you are ready.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,3,2013-12-02 10:54:10,2.3,,,1,"b'b"" We\'ll need the other tests to pass here"," first :) url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,4,2013-12-02 10:54:10,6.57,,1,,"b'b"" Ouch. I\'ll look at it...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,5,2013-12-02 10:54:10,56.13,,,1,"b'b"" I\'m going to have a dry-run at building the Scala IDE using this PR + url  and report back in about 1h. In the meanwhile", please, have a look at the changes and let me know if you want me to change anything. If it\'s good to ship," I\'ll squash the two commits and we can sync for merging this PR and scala-refactoring one at the same time. \\\\cc  @retronym @adriaanm""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,6,2013-12-02 10:54:10,4.77,1,,,"b'b"" I\'m experiencing more trouble than I expected while rebuilding a Scala IDE on top of this PR. I\'m going to close this PR so I won\'t be spamming you all while I\'m working on fixing things.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,closed,2013-12-04 13:23:36,149.43,1,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,reopened,2013-12-04 15:52:09,148.55,1,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,7,2013-12-02 10:54:10,152.02,,1,,"b""b' Alright", this is now ready to be merged. The following two PR have to be merged together," or the Scala IDE validator script will start failing:url url  I can push the merge button on the above two projects whenever you are ready.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,8,2013-12-02 10:54:10,77.87,,,1,"b'b"" @dotta", great! Since you control the merge buttons of those other projects," I suggest you hit them when you\'re ready and then do a rebuild here -I\'ll merge later (my) today when the lights go green.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,9,2013-12-02 10:54:10,1.35,,1,,"b'b"" Is there any way you can structure the changes so that they work whether or not all PRs are merged at the same time? By having a fallback in the IDE patch", for example. I didn\'t look at the code," so I\'m just asking.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,10,2013-12-02 10:54:10,3.33,,,1,"b""b' (kitty-note-to-self: ignore 29824603):cat: Roger! Rebuilding pr-scala for f7a1c362. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,11,2013-12-02 10:54:10,6.52,,1,,"b'b"" Looking at the code a bit", I would (naively -I haven\'t fully understood everything yet) suggest trying a different approach: make the behavior the default (this way scala-refactoring need not change) and offer an overload that doesn\'t keep stuff loaded ( should the argument be false?). In general," boolean arguments like this are a bit of a code smell.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,12,2013-12-02 10:54:10,947.9,1,,,"b'b"" @adriaanm It\'s a bit hard to coordinate with you due to the timezone", can someone from Europe be in charge of merging this PR?I thought about that, but I don\'t see another way.That would defeat the purpose of the PR, as the default should really be not to keep units loaded. The reason is that typechecking occurs every time the reconciler kicks-in (~500millis after you stop typing), and the more units are loaded the slower is the typechecking performed by the presentation compiler. Hence, we want callers of to think about keeping a unit loaded, which is why the defult is to not do so. [Here]url  is a ticket related to my previous point. I agree this is not the best design (a good API shouldn\'t offer sharp knives that you can use to cut yourself), but I don\'t see a better solution at the moment. Furthermore, consider that other methods in also have a parameter, so at least we have some consistency. Bottom line, even though I understand the pain, I don\'t see how it can be avoided. I think I\'ve been a good boy scout and manually checked that the three PRs I linked work together. This was done using the same uber-build script we use for the Scala validation script. In fact, I just pushed a branch that you can use yourself: url  Just run the following: The file contains the configuration for building the three PRs together.  And just to make sure things work as expected," I\'m re-running it once more locally and will report back as soon as it\'s done. (EDIT: I confirm this worked fine).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,13,2013-12-02 10:54:10,8.7,,1,,"b'b"" @adriaanm I initially had the same reaction why not keep the them loaded by default but I now think this is the better way to go", even if it\'s a bit painful at the moment," in the long run it\'s the proper solution. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,14,2013-12-02 10:54:10,421.43,,,1,"b'b"" I don\'t insist on being a bottleneck here -was just pitching in until Europe woke up (literally I mean) :-) @retronym"," could you coordinate with @dotta ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,15,2013-12-02 10:54:10,1.38,,,1,"b'b"" Thanks for explaining in detail", @dotta. Sounds reasonable. In general, I\'d prefer deprecation cycles and new names when we have to," but I agree we\'re not there yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,16,2013-12-02 10:54:10,6.87,,1,,"b""b' But this is a correctness fix. The change is binary compatible"," but semantic is affected.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,17,2013-12-02 10:54:10,0.78,1,,,"b""b' Also"," please preserve your github comments in the commit message'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,18,2013-12-02 10:54:10,6.22,,,1,"b""b' (The deprecation cycle could let you swap the default for keepLoaded. Forgive my concision"," sneakily typing during a meeting.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,19,2013-12-02 10:54:10,986.15,,1,,"b""b' @adriaanm Done.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,closed,2013-12-06 12:26:03,1233.9,3,9,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,20,2013-12-02 10:54:10,205.9,,,1,"b""b' :wine_glass: thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3209,closed,-,-,-,3,9,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,opened,2013-12-02 15:19:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,title,2013-12-02 15:19:02,00:00,,1,,"b'b"" SI-4287 Corrected range positions for constructor\'s default arguments""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,body,2013-12-02 15:19:02,00:00,,1,,"b'b"" First commit demonstrates the problem.Second commit fixes it. review by @retronym I would like this to be backported to 2.10.x. However", because this patch cannot be cleanly applied to 2.10.x, it would be convenient if we could first merge it in master," and then I\'ll take care of the backport.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,1,2013-12-02 15:19:02,69.75,,1,,"b""b' LGTM Second opinion please by @densh One minor point: could you limit your commit subject to 65 chars? It makes life easier for release notes and browsing git logs  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,2,2013-12-02 15:19:02,975.23,1,,,"b'b"" Sure thing. If that is a general policy", could you guys add it to your [CONTRIBUTING]url  doc (if it\'s already there," then I\'m sorry I missed it).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,3,2013-12-02 15:19:02,18.98,,1,,"b""b' I was being a bit stingy.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,4,2013-12-02 15:19:02,1.02,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,5,2013-12-02 15:19:02,5.95,1,,,"b""b' So", only the title should be no more than 70 characters. Or," should I make sure the whole message is line wrapped at 70 characters?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,6,2013-12-02 15:19:02,12.17,,1,,"b""b' url  (But we allow 70 in the title)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,7,2013-12-02 15:19:02,472.12,,,1,"b""b' LGTM.  Every time I look at range position handling code I wonder if it would be a good idea to write a simple tool that would visualize connections between trees and positions better. i.e. UI with code on the left and trees on the right; hovering over a tree highlights appropriate region of text in the code. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,8,2013-12-02 15:19:02,1310.07,1,,,"b'b"" @retronym I just run the whole partest suite on my machine and didn\'t get any failure"," I\'m confused.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,9,2013-12-02 15:19:02,8.17,,1,,"b'b"" @dotta You\'ve got failures in rangepos build. To simulate it locally you need to add -Yrangepos flag to : Or alternatively launch ant with some extra params:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,10,2013-12-02 15:19:02,7.27,,1,,"b""b' or"," individually  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,11,2013-12-02 15:19:02,22.73,,1,,"b""b' Actually"," the failure happens while compiling the scala library. I see the following in the log output: Am I right to think that this is failing while compiling  ? Or may it be that the failure is caused by some other source file?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,12,2013-12-02 15:19:02,54.0,,1,,"b""b' Ok", I could reproduce it," working on fixing it now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,13,2013-12-02 15:19:02,1322.85,,1,,"b'b"" I\'m closing this as it needs more working. Will re-open it when it\'s ready.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,closed,2013-12-06 14:39:20,1400.3,3,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,14,2013-12-02 15:19:02,515.45,,1,,"b""b' Keeping this open so we know which PRs must be merged before we can release'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,reopened,2013-12-09 23:14:48,515.47,3,12,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,15,2013-12-02 15:19:02,0.4,,1,,"b'b"" Oh"," actually this is the one for master. Was thinking it\'s 2.10.x""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,closed,2013-12-09 23:15:11,0.38,3,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3210,closed,-,-,-,3,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,opened,2013-12-03 18:00:30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,title,2013-12-03 18:00:30,00:00,,1,,"b""b' SI-7788  can circumvent implicit shadowing'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,body,2013-12-03 18:00:30,00:00,,1,,"b""b' ... together with small improvements to shadowing detectionin implicit typechecking. Review by @adriaanm'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,1,2013-12-03 18:00:30,655.3,,1,,"b""b' I think this needs to be rebased -due to the askLoadedType change'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,2,2013-12-03 18:00:30,531.08,,1,,"b""b' Rebased'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,3,2013-12-03 18:00:30,267.77,,1,,"b""b' Darn"," and now it needs a check file update'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,4,2013-12-03 18:00:30,150.78,,1,,"b'b"" I\'ve rebased with the checkfile fixup"," and added a comment about renamed imports.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,5,2013-12-03 18:00:30,36.1,,,1,"b""b' LGTM -:star: for the comment!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,6,2013-12-03 18:00:30,110.1,,1,,"b""b' Rebuild when url  is merged.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,7,2013-12-03 18:00:30,0.82,,1,,"b'b"" I looked into what could be causing the failure from our side", but it\'s failing across all of our jenkins lampscalatst\\\\* slaves," so not sure what to do there. It\'s not like they\'re running out of disk space. My hypothesis is that the build script is not robust against aborts.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,8,2013-12-03 18:00:30,1051.75,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,9,2013-12-03 18:00:30,4.13,,,1,"b""b' (kitty-note-to-self: ignore 30676373):cat: Roger! Rebuilding pr-scala for 239cc1f0", fc011f7b, 511f0b10," c28f2f34. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,10,2013-12-03 18:00:30,1280.33,,1,,"b""b' The failures seem legit: refactoring is failing tests in organize imports", related to implicits: Not sure if the changes are intentional, and scala-refactoring should update its test," or a regression. /cc @misto'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,11,2013-12-03 18:00:30,40.72,1,,,"b'b"" Hard to tell"," but I think it could be my test that\'s at fault. Do you want me to adapt it to the new behaviour?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,12,2013-12-03 18:00:30,541.12,,1,,"b'b"" This is a new failure -we didn\'t get there last time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,13,2013-12-03 18:00:30,860.87,,,1,"b""b' NOLITTER!PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,14,2013-12-03 18:00:30,7.18,,,1,"b""b' (kitty-note-to-self: ignore 30930857):cat: Roger! Rebuilding pr-scala for 239cc1f0", fc011f7b, 511f0b10," c28f2f34. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,15,2013-12-03 18:00:30,0.0,1,,,"b""b' (kitty-note-to-self: ignore 30930857):cat: cleaning up... sorry! :cat:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,16,2013-12-03 18:00:30,44.38,,1,,"b'b"" The breakage in scala-refactoring comes down to different", though semantically identical," trees:   I\'ll change this PR to avoid the gratuitous change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,17,2013-12-03 18:00:30,447.52,,1,,"b""b' closing for a quick reno...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,closed,2013-12-19 22:30:27,269.95,2,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,reopened,2013-12-20 13:38:27,908.0,2,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,18,2013-12-03 18:00:30,910.27,,1,,"b""b'   @adriaanm The first two commits", starred above," are new in the latest  . '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,19,2013-12-03 18:00:30,147.43,,1,,"b""b' Looks like is added by _organize imports_ refactoring. @misto"," could you please have a look?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,20,2013-12-03 18:00:30,10.6,,1,,"b""b' I believe that my changes conflict with a bit of ad-hockery in scala-refactoring.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,21,2013-12-03 18:00:30,9.55,,1,,"b""b' Oh yes... does the compiler have a handy method to determine if is from Predef or any other default-imported place?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,22,2013-12-03 18:00:30,31.83,,1,,"b'b"" @misto What decisions are based on this function?  We\'ve got:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,23,2013-12-03 18:00:30,103.48,,,1,"b'b"" That\'s sounds promising"," I\'ll give it a try!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,24,2013-12-03 18:00:30,16.33,,,1,"b'b"" It almost works! There seems to be only one case in my tests where it doesn\'t. Here isOmittablePrefix on the qualifier of returns false.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,25,2013-12-03 18:00:30,26.75,,1,,"b""b' @misto Could you demonstrate that in a mode session?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,26,2013-12-03 18:00:30,10.78,,1,,"b'b"" I just noticed that I tested it on 2.10"," should it make a difference? Edit: It\'s the same with 2.11.0-M7""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,27,2013-12-03 18:00:30,11.9,,1,,"b'b""   isn\'t omittable as a prefix"," on and  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,28,2013-12-03 18:00:30,15.57,1,,,"b'b"" Ah", no of course not," I\'m an idiot :-) Well then I can just use and save me the trouble.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,29,2013-12-03 18:00:30,7.93,,1,,"b'b"" @misto Does that change make scala-refactoring compatible  this PR? BTW"," it\'s easy to test this with:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,30,2013-12-03 18:00:30,15.42,,,1,"b'b"" Yes it does! There are test failures with 239cc1f but it\'s fine with ed11d71!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,31,2013-12-03 18:00:30,0.47,,1,,"b'b"" I\'ve pushed the changes to scala-refactoring.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,32,2013-12-03 18:00:30,45.87,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,33,2013-12-03 18:00:30,4.0,,,1,"b""b' (kitty-note-to-self: ignore 31042183):cat: Roger! Rebuilding pr-scala for ed11d718", 3008b208, 75b65b52, 6e03d2cd, 2f41fa74," 666275ab. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,closed,2013-12-21 21:03:53,445.43,3,24,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,reopened,2013-12-22 09:13:01,729.13,3,24,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,closed,2013-12-22 15:16:55,363.9,3,24,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,reopened,2013-12-22 16:15:09,58.23,3,24,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,34,2013-12-03 18:00:30,1140.42,,,1,"b""b' NOLITTER!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,35,2013-12-03 18:00:30,9.63,1,,,"b""b' (kitty-note-to-self: ignore 31090247):cat: cleaning up... sorry! :cat:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,closed,2013-12-22 20:42:01,266.87,4,24,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,36,2013-12-03 18:00:30,318.73,,1,,"b""b' I hope that my flailing around in this PR is of some comedic value. I can clearly see what appears to be a bona-fide dawn now"," so stay tuned for more.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,37,2013-12-03 18:00:30,33.25,,,1,"b""b' @retronym Good luck! Keeping fingers crossed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,reopened,2013-12-23 12:04:51,922.83,4,25,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,38,2013-12-03 18:00:30,1359.07,,,1,"b""b' @retronym Congrats!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,39,2013-12-03 18:00:30,11.38,,,1,"b""b' @xeno-by Thanks! Perhaps you could help out to review"," in particular that the last two commits?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,40,2013-12-03 18:00:30,110.78,,1,,"b""b' How about a different name for  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,41,2013-12-03 18:00:30,638.78,,,1,"b""b' Shutting this down again thanks to the diligent reviewer poking a hole in the core change...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,closed,2013-12-24 09:40:41,1295.83,4,26,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,42,2013-12-03 18:00:30,880.08,1,,,"b'b"" @retronym", Sorry, I haven\'t re-read the whole thread, but how about deprecating , removing its implicit status," and adding a  to Predef?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3217,closed,-,-,-,5,26,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,opened,2013-12-17 19:10:46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,title,2013-12-17 19:10:46,00:00,,1,,"b""b' SI-8085 Fix BrowserTraverser for package objects'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,body,2013-12-17 19:10:46,00:00,,1,,"b""b' Review by @dotta'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,closed,2013-12-17 19:56:26,45.67,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,reopened,2013-12-17 20:40:28,44.03,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,1,2013-12-17 19:10:46,821.48,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,2,2013-12-17 19:10:46,0.43,,,1,"b""b' Thanks a lot Jason! Really great XMas present ;-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,closed,2013-12-18 23:55:28,195.0,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3282,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,opened,2014-01-06 09:07:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,title,2014-01-06 09:07:34,00:00,,1,,"b""b' SI-8032 Provides an implicit macro for materialization of Liftable for case classes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,body,2014-01-06 09:07:34,00:00,,1,,"b""b' Now case classes can be used in quasiquotes. Review by @xeno-by", @densh," and @retronym please.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,1,2014-01-06 09:07:34,1.6,,,1,"b""b' Thanks @xeno-by for huge support with making it work. Some sausage making is available here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,2,2014-01-06 09:07:34,23.85,,1,,"b'b"" I\'m concerned about a potential ambiguity when splicing", e.g. a inside the cake. At that point, it is know to be a case class," so this implicit could be eligible. Will that conflict with the built-in support for splicing  s?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,3,2014-01-06 09:07:34,27.08,,,1,"b'b"" Thanks for the feedback! I\'ll close this PR for now", while trying to address the issues," so that it does not interfere with milestone releases. Will reopen as soon as everything is covered.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,closed,2014-01-06 10:00:06,52.53,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,4,2014-01-06 09:07:34,47.47,,1,,"b""b' @retronym Ident is a tree and iirc this takes priority of liftables.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,5,2014-01-06 09:07:34,1.07,,1,,"b'b"" @folone Don\'t worry"," it\'s just a couple of easily fixed remarks. Let\'s have a chat and we\'ll be able to fix everything within an hour or two.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,6,2014-01-06 09:07:34,113.57,,,1,"b'b"" As far as I understand this is a direct fix for [SI-8032]url ~%20%22liftable%22). Please reference this bug in the title of the commit message as when you resubmit.  I\'m really looking forward to have it in trunk. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,7,2014-01-06 09:07:34,107.18,,1,,"b'b"" Just to step back for a second: what\'s the motivating use case for this  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,8,2014-01-06 09:07:34,9.07,,,1,"b'b""   and are aimed to make it easy to convert things from one meta level (runtime", actual values) to another (compile-time, trees that represent them). Otherwise you\'d have to manually call convertors every time you want to splice or extract anything other than  ,  ," or  . In the perfect world we would be able to convert anything to tree and extract corresponding representations back to values and do arbitrary partial execution with ease in between the two (e.g. constant folding as the simplest example)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,9,2014-01-06 09:07:34,25.42,,1,,"b""b' I just want us to be careful in adding superficial support for case classes. The challenges here likely parallel those encountered in scala-pickling. For example: is there any story for  sealed ADTs", rather than just concrete leaf classes? I can imagine that unlifting could be possible," but lifting impossible.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,reopened,2014-01-06 16:33:51,393.75,0,7,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,10,2014-01-06 09:07:34,91.72,,,1,"b""b' @retronym @xeno-by @densh I believe"," all the comments are addressed in url  @xeno-by Thanks again for helping address all the issues!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,11,2014-01-06 09:07:34,16.17,,1,,"b""b' Squashed into one commit.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,12,2014-01-06 09:07:34,1055.8,1,,,"b'b"" @retronym I don\'t see why sealed hierarchies of case classes should cause any problem. For example (assuming quasiquotes are already referentially transparent): Are there any corner cases I\'m not taking into the account? Maybe @xeno-by could elaborate on his experience with pickling?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,13,2014-01-06 09:07:34,4.17,,,1,"b""b' I think what Jason means is that it would be awesome to have sealed hierarchies handled by the materializer macro. However", this is: a) impossible to implement robustly at the moment, b) going to duplicate the effort that people apply in shapeless, pickling," etc.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,14,2014-01-06 09:07:34,1.23,,,1,"b""b' Yep"," I meant that you pretty quickly end up wanting: I also found it interesting in general to think of the parallels to pickling.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,15,2014-01-06 09:07:34,5.23,,,1,"b""b' I would really like to see some test cases added that work now but that broke before the hygienic changes. Writing a few of these helps to develop a critical eye to spot more potential problems with hygiene. Are we sure we caught them all? It would", of course," be amazing if we had an automated way to ensure that when typechecking a macro expansion never binds to a symbol defined in a splicee or in the enclosing compilation unit. Which is hopefully one of the early building blocks the @densh can explore soon on the way to better safety in this regard.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,16,2014-01-06 09:07:34,8.87,,1,,"b'b"" @retronym Sometimes unhygienic binding is useful. How would we make sure we don\'t prohibit it along with legitimate macro errors?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,17,2014-01-06 09:07:34,370.97,,1,,"b'b"" I\'m still not comfortable adding this macro for 2.11", as I think we should work on the foundations of quasiquotes before we add this convenience. Closing," but please resubmit after 2.12 dev starts.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,closed,2014-01-16 16:58:01,24.17,1,10,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,18,2014-01-06 09:07:34,3.87,,,1,"b""b' Will do. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3326,closed,-,-,-,1,10,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,opened,2014-01-12 17:30:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,title,2014-01-12 17:30:10,00:00,,1,,"b""b' SI-8143 Regressions with override checks"," private members'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,body,2014-01-12 17:30:10,00:00,1,,,"b'b"" These regressed in e609f1f20b", which excluded all private methods fromoverriding checks. We should only exclude private[this] members on thelow end of a pair, as was done before that commit, and, we must alsoexclude private members on the high side. Why? Warning: reverse engineered intuition follows. We need to report an error when if a private method in a subclasshas matches a less-private method in the super class and report anerror, lest the user be fooled into thinking it might be invokedvirtually. On the other hand, adding a private method to a superclass shouldn\'t invalidate the choice names of public members inits superclasses. I\'ve removed the test case added by that commit and will lodge areworked version of it that Paul provided as a new issue. That showsa bug with qualified private + inheritance. In addition, the expectation of is revertedto its 2.10.3 version, which I believe is correct. When it waschanged in e609f1f20b it sprouted a variation,  ,"which has now changed behaviour. The intent of that test willbe captured in the aforementioned issue covering qualified privateinheritance. Review by @adriaanm.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,1,2014-01-12 17:30:10,66.98,,1,,"b'b"" I don\'t know what\'s going on in the test which was checked in"," but this is what I was trying to say.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,2,2014-01-12 17:30:10,515.6,,1,,"b'b"" That test case is my whole review", because as everyone should know by now," I don\'t what access is supposed to do.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,3,2014-01-12 17:30:10,275.48,,,1,"b'b\' Closing temporarily as this still needs some work. Expanding the test case: shows the following two incorrect compiler errors wrt 2.10: I\\\'ll have to restrict myself to regressions in this pass and push the fixes for qualified private to a new ticket. I don\\\'t see anything in that corresponds to the specification that qualified private members ""are also inherited only from templates inside C ."" But thanks for the test case as it shines a clear light on the problem.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,closed,2014-01-13 07:48:16,858.1,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,reopened,2014-01-13 09:56:21,128.08,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,4,2014-01-12 17:30:10,1338.78,1,,,"b""b' The bugs with this go on essentially forever", as I have long known. Because I am cruel," here are more.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,5,2014-01-12 17:30:10,103.48,,1,,"b'b"" I\'ve lodged your two test cases touching qualified private as SI-8155. I won\'t be able to address them for 2.11. The workaround is to install a pair of methods: a final", qualified private accessor," which exposes a protected virtual method.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,6,2014-01-12 17:30:10,48.27,,1,,"b'b"" I don\'t think you will be able to address it", period. Access as presently semi-specified cannot be made consistent, and that\'s before we throw in the jvm-related challenges. So as long as it will be addressed never," I think it\'s okay not to address it for 2.11.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,7,2014-01-12 17:30:10,689.3,,1,,"b'b"" Plenty of wrongness in the privacy department"," here\'s another one Martin pointed out to me last week:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,8,2014-01-12 17:30:10,20.12,,,1,"b""b' Why not? If it were private[this] val foo", okay, but A can see the privates of another A," which a B certainly is. This shapes up to be either a mistake or a fascinating revelation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,9,2014-01-12 17:30:10,5.62,,1,,"b'b"" Unqualified private members are not inherited"," so should not be members of  . I\'ll add this example to SI-7475 which is similar if not the same.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,10,2014-01-12 17:30:10,2.93,,,1,"b'b"" It\'s not a member of B"," it\'s a member of A! How can this be reconciled with LSP? Is a B an A or not?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,11,2014-01-12 17:30:10,2.92,,1,,"b'b"" What about this? Are we saying the compiler isn\'t allowed to infer that it\'s an A? We insist on inferring a uselessly general type all over the place"," on what basis would we pursue the opposite extreme in this case?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,12,2014-01-12 17:30:10,0.97,,1,,"b""b' And in any case"," is there not an implicit conversion from B to A by way of conforms? How on earth could this not typecheck?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,13,2014-01-12 17:30:10,26.33,,1,,b'b\' private members are exempt from the substitution principle," as LSP only talks about the interface that can be observed from the outside (where the ""outside"" is either an inheritance client or an external method call)\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,14,2014-01-12 17:30:10,3.37,,1,,"b'b\' 1) What source instructs us ""where the ""outside"" is either an inheritance client or an external method call"" ?2) There are still two more things to explain away: the compiler inferring a more general type and the implicit conversion from B to A.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,15,2014-01-12 17:30:10,17.2,1,,,"b'b"" Private members are not exempt from LSP because they are part of the supertype\'s self-interface.  private[this] members are exempt.  You can see why it is hopeless to do otherwise:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,16,2014-01-12 17:30:10,1.98,,1,,"b""b' To rephrase", LSP talks about types," and the private members of a class are not conceptually part of the type that describes that class (hence the use of nonPrivateMembers internally to drop them from ClassInfoType)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,17,2014-01-12 17:30:10,2.22,,1,,"b'b"" @Ichoran Well _I_ can see why it\'s hopeless to do otherwise"," but prevailing opinion is going the other way. It\'s worth taking a moment to appreciate this achievement: language has been around for 10+ years but basic issues are still shrouded in a fog of mystery. Should there be a lot of 2-2 votes among the four of us?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,18,2014-01-12 17:30:10,7.43,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,19,2014-01-12 17:30:10,1.48,,1,,"b'b"" I don\'t think it makes sense for the baz method to compile when there\'s no foo member in B", because when you add one and compile B separately from A," B\'s foo won\'t be called by A\'s baz.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,20,2014-01-12 17:30:10,1.23,,1,,"b""b' It may be helpful to forget about LSP and make some attempt to deal with the implicit conversion from B to A"," because LSP is academic.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,21,2014-01-12 17:30:10,1.13,,1,,"b'b"" How about separate compilation? Is that academic? It\'s not unrelated to LSP.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,22,2014-01-12 17:30:10,0.85,1,,,"b'b\' ""I don\\\'t think it makes sense for the baz method to compile when there\\\'s no foo member in B", because when you add one and compile it separately," it won\\\'t be called."" The inconveniences posed by separate compilation are not the least bit relevant to what is specified. If that\\\'s the argument here"," then just say ""we ignore the specification because it\\\'s too hard"," don\\\'t say that a B isn\\\'t an A or that an implicit which applies everywhere else doesn\\\'t apply here.\''
scala	3357	closed	23	adriaanm	2014-01-12 17:30:10	0.2		+1		b""b' I believe the implicit conversion is explained by my comment above that says private members are not part of the type.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,24,2014-01-12 17:30:10,3.2,,1,,"b""b' The specification is designed to enable separate compilation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,25,2014-01-12 17:30:10,15.45,,1,,"b'b\' Some parts of the spec which are followed are designed to enable separate compilation; others which are ignored are ignored probably for separate compilation. (One of the first and two of the second can be found in my last comment at url  ) I agree that enabling separate compilation is a common theme. I\\\'m going to chalk this up to ""implementation considerations trump ability to reason about code"" and go re-read some richard gabriel in the forest.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,26,2014-01-12 17:30:10,5.8,1,,,"b'b"" It\'s not about separate compilation per se", is it?  Just technical limitations.  If does not declare a  , then can\'t call the version of  , only its own.  If you alter later to add a method, you still can\'t have called it from (just the same as if you try to call a method on which didn\'t exist when you compiled  ) unless you recompile  .  But you need to catch your mistakes somehow. Not allowing is to avoid getting confused: simplifying, not necessary, though I admit that solving the mutual dependency problem is hard without that simplification.  Maybe impossible with the JVM, as would need to declare that has no so that when is loaded it would generate an error.  If it could do that, everything would be LSP-compliant (at different levels of visibility) and safe for separate compilation. Is it true that simply declaring that private members aren\'t part of the type will solve the theoretical problems?  How is it that instances of know about the private members of other  s if it\'s not part of a type?  Surely, for example, for an instance of  ," yet has all the private members of available.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,27,2014-01-12 17:30:10,5.45,,1,,"b""b' The boundary comes down to whether or not they are inherited in subclasses. This must compile: So the private member in is part of the compound type. My first naive attempt to fix SI-7475 broke this case.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,28,2014-01-12 17:30:10,9.23,,1,,"b'b"" It\'s not an implementation consideration. Both are pretty easy to implement"," as shown by the existence of the bug.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,29,2014-01-12 17:30:10,5.98,,1,,b'b\' yep, this is huge obstacle to implementing virtual classes," as the ""accidental override"" problem is much more pressing in that setting \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,30,2014-01-12 17:30:10,1.25,1,,,"b""b' separate compilation is a proxy for modular reasoning about your code -to avoid getting confused'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,31,2014-01-12 17:30:10,6.12,,1,,"b'b"" SI-2568 isn\'t an implementation consideration?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,32,2014-01-12 17:30:10,65.28,,1,,"b""b' It is"," but I thought we were talking about another it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,33,2014-01-12 17:30:10,1084.27,,1,,"b""b' The candidate",  ," is not allowed as a view.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,34,2014-01-12 17:30:10,4.93,,1,,b'b\' And that\\\'s completely unspecified," right? Maybe I\\\'m not seeing it; the word ""conforms"" appears a lot. I just kind of wonder how any user of the language could possibly know to expect this behavior.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,35,2014-01-12 17:30:10,33.53,,1,,b'b\' You are right, that\\\'s outside of the spec (the special case," and the existence of conforms itself.) I was actually thinking about this one today and trying to reverse engineer the reason. Couldn\\\'t get there with a thought experiment alone. Here\\\'s one thing (heavily in the ""implementation issues"" end of the spectrum) that breaks with that special case removed.  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,36,2014-01-12 17:30:10,260.02,,,1,"b'b"" yeah", conforms is a wart that should not exist in Predef -I think it was in the <:< companion at some point, and we should probably re-introduce it there, deprecating , but immediately removing its implicit status. Interestingly," I was sitting next to Martin last week when he ran into this discrepancy between dotty (which doesn\'t special-case conforms) and the current compiler.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,37,2014-01-12 17:30:10,1043.87,,,1,"b'b"" Fascinating as these musings are"," I also need a review here. @adriaanm ? I was just about to lodge this bug: Until I realised that it wouldn\'t be allowed after we fix this regression:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,38,2014-01-12 17:30:10,2.08,,1,,"b""b' See also #3440"," which addresses another invasion of privacy.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,39,2014-01-12 17:30:10,174.43,,1,,"b""b' LGTM Sorry I got a little side-tracked by the discussion. The actual change is fine.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,closed,2014-01-31 19:05:03,548.7,6,30,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3357,closed,-,-,-,6,30,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,opened,2014-02-06 23:54:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,title,2014-02-06 23:54:10,00:00,,1,,"b""b' TypedTreePrinter added to Printers'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,body,2014-02-06 23:54:10,00:00,,1,,"b""b' 1. TypedTreePrinter is added to . TypedTreePrinter generates the code for passed attributed trees.2. Attributed  processing for syntactics added ([SI-8180]url 3. Tree-based printer selection for showCode added.4. Tests for TypedTreePrinter are added.5. Code cleanup for EOL-printing url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,1,2014-02-06 23:54:10,3.22,,1,,"b""b' review @xeno-by"," @densh '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,2,2014-02-06 23:54:10,476.27,,1,,"b""b' Could you also add a note to say where this puts us on the roadmap? What parts are still planned? What parts might prove tricky? etc.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,3,2014-02-06 23:54:10,255.78,,1,,"b""b' @VladimirNik This needs a rebase'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,4,2014-02-06 23:54:10,716.7,,1,,"b""b' @xeno-by"," @densh Committed version is rebased'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,5,2014-02-06 23:54:10,109.28,,1,,"b""b' @retronym", @xeno-by Rough roadmap:1) Merge TypedTreePrinter and ParsedTreePrinter, code cleanup (2.11.0-RC1)2) Improve printer code generation (for typed and parsed trees), fix annotations processing for typed trees (2.11.x)3) Add options to select between sugared, desugared code generation (2.12?). Some cases for these options can be implemented relatively easy, but for most of them context info is required," and this is the main problem.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,6,2014-02-06 23:54:10,832.65,,1,,"b""b' LGTM But this PR no longer merges cleanly. @VladimirNik: could you please rebase this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,7,2014-02-06 23:54:10,202.65,,1,,"b""b' Superseded by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,closed,2014-02-16 19:10:43,1156.55,0,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,reopened,2014-02-16 19:50:23,39.67,0,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,8,2014-02-06 23:54:10,1072.28,,1,,"b'b"" @xeno-by: what\'s the status of this PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,9,2014-02-06 23:54:10,91.72,,1,,"b""b' From what I understood"," Vladimir is going to address my case class comment today. @VladimirNik Could you clarify?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,10,2014-02-06 23:54:10,78.22,,1,,"b'b"" @xeno-by"," @gkossakowski Before tomorrow morning I\'ll add fix to block processing in Syntactics and try to see why there is a problem with case classes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,11,2014-02-06 23:54:10,254.98,1,,,"b""b' Please submit a new PR. Github has gotten confused and now lists 164 commits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,closed,2014-02-17 20:07:55,17.53,1,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3481,closed,-,-,-,1,12,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,opened,2014-02-07 02:02:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,title,2014-02-07 02:02:16,00:00,,1,,"b""b' SI-8177 co-evolve more than just RefinedTypes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,body,2014-02-07 02:02:16,00:00,,1,,"b'b""   produced a typeref of the shape where referred to a symboldefined in a of times past. More precisely", the case of  \'s correctly modified a prefixfrom having an underlying type of to  ,with a new symbol for (now with info  ), but the symbol in the outer  wasn\'t co-evolved (so it still referred to the in  underlying the old prefix). used to only look at prefixes that were directly  s,"but this bug shows they could also be  s with an underlying  . Review by @paulp ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,1,2014-02-07 02:02:16,294.52,,1,,"b""b' Closing while I build my case why the new test failures are the way things should be.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,closed,2014-02-07 06:56:47,294.52,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,reopened,2014-02-07 19:28:50,752.05,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,closed,2014-02-07 19:48:29,19.65,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,reopened,2014-02-07 19:51:05,2.6,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,2,2014-02-07 02:02:16,934.28,,1,,"b'b"" @retronym pointed to a very relevant similar bug url  which indicates the condition for co-evolution is still too strict That test case has a that becomes  . I\'m not sure TypeMap is the right place to make this kind of decision", as in other scenarios you don\'t want to make that change (e.g. ," where I think a more liberal coevolveSym would erroneously rebind type aliases)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,3,2014-02-07 02:02:16,25.02,,1,,"b'b"" Don\'t forget to take a gander at [SI-6161]url  armed with all these fancy new insights.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,4,2014-02-07 02:02:16,199.43,,1,,"b""b' A more ambitious refactoring: url Not sure I can push that one through... Not much progress yet on SI-6161 and the other related bugs (except for SI-6493"," which now seems down to one problem rather than two conspirators). Will keep pulling the thread...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,5,2014-02-07 02:02:16,395.25,1,,,"b'b"" Tsk tsk dude. And we\'re back at square one. There\'s a ton of hard-won logic already written which accounts for this sort of thing", but it has to be used. Otherwise there will be an infinite supply of these cases where it works in the trivial example and fails when you compose two trivial examples. I played with it a while. My way, that compiles: I had a few failures. Several were neg tests which should be pos tests, like this one: A legitimate failure was , because it turns out there might be typevars squirreled away in the decls of the refinement type prefix which is being replaced. I saved that one by looking for typevars and declaring (pre memberType sym) =:= (newPre memberType newSym) before I threw away pre. Another legitimate failure was one which currently fails in refchecks because the coevolved symbol is ill-kinded. An implementation artifact that the check happens at point A and not point B. So," it\'s all pretty sick. I\'m going to play a little more and then I\'ll send you my variation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,6,2014-02-07 02:02:16,186.65,,,1,"b'b"" Okay"," it\'s not the prettiest thing ever but that\'s about 10 hours longer than I should be spending on any of this stuff so let\'s cut it off at that.  @6455c52ed6""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,7,2014-02-07 02:02:16,124.17,,1,,"b""b' Now better known as #3501 .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,8,2014-02-07 02:02:16,334.82,1,,,"b""b' As much as this wart bothers me", I really think we should stick to the laser wart surgery at this point. This is one of the key places where we should spend some time in 2.12 to investigate the immutable approach suggested by @paulp," which is also being researched in dotty.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,9,2014-02-07 02:02:16,1.37,,1,,"b'b"" More concretely", the more uniform logic is too uniform: you can\'t always rebind to the member found by  ," as I believe is shown by the disappearing type errors in #3501.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,10,2014-02-07 02:02:16,84.97,,1,,"b'b"" You\'re probably right that it\'s too uniform; I still like t0764.scala to compile.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,11,2014-02-07 02:02:16,4.03,1,,,"b'b\' ""as in other scenarios you don\\\'t want to make that change (e.g. "," where I think a more liberal coevolveSym would erroneously rebind type aliases)"" Yes", exactly that happened to me initially, but with the recipe I hit upon the expanded  avoids rebinding those. Though I question whether it should have to worry about it flush that ill-kinded shit and don\\\'t make all the other logic be paranoid and defensive. It\\\'s like letting null run amuck. \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,12,2014-02-07 02:02:16,33.58,,1,,"b""b' [I think the  is due to using memberType (highType) rather than memberInfo ().] EDIT: Scratch that"," it already is in this PR -I managed to accidentally sneak those commits in here already... rebasing and then I need to look at my other bugs for a while'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,13,2014-02-07 02:02:16,102.25,,,1,"b""b' Should be good up to 600179c"," but will likely have to drop 55e8551.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,14,2014-02-07 02:02:16,124.58,,1,,"b""b' integrating fix for SI-7753 from #3486 into [t8177-wip]url  tests: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,15,2014-02-07 02:02:16,435.03,,1,,"b""b' review by @retronym", fixes for [SI-7753]url  [SI-6493]url  pending," on top of this PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,16,2014-02-07 02:02:16,510.85,1,,,"b'b"" I\'ve untangled my mess and will submit separate PRs for SI-7753 and SI-6493""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,17,2014-02-07 02:02:16,143.1,,1,,"b'b"" TODO"," potentially after merging this PR (since others depend on it and we\'re short on time):[ ] turn url  into the corresponding neg/ test""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,18,2014-02-07 02:02:16,274.57,,1,,"b""b' TODO: .... :('""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,19,2014-02-07 02:02:16,103.85,,1,,"b""b' Closing while I investigate the new failure on the block'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,closed,2014-02-12 01:54:35,363.5,4,15,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,reopened,2014-02-12 18:29:28,994.88,4,15,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,20,2014-02-07 02:02:16,995.97,,1,,"b""b' Looks like github does not like my rebasing on master.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,closed,2014-02-12 18:30:33,1.08,4,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3482,closed,-,-,-,4,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,opened,2014-02-08 18:37:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,title,2014-02-08 18:37:31,00:00,,1,,"b""b' SI-7459 Handle pattern binders used as prefixes in TypeTrees.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,body,2014-02-08 18:37:31,00:00,1,,,b'b\' Match translation was incorrect for: We would end up with Types in TypeTrees referring to the wrong symbols, e.g: Or:  // t7459   ((x0$1: CC) =   case  val x1: CC = x0$1;   case4(){   if (x1.ne(null))     matchEnd3(new [Any]())   else     case5()   }; This commit:Changes to traverse types, as well as terms,  in search of references to bound symbolsChanges to reuse rather  than the home-brew substitution from  s to  s," if the  trees are all  s I had to dance around the awkward handling of ""swatches"" (exceptionhandlers that can be implemented with JVM native type switches) byduplicating trees to avoid seeing the results of  in after we abandon that approach if we detect thepatterns are too complex late in the game.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,1,2014-02-08 18:37:31,27.83,1,,,"b""b' Looks like an unhappy owner chain:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,2,2014-02-08 18:37:31,45.07,,1,,"b""b' And now for the _other_ last 10%:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,closed,2014-02-08 19:50:25,72.9,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,reopened,2014-02-08 20:01:36,11.18,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,3,2014-02-08 18:37:31,1114.83,1,,,"b'b"" Life wasn\'t meant to be easy. Closing for now. The difficulty arises from using (which is accurate but destroys the original tree) in the environment of the pattern matcher which seems to substitute into trees more than once. (e.g. during analysis and again during codegen.) Here\'s another messy swing at it which also gets all the new tests passing. url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,closed,2014-02-09 14:25:18,1103.7,3,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,4,2014-02-08 18:37:31,322.63,,1,,"b'b"" I was also thinking that we should remove the mutation during analysis. It\'s another instance of jumping in head first to figure out how deep the pool is -assuming we can abort mid-flight before we hit the bottom.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,5,2014-02-08 18:37:31,429.13,1,,,"b'b"" That\'s a dangerous habit in our swimming pool. I was wrangling similar problems in typers recently when it bailed out of  and left a trail of destruction in the owners of locally defined symbols.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,6,2014-02-08 18:37:31,431.7,,1,,"b""b' My big find in that latest branch", BTW, was using to subst in where needed. Although it would probably be cleaner to just emit eager binders for anything used in a single type. I got lost trying to implement that," though.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,7,2014-02-08 18:37:31,432.07,,1,,"b""b' Anyway", this change can land in 2.11.1," so lets refocus on the others for now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,8,2014-02-08 18:37:31,702.42,,1,,"b'b"" I\'ll put my speedos back in the drawer.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3490,closed,-,-,-,4,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,opened,2014-02-11 18:38:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,title,2014-02-11 18:38:13,00:00,,1,,"b""b' SI-7753 InstantiateDependentMap narrows type of unstable args'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,body,2014-02-11 18:38:13,00:00,1,,,"b'b"" [Most of this comment and the initial fix were implemented by Jason Zaugg.I just cleaned it up a bit.] After a soundness fix in SI-3873", instantiation of dependentmethod type results behaved differently depending on whether the argumentfrom which we were propagating information had a stable typeor not. This is particular to substitution into singleton typesover the parameter in question. If the argument was stable, it was substituted into singletontypes," such as the one below in the prefix in  (which is the longhand version of  ) scala  defined class A scala  defined object AA scala  foo: (a: A)a.B scala  res0: AA.B = null But what if it isn\'t stable? scala  res1: a.B = null This commit changes that to: scala  res1: A{type B <: String}#B = null review by @retronym""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,1,2014-02-11 18:38:13,0.7,,1,,"b""b' This continues where #3482 left off.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,2,2014-02-11 18:38:13,57.25,,1,,b'b\' No," I don\\\'t mean ""fix it""", I mean put it in as a neg test which should eventually be pos.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,3,2014-02-11 18:38:13,5.4,1,,,"b'b"" I\'ll send you a PR. That test is freaking poetry.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,4,2014-02-11 18:38:13,4.32,,1,,"b""b' #3508'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,5,2014-02-11 18:38:13,164.98,,1,,"b""b' test comment improved'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,6,2014-02-11 18:38:13,857.45,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,7,2014-02-11 18:38:13,347.63,,1,,"b""b' Will rebase on master once #3516 is merged'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,closed,2014-02-12 18:35:57,1437.73,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,reopened,2014-02-13 01:50:00,434.05,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,closed,2014-02-13 01:50:07,0.12,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3507,closed,-,-,-,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,opened,2014-02-18 23:38:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,title,2014-02-18 23:38:38,00:00,,1,,"b""b' Small Predef cleanup'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,body,2014-02-18 23:38:38,00:00,,1,,"b'b"" Rebased and improved #3553\'s fix for SI-8229.Also rename  to Predef.$conforms so it can\'t accidentally be shadowed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,1,2014-02-18 23:38:38,0.33,,1,,"b'b"" Would\'ve liked to resuscitate more of #3217"," but running out of time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,closed,2014-02-18 23:40:23,1.75,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,reopened,2014-02-18 23:41:52,1.48,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,2,2014-02-18 23:38:38,60.43,,,1,"b'b"" Another good example why we should\'ve enforced binary compatibility for M8 and RC1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,3,2014-02-18 23:38:38,977.27,,1,,"b'b\' /cc @alefas can you add a special case like you already have for (""not considered for views"") for this into the IntelliJ type checker.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,4,2014-02-18 23:38:38,781.93,,,1,"b""b' @retronym Just did it"," thank you!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,closed,2014-02-21 14:01:46,859.9,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,5,2014-02-18 23:38:38,905.77,,1,,"b""b' @adriaanm SBT 0.13 branch now fails because the following no longer hides the implicit:  Leading to:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,6,2014-02-18 23:38:38,909.17,,1,,"b""b' Suggestion: change SBT in a source compatible way to instead opt-in to the parts of Predef it wants: If that is the first import in the compilation unit"," it will also disable  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,7,2014-02-18 23:38:38,917.05,,,1,"b""b' Will do. A good entry for style guide on how to shadow robustly. On Friday", February 21,2014," Jason Zaugg notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,8,2014-02-18 23:38:38,919.63,,1,,"b""b' @adriaanm url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3555,closed,-,-,-,0,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,opened,2014-02-20 06:00:37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,title,2014-02-20 06:00:37,00:00,,1,,"b""b' SI-6455 no longer rewrite .withFilter to .filter'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,body,2014-02-20 06:00:37,00:00,1,,,"b""b' This has been deprecated for two major releases now",and during that time caused plenty of harm (see also SI-7239). Time to retire, rewrite. What say ye, @gkossakowski," @Ichoran & @retronym?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,1,2014-02-20 06:00:37,4.55,,1,,"b'b"" The std lib doesn\'t even fully comply iirc. Was it Either? Maybe scalacheck too?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,2,2014-02-20 06:00:37,3.42,,1,,"b""b' Urgh. I admit this is a bit of an eager submission. Deprecation fatigue has set in.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,3,2014-02-20 06:00:37,1.02,1,,,"b'b"" I\'ll back off for RC1 if we\'re indeed this badly broken. That\'ll teach us ignoring -deprecation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,4,2014-02-20 06:00:37,718.27,,,1,"b'b"" Let\'s see if I can get url  to inspire confidence on this one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,5,2014-02-20 06:00:37,8.1,,1,,"b""b' The only class I found that defines filter but not withFilter is Try"," but @jorgeortiz85 is [on the case]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,6,2014-02-20 06:00:37,25.6,,1,,"b'b"" I decided to follow the pattern implemented in Option. I manually inspected Scalacheck (and it\'s compiled by the IDE validation) -it seems to support withFilter where filter is.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,7,2014-02-20 06:00:37,64.57,,1,,"b""b' url  is building the head of this PR"," according to the log: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,8,2014-02-20 06:00:37,1234.67,,1,,"b""b' Giving the community build another shot at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,9,2014-02-20 06:00:37,484.23,,1,,"b'b"" Dbuild failed again. I\'ll defer to 2.12. Should\'ve done this sooner in the cycle. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,closed,2014-02-24 00:25:02,1104.42,2,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,reopened,2014-02-24 03:11:22,166.33,2,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,10,2014-02-20 06:00:37,166.92,,1,,"b""b' I weakened it to make -Xfuture enforce the deprecation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,11,2014-02-20 06:00:37,219.75,,1,,"b'b"" test added"," comment for Try\'s withFilter test clarified""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,12,2014-02-20 06:00:37,358.55,,1,,"b'b"" LGTM The is still there but it won\'t harm us too much.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,closed,2014-02-25 12:50:19,578.95,2,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3566,closed,-,-,-,2,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,opened,2014-02-23 10:41:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,title,2014-02-23 10:41:13,00:00,,1,,"b""b' SI-8325 Accept infix star type outside patterns'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,body,2014-02-23 10:41:13,00:00,1,,,"b""b' Also"," do not take backticked star as the repeatedparameter marker in postfix position. Note: not satisfied with the error messages yet. This is a test run for feedback.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,1,2014-02-23 10:41:13,6.18,,1,,"b'b"" My first idea was to use backticks to disambiguate", so for infix you\'d have to use backticks.  I didn\'t pursue it," but maybe that\'s tidier.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,2,2014-02-23 10:41:13,155.4,,,1,"b""b' Great! You made low-hanging fruit of that...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,3,2014-02-23 10:41:13,155.22,1,,,"b'b"" Let\'s come back to this after 2.11.0 is out. Low-hanging fruit may block passage", but not the RC," I\'m afraid.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,closed,2014-02-23 15:58:01,316.8,2,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,4,2014-02-23 10:41:13,129.9,,1,,"b'b"" No worries I hadn\'t expected such a quick fix"," anyway...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,5,2014-02-23 10:41:13,259.85,,1,,"b""b' I thought the workflow knew how to deal with PRs not intended for 2.11.0. Otherwise"," I need to use a post-it note.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,6,2014-02-23 10:41:13,441.2,,1,,"b'b"" I\'m not going to remember to resubmit this if it stays closed. Re-opening while I notice it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,7,2014-02-23 10:41:13,796.87,,1,,"b""b' The workflow knows. Assigned to 2.11.1-RC1 milestone'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,reopened,2014-03-14 19:05:50,187.82,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,8,2014-02-23 10:41:13,1183.57,,1,,"b""b' Dude"," did you not encode your dissatisfaction in a failing test?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,9,2014-02-23 10:41:13,1172.02,1,,,"b'b"" @adriaanm I have the same question about workflow. Sorry for grabbing your attention.  I could review this one myself", as I have totally fresh eyes.  Or what\'s the opposite of fresh?  Anyway," I no longer have any idea what\'s in the delta.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,10,2014-02-23 10:41:13,1382.98,1,,,"b""b' Might the commit message need more review than the code"," then?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,11,2014-02-23 10:41:13,670.77,,1,,"b""b' @adriaanm  When you put it that way...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,12,2014-02-23 10:41:13,924.6,1,,,"b""b' Rebased with an improved commit message.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,13,2014-02-23 10:41:13,1428.5,,1,,"b""b' LGTM. Merging to master"," which will in turn be merged to 2.11.x.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,closed,2014-05-07 11:48:20,1002.5,5,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,14,2014-02-23 10:41:13,1.53,,,1,"b""b' Great thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3576,closed,-,-,-,5,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,opened,2014-02-26 19:44:49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,title,2014-02-26 19:44:49,00:00,,1,,"b'b\' Revert ""SI-7624 Fix -feature warnings in ""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,body,2014-02-26 19:44:49,00:00,1,,,"b'b"" rework of #3587 to preserve compatibility with partest This reverts commit f2de2c4ec43180351ef1f306bcc5f24643ba5477 because itbroke both lift-json and json4s libraries that depend on scalap\'s APIs.Arguably", those libraries shouldn\'t depend on unofficial APIs but they dobecause they had no better alternative at the time (no Scala reflection). The cost of breaking them is not worth minor change of the package. The f2de2c4ec43180351ef1f306bcc5f24643ba5477 mixed two things:1. Fixing feature warnings2. Changing package name When reverting (and resolving conflicts) I tried to keep 1. and revert just2. However, there were also some questionable changes related to 1. thatgot reverted. In particular, a package object with implicit members thatenable language features is an anti-pattern because members of packageobject are visible both _within_ and _outside_ of the package. Therefore,user could use wildcard import for importing everything from scalappackage and enabled postfixOps language feature unknowingly. I went forjust adding imports in just those few files where they were needed. We had to ensure compatibility with partest," which already depends on thepackage structure that this commit reverts. This is done in the package object in: Conflicts:        ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,1,2014-02-26 19:44:49,71.42,1,,,"b'b"" I\'m an idiot. I\'ll fix it for realz after coffee.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,2,2014-02-26 19:44:49,56.95,,,1,"b""b' Will have to fix on the scala-partest side. The joys of refactorings and modules.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,closed,2014-02-26 21:53:11,128.37,2,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,reopened,2014-02-26 23:13:02,79.85,2,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,3,2014-02-26 19:44:49,80.72,,1,,"b'b"" Diff with @gkossakowski\'s PR:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,4,2014-02-26 19:44:49,107.33,1,,,"b'b"" To give some more context: we\'ve spent a ton of time verifying as many community project as possible build on master before cutting RC1. Reverting this change is disappointing"," but even more so for not being able to build lift as-is on 2.11.0-RC1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,closed,2014-02-27 02:08:07,175.08,3,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3588,closed,-,-,-,3,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,opened,2014-02-28 13:35:29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,title,2014-02-28 13:35:29,00:00,,1,,"b""b' SI-5905 Sanity check -language options'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,body,2014-02-28 13:35:29,00:00,,1,,"b""b' The option names are hardcoded"," but checked by a test. There are no hooks to verify options after the compileris constructed. Introduced a required for thesetting creation framework.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,closed,2014-02-28 18:28:10,292.68,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,1,2014-02-28 13:35:29,293.78,,1,,"b'b"" Closed until there\'s way to propose a PR that\'s not RC.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,reopened,2014-03-02 07:18:34,770.4,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,closed,2014-03-02 16:54:46,576.2,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,2,2014-02-28 13:35:29,165.57,,1,,"b""b' Reopening for tweaked underscore handling.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,reopened,2014-03-02 21:14:50,260.07,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,3,2014-02-28 13:35:29,823.65,,1,,"b""b' Suspended animation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,closed,2014-03-03 10:58:29,823.65,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,4,2014-02-28 13:35:29,865.58,,1,,"b""b' Reanimating.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,reopened,2014-03-11 01:24:04,865.58,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,5,2014-02-28 13:35:29,3.5,,1,,"b'b"" I see from another PR that there\'s an on-hold label used to park PRs?  That would be a PRK.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,6,2014-02-28 13:35:29,530.42,,1,,"b'b"" @adriaanm I know it\'s not your job anymore"," but should I ping someone before I have to rebase?  Pretty soon it will be summer vacation and all of Europe will be hiking in the Alps.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,7,2014-02-28 13:35:29,1381.98,,,1,"b'b"" I\'m back -in the Olde Country safe haven. Taking a few more days to adapt to the air"," but then I\'ll be back to terrorizing the PR queue. @retronym is tending to our branches. I believe this one is good to go for review & inclusion in 2.11.1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,8,2014-02-28 13:35:29,704.75,,1,,"b'b\' Can I buy an ""S"" for the title of the latest commit?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,9,2014-02-28 13:35:29,116.4,,1,,"b'b"" orry about that. Grabbing text with the mouse in a terminal window is often off by one for me.  I can\'t get the hang of these newfangled UIs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,10,2014-02-28 13:35:29,769.47,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,closed,2014-05-09 13:23:45,719.68,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,11,2014-02-28 13:35:29,181.22,,1,,"b'b"" I\'ve submitted a PR to revert the last commit here: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,12,2014-02-28 13:35:29,182.0,,1,,"b'b"" OK"," shall I submit the corrected commit against master or 2.11?  I didn\'t notice it was merged...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,13,2014-02-28 13:35:29,245.87,,1,,"b""b' I just submitted a reversion against master. That will be [merged to 2.11.x]url  in an hour or two. You should target the re-refinement against 2.11.x.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3597,closed,-,-,-,0,14,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,opened,2014-02-28 20:14:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,title,2014-02-28 20:14:40,00:00,,1,,"b""b' SI-8266 Amend advice for deprecated octal 042'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,body,2014-02-28 20:14:40,00:00,,1,,"b'b"" Improve the advice for to read: as per the discussion on SI-6476. Knuth says that Charles XII came close to introducing octal arithmetic to Sweden","and Wikipedia doesn\'t deny it. I imagine an alternative history in which octal literals are deprecated in Scalabut required by legislation in Akka. #octal-fan-fiction""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,1,2014-02-28 20:14:40,884.27,,1,,"b""b' Suspended animation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,closed,2014-03-03 10:58:56,884.27,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,2,2014-02-28 20:14:40,864.75,,1,,"b""b' Reanimating.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,reopened,2014-03-11 01:23:41,864.75,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,3,2014-02-28 20:14:40,120.37,,1,,"b""b' review by @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,4,2014-02-28 20:14:40,1010.07,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,5,2014-02-28 20:14:40,0.7,,1,,"b'b"" Wikipedia doesn\'t deny a lot of things"," but still.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,closed,2014-03-14 20:14:53,1131.2,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3598,closed,-,-,-,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,opened,2014-03-06 15:49:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,title,2014-03-06 15:49:15,00:00,,1,,"b""b' SI-8366 make partial function and match trees disjoint'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,body,2014-03-06 15:49:15,00:00,1,,,"b'b"" Previously one could match a partial function with match quasiquote: This was quite annoying as it leaked encoding of partial functions asMatch trees with empty tree in place of scrutinee. This commit make sure that matches and partial functions are disjointand don\'t match one another (while preserving original encoding underthe hood out of sight of the end user.) review @retronym""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,1,2014-03-06 15:49:15,11.87,,1,,"b""b' LGTM looks like a step in the right direction.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,closed,2014-03-09 18:56:20,187.08,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,reopened,2014-03-09 18:56:25,0.08,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,2,2014-03-06 15:49:15,122.22,,1,,"b""b' This will need a rebase'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,3,2014-03-06 15:49:15,122.17,,1,,"b""b' PLS -scala@f6712e4'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,4,2014-03-06 15:49:15,7.22,,,1,"b""b' (kitty-note-to-self: ignore 37343143):cat: Roger! Rebuilding pr-scala for f6712e4d. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,closed,2014-03-12 03:19:06,502.68,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3604,closed,-,-,-,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,opened,2014-03-15 15:07:53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,title,2014-03-15 15:07:53,00:00,,1,,"b""b' SI-8329 Better hygiene for patmat partial functions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,body,2014-03-15 15:07:53,00:00,,1,,"b'b"" Don\'t enter synthetic parameters of et al intoscope when typechecking the user-code; instead reference thosesymbolically. Review by @adriaanm. For 2.11.1""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,closed,2014-03-15 17:04:05,116.2,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,reopened,2014-03-15 20:12:11,188.1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,1,2014-03-15 15:07:53,305.18,1,,,"b""b' Reworked this a little to deal with this odd means to create a partial function:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,2,2014-03-15 15:07:53,1340.7,,1,,"b""b' ping @adriaanm '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,3,2014-03-15 15:07:53,115.48,1,,,"b""b' LGTM"," sorry about the delay'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,closed,2014-04-21 20:34:41,22.5,2,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3635,closed,-,-,-,2,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,opened,2014-03-28 17:16:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,title,2014-03-28 17:16:16,00:00,,1,,"b""b' Remove scala-continuations-plugin from scala-library-all'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,body,2014-03-28 17:16:16,00:00,,1,,"b""b' The continuations plugin should instead be a dependency of scala-dist",as scala-library-all should be a drop-in replacement for scala-library,"and as such should not (indirectly) depend on  compiler. Review by @retronym.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,closed,2014-03-28 17:17:49,1.55,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,reopened,2014-03-28 17:19:32,1.72,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,1,2014-03-28 17:16:16,25.52,,1,,"b'b"" Fixed cross-version as per eagle-eyed reviewer\'s comment.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,2,2014-03-28 17:16:16,106.23,,1,,"b'b"" The Travis failure can be ignored. It\'s because the secure environment necessary to build the spec is not set up during PR validation (which is how it should be)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,3,2014-03-28 17:16:16,2.52,,1,,"b""b' LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,4,2014-03-28 17:16:16,0.87,,1,,"b'b"" I don\'t quite get that. Can you please elaborate?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,closed,2014-03-28 19:31:49,132.28,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,5,2014-03-28 17:16:16,1.28,1,,,"b""b' Sure", it would be insecure to reveal the encrypted environment when validating a PR," as an attacker could modify  to echo it to the logs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,6,2014-03-28 17:16:16,2.02,,1,,"b'b"" To be clear"," I\'m talking about: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,7,2014-03-28 17:16:16,2.67,,1,,"b""b' How do we avoid the spurious failures"," though?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,8,2014-03-28 17:16:16,3.07,,1,,"b'b"" I\'ve turned off Travis PR validation for now. I\'ll make the script conditional on whether it\'s validating a PR and skip the secure part"," and re-enable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,9,2014-03-28 17:16:16,7.02,,1,,"b""b' gotcha'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3661,closed,-,-,-,1,10,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,opened,2014-04-30 19:14:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,title,2014-04-30 19:14:41,00:00,,1,,"b""b' SI-8550 fix scaladoc for the default .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,body,2014-04-30 19:14:41,00:00,,1,,"b""b' The default LinearSeq is a List ( delegates to"," whose default is List).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,1,2014-04-30 19:14:41,1040.98,,1,,"b""b' PLS -scala@b3243e8'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,2,2014-04-30 19:14:41,7.25,,,1,"b""b' (kitty-note-to-self: ignore 41906319):cat: Roger! Rebuilding pr-scala for b3243e8d. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,3,2014-04-30 19:14:41,4.72,,,1,"b""b' LGTM"," thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,4,2014-04-30 19:14:41,494.6,,1,,"b""b' Merging despite the build failure which appears to be a glitch as this patch was just for a comment.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,closed,2014-05-08 21:02:14,107.55,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,reopened,2014-05-08 21:02:16,0.03,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,closed,2014-05-08 21:02:23,0.12,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3706,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,opened,2014-05-02 16:52:32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,title,2014-05-02 16:52:32,00:00,,1,,"b""b' Respect when running the test suite through ANT'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,body,2014-05-02 16:52:32,00:00,,1,,"b""b' Used to enable (now also  ) whencompiling tests in the respective jenkins builds. This is currentlybroken"," as you can see in [recent build logs]url  ismissing:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,1,2014-05-02 16:52:32,0.17,,1,,"b""b' review by @adriaanm '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,2,2014-05-02 16:52:32,982.52,,1,,"b""b' hah", the fix unveiled a number of regressions. these need to be fixed first," otherwise all builds will go red.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,closed,2014-05-03 09:15:13,982.68,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,3,2014-05-02 16:52:32,38.17,,,1,"b'b"" I thought the decision to not pass to all partest test cases under the rangepos build was by design. For example", some tests might rely on running with offset positions. Macros expansions, for example, are no longer added to the presentation compiler\'s post-typer trees; only the computed types are. We don\'t expect macro authors to rangepos invariants. Some of the other failures to look like legitimate problems, though. So it would be good to have a way to perform this validation for the 95% of tests that support them. In 2.11," we can actually negate flags like which I think we can use to override the global setting. Maybe we can use this facility here. /cc @dotta who asked me about this a while ago.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,4,2014-05-02 16:52:32,1394.2,,,1,"b""b' The command line that invokes ant suggests otherwise", it mentions explicitly: Thanks for the idea to use check files," I take a look.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,reopened,2014-05-05 12:53:55,218.7,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,5,2014-05-02 16:52:32,235.47,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,6,2014-05-02 16:52:32,0.1,,,1,"b""b' (kitty-note-to-self: ignore 42185007):cat: Roger! Rebuilding pr-scala for 10fef25f. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,7,2014-05-02 16:52:32,14.4,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,8,2014-05-02 16:52:32,87.38,,1,,"b""b' I forgot one file"," fixed now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,closed,2014-05-07 10:19:40,1285.75,0,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3709,closed,-,-,-,0,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,opened,2014-05-19 20:29:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,title,2014-05-19 20:29:25,00:00,,1,,"b""b' Reining on over eager optimizations (take 2)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,body,2014-05-19 20:29:25,00:00,,1,,"b""b' This time I allow elimination of dead"," non-static loadsof closure classes. Review by @lrytz @dragos @gkossakowski'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,1,2014-05-19 20:29:25,1.03,,1,,"b""b' Tweaked resubmission of #3760. ccc5eef is the only different commit.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,2,2014-05-19 20:29:25,33.48,,1,,"b'b"" I\'ll add a few more tests tomorrow for static initialiser side effects to make sure the isstatic logic is correct. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,3,2014-05-19 20:29:25,599.03,,1,,"b""b' LGTM. The new backend supports dataflow analysis to [track nullness / non-nullness]url  which I guess can be used for that eliminating dead loads.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,4,2014-05-19 20:29:25,15.23,,1,,"b'b"" Let\'s also check that the size of the bootstrapped compiler hasn\'t changed before merging this. I\'m going to close the PR pending that", and pending my extra tests," so we don\'t merge it yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,closed,2014-05-20 07:18:12,648.78,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,5,2014-05-19 20:29:25,1.62,,1,,"b""b' BTW"," also tracks nullity in the old backend.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,6,2014-05-19 20:29:25,143.98,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,reopened,2014-05-20 10:31:46,193.57,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,7,2014-05-19 20:29:25,48.35,,1,,"b'b"" @lrytz I\'ve added the test for static init side effects.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,8,2014-05-19 20:29:25,43.12,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,closed,2014-05-20 12:39:17,127.52,0,10,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3765,closed,-,-,-,0,10,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,opened,2014-05-20 17:43:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,title,2014-05-20 17:43:20,00:00,,1,,"b""b' SI-8608 f interpolator emits plain old strings'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,body,2014-05-20 17:43:20,00:00,,1,,b'b\' When invoking is obviated by a lack offormatting fields," then just degenerate to anunenhanced string. This means it doesn\\\'t cost anything to usef""$$ordinary"" in place of ""$ordinary""", whichmay cause warnings under -Xlint. Note that certain format literals, in particularfor line separator %n, are not actually literals andcan\\\'t be replaced at compile time. Review by @xeno-by for macro expertise\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,1,2014-05-20 17:43:20,1221.9,,1,,"b""b' Make the test implementation-proof or at least -resilient.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,closed,2014-07-09 14:05:14,1221.9,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,2,2014-05-20 17:43:20,159.32,,1,,"b'b\' I think a JavapTest will suffice.  If I didn\\\'t waste a quarter-hour on what triggered the text search on ""format""", namely,"for more information"".  Ack!\''
scala	3769	closed	reopened	 - 	2014-07-09 16:44:33	159.32	0	4	0
scala	3769	closed	3	som-snytt	2014-05-20 17:43:20	680.0	+1			b'b"" I\'m too dumb to know where the merge commit comes in.  Shall I close and resubmit?  It\'s a tiny change.  The commit was from May (Mai) and this is July (Juli).""'
scala	3769	closed	4	som-snytt	2014-05-20 17:43:20	639.23	+1			b""b' Superseded by #3878 because of weird history effects.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,closed,2014-07-14 14:43:47,1319.23,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3769,closed,-,-,-,2,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,opened,2014-05-21 09:14:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,title,2014-05-21 09:14:35,00:00,,1,,"b""b' Compiler optimizations for Scopes"," checkDoubleDefs'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,body,2014-05-21 09:14:35,00:00,,1,,"b""b' Starting with the most valuable commits from: url  Review by @gkossakowski'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,closed,2014-05-21 11:53:19,158.73,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,1,2014-05-21 09:14:35,158.97,,1,,"b""b' Closed for renovations.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,2,2014-05-21 09:14:35,28.63,,,1,"b""b' It would be great if renovations could include unit testing of Scope. You might find [SymbolTableForUnitTesting]url  for testing something in the cake. That class provides all functionality needed to bootstrap a minimal SymbolTable.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,reopened,2014-05-23 12:44:19,51.0,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,closed,2014-05-23 12:45:15,0.93,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3771,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,opened,2014-05-25 19:17:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,title,2014-05-25 19:17:27,00:00,,1,,"b""b' SI-8525 -Xlint:nowarn-missing-interpolator'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,body,2014-05-25 19:17:27,00:00,,1,,"b'b\' Turn warn-missing-interpolator into an -Xlint choice. Allow choice negation with prefix ""no"".  Refactor choice logic from MultiString to MultiChoice. Update set of choices all together. The mechanism between MutableSettings and concrete settings could be further over-engineered. Rube Goldberg is occupied on another project at the moment.  For instance", no easy way to override  . Depends on #3776 Review by @retronym as follow-up to #3776 \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,1,2014-05-25 19:17:27,1166.58,,1,,"b'b"" @retronym Changing the negatory prefix to minus.  I\'ll add a commit that converts anonymous lint flag tests to named", deprecates -Ywarn-foo," and makes the lint option -Xlint:foo.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,2,2014-05-25 19:17:27,923.3,,,1,"b'b"" Sorry", kitteh, I was too lazy to run the test suite.  Is there any chance of getting the test suite to run in under, say, ten minutes?  Wow, I never heard a kitteh laugh like that before.  The Cheshire cat would smile," but when did a cat ever cackle so witch-like?  Or are you a witch\'s familiar?  That would explain a lot.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,3,2014-05-25 19:17:27,1162.62,,,1,b'b\' @retronym Some lint options are anonymous for a good reason, that no summary name springs to mind," such as your: What do you think of  ?  Too cheesy? It would show up more likely as  . Not that I like it. The available combinations of ""implicit""",polymorphic,unused,overloaded,"adapted"" and ""inaccessible"" limit the number of encodings. Programmatically, maybe a lint macro,  , which also obviates the otherwise inevitable comment.  Then the setting,  But I guess the goal is really not to have linting code, except as a lint tool.  Just thinking aloud. Never mind.\''
scala	3792	closed	4	som-snytt	2014-05-25 19:17:27	140.87		+1		b""b' The lints have names, and the test respects that. Note that the point at which you name lint, the way Horton named a dust speck Whoville, is the point of no return.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,5,2014-05-25 19:17:27,561.45,,1,,"b""b' tests failing :crying_cat_face:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,6,2014-05-25 19:17:27,48.25,,1,,"b""b' @lrytz Yup"," thx.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,closed,2014-07-09 14:00:31,1123.07,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,7,2014-05-25 19:17:27,128.1,,1,,"b'b"" Cleans up the lint list", adds deprecation to legacy -Y flags.  Thx to @retronym for Enabling, I didn\'t see a quicker (one-minute) solution to avoid two flags," one to carry the deprecation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,reopened,2014-07-09 16:08:37,128.1,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,8,2014-05-25 19:17:27,5.87,,1,,"b'b"" LGTM. I really like where this has ended up. Let\'s also run this by @adriaanm before merging"," though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,9,2014-05-25 19:17:27,2.2,,1,,"b""b' One variation on this would be to defer the deprecations until the 2.12.x branch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,10,2014-05-25 19:17:27,88.95,,1,,"b'b"" A few tests to update; possibly lint flags are enabled that weren\'t?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,11,2014-05-25 19:17:27,25.32,,1,,b'b\' BTW, the problem with closing a PR for fixing is that it gets lost in the heap of closed PRs," unless I missed the button for ""sort by recent activity.""  I don\\\'t keep in my head the branch names of side projects", etc, so it\\\'s easy to forget what I was in the middle of doing; also, my fault for not deleting enough old branches.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,12,2014-05-25 19:17:27,186.37,,1,,"b""b' I know the feeling. is super helpful for chronic branch hoppers.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,13,2014-05-25 19:17:27,1031.8,,,1,"b'b"" Thx", learning a great git command makes it all worthwhile. I keep intending to read the man pages. My original take on this PR had something like: -Xlint turns on anonymous lint options; but now there is no notion of anonymous options, only of deprecated -Y variants. I hope I don\'t have to revisit that wrinkle; otherwise," I\'ll iron it out.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,14,2014-05-25 19:17:27,1328.75,,1,,"b""b' LGTM @adriaanm Could you make a call on this one for 2.11.2?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,15,2014-05-25 19:17:27,1215.25,,,1,"b""b' LGTM! A buffet of lintability!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,closed,2014-07-16 10:25:34,1096.95,0,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,16,2014-05-25 19:17:27,257.32,1,,,"b'b"" Thx.  I\'ll leave the ironing board out", and the iron hot," for when someone complains about a wrinkle.  Though starched collars would be out of scope.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,17,2014-05-25 19:17:27,294.0,,1,,"b""b' A bullet of lintability:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,18,2014-05-25 19:17:27,340.62,,1,,"b""b' Maybe the conservative thing to do is to undeprecate the old aliases until we can avoid the noise.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,19,2014-05-25 19:17:27,369.27,,,1,"b'b"" So", if I understand correctly, doesn\'t mean _I only want the warning_, it means _I want all the default linters +  _ (that is to say, it is the same as  )? Ok," it\'s still pretty cool to be able to selectively disable a warning :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,20,2014-05-25 19:17:27,380.92,,1,,"b'b"" @gourlaysama No", that\'s a bug.  It was introduced in that last change to remove the -warn prefixes; it used to enable anonymous lints, but there are no more anon options," and now the condition is broken. I guess I\'ll fix it when I revert the deprecations? @retronym ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,21,2014-05-25 19:17:27,388.8,,,1,"b'b"" It\'s probably the least surprising to follow the javac approach and require you to list them out explicitly once you mention this option. So please include that in the de-deprecation. It\'s probably over-engineering"," but might be nice.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,22,2014-05-25 19:17:27,416.55,,1,,"b'b"" I think the syntax was intended  . We inherit underscore from etc. The behavior that fell out of favor is that is sensitive to order"," where first wins silently.  Enabling doesn\'t preserve how a setting was set. Maybe simpler heuristic is: turning off always wins. I think I\'m experiencing lint envy.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,23,2014-05-25 19:17:27,558.55,,1,,"b""b' Clarification: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3792,closed,-,-,-,1,18,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,opened,2014-05-29 01:06:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,title,2014-05-29 01:06:36,00:00,,1,,"b""b' SI-8503 -version is info setting '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,body,2014-05-29 01:06:36,00:00,,1,,"b""b' And the Scala runner exits with 0 for info settings. Review by @adriaanm in case this breaks one of his scripts'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,closed,2014-05-29 14:02:44,776.13,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,reopened,2014-05-29 14:40:22,37.63,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,closed,2014-05-29 14:41:22,1.0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,reopened,2014-05-29 15:09:59,28.62,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,1,2014-05-29 01:06:36,1272.8,,1,,"b""b' PLS -scala@c8f8782'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,2,2014-05-29 01:06:36,7.97,,,1,"b""b' (kitty-note-to-self: ignore 44592842):cat: Roger! Rebuilding pr-scala for c8f8782f. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,3,2014-05-29 01:06:36,660.32,,1,,"b""b' PLS SYNCH'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,4,2014-05-29 01:06:36,0.37,,,1,"b""b' (kitty-note-to-self: ignore 45592217):cat: Synchronaising! :pray:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,5,2014-05-29 01:06:36,11.85,,,1,"b""b' LGTM. Thanks for sweeping up around the block.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,closed,2014-06-10 09:40:35,1110.6,0,4,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3800,closed,-,-,-,0,4,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,opened,2014-06-10 09:22:04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,title,2014-06-10 09:22:04,00:00,,1,,"b""b' refactor  reporting'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,body,2014-06-10 09:22:04,00:00,,1,,"b""b' Refactor  reporting to prepare making it configurable. review by @gkossakowski (on hangout?)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,closed,2014-06-10 11:56:51,154.78,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,reopened,2014-06-10 21:28:40,571.82,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,1,2014-06-10 09:22:04,792.45,,1,,"b'b"" review by @som-snytt.  I\'ve been looking for a review opportunity that doesn\'t involve skolems or some combination of dealiasing and widening.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,2,2014-06-10 09:22:04,528.25,,,1,"b'b"" Great"," thank you! I\'m still using this PR to check integration. Don\'t let that stop you. The initial refactoring is mostly done % polish.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,3,2014-06-10 09:22:04,1331.4,1,,,"b'b"" Someone was complaining or explaining recently about % being remainder instead of modulo.  So do you really mean an equivalence class of polish?  I\'ve been indisposed by employment; punching a clock makes clock arithmetic compelling again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,4,2014-06-10 09:22:04,889.9,,1,,"b""b' Well"," I think this is mostly ready for reviewing. Fingers crossed for the last two commits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,5,2014-06-10 09:22:04,97.4,,,1,"b""b' Great! Note that Jenkins always preempts any attempt to preempt comments.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,6,2014-06-10 09:22:04,590.15,,1,,"b""b' Re-pre-empting.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,7,2014-06-10 09:22:04,383.6,,1,,"b""b' Final rebase.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,8,2014-06-10 09:22:04,31.83,1,,,"b'b"" @adriaanm sorry I\'ve been overloaded this week. I\'d hoped world travel would keep you busy a while longer.  I built it locally and wanted to exercise it", esp from REPL side," which I will do soon. But LGSF.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,9,2014-06-10 09:22:04,1.47,,,1,"b'b"" Thanks", no problem -I\'m in old country for a couple months," so jetlag didn\'t slow me down this time. There\'s also no extreme rush.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,10,2014-06-10 09:22:04,4.18,,1,,"b""b' The push -f strictly  commits"," adds comments (based on feedback by @gkossakowski)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,11,2014-06-10 09:22:04,357.02,1,,,"b'b"" All failures were spurious"," but there\'s no way to tell the buildbot about the successful rebuilds. See for yourself by clicking on the unhappy icons next to the commits.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,12,2014-06-10 09:22:04,5.62,,1,,"b""b' Btw"," no need to build locally: Or build your own dist: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,13,2014-06-10 09:22:04,775.48,1,,,"b""b' Rebased", incorporated the error message grammar improvement," aligned it with our existing counting scheme. Would like to merge this as soon as validation passes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,14,2014-06-10 09:22:04,98.13,,,1,"b""b' Aaaand"," once^W twice more.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,15,2014-06-10 09:22:04,246.32,,1,,"b""b' Today", us folks are just sitting around eating hot dogs, drinking beer, watching fireworks," and reviewing code.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,16,2014-06-10 09:22:04,9.22,,,1,"b""b' Great use of your . Looks like tests are about to go fireworks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,17,2014-06-10 09:22:04,37.75,,1,,"b""b' :fireworks: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,18,2014-06-10 09:22:04,75.08,,,1,"b'b\' ""Ooooh.  Aaaaaaw!""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,closed,2014-07-06 21:47:33,18.88,4,10,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3820,closed,-,-,-,4,10,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,opened,2014-06-23 10:00:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,title,2014-06-23 10:00:31,00:00,,1,,"b""b' SI-8675 Avoid unreported error after second try using implicit view'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,body,2014-06-23 10:00:31,00:00,,1,,"b'b"" This is specific to situations in which we first typecheck anapplication against the method directly providedby  ", and then fall back to  . Regressed in SI-3971 / 7fa77af, in which error reports were movedto the innermost  , and the check for wasaccordingly changed to recurse through trees. Before that change, we did not fall back to using a view. After thechange, we do try a view. We retypecheck the arguments under the  mode (see  )," but this doesn\'t seem tobe enough to avoid leaking the error typed nested trees from thefirst try. Here\'s an example from the enclosed test case: This commit changes to only proceed with the secondtry if the retyped argument trees are error free.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,closed,2014-06-23 13:24:15,203.73,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,reopened,2014-06-23 13:27:14,2.98,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,1,2014-06-23 10:00:31,1327.67,,1,,"b""b' Whoops! Probably safe to go into 2.11.2", since it seems hard to exploit (though, given the bug report," not impossible).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,2,2014-06-23 10:00:31,54.32,,1,,"b'b"" I\'ve attached a flea collar to this patch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,3,2014-06-23 10:00:31,48.92,,,1,"b'b"" Good"," I\'ll shelve the shampoo then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,4,2014-06-23 10:00:31,1426.67,,1,,"b'b"" @adriaanm I\'ve added another test case based on a report from the mailing list.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,closed,2014-07-03 08:52:43,1165.48,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3828,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,opened,2014-06-28 17:25:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,title,2014-06-28 17:25:06,00:00,,1,,"b""b' moves the impl of quasiquotes to '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,body,2014-06-28 17:25:06,00:00,,1,,"b""b' This brings consistency with  and already existing in scala-compiler. To the contrast", ,the previous home of quasiquotes," is a grab bag of various stuff withoutany central theme.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,1,2014-06-28 17:25:06,0.15,,1,,"b""b' review @retronym @densh '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,2,2014-06-28 17:25:06,1262.37,,1,,"b'b"" I wonder if we should do it the other way around: move more stuff to tools"," as it\'s clearly not public api. Having stuff in directly really looks like it is a part of reflection api.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,3,2014-06-28 17:25:06,11.72,,1,,"b'b"" Another reason why current place seems to be appropriate: it\'s alongside all other default fast-tracked macros (including default macro interpolators.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,4,2014-06-28 17:25:06,6.03,1,,,"b'b"" I\'m just not very fond of the package to be honest. Currently it\'s a collection of random stuff", like you know  ," and that\'s not very good imo.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,5,2014-06-28 17:25:06,126.58,,1,,"b'b"" If we\'ll put all built-in macros in there it won\'t stop being that random any longer.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,6,2014-06-28 17:25:06,12.3,,1,,"b'b"" Well", reify is a built-in macro," and it\'s been in  for a long time already.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,7,2014-06-28 17:25:06,28.08,,1,,"b""b' Type tag materializers and f interpolator are also built-in macros and they have been in for a long time already.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,8,2014-06-28 17:25:06,3.35,,1,,"b'b"" Tag materializers are just thin dispatchers to reify. f interpolator came much later. I don\'t mind the dispatchers for quasiquotes staying in .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,9,2014-06-28 17:25:06,22.0,1,,,"b'b"" FWIW", as a casual user, I share the concern about what looks like api.  It\'s a little extra cognitive burden when it\'s not obvious where to look for stuff.  OTOH," finding f-interpolator in  also felt like rummaging in the junk drawer for a screwdriver.  Sorry I don\'t have a good suggestion for naming.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,10,2014-06-28 17:25:06,897.4,1,,,"b'b"" It seems like activity on this PR stalled so I\'m closing it. @xeno-by", if you still would like to get this PR in," please submit a rebased version.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,closed,2014-09-09 08:55:05,929.98,3,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,11,2014-06-28 17:25:06,5.48,,1,,"b'b"" Let\'s have a review first before we do anything else. @retronym"," what do you think?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,12,2014-06-28 17:25:06,2.88,,1,,"b""b' FYI"," it might take another week or two before @retronym is back online.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,13,2014-06-28 17:25:06,13.87,,,1,"b'b"" This has been waiting for 10 weeks already"," so I don\'t see why it can\'t wait for 2 more :)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,reopened,2014-09-09 14:18:24,323.32,3,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,14,2014-06-28 17:25:06,916.67,1,,,"b'b"" I\'m happy to merge the rebased version of this PR on the consistency argument. Sorry about the tardiness!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,15,2014-06-28 17:25:06,543.35,,,1,"b""b' Rebased. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,16,2014-06-28 17:25:06,5.18,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,17,2014-06-28 17:25:06,0.92,,,1,"b""b' (kitty-note-to-self: ignore 55241992):cat: Roger! Rebuilding pr-scala for 9ba986e6. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,18,2014-06-28 17:25:06,49.32,,1,,"b'b"" Allright"," the build is green. Let\'s merge?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,19,2014-06-28 17:25:06,4.28,,1,,"b""b' Yep. LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,closed,2014-09-12 12:59:23,1360.98,4,14,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3846,closed,-,-,-,4,14,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,opened,2014-07-07 12:06:35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,title,2014-07-07 12:06:35,00:00,,1,,"b""b' SI-8323 Erase constant types for better double-def checks'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,body,2014-07-07 12:06:35,00:00,,1,,"b'b"" Historically", Constant Types in method signatures have not beenerased. Rather, this was done in the backend. This state of affairs leads to wrong decisions when the erasurephase makes decisions about whether a pair of methods will clashin bytecode. This commit changes to take the underlying type of aconstant type. This change obviates the fix for SI-4753, dcc07bd9f. I\'ve added test to show that constants are still inlined. I believe this will answer the question in the backend about whyexistential types make it that far; they come from the underlyingof a constant type representing a class literal. I\'ll leave it to@lrytz to verify that the code in question is now dead and to removeit in his backend work. This change should be binary compatible with 2.11.0. Even though wechanged erasure, the combination of erasure and bytecode generationlead to the same results. Review by @lrytz @gkossakowski I ran this patch by @odersky last Friday. He said it looks correctso long as we verify it doesn\'t affect behaviour of inlining. Heshowed my some code in Dotty that actually followed the new approach. However, when I look at dotty master, I see that  are not erased: url  So, clarification by @odersky," too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,1,2014-07-07 12:06:35,12.7,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,2,2014-07-07 12:06:35,0.28,,,1,"b""b' (kitty-note-to-self: ignore 48171172):cat: Roger! Rebuilding pr-scala for c8134de1. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,3,2014-07-07 12:06:35,35.97,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,4,2014-07-07 12:06:35,6.48,,1,,"b""b' I need to compensate for this change in which special cases mixed in members with constant type results: Closing this PR in the meantime.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,closed,2014-07-08 16:48:16,281.68,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,5,2014-07-07 12:06:35,1307.03,,,1,"b'b"" It might be good to look at references of in all phases after erasure"," there\'s for example [PostErasure]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,6,2014-07-07 12:06:35,270.15,,1,,"b""b' Reopening so the kitteh can work on a test run while we go for a :beer: run.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,7,2014-07-07 12:06:35,0.72,,1,,"b""b' I might retarget this against 2.12.x"," btw.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,reopened,2014-07-11 18:11:13,82.95,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,closed,2014-07-15 12:30:27,1099.23,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,8,2014-07-07 12:06:35,1362.68,,1,,"b'b"" @retronym: what\'s the status of this PR? Are planning to retarget it against 2.12.x?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,9,2014-07-07 12:06:35,1372.35,,1,,"b'b"" Yep. As soon as I squash the residual issues I\'ll do that. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,10,2014-07-07 12:06:35,1374.52,,1,,b'b\' BTW, despite the slight difficulty this change causes to a few phases after erasure, I still believe it is the most principled fix for the bug: erasure should erase _all the way_ to JVM signatures," and later phases should use phase time-travel to make decisions based on the ""constant-cy"" of symbol\\\'s infos.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,11,2014-07-07 12:06:35,76.27,,1,,"b""b' +1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3869,closed,-,-,-,0,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,opened,2014-08-10 19:51:14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,title,2014-08-10 19:51:14,00:00,,1,,"b""b' SI-8627 Override filterNot in Stream'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,body,2014-08-10 19:51:14,00:00,,1,,"b""b' Fixes a bug in which performs an eager evaluation ofthe it is called on. Also adds an additional unit test thatexposes the bug. Previously", commit 7a6905dc15 fixed this method, but commit 3059e3a0c03broke it again. In my opinion, should not rely on the factthat  \\xe2\\x80\\x99s implementation of uses  ,as it is not mandatory in the method\\xe2\\x80\\x99s contract. Instead, the methodshould be overriden in that way," will be moreresilient to changes in its underlying traits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,1,2014-08-10 19:51:14,845.2,1,,,"b""b' The build failed because of binary compatibility issues", but the error message is not clear to me: As I understand," the method returned and still returns a after this PR. Can anyone explain to me why this breaks compatibility or give me an example of such?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,2,2014-08-10 19:51:14,125.7,,1,,b'b\' You also get a bridge method: The ticket has some very educational history.  The comments on SI-6440 show that they considered nailing down as you\\\'ve done, then decided instead to leave it in  , where it was subject to a repeat regression. (That is," 6440 was to fix the same obvious ""optimization""", or whatever the word is for an impossible balance between reuse, method size for inlining, and correctness.)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,3,2014-08-10 19:51:14,506.7,,,1,"b""b' Thanks @som-snytt. Indeed", reading [SI-6440]url  (added link here for future reference) gave me a much better view of the problem. In my opinion, making be always implemented in terms of in is probably the best option. But I can also understand why there are frequent regressions a person trying to optimize little bits of code here and there, unaware of this discussion, may look at and find that writing a custom implementation of would bring performance improvements. As the contract (i.e. scaladoc) does not require it to be implemented in terms of  , one can argue that implementations should not rely on that either. Given that, I think should be indeed reverted and that design choice should be documented in the scaladoc of  . In my view," this would make scala-library devs think twice before writing an implementation of that is explicitly against the documentation. It would also give additional confidence to developers of custom collections. What do you think of this solution?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,4,2014-08-10 19:51:14,38.18,,1,,"b'b\' ""In my opinion"," making filterNot be always implemented in terms of filter in TraversableLike is probably the best option."" When you want to enforce that some method is always implemented in terms of some other method", there is a keyword available which guarantees it. Nothing else works, especially not documentation.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,5,2014-08-10 19:51:14,418.55,,1,,"b'b\' Creating an extra function object really isn\\\'t a nice thing to do to users: ""Hi", we have this tempting method here that will unexpectedly make your code run twice as slow just so it reads a little nicergood luck figuring it out," too!"" So I\\\'m afraid we need to keep the implementation as is for the time being.  I really wish we had a ""must be overridden together"" annotation so that when people override filter the compiler yells at them for not also overriding filterNot. I\\\'m not the right person to decide whether the bug is serious enough to warrant breaking bincompatprobably not?but it can certainly go in 2.12.  I think the solution should not be this one (i.e. expensive)", but rather replicating the logic of filterImpl of TraversableLike and then defining both filter and filterNot in terms of that method.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,6,2014-08-10 19:51:14,46.47,1,,,"b'b"" You could make both filter and filterNot final and route them through some protected overridable method like filterImpl. (I\'m ignoring binary compat"," it\'s just a way to achieve atomicity.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,7,2014-08-10 19:51:14,653.78,,1,,"b'b"" Re-submitted slightly differently in #3949"," hope that\'s binary compatible enough.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,closed,2014-08-26 15:45:49,1194.58,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,reopened,2014-08-26 16:03:15,17.43,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,closed,2014-08-26 17:04:05,60.83,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3925,closed,-,-,-,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,opened,2014-08-21 08:17:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,title,2014-08-21 08:17:57,00:00,,1,,"b""b' SI-8764 fix return type of case class productElement under Xexperimental'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,body,2014-08-21 08:17:57,00:00,1,,,"b'b"" Under  "," now returns the lub insteadof the weak lub of case class parameter types (numeric wideningshouldn\'t magically happen _inside_  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,1,2014-08-21 08:17:57,298.15,,1,,"b""b' review by @retronym :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,2,2014-08-21 08:17:57,353.77,,,1,"b'b"" The test could be reduced to some asserts about TypeTags", no neg or check files.  Modulo the -X flag, it could be a junit test. Also, it looks like most -Xexperimental tests are no longer (they were for virtpatmat, etc). A nice test linter could check that.  Similar to the problem with pending tests, you never know if they\'re still pending, and it\'s all bit rot. I\'d still like an example of what Paul meant in the code comment; it\'s too allusive for me.  That would be a pending test for whether this feature is ready for prime time.  If it\'s not experimental but really a niche -Y, you could decide that," too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,3,2014-08-21 08:17:57,736.08,,1,,"b'b"" Oh", right, I always forget about junit. I\'ll move that there then. I wouldn\'t mind this moving out of  . It already does too many things that people might not actually want ( ,  ,  , SAMs, virtualized matches," experimental TypeVars and this). Someone that wants to enable SAMs should be able to do it without things breaking somewhere completely unrelated (maybe should be turned into a MultiChoiceSetting).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,4,2014-08-21 08:17:57,84.08,,1,,"b""b' We no longer attempt to make case classes extends (even experimentally). Maybe we should also revert", rather than tweak, the special casing of too. These two features arrived together in e412524fee2. parentage was gradually disabled and removed through 70996f8, d7f498ac9cccd7473be8f416a1620548ca8fca9b, b7395e9f50 and 317a1056cd. We would probably need to target that change against 2.12.x," though.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,5,2014-08-21 08:17:57,443.6,,,1,"b'b"" I wouldn\'t mind implementing multichoice -Xexperimental", as an opportunity to illustration the usage and maybe simplify and comment that code. Lukas is using it for -Ystats but I think it might break. In any case, it would be nice if it were crystal-clear how multichoice generalizes. (It sounds like it should be obvious.) On the Product case class," I was going to ask when is this even useful?  Answered.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,6,2014-08-21 08:17:57,1249.3,,1,,"b'b"" Ok", then if it is not useful," let\'s remove it. I opened a PR for 2.12.x: #3970""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,7,2014-08-21 08:17:57,1223.57,,1,,"b""b' Closing this PR given #3970 got merged. @gourlaysama"," is this ok with you?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,closed,2014-09-09 09:26:30,68.55,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,8,2014-08-21 08:17:57,14.52,,1,,"b'b"" @gkossakowski sure. Technically this could still be merged (with  ) to fix it for 2.11.x until it all goes away in 2.12"," but maybe that\'s not useful...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,9,2014-08-21 08:17:57,5.75,1,,,"b'b"" Yeah", given the fact you\'ve spent the time implementing the fix," it makes sense to ship it. Reopening the PR. Please amend commit message and ping me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,reopened,2014-09-09 09:46:46,20.27,2,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,10,2014-08-21 08:17:57,131.47,,1,,"b""b' PLS -scala@e01b461'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,11,2014-08-21 08:17:57,5.05,,,1,"b""b' (kitty-note-to-self: ignore 54958690):cat: Roger! Rebuilding pr-scala for e01b461a. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,12,2014-08-21 08:17:57,70.3,,1,,"b""b' @gkossakowski done :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,13,2014-08-21 08:17:57,2.95,,,1,"b""b' LGTM! Thanks a lot!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,closed,2014-09-09 13:31:21,224.58,2,9,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3938,closed,-,-,-,2,9,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,opened,2014-08-22 13:05:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,title,2014-08-22 13:05:23,00:00,,1,,"b""b' -Ystatistics accepts a list of phases for which to print stats'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,body,2014-08-22 13:05:23,00:00,,1,,"b""b' Also cleaned up handling of defaults in MultiChoiceSetting.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,1,2014-08-22 13:05:23,0.38,,1,,"b""b' review by @som-snytt'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,2,2014-08-22 13:05:23,126.17,,1,,"b'b"" They call it a can of worms", not only because they quickly wriggle out of control, but because you get a queasy feeling in your stomach just at the thought of cracking it open. The reason for the side-effecting default function was for the semantics of Xlint, so does not enable the flag.  So does not mean Also, if I turn off a setting," order of args doesn\'t matter. I haven\'t had time yet before walking to school and coffee to see if this PR intends that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,3,2014-08-22 13:05:23,54.53,,1,,"b'b"" Back from walk to school. So", I see the unit test fails, which checks the semantics for Xlint as described. My other idea (I recall) was to have the default function take the setting object, but that\'s six of one or half-dozen of the other.  The whole layering of the Settings API is, needless to say, difficult to negotiate and probably too complicated; a target for refactoring.  I remember I wanted MultiChoice (in some version) to filter on choices," but couldn\'t without going out of scope.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,4,2014-08-22 13:05:23,12.6,,1,,"b""b' i have another patch coming up", so better wait a bit with the review On Friday, August 22,2014," som-snytt notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,5,2014-08-22 13:05:23,3.85,,1,,"b'b"" OK.  Someone mentioned -Xexperimental could be multichoiced", so I\'d be willing to do something over the weekend for usability of Multichoice or just review your PR. That would be after tequila," the kind with the worm in the bottle.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,6,2014-08-22 13:05:23,292.52,,,1,"b'b"" It should follow the semantics now: is equivalent to  . The adds all settings", but weakly: it adds only those that don\'t exist yet, and later explicit settings will override those added by  . Finally, when specifying the same argument multiple times (positively or negatively), the first one counts. So is  , while is  . See the tests," and let me know if you agree it\'s the right semantics. Dankesch\\xc3\\xb6n!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,7,2014-08-22 13:05:23,41.05,,1,,b'b\' For the last case, explicit flags in conflict," I know the current resolution is to respect turning it on. Possibly it should just be an error or warning that ""flag is already set the other way."" EDIT: here\\\'s where I said that\\\'s what javac does", FWIW: url \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,8,2014-08-22 13:05:23,700.52,,,1,"b'b"" Thanks a lot for the review. It\'s indeed a bit of a worm-can. Anyway"," I hope all is OK now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,9,2014-08-22 13:05:23,1.47,,1,,"b""b' Hah"," some failed test because of the tightened  . Will take a look later.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,10,2014-08-22 13:05:23,546.75,,1,,"b'b"" Finally tamed the tests. @som-snytt", please let me know if you\'re OK taking another look at the worms. I squashed the changes, because I reverted some of the things you flagged," so it\'s easier to see the final diff.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,11,2014-08-22 13:05:23,11.88,,1,,"b""b' Yeah"," sure. Better you than me. Then maybe multichoice experimental would be an easy exercise.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,12,2014-08-22 13:05:23,1363.35,,1,,"b'b"" I couldn\'t see how to PR against lrytz in the github UI"," so there\'s url  which uses enums instead of List[String].""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,closed,2014-08-26 09:47:00,1241.62,0,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,reopened,2014-09-02 09:22:06,1415.1,0,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,13,2014-08-22 13:05:23,943.17,,1,,"b'b"" @som-snytt I closed #3945 and re-opened this one. I left your commit as-is for now", so it\'s easier to see the diff. I\'ll squash the two before merging," to ensure a green build. Let me know what you think.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,14,2014-08-22 13:05:23,2.07,,1,,"b""b' Need to rebase on top of  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,15,2014-08-22 13:05:23,342.22,,1,,"b""b' @skyluc is looking into the IDE failure.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,16,2014-08-22 13:05:23,80.87,,,1,"b'b"" That\'s interesting", your code looks the same as my edit yesterday, but maybe the MultiChoiceEnum helps typecheck.  Clever and brave to push the enum thing to the next level. Is there a use case yet for expanding option? Or build it and they will come?  Nice idea. (Edit: OK," I just saw your other PR with the usage!)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,17,2014-08-22 13:05:23,923.97,,1,,"b""b'   :-1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,18,2014-08-22 13:05:23,5.75,,1,,"b""b' PLS -scala@a7cd75d'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,19,2014-08-22 13:05:23,4.4,,,1,"b""b' (kitty-note-to-self: ignore 54263546):cat: Roger! Rebuilding pr-scala for a7cd75dc. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,20,2014-08-22 13:05:23,252.4,,1,,"b'b"" I found the reason for the failing tests in the Scala IDE build. It is a bit convoluted.The problem related to this PR is that the current Scala IDE code support through  . Before this PR", was extending  . So we have a in [some code]url  which shortcut a piece of code initializing default values of other preferences, which disable part of the classpath validation =I can add support for  , but the change in this PR is not source compatible (with vs without type parameter).So," I\'m not sure what to do.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,21,2014-08-22 13:05:23,13.0,,,1,"b""b' Thanks @skyluc for figuring it out! How about adding temporarily", and then when this PR is merged," you can move to  . It would have been helpful to see the MatchErrorr stack trace in the jenkins log...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,22,2014-08-22 13:05:23,72.6,,1,,"b'b"" Yes", the match Error stack trace would have help me too. I\'m getting a one liner when running it from Scala IDE," but I cannot find it in the Jenkins logs. It is part of the few small fixes I have to do after having looking at this code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,23,2014-08-22 13:05:23,85.62,,1,,"b'b"" I don\'t think the catchall will work", it is likely to totally disable -Xlint, or to not take in account the user configuration.I\'ll have to test," but I think the best is to remove the special support for this option for a while. It would still be configurable manually.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,24,2014-08-22 13:05:23,101.05,,1,,"b'b\' ""Ideally"," MutableSettings#Setting or no wait AbsSettings#AbsSetting should declare along with  , as and defined as applied left to right, so normally single-valued settings have  .  That\\\'s only a bit weird for IntSetting, which currently has an Int-valued default (which IDE must .toString for it to be useful anyway).  Then IDE has a uniform way of asking for defaults. It\\\'s more natural to have a T-valued default, but it\\\'s not obvious that it is more useful. I don\\\'t know whether this would break even more tools.\''
scala	3939	closed	25	lrytz	2014-08-22 13:05:23	179.85		+1		b'b"" I thought the codebase uses what I initially had, but then I checked the [style guide]url  which kind of surprised me, but since I don\'t care much, so I went there. The problem with the one you propose is that IntelliJ doesn\'t support it, while it supports the other two. When writing your proposed style, I end up with the following when hitting return after  ""'
scala	3939	closed	26	som-snytt	2014-08-22 13:05:23	37.75		+1		b'b\' Yeah, the old style guide was formed before there was any consensus.  It\\\'s like a meteor impact from the early days of the solar system.  It didn\\\'t kill any life back then, but today, people keep falling into the crater. url  @retronym must have an opinion because he\\\'s an IntelliJ guy, right? url  Or @soc also url  Paul\\\'s first commit was ""correct"": url  Not that I care that much; but I can\\\'t access our corp network due to SSO outage, so here I sit.  Actually, I do care, since switched from tabs to spaces, I mean from old alignment to new.\''
scala	3939	closed	27	lrytz	2014-08-22 13:05:23	988.83		+1		b""b' I went back to old-style comments. @skyluc can you do the necessary change to the IDE, or should I refactor the patch to avoid the type parameter?'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,28,2014-08-22 13:05:23,5.33,,1,,"b'b"" I\'m working on pushing a change to allow yours. But I have problems with our own PR validator"," I\'m trying to see what is happening.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,29,2014-08-22 13:05:23,1.53,,,1,"b""b' OK"," thanks for the heads up!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,30,2014-08-22 13:05:23,1202.48,,1,,"b""b' We merged the change in Scala IDE"," the tests should pass now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,31,2014-08-22 13:05:23,33.83,,1,,"b""b' PLS -scala@e6e638b'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,32,2014-08-22 13:05:23,5.9,,,1,"b""b' (kitty-note-to-self: ignore 54604188):cat: Roger! Rebuilding pr-scala for e6e638bd. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,33,2014-08-22 13:05:23,517.03,,,1,"b'b"" @skyluc that worked", thanks!@som-snytt if the patch looks good to you now," I\'ll squash my commit into yours to get all builds green.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,34,2014-08-22 13:05:23,5.03,,,1,"b""b' @lrytz Squash away.  Squash is nearly in season.  Thanks again for letting me participate.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,35,2014-08-22 13:05:23,11.73,,1,,"b'b"" I should either close the light or the windows", otherwise there\'ll be many mosquitoes to squash. Anyway, patch seems ready for review now. One problem that I found: in  , the field [  is a  ]url  So if you\'re coding somewhere in the compiler," this will give you a type error: Because is not a path. So you need to do  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,36,2014-08-22 13:05:23,176.57,,,1,"b'b"" I was going to say", The only part I didn\'t crack open was  ," but then I looked at it on my lunch break.  I needed a white board to work it out. I made a gist! url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,37,2014-08-22 13:05:23,586.77,,1,,"b""b'   I should also use that whiteboard more often", much easier to understand.What would be the best rules?would only remove  should add both and  should add all of  ,  ,"  would only add  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,38,2014-08-22 13:05:23,414.35,,1,,"b'b"" We\'ll leave it to tlc to work out what means.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,39,2014-08-22 13:05:23,103.27,,,1,"b'b"" I\'m sure you have an opinion", given that you [forked scala]url  :-) More seriously, I think the rules for negative expanding choices are quite filigrane, but I\'m OK adding that. So basically, is weaker negative expanding, positive expanding are stronger than negative expanding. The surprising one would be  , which would enable all  ,  ,"  . Or do you see a more intuitive solution?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,40,2014-08-22 13:05:23,6.1,,1,,"b'b"" No"," I think you were right not to overengineer it; it\'s simpler to disallow -ab for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,41,2014-08-22 13:05:23,83.73,,1,,"b""b' PTAL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,42,2014-08-22 13:05:23,45.5,,,1,"b""b' LGTM.  Even I can understand it. If you want", you can remove the obsolete comments about nays on expand. And then if you want, you can have  take , and remove the None case," with confidence.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,43,2014-08-22 13:05:23,76.08,,,1,"b""b' @som-snytt thanks for the continuous reviews! Funny how long this PR grew.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,closed,2014-09-08 21:04:46,702.67,0,32,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3939,closed,-,-,-,0,32,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,opened,2014-08-26 15:45:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,title,2014-08-26 15:45:22,00:00,,1,,"b""b' SI-8627 make  non-eager'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,body,2014-08-26 15:45:22,00:00,,1,,"b'b"" The obvious fix", overriding in Stream, is not binarycompatible, see url  Instead, this makes in TaversableLike private[scala],which allows overriding it in Stream. The corresponding mima-failurescan be whitelisted, as the changes are only to private[scala]. In 2.12.x we can remove the override of in Stream, but in2.11.x this is not binary compatible. Eventually we\'d also like to make filter / filterNot inTraversableLike final, but that\'s not source compatible," so it cannotbe done in 2.12.x.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,1,2014-08-26 15:45:22,2.15,,1,,"b""b' Oh", I realize this is not binary compatible," because of mixin.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,closed,2014-08-26 15:47:31,2.15,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,2,2014-08-26 15:45:22,75.28,,1,,"b'b"" Hm", actually, I\'m not sure. Maybe this is OK. The mixed-in methods are only ever called from within the collection library, but never from client code. So if you replace the scala library on the classpath," client code should always work. @gkossakowski wdyt?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,reopened,2014-08-26 17:02:48,75.28,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,3,2014-08-26 15:45:22,116.47,,1,,"b'b"" @lrytz It sounds to me like this should work", but if not it can certainly be caught via type-casting and putting the logic in TraversableLike.  I\'m extremely reluctant to do that, though," given how much of a hack it is.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,4,2014-08-26 15:45:22,1139.15,,1,,"b""b' @lrytz"," yes your change is safe BC-wise for the reason you have given: scala-library is just one piece that can be replaced just entirely.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,5,2014-08-26 15:45:22,3.13,,1,,"b""b' So LGTY?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,6,2014-08-26 15:45:22,1.15,,1,,"b""b' Yep. LGTM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,closed,2014-08-27 14:02:45,1259.95,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,7,2014-08-26 15:45:22,1123.17,,1,,"b""b' url url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,3949,closed,-,-,-,0,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,opened,2014-10-17 08:58:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,title,2014-10-17 08:58:45,00:00,,1,,"b""b' SI-8918 Unary ids are plain ids'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,body,2014-10-17 08:58:45,00:00,,,1,"b""b' Allow +",-,!,~ to be used as unprefixed identifiers. As prefix operators, they must be followed bya simple expression, so otherwise," consume theid itself as the start of a simple expression.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,1,2014-10-17 08:58:45,387.52,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,2,2014-10-17 08:58:45,8.47,,,1,"b""b' (kitty-note-to-self: ignore 60402927):cat: Roger! Rebuilding pr-scala for 6661ddcf. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,3,2014-10-17 08:58:45,733.53,,1,,"b'b"" This change requires a change to the spec as well as coordination with other Scala parsers (I know of scalariform and IntelliJ). I don\'t think it is suitable for 2.11.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,4,2014-10-17 08:58:45,38.28,,1,,"b""b' Can you point me to what in the specification requires changing?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,5,2014-10-17 08:58:45,1.85,,1,,"b""b' Oh"," I guess you mean the grammar. Are there any normal words outside the grammar which would lead one to that conclusion?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,6,2014-10-17 08:58:45,41.85,,1,,"b""b' I just looked the grammar.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,7,2014-10-17 08:58:45,22.3,1,,,"b'b"" Did I check the grammar? I\'m not sure it passes muster.  I\'ll look again and retarget for Don Giovanni if it looks tempting.  I say the end of Don Giovanni when hell itself opens up and demons drag us down for our manifold sins.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,closed,2014-11-04 05:32:34,1233.82,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,8,2014-10-17 08:58:45,12.92,,,1,b'b\' @retronym I just checked the grammar and I don\\\'t see a change.  Let me know if you\\\'d still like this targeted for 2.12, since it doesn\\\'t change how previously accepted source is parsed. Normally, you expect to match what it can, e.g.,  , taken as  , and as without the optional first part. Right now, it matches  ," as not specked. Current implementation already takes backquoted unaries correctly; so that doesn\\\'t change; it merely incorrectly does not take unary-oppable idents as non-unary ops. I may take my old ""Unstoppable!"" t-shirt and modify it to read","Unaryoppable!""\''
scala	4059	closed	reopened	 - 	2014-12-16 05:45:42	13.13	1	6	3
scala	4059	closed	9	lrytz	2014-10-17 08:58:45	139.58		+1		b""b' I move this out of the 2.11.5 milestone, it needs more discussing (for example with the IntelliJ people).'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,10,2014-10-17 08:58:45,175.32,,1,,"b""b' opinions on this change? maybe in 2.12? /cc @adriaanm @gkossakowski @retronym @Alefas'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,11,2014-10-17 08:58:45,3.15,,1,,"b'b"" Although it doesn\'t change grammar"," I\'d be in favour of putting this into 2.12.x and highlighting in release notes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,12,2014-10-17 08:58:45,532.38,,1,,"b""b' +1 on moving to 2.12'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,13,2014-10-17 08:58:45,92.77,,,1,"b'b"" OK", OK! Agreed. It\'s not backwardly source-bug-compatible, so if you used it in your 2.11.6 project," I couldn\'t compile with 2.11.5. It means that folks won\'t be able to do this for a long time. I hope they don\'t riot. Or lodge too many [duplicate issues]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,closed,2015-02-03 21:28:40,942.97,1,10,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,reopened,2015-02-08 20:23:39,1374.98,1,10,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,closed,2015-02-08 20:24:19,0.67,1,10,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4059,closed,-,-,-,1,10,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,opened,2014-10-20 17:05:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,title,2014-10-20 17:05:31,00:00,,,1,"b""b' SI-8898 javap -fun under new style lambdas'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,body,2014-10-20 17:05:31,00:00,,1,,"b""b' To support both -Ydelambdafy strategies", look for both inline(anonfun) and method (lambda) closure classes. For method (lambda) style, use the anonfun method that isinvoked by the accessor. Also," the output of javap must be captured eagerly forfiltering for the current target method.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,1,2014-10-20 17:05:31,1171.88,,1,,"b""b' PLS -scala@a153c05f8a3ea6771d5e0b9afaed4f7e1df00403'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,2,2014-10-20 17:05:31,7.08,,,1,"b""b' (kitty-note-to-self: ignore 59920510):cat: Roger! Rebuilding pr-scala for a153c05f. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,3,2014-10-20 17:05:31,144.47,,1,,"b'b"" That\'s a real error; I broke the stripped output.  I\'ll push the fix shortly. @lrytz  Actually"," just remembered the other issue is that the non-uniformity of the lambda class names means extra work to distinguish class and module closures. That\'s the other fix to push.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,closed,2014-10-21 18:02:40,57.15,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,reopened,2014-10-21 18:02:47,0.12,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,closed,2014-10-21 18:03:50,1.05,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,reopened,2014-10-28 06:51:55,768.08,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,4,2014-10-20 17:05:31,1054.02,,,1,"b""b' Dear kitteh","  I guess I am a dog person.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,5,2014-10-20 17:05:31,705.3,,1,,"b'b"" PLS REBUILD ALL Pretty please.  On the weekend", like in the old days," when you\'d go to the computer room to submit jobs off-hours.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,6,2014-10-20 17:05:31,6.95,,,1,"b""b' (kitty-note-to-self: ignore 61382067):cat: Roger! Rebuilding pr-scala for ecffc953. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,7,2014-10-20 17:05:31,877.05,,1,,"b""b' LGTM this will require change (again) once closures are emitted in Java-8 style (invokedynamic and LambdaMetaFactory)"," but it should become easier to find the delambdafy:method-method (no longer need to grep for the callsite in the lambda class).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,8,2014-10-20 17:05:31,278.32,,1,,"b'b"" Pushed the minor edits. Hope it didn\'t break.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,closed,2014-11-05 15:47:49,535.9,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,9,2014-10-20 17:05:31,183.1,,1,,"b'b"" @lrytz it\'s an inherently brittle feature"," at least as impl\'d.  Wasn\'t sure it was worth it in terms of .  But it\'s useful when you need it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4069,closed,-,-,-,0,7,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,opened,2014-10-28 13:19:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,title,2014-10-28 13:19:38,00:00,,1,,"b""b' SI-8931 make generic signature consistent with interface list in classfiles'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,body,2014-10-28 13:19:38,00:00,1,,,"b'b"" An optimization was introduced in 7a99c03 ([SI-5278]url  to remove redundantinterfaces from the list of implemented interfaces in the bytecode.However the same change was not propagated to the generic signatureof a class", which also contains a list of direct parent classes andinterfaces. The JVM does not check the well-formedness of signatures at classloading or linking (see \\xc2\\xa74.3.4 of jdk7 jvms), but other tools mightassume the number of implemented interfaces is the same whether oneasked for generic or erased interfaces. It doesn\'t break reflection so nobody complained, but it does show: This moves the optimization to erasure, for use in emitting the genericsignature," and the backend calls into it later for the list ofinterfaces.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,1,2014-10-28 13:19:38,74.7,,1,,"b""b' Hmm"," that what I get for testing on quick without building locker...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,closed,2014-10-29 14:34:20,74.7,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,reopened,2014-10-31 07:19:53,1005.55,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,2,2014-10-28 13:19:38,1024.92,,1,,"b'b"" Here is the diff for scalafor this change: url  (collections and tuples are the most affected). It isn\'t incredibly readable"," but it helps.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,3,2014-10-28 13:19:38,0.13,,1,,"b""b' Review @retronym :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,4,2014-10-28 13:19:38,422.12,,,1,"b'b"" There\'s still duplication in the new backend (totally not your fault..!): url  Can you also use there?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,5,2014-10-28 13:19:38,9.57,,,1,"b""b' Looks good otherwise!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,6,2014-10-28 13:19:38,445.95,,,1,"b""b' @lrytz done. Thanks"," I had completely overlooked that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,7,2014-10-28 13:19:38,31.2,,1,,"b""b' PLS -scala@ced3ca8'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,8,2014-10-28 13:19:38,7.3,,,1,"b""b' (kitty-note-to-self: ignore 61896124):cat: Roger! Rebuilding pr-scala for ced3ca8a. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,9,2014-10-28 13:19:38,161.03,,,1,"b""b' LGTM!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,closed,2014-11-07 07:09:25,1429.53,1,5,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4080,closed,-,-,-,1,5,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,opened,2014-11-01 20:21:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,title,2014-11-01 20:21:03,00:00,,1,,"b""b' SI-8835 Lazier slice for Iterator'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,body,2014-11-01 20:21:03,00:00,,1,,"b""b' An iterator for slicing that does not drop eagerly. A series of that results in nothing takenwill not call the underlying iterator. Chained invocations do not create intermediate iterators. Adds eager to  ", which overrides and  . Let handle so your ScalaCheck labels can be shown truncated, at least during debug. This PR against 2.12 (because of the change to laziness)includes the expanded unit test from #4075, but does notdelete the redundant test files. This is similar to a proposal at #3963: just track drop and take numbers (skip and limit counters) until forced. There may be a question whether this is worth it, in the space between deprecated views and the collections getting rewritten by multiple parties. The other question is, if and and are defined in terms of a template method," should they be final? Review by @Ichoran '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,1,2014-11-01 20:21:03,533.0,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,2,2014-11-01 20:21:03,1.17,,,1,"b""b' (kitty-note-to-self: ignore 61441503):cat: Roger! Rebuilding pr-scala for fb008824. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,closed,2014-11-03 11:42:00,920.95,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,3,2014-11-01 20:21:03,502.35,,,1,"b'b"" A parallel collections test is hung", but that problem predates this PR, see #4082.  Apparently the test doesn\'t always hang," which is the true beauty of parallelism: there\'s always a parallel universe in which your test has run to completion successfully.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,reopened,2014-11-03 13:37:34,115.57,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,4,2014-11-01 20:21:03,285.63,1,,,"b'b"" Now that the pc test runs", it doesn\'t like the lazy drop business.  I wonder if it\'s a test artifact, but I\'ll have to understand the test first. Edit: looks like the pc iterable splitter iterator mechanism overrides slice and dice, uh, take but not drop.  That\'s my guess after learning a bit how scalacheck works.  A strange artifact was that the test was handed Nil to compare to a non-empty ParVector; possibly that occurred during minimization," but it makes the test rig look broken.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,closed,2014-11-10 03:42:53,845.32,1,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,reopened,2014-11-10 05:25:41,102.8,1,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,5,2014-11-01 20:21:03,82.17,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,6,2014-11-01 20:21:03,0.37,,,1,"b""b' (kitty-note-to-self: ignore 62442375):cat: Roger! Rebuilding pr-scala for 719d8822. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,7,2014-11-01 20:21:03,807.43,,1,,"b""b' ping @Ichoran. To avoid conflicts", we should first merge #4075, then merge 2.11.x into 2.12.x," and rebase this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,8,2014-11-01 20:21:03,743.87,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,9,2014-11-01 20:21:03,8.88,,,1,"b""b' (kitty-note-to-self: ignore 62798979):cat: Roger! Rebuilding pr-scala for 719d8822. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,10,2014-11-01 20:21:03,236.23,,,1,"b'b"" Looks pretty good.  I think the underlying logic is sound and I didn\'t see any obvious corner cases that weren\'t being caught; just a bit of code-tidying and it should be good to go.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,11,2014-11-01 20:21:03,89.35,,1,,"b'b"" I\'ll make the test changes on #4075 and delete that from this PR", since the tests have passed.  When the PR is rebased," they should pass again.  That\'s assuming PRs are merged forward as expected.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,12,2014-11-01 20:21:03,798.08,,1,,"b""b' Repushed with readability tweaks to Iterator", but without the test files," which are updated on #4075 .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,13,2014-11-01 20:21:03,64.03,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,14,2014-11-01 20:21:03,5.03,1,,,"b'b"" If take", drop, and slice are implemented in terms of a template method, we need an annotation to say so when they are overridden.  Making them final is a poor substitute for warning people that there is a common implementation.  (This is hardly the only case where such an annotation would be valuable.)  Anyway, since we don\'t (yet?) have such an annotation," I wouldn\'t worry overly much about it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,15,2014-11-01 20:21:03,5.83,,1,,"b""b' url url  This is especially relevant here because as I found the last time I did something about the 25 different slice implementations", there are times when you definitely want to implement slice in terms of take and drop," and there are times when you want to implement take and drop in terms of slice.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4086,closed,16,2014-11-01 20:21:03,147.37,,1,,"b'b\' I didn\\\'t even get as far as understanding non-strict-splitter collections. url  where there are further ""considerations.""  It\\\'s one of those effective java words"," along with ""judiciously."" I want a t-shirt that says","Consider not doing that.""  Or if not a garment, then an annotation.\''
scala	4086	closed	closed	 - 	2014-11-21 14:12:43	527.03	2	11	5
scala	4086	closed	-	-	-	-	2	11	5
scala	4090	closed	opened	retronym	2014-11-05 01:45:03
scala	4090	closed	title	retronym	2014-11-05 01:45:03	00:00		+1		b""b' SI-8955 Fix hanging fork-join pool via parallel collections'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,body,2014-11-05 01:45:03,00:00,,1,,"b'b"" A recent change [1] to Scala\'s default fork join thread pool causedintermittent deadlocks. This is only visible in the development seriesof Scala", 2.12.0-SNAPSHOT. We changed our thread factory to place a hard limit the number ofthreads created (equal to the desired parallelism.) I have extracted a test case [2] that uses jsr166e directly, ratherthan using Scala\'s parallel collections and abstractions on top of FJ. In the comments of the bug, Viktor suggests this was too aggressiveand instead we ought to increase the limit to parallelism + 256(with a system property override.) He explained:Through testing, I found that for this example I could trigger thehang with: I have emailed concurrency-interest [3] to help analyse the problemfurther, but in the interest of avoiding hangs in the-collections test," I\'m implementing Viktor\'ssuggestion in the interim. [1] url [2] url [3] url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,1,2014-11-05 01:45:03,0.27,,1,,"b""b' Review by @viktorklang'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,2,2014-11-05 01:45:03,103.18,,1,,"b""b' BUILDLOG?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,closed,2014-11-05 04:11:01,145.97,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,reopened,2014-11-05 04:11:02,0.02,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,3,2014-11-05 01:45:03,46.82,,1,,"b""b' (kitty-note-to-self: ignore 61754875)pr-scala:1cf480df: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,4,2014-11-05 01:45:03,302.95,,1,,"b'b"" This is not the patch I proposed. maxExtraThreads should be in addition to parallelism"," as we don\'t want the pool to grow beyond parallelism unless there is managed blocking.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,5,2014-11-05 01:45:03,50.63,,1,,"b'b"" Doesn\'t satisfy this requirement?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,6,2014-11-05 01:45:03,2.38,,1,,"b""b' Oh"," I think I see my error.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,7,2014-11-05 01:45:03,3.92,,1,,"b'b"" How\'s this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,8,2014-11-05 01:45:03,71.87,,,1,"b""b' :+1: @retronym"," great work!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,9,2014-11-05 01:45:03,68.77,,1,,"b""b' LGTM echo"," for the bots sake.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,10,2014-11-05 01:45:03,1.95,,1,,"b""b' LGTM ;)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,closed,2014-11-06 12:48:57,517.92,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,11,2014-11-05 01:45:03,1213.53,,1,,"b""b' btw"," this means that we are now seeing several hundred threads on an app that previously had a handful and the extra overhead of OS thread scheduling is impacting performance.  At least there is a workaround:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,12,2014-11-05 01:45:03,15.55,,1,,"b'b"" @fommil  The default fork-join pool available in uses that maximum as a limit for threads created when operations happen (via [BlockContext]url Without that you would end up with deadlocks", because blocking operations *can wait on Runnables*  that have nowhere left to execute. Quite the contrary, people have been bitten by that maximum limit, with apps freezing because has a maximum limit.  The workaround is not to set that environment variable to zero," because you\'ll break other people\'s code that depends on behaving just the way it is. The workaround is to configure your own thread pool.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,13,2014-11-05 01:45:03,21.83,,1,,"b""b' @alexandru from a position that all blocking operations are already assigned their own thread pool"," my workaround is the correct if one must interact with legacy CPU bound code instead of using  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,14,2014-11-05 01:45:03,25.2,,1,,"b'b"" This problem has nothing to do with or  .  If you\'re having hundreds of threads"," then you\'ve got blocking operations running on  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,15,2014-11-05 01:45:03,74.0,,1,,b'b\' @alexandru the thread factory does not check if something is blocking or not blocking, it just assigns threads when asked, unless the logic is implemented in some corner of the code that is not obvious. That can happen if non-blocking CPU-heavy work is scheduled all at once, while work is ongoing," creating ""cores + 256""  s. I think this is what I was seeing", but it\\\'s hard to confirm since threads are created and destroyed pretty quickly and I\\\'m trying to eyeball how many threads are alive at once from a memory snapshot that I cannot easily rerun. Certainly I have hundreds of threads alive over a very short period of time where I would not have expected any threads to have reason to be killed. None of that work is blocking, to the best of my knowledge.  If I were to create my own execution context for CPU bound work, as you suggest, it would look much like  , except it is and I cannot access it, so it would be a lot of duplicated code. Therefore the easiest thing for me to do is to disable the unnecessary headroom with and ensure that nobody puts blocking operations in the global context, which would be a performance bug with or without deadlock (in fact, the manifestation of blocking as deadlock is good because it turns performance bugs into functional bugs, easier to spot).  Re: why I mentioned  , you suggested that my workaround was not the full picture and offered an alternative workaround. So I let you glimpse something of the full picture, in which is a performance problem in my app and moving to is the solution. That digression is not relevant to this particular ticket, and you have no way of knowing all the details," but I feel I must correct your strong assertion that my problem is ""nothing to do with Future or IO"" when it **is** and you don\\\'t have all the facts. I\\\'d rather not digress any further in that direction", if that\\\'s ok with you.  Back to the topic of the ticket, my proposed workaround seems to have cleared things up," although it\\\'s hard to say anything definitive about these sorts of micro optimisations. Certainly it was a surprise to see ""256 threads"" appear out of nowhere. I would much rather have ""99 red balloons"".\''",,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,16,2014-11-05 01:45:03,648.43,1,,,"b'b"" The fact is that when the fork-join pool asks for a new thread", the *has no way of knowing why it\'s asking*. It could be, and often is the case that the fork-join pool is asking for new threads because *all of the queues are full and it\'d like to have available workers*, even if the number has been exceeded by the number of threads. And the  \'s is still used to limit *those* threads.  So increasing the number of threads to *could* have an impact on the number of threads in the pool even without blocking, it *could* cause massive context-switching for CPU-bound code, and even removing all of your blocking won\'t fix that (even though blocking does make it worse).  EDIT: @fommil tried a demo of this, and the FJP may not be requesting many extra threads beyond parallelism. Not sure about this. It may be the case that limited use of is ruining the performance of the other threads in the pool.  EDIT 2: It looks like if you have any code that uses it ruins the performance of non-blocking tasks which are submitted after the blocking ones are, if you\'re out of threads. That\'s basically just url  though," so that\'s not new.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,17,2014-11-05 01:45:03,666.77,,1,,"b""b' I am more and more convinced that I was just counting dead threads from a very difficult to profile application in a difficult to reach environment. However"," the experience led me into reading this code. Now I feel exactly like I did that time I went to a sausage factory.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,18,2014-11-05 01:45:03,585.7,,1,,"b'b""  I\'m hungry"," too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4090,closed,-,-,-,1,18,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,opened,2014-11-08 07:54:47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,title,2014-11-08 07:54:47,00:00,,1,,"b""b' SI-8967 Only add JARs and dirs from $SCALA_ to classpath'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,body,2014-11-08 07:54:47,00:00,1,,,"b'b"" That\'s all we ship in that directory"," but it seems that someJVMs freak out with a core dump if something else ends upin that directory and we add it to the boot classpath. Testing on unix: The boot classpath contains but not  . I will seek a Windows test of the same during PR review. Review by @gourlaysama""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,closed,2014-11-08 08:10:42,15.92,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,reopened,2014-11-08 08:31:59,21.28,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,1,2014-11-08 07:54:47,1051.13,,,1,b'b\' The windows script doesn\\\'t use bootclasspath?  And it seems Hotspot is more forgiving on windows anyway. (Edit: i.e., non-zip file on boot class path doesn\\\'t fail.  I wonder if that\\\'s to forgive dlls?) The unix script handles cygwin: Also on Linux, it\\\'s not bothered by non-jar on regular classpath. Also," I\\\'m not convinced that supplying empty classpath disarms ""."" as the script says. files are also OK for classpaths. (Edit: so maybe zip files in scala home should be put on the class path.)\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,2,2014-11-08 07:54:47,1056.75,,,1,"b""b' Also works fine on Windows:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,3,2014-11-08 07:54:47,967.2,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,closed,2014-11-17 11:10:29,158.5,1,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4113,closed,-,-,-,1,2,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,opened,2014-11-26 20:12:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,title,2014-11-26 20:12:41,00:00,,1,,"b""b' SI-9006 Scaladoc: explicit companion and package links'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,body,2014-11-26 20:12:41,00:00,1,,,"b""b' The existing navigation mechanisms have proved hard to discover for newcomersto Scaladoc. This commit adds textual links in the navigation bar to the docs of thecompanion (if defined) and to those of the enclosing package.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,closed,2014-11-26 21:00:11,47.5,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,reopened,2014-11-26 21:48:37,48.43,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,1,2014-11-26 20:12:41,126.95,,1,,"b""b' Supersedes #4162.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,2,2014-11-26 20:12:41,1080.42,,,1,"b'b"" LGTM as an incremental improvement. I agree it would be nice to display object members in the same page and having filters"," but I\'m postponing that and merging this PR. /cc @heathermiller ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,closed,2014-12-05 19:37:04,1308.45,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4165,closed,-,-,-,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,opened,2015-01-12 23:03:51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,title,2015-01-12 23:03:51,00:00,,1,,"b""b' Document concurrent package object'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,body,2015-01-12 23:03:51,00:00,,1,,"b'b"" Added some package scaladoc for concurrent", replacing an empty document. While not exhaustive, it\'s an improvement on what wasn\'t there and hits several key points, including common imports for concurrency, execution context and duration," and warns about using  over blocking waits.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,1,2015-01-12 23:03:51,1384.72,,1,,"b""b' review by @adriaanm please'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,closed,2015-01-13 22:08:34,1384.72,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,reopened,2015-01-13 22:09:23,0.82,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,2,2015-01-12 23:03:51,785.7,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,closed,2015-02-03 11:14:18,784.92,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4245,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,opened,2015-01-18 16:37:47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,title,2015-01-18 16:37:47,00:00,,1,,"b""b' SI-9072 Vector ++ concatenation of parallel collection cause inconsisten...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,body,2015-01-18 16:37:47,00:00,,1,,"b""b' ...t results'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,1,2015-01-18 16:37:47,408.68,,1,,"b'b"" LGTM but we should get the IDE build error under control before merging.  (Not specific to this patch; everything\'s been failing on it lately.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,2,2015-01-18 16:37:47,77.58,1,,,"b'b\' Could you please expand the commit comment to briefly describe what was wrong with the code before? (e.g: ""Should not side effect within a potentially parallel call."") I\\\'m auditing the rest of the collections for the same mistake. So far I\\\'ve found:  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,3,2015-01-18 16:37:47,102.5,1,,,"b'b"" @retronym Manual auditing sounds tedious.  Maybe you\'re not doing it manually; e.g. you could deprecate foreach on GenTraversableLike and the other Gen-children; then the compiler should catch all uses.  Anything outside  is suspect.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,4,2015-01-18 16:37:47,164.42,,,1,"b""b' Excellent suggestion! I added a custom warning to flag any use of a higher order method from (other than in  ). Results: Results: Maybe checking for usages is enough here", but I wanted to start broadly. In addition to the bug in this PR and the potential bugs I found manually," these two are pretty glaring:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,5,2015-01-18 16:37:47,972.25,,1,,"b""b' PLS REBUILD ALL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,6,2015-01-18 16:37:47,5.55,,,1,"b""b' (kitty-note-to-self: ignore 71918881):cat: Roger! Rebuilding pr-scala for fb043761. :rotating_light:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,7,2015-01-18 16:37:47,83.67,,1,,"b""b' Merging as-is; the need to .seq is", sadly, rather common in the code," so there is not much benefit in having a comment here pointing it out. @retronym did you file a ticket for the other spots (or fix them)?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,closed,2015-01-30 22:52:26,374.65,2,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,8,2015-01-18 16:37:47,1.93,1,,,"b'b"" Argh"," silly laptop touchpad.  Didn\'t mean to close.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,reopened,2015-01-30 22:54:22,1.93,3,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,closed,2015-01-30 22:54:51,0.48,3,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,9,2015-01-18 16:37:47,16.25,,1,,"b""b' @retronym Filed an issue for this", hopefully not a duplicate: url  @adriaanm Not sure whether you intended me to merge this or to review it again (I already had," and nothing had really changed?).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,10,2015-01-18 16:37:47,45.92,,1,,"b""b' I meant to divide up the work of getting the four dozen or so pending PRs merged in due course.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4259,closed,-,-,-,3,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,opened,2015-01-22 00:39:04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,title,2015-01-22 00:39:04,00:00,,1,,"b""b' SI-9110 Pattern must check for a top level O'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,body,2015-01-22 00:39:04,00:00,,1,,"b'b"" The outer check was not being generated when the prefix was atop level module. The enclosed test shows that we in fact mustsynthesize the outer check in that case. Perhaps the bug was introduced by neglecting to consider thata module can inherit member classes. Review by @adriaanm. Targetting to 2.12.x to be conservative","but let\'s discuss the best way to bring in this fix.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,1,2015-01-22 00:39:04,1192.53,,1,,"b'b"" The fix LGTM conceptually. Maybe we should introduce it in 2.11.x"," though. I have another one in this area: url  I\'ll combine both and whip up a new PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,closed,2015-03-30 20:32:05,1193.02,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,reopened,2015-11-26 12:33:03,960.97,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,2,2015-01-22 00:39:04,961.97,,1,,"b""b' @adriaanm Re-proposing this one for 2.12.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,3,2015-01-22 00:39:04,672.57,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,closed,2015-12-18 07:51:30,1158.45,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4265,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,opened,2015-01-26 21:09:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,title,2015-01-26 21:09:20,00:00,,1,,"b""b' SI-9113: WrapAsScala can create exception-prone Wrappers'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,body,2015-01-26 21:09:20,00:00,,1,,"b""b' Review by @axel22 @phaller . Fixes issue SI-9113 by checking for and returning null values instead of passing them to a wrapper as an underlying collection", which can in turn lead to unexpected behaviour. This is a follow-up to #4266," in which I neglected to squash commits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,1,2015-01-26 21:09:20,9.03,,1,,"b""b' Which", if any," of the existing methods fail fast and now will fail more slowly with a NPE later on?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,2,2015-01-26 21:09:20,24.78,,1,,"b""b' @Ichoran This should not cause a delayed NPE anywhere. The problem detailed in SI-9113 is that if you are using the implicit converters (or decorators", as they use common logic) to wrap a java collection reference, and that reference is null, it will return a collection wrapper like those implemented in [](/). Since these wrappers will be erased to their destination type, it is not possible to access the underlying collection (not that there exists a clean method by which to accomplish this given you know the type _is_ a wrapper implementation) in order to determine whether or not it is a null reference. This creates a rather pernicious issue, as you will wind up with an object reference that is itself _not_ null, and that when accessed will throw an NPE inside of it self rather than at the actual caller (which, due to Scala->Java magic, can be several stack levels of difference). Due to the aforementioned traits, this will bypass any nullity checks performed in client code, and Option(_) will return Some[_](...) instead of None when passed the faulty wrapper. As such, in order to safely deal with an implicitly converted collection that might have been null before conversion, you must encase it in a  block whenever you access or manipulate it. The unfortunate bit about this approach is that it can be hard to avoid catching exceptions that might possibly occur _inside_ the underlying collection (for instance: when you convert a custom collection that might throw that error), which could lead to some rather confusing debugging if the problem-causing exception is dismissed as regular functionality. As for how it affects code that was written to accommodate this behaviour, nothing should be different. Currently, when you attempt to call a wrapper function, it will throw an NPE _inside_ the wrapper. After the fix, an NPE will still be throw but rather than _inside_ the wrapper, it will be _at_ the caller (or close to it). As such, any  statements in place to handle this potential behaviour can be either left in place or replaced with  handling or a nullity check. **_In short**_, none of the implicit converters will fail (in the sense of rasing an exception) any differently from how they could have before the proposed modifications. Furthermore, any code you have in place to handle NPEs thrown when accessing null collections will still work. That being said, I would suggest that you test your software with the modified library in place," as you would with any other update.'""",,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,3,2015-01-26 21:09:20,63.2,,,1,b'b\' Thanks for the lengthy response, but I think you misunderstood my concern. If any existing wrapper touches the wrapped collection in the initializer (e.g. there\\\'s  lazy val somewhere), it could fail fast.  So I just wanted, e.g.,No wrapper accesses the wrapped collection in the initializer," or ""some collection does"," so it will fail fast on construction"". I read through the code myself and did not see any instances where the initializer touches a possibly null collection in any of the wrappers", so I believe that the code will fail at the same locations as before (with a little less on the stack). There is a secondary issue: behavior of some data-aware constructs will change.  E.g. Option() will be None instead of Some(y) where y will throw a NPE.  I\\\'d argue that this is what one wants, but we should keep our eye on it since it\\\'s targeted to a point reliease.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,4,2015-01-26 21:09:20,116.98,,1,,"b""b' I can second you on the wrapper classes not accessing the underlying collection during initialization. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,closed,2015-01-27 07:37:03,627.72,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,reopened,2015-01-27 07:37:13,0.17,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,5,2015-01-26 21:09:20,414.2,,1,,"b""b' Blasted mobile browsers these days... '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,6,2015-01-26 21:09:20,930.17,,,1,"b""b' LGTM but I would like a second opinion from someone on whether the behavior change on Option() is fine for a point release.  I would like to say yes: the whole point of putting it in an option is to catch this sort of thing!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,7,2015-01-26 21:09:20,16.6,,1,,"b""b' LGTM too", but to be safe, I would add it in the next major release. Would be tempted to put the annotation as well," but that might be too obtrusive.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,8,2015-01-26 21:09:20,778.38,,1,,"b'b"" I think we should strive for a consistent policy with other implicits in the library. I remember some discussion of this sort of problem before but I can\'t seem to find it. Will keep looking.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,9,2015-01-26 21:09:20,86.9,,1,,"b""b' True. It is not likely that every implicit writer will be careful enough to check for  ness. The current behavior could be more consistent with the Scala ecosystem in general"," not just the standard library.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,10,2015-01-26 21:09:20,564.0,,1,,"b'b"" My comment on the previous PR was that should throw because it\'s a selection. It makes me wonder why the compiler doesn\'t enforce it at runtime. Enforcement could be injected in the of implicit classes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,11,2015-01-26 21:09:20,1133.88,1,,,"b'b"" Since this makes (potential) NPE crashes easier to understand without materially changing the behavior", I think we can merge this into 2.11.x. I feel bad asking for a commit message rewrite after so much time," so I\'ve reworded and resubmitted. See linked PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,closed,2015-02-13 18:07:28,630.25,1,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,12,2015-01-26 21:09:20,5.67,,1,,"b'b"" @retronym Just had a thought at random this morning. Wouldn\'t it make more since for the decorated converters (.asJava", .asScala) to throw exceptions, but for the implicit converters to return null? My logic is that it would make debugging simpler. For instance, when passing an X collection to a function that wants a Y collection with implicit conversion, it will appear in source form as if that reference is being passed to said function (when there is really an intermediate function call inserted during compilation), and as such, it would make more sense for that function to throw the exception from within. On the other hand, when using the decorative method, it appears as if you are calling a function provided by X collection to get a Y collection. In the latter (decorator) case, it would make more sense to throw an exception from inside the conversion method, as it would be clear that the programmer _explicitly_ wanted to call a member function of X collection," rather than pass the reference to X to the method (whether it be null or not). What do you think?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,13,2015-01-26 21:09:20,34.9,,1,,"b""b' @som-snytt if anybody wanted to write e.g. a method that runs a into an  "," this would be much harder if compiler were to throw an exception. I guess a hypothetical universal trait might be a better way to achieve auto conversions.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4267,closed,-,-,-,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,opened,2015-01-26 21:50:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,title,2015-01-26 21:50:50,00:00,,1,,"b""b' IMPORTANT: Base your PR on this one > New PR validation <'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,body,2015-01-26 21:50:50,00:00,,1,,"b""b' NOTE: you must (re)base future PRs on this PR"," as we are moving over to url  for PR validation. More details coming to scala-internals.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,closed,2015-01-26 21:54:56,4.1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,reopened,2015-01-26 21:54:57,0.02,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,closed,2015-01-26 21:55:53,0.93,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,reopened,2015-01-26 21:55:54,0.02,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,1,2015-01-26 21:50:50,18.17,,1,,"b""b' Looks like jenkins config issue because the validation job is now run against multiple repos. Attempted fix: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,2,2015-01-26 21:50:50,98.82,,,1,"b""b' Very funny"," jenkins. The main flow picked up later failures in the test job while I was experimenting....'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,3,2015-01-26 21:50:50,361.85,,1,,"b""b' @-core-scala"," please have a look and merge this so that future PRs can include the scripts.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,4,2015-01-26 21:50:50,0.05,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,5,2015-01-26 21:50:50,2.23,,1,,"b""b' The next step will be to add integration testing"," as tracked here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,6,2015-01-26 21:50:50,127.98,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,7,2015-01-26 21:50:50,15.4,,,1,"b""b' Alright! Green enough!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,closed,2015-01-28 08:15:37,619.72,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,8,2015-01-26 21:50:50,158.45,,,1,"b""b' Something seems to be wrong with file encodings. This manifests as failures in tests in for tests with checkfiles containing the Unicode arrow symbol. I have a feeling this is triggered by reusing a Jenkins workspace", as opposed to using a fresh checkout. Right now, we can see the following in the and files," as viewed by the Jenkins web UI: ![image]url  ![image]url  Diffing the failing build on #4271 and the last successful build:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,9,2015-01-26 21:50:50,168.73,,1,,"b'b"" The Scala Jenkins master node appears to be started with  .  ![image]url  I don\'t have access to the Script Console on the new Jenkins clusters to contrast this setting.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,10,2015-01-26 21:50:50,198.33,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4268,closed,-,-,-,0,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,opened,2015-01-31 22:23:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,title,2015-01-31 22:23:06,00:00,,1,,"b""b' SI-8650 F-interpolator inlines literals'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,body,2015-01-31 22:23:06,00:00,1,,,b'b\' FormatInterpolator checks that indexed specifiers (like %3$d) refer toarguments that are compatible with the specifier. When arguments are literal constants, aka constant value expressions,"they are inlined using the specifier. Sample debug output showing that only one arg is evaluated at runtime: It doesn\\\'t attempt (bother) to inline enum symbols and class constants. I ran out of patience getting the ""incompatible arg"" error caretposition correct. Is there a list of ""things that should be trivial""?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,closed,2015-02-01 05:10:27,407.35,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,reopened,2015-02-02 09:32:08,261.68,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,1,2015-01-31 22:23:06,390.03,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,2,2015-01-31 22:23:06,85.5,,,1,"b""b' @retronym Thanks", I had a few LOF (fixes) from early this morning. This is maybe worth it," but niggling work.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,closed,2015-02-03 06:18:38,1246.5,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,reopened,2015-02-08 09:30:57,192.32,1,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,3,2015-01-31 22:23:06,205.53,,1,,"b""b' The update does a couple of more tricks to avoid exceptions.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,4,2015-01-31 22:23:06,424.9,,1,,"b""b' He forgot to mention that it encodes directly to now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,5,2015-01-31 22:23:06,822.18,,1,,"b""b' Requires more manual constant expression evaluation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,closed,2015-02-10 06:31:15,1260.3,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,6,2015-01-31 22:23:06,1108.88,,1,,"b""b' Moving on: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4282,closed,-,-,-,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,opened,2015-02-02 05:27:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,title,2015-02-02 05:27:59,00:00,,1,,"b""b' SI-9131 Fix use of apply syntactic sugar with by-name param'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,body,2015-02-02 05:27:59,00:00,1,,,b'b\' After typechecking a tree, the typer adapts it to the currentmode and expected type. If we are in FUNmode (typechecking thequalifier of a valueor type-application), and the tree does notalready have a MethodType or PolyType, it is reinterepreted as . In doing so, stabilizes the type of  , e.g.replacing with . However, this does not check for by-name parameters, which cannotform the basis for a singleton type, as we can see by trying thatdirectly: When I last touched this code in SI-6206 / 267650cf9, I noted: I didn\\\'t get around to that, but @adriaanm gave that code a thoroughcleanup in fada1ef6b. It appears that on the back of his work, we can now remove the localstabilization logic in in favour of  .We then avoid the ill-formed singleton type," and the spurious""apply is not a member"" type error.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,closed,2015-02-02 06:32:57,64.97,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,reopened,2015-02-02 06:34:07,1.17,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,1,2015-02-02 05:27:59,810.18,1,,,"b'b"" Could you remove the @ in my in your commit message. Otherwise", github will ping me every time this commit passes by in a merge in any repo," and  \'s go straight to the top of my inbox.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,2,2015-02-02 05:27:59,381.33,,1,,"b""b' Duly scrubbed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,3,2015-02-02 05:27:59,7.02,,1,,"b""b' ta'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,4,2015-02-02 05:27:59,118.22,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,5,2015-02-02 05:27:59,45.3,,1,,"b""b' Ah yes"," the IDE build fail: see url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,6,2015-02-02 05:27:59,21.72,,1,,"b""b' Rebased.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,7,2015-02-02 05:27:59,61.27,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,8,2015-02-02 05:27:59,1433.33,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,9,2015-02-02 05:27:59,0.4,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,10,2015-02-02 05:27:59,0.52,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,11,2015-02-02 05:27:59,1.58,,1,,"b""b' @retronym the different jobs are an artifact of a bug i introduced in the bot while trying to harmonize the abbreviation of jenkins job names to context in the commit statuses (see slack)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,12,2015-02-02 05:27:59,1.37,,,1,"b""b' gotcha"," thanks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,13,2015-02-02 05:27:59,142.38,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,14,2015-02-02 05:27:59,0.08,,1,,"b""b' /nothingtoseehere'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,closed,2015-02-23 17:29:23,655.27,2,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4286,closed,-,-,-,2,13,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,opened,2015-02-10 07:01:09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,title,2015-02-10 07:01:09,00:00,,1,,"b""b' SI-3368 CDATA gets a Node'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,body,2015-02-10 07:01:09,00:00,,1,,b'b\' XML Parser uses  . A compiler flag  , analogous to ," turns  nodes into nodes and coalesces sibling text nodes. This change also fixes parse errors such as rejecting asequence of CDATA sections. A sequence of ""top level"" nodes is not coalesced.  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,1,2015-02-10 07:01:09,1036.62,,1,,"b'b"" Since the 2.11.6 deadline is extremely nigh", I\'ve tentatively postponed this PR (along with other recent ones) to 2.11.7. I\'ll make a pass through reviewed 2.11.7 PRs on Friday and move them back to 2.11.6 where feasible. In the mean time," feel free to let me know if you\'d like some help getting this reviewed by then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,2,2015-02-10 07:01:09,576.03,,,1,"b""b' looks great! just the few minor things mentioned above.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,3,2015-02-10 07:01:09,357.13,,,1,"b'b"" @lrytz Thx! I\'ll break out the can of polish.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,closed,2015-03-25 18:16:01,674.87,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,reopened,2015-04-08 16:46:35,1350.57,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,4,2015-02-10 07:01:09,61.55,,1,,"b""b' Rebased"," so it lost previous greenies.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,5,2015-02-10 07:01:09,98.15,1,,,"b'b"" The (non-deterministic?) fail in b60de05 seems to imply we regressed somewhere (in the pattern matcher) -diagnosing! Sorry about loss of green. Rebuilding to see whether it\'s stubborn.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,6,2015-02-10 07:01:09,45.62,,1,,"b""b' ff2c0bb seems to have a legit fail"," though:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,7,2015-02-10 07:01:09,1.53,1,,,"b'b"" I just commented above (outdatedly):  Ownerlrytz added a note 16 days ago also redundant now@som-snyttsom-snytt added a note 3 hours ago It will stop after parser; assume it would proceed successfully thru typer.@som-snyttsom-snytt added a note 8 minutes ago Or"," maybe it won\'t print anything and fail the test.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,8,2015-02-10 07:01:09,79.22,,1,,"b""b' OK", next theory," the prodigal test is compiling Java code. How does that interact with phasing? he asked himself. I left the test overriding extra settings with  . I came close to because neither stop-before nor packageobjects get enough attention.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,9,2015-02-10 07:01:09,146.27,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,10,2015-02-10 07:01:09,57.72,,,1,"b'b"" Let\'s :shipit: :rocket: :sparkles: :so_much_emoji_everywhere!:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,closed,2015-04-10 00:01:08,434.55,2,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,11,2015-02-10 07:01:09,1283.78,,1,,"b""b' Is this test failure expected? url Test method: url  Tracked as url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,12,2015-02-10 07:01:09,1331.73,,1,,"b'b"" I\'ll take a look. I guess it doesn\'t community-build per commit yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,13,2015-02-10 07:01:09,1388.48,,,1,"b'b"" Thank you! Unfortunately"," this wasn\'t caught until late at night (in some timezone anyway).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,14,2015-02-10 07:01:09,1396.7,,1,,"b""b' I commented on the other ticket that presumably should default for 2.11.x. With a dash of  . Or", possibly, the previous behavior was just a bug," and the only people using scala-xml are the only people who want this feature to default to the correct behavior.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,15,2015-02-10 07:01:09,1397.85,1,,,"b'b"" I unfortunately can\'t speak for one or the other"," knowing nothing of xml\'s knotty gritty except that it was one of Scala\'s hippest features at one point.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,16,2015-02-10 07:01:09,1399.78,,1,,"b'b"" I saw the slide show. OK", I\'ll re-open this ticket to preserve behavior," and add an issue to change it in 2.12.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,17,2015-02-10 07:01:09,1401.27,,1,,"b""b' Much obliged '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4306,closed,-,-,-,3,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,opened,2015-02-10 07:15:53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,title,2015-02-10 07:15:53,00:00,,1,,"b""b' SI-6476 Accept escaped quotes in interp strings'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,body,2015-02-10 07:15:53,00:00,,1,,"b""b' Everyone wants to say  . This commit considers when looking for the end ofa string part. However"," the interpolator still receives the source text. Also adds a commit for escaped dollar.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,1,2015-02-10 07:15:53,590.48,1,,,"b""b' Moved the error message improvement to url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,2,2015-02-10 07:15:53,956.47,,,1,"b""b' Started looking into this big topic :) A first question: is the following expected?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,3,2015-02-10 07:15:53,16.02,,,1,"b'b"" Here\'s another interesting one: EDIT: I get it"," that\'s bc2a1eb556e559e62f4ba0840133a35979d4a3d6""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,4,2015-02-10 07:15:53,149.72,,,1,"b'b"" There\'s another inconsistency mentioned in SI-6476: since the interpolator is responsible for escaping", it does so even for triple-quote strings. That is not specific to  , it happens for all escapes. This is very different issue than the one fixed by this PR," so I think it\'s good to defer it to a different PR. Just pointing out that it\'s also part of SI-6476.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,5,2015-02-10 07:15:53,30.13,1,,,"b'b"" Here\'s a potential issue with bc2a1eb556e559e62f4ba0840133a35979d4a3d6 (works on 2.11.6):  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,6,2015-02-10 07:15:53,5.85,,1,,"b""b' Question: what would be the impact of this change on a potential regex interpolator? @jrudolph mentions the example in the [2013 scala-internals thread]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,7,2015-02-10 07:15:53,327.93,,1,,"b'b\' jrudolph asks what it would do without saying what he wants it to do. summarizes the minimum escape support required of interpolators. That is in lieu of ""parser hooks"" as jrudolph asks for in another comment. The interpolator sees what the coder typed. This PR says: Let\\\'s make it easier for the coder to get their string into the interpolator. So (adding a slash to the example) would mean match a string of at least one backslash or quote. The interpolator sees the backslashes", but they are native to regex, so it wouldn\\\'t have to do anything special. Today: To your first question: as shown by normalize, you escape backslash, quote and dollar in the usual way. In  , backslash is obviously escaped and therefore does not escape the second quote. The second example is in the test, or maybe not. I mentioned it somewhere, maybe on the ML. The gotcha is: Is there an Abide hotline number?  The distinct issue you mention, that triple quoting behaves differently for interpolators, is because interpolators don\\\'t know about triple quotes. All they see are parts and args. On your potential issue, that is what triple quotes are for:  .  Somewhere I mention the edge case of trailing backslash in the interpolated string. The obvious intuition is that backslash does not escape triple-quote.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,8,2015-02-10 07:15:53,21.92,,,1,"b""b' @lrytz Thanks for taking a look. My opinion is that this change is intuitive", easy to reason about for both coder and interpolator implementor, and places a minimum of fuss between the parser and the interpolator (namely, that the interpolator sees escaped delimiters,  ). Actually, I was wrong about regex, r-interpolator must process obviously," for the anchor.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,9,2015-02-10 07:15:53,15.63,,1,,"b""b' I see what happens in the scanner implementation"," but I think the result is not intuitive: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,10,2015-02-10 07:15:53,4.23,,1,,"b""b' Or maybe I have the wrong intuition"," I have to think about it more.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,11,2015-02-10 07:15:53,79.27,,1,,"b'b\' Does this capture the intuition? ""As in most parsing", we want to consume the longest input that matches. So take to the next unescaped quote," or else take to the next quote.""  This is reasonable because ordinary strings are not multiline. Also worth noting that when you focus on the edge case"," the bar for intuitive is set at ""OK"," I can reason about that if you\\\'ll give me a napkin and a pen."" I mean a serviette.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,12,2015-02-10 07:15:53,71.1,,,1,b'b\' So, if I understand you correctly, you mean that in the interpolator would get passed in the string  , i.e. the verbatim input,"what the coder typed"". This is indeed convenient for a syntax which also uses backslash-escaping. On the other hand, it would be nice if every target string could be represented by an interpolated one without having to resort to an  -expression. While the situation is better than before, there are all those cases for regular expressions for which only half of them can be represented depending on the interpretation of the raw string by the  -interpolator:to match the endto match the literal  to match a literal at the endto match a literal followed by a literal  \''
scala	4308	closed	13	som-snytt	2015-02-10 07:15:53	182.02		+1		b'b"" You can never do plain  , oh well. Unless you pick an arbitrary symbol like  , which is bound to supplant the dollar eventually anyway. I guess we won\'t see guillemets to mean, Suppress interpolation of args,  . But instead of for  , and for  .  For  , maybe prefer for legibility. To keep the style choice open, dollar aliases for all three delimiters ( ). ""'
scala	4308	closed	14	lrytz	2015-02-10 07:15:53	475.38		+1		b'b\' Absolutely agree, the PR is all about making string interpolations more intuitive to use, and I think it achieves that goal. I imagined somebody using without knowing how it\\\'s implemented: he might think of raw as ""no escapes", because all characters end up in the resulting string ( ). So we have to explain the interpolator better (todo: how exactly).\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,15,2015-02-10 07:15:53,56.87,,1,,b'b\' But as this change seems to introduce new edge cases it still makes sense to critical look at them and see how they are resolved. I think if you look at the 4 examples above and try to spell out how the r-interpolator would translate syntax into a regular expression you will see that the interpolator needs to make at least one arbitrary choice: which of, the now two, escape characters will be interpreted literally and which one will need to be translated. Here are the possible choices under this proposal with the translation from a regular expression on the left to its representation with an r-interpolator on the right. Possibility A (backslash will be interpreted literally while $ needs to be escaped):====Possibility B (both backslash and $ need to be escaped):====Possibility C (a variant of A, probably both could be supported at the same time):====In the first two cases," allowing $-escapes is necessary and not only to ""keep the style choice open"". In an alternative implementation where backslash isn\\\'t an escape character (and that\\\'s what I argued for in the previous discussion) it would be clear", dollar and doublequotes need to be escaped with dollar:====While possibility C is the shorter than the last one (without backslash escapes), it is less regular ($ has to be escaped in some cases but mustn\\\'t be escaped in others). So, in the end this is the compromise of the proposal in this PR: trading in a bit of regularity against a bit of added convenience.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,16,2015-02-10 07:15:53,67.63,,,1,"b""b' @jrudolph thanks for the elaboration. I agree the last alternative makes sense", it has simple rules:==This could be implemented after this PR. (no?) A corner case is that there are two options for the regex: you an write or the second would be recommended.What are you referring to," specifically?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,17,2015-02-10 07:15:53,20.75,,1,,"b'b"" But it only works if backslash has no special meaning for the parser. This PR introduces backslash as an escape character", so no it couldn\'t be implemented after this PR.You are right I omitted the choices wrt doublequotes. Note that your second option isn\'t possible under this PR IIUC (because is already an escape sequence which means that the first would be closing the string and the second one couldn\'t be parsed). Was that a typo and you meant  ? Let\'s update the examples: Possibility A (backslash will be interpreted literally while $ needs to be escaped):======Possibility B (both backslash and $ need to be escaped):=====Possibility C (a variant of A, probably both could be supported at the same time):=====Possibility D (doesn\'t work with this PR," would work by adding just the escape):=====""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,18,2015-02-10 07:15:53,78.77,1,,,"b""b' Actually", D has another problem (in addition to requiring  ): after this PR, for  , the scanner uses the backslash to escape the $, then the second $ yields an error (invalid string interpolation). As you point out, I made the same mistake in my example: for the regex you cannot write  ," even if is supported the scanner consumes the $ after the backlash and then ends the string.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,19,2015-02-10 07:15:53,208.78,,1,,b'b\' @lrytz @jrudolph I started to attempt that tabulation yesterday; and this morning, still no time to pursue it. But, this PR only changes how the parser uses  . Instead of simply closing the string part," it can take it as embedded. Semantics are still totally up to the interpolator. A regex"""" would be free to ignore backslash"," so that the anchor must be  . An interpolator could throw on embedded quote with ""invalid escape"""," for instance. Require triple quotes in that instance. Another idea: is there any benefit to translating s""$$"" the same as s""${ ""$"" }"". For s""$""""", that would distinguish between quote embedded in triple quotes and a dollar-interpolated quote. I haven\\\'t thought this thru: but possibly," s""$"" could be translated as s""${ DOLLAR_TOKEN }""", a special arg to indicate an uninterpolated dollar. DOLLAR_TOKEN would have to be translated by a macro or error out (I think there\\\'s an annotation for that). So as usual, could be processed by an r macro. That is either a neat idea to support unadorned dollar in an r macro or a can of confusion. On the weekend I\\\'ll try it out. Gotta run now...\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,20,2015-02-10 07:15:53,46.6,,1,,"b""b' Maybe to clarify: the question is not so much what the interpolator exactly gets as input but what kinds of input the Scala parser can parse at all. Out of all the parseable strings the question is then how to map inputs to semantics (regardless of the intermediate format the string interpolator has to deal with). Adding  ",  ," and as escape characters will alter the set of possible inputs as shown by the above examples.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,closed,2015-04-17 16:06:50,530.95,3,13,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,21,2015-02-10 07:15:53,719.6,,1,,"b""b' Rebasing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,reopened,2015-06-26 04:01:02,714.2,3,14,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,22,2015-02-10 07:15:53,1291.47,,1,,"b'b"" Seems like the old off-by-one joke was off by one", there are in fact only three hard things in computer science, cache invalidation, naming things, escaping, and off-by-one errors. I don\'t think we\'re close enough to a consensus to leave this PR open. I\'m going to close it for now," but please don\'t take this as a signal that we should give up on this avenue of improvement.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,closed,2015-08-07 01:32:30,1291.47,3,15,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,23,2015-02-10 07:15:53,9.12,,1,,"b""b' I think this is going to need a SIP.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,24,2015-02-10 07:15:53,562.98,,,1,"b'b"" @som-snytt Are you thinking of reopening and updating this proposal any time soon? If you\'re still interested"," as you seem to point out [here]url  I will schedule a review as soon as I have an open PR :smile:.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,25,2015-02-10 07:15:53,987.45,,,1,"b""b' @som-snytt I encountered this issue myself recently and would love to see this reopened. Had this issue when I wanted to use string interpolation and triple quotes to create a regex string. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,26,2015-02-10 07:15:53,1100.42,,1,,"b""b' @DanielGGordon url  suggests  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4308,closed,-,-,-,3,17,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,opened,2015-02-16 17:13:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,title,2015-02-16 17:13:13,00:00,1,,,"b""b' SI-9154 scalac offers extra help on bad option'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,body,2015-02-16 17:13:13,00:00,1,,,"b'b"" If one of the help settings is on (-help", -X, -Y), thenon a bad option, scalac reports similar options. For example, I know there\'s an option for showing things: The option is a little whacky, unfortunately," but thisincantation works: This is more mnemonic assistance than help for newbies.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,1,2015-02-16 17:13:13,126.28,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,2,2015-02-16 17:13:13,6.02,,1,,"b""b' Logged jenkins issue at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,3,2015-02-16 17:13:13,18.82,,1,,"b'b"" Could you squash these please -I think it\'s small enough a change for one commit.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,4,2015-02-16 17:13:13,298.8,,,1,"b""b' And so the mystery continues!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,closed,2015-02-18 00:44:56,451.72,2,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,reopened,2015-02-18 01:54:22,69.43,2,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,5,2015-02-16 17:13:13,1368.67,,1,,"b""b' Also"," [levenshtein]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,6,2015-02-16 17:13:13,9.75,1,,,"b""b' Sure", my use case was show and debug," with limited development resources. One hates to overinvest before the POC passes the first hurdles.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,7,2015-02-16 17:13:13,3.0,,,1,"b'b"" It doesn\'t have to be fancy"," but something to rank strings by similarity would be of great  ity.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,8,2015-02-16 17:13:13,32.52,,1,,"b'b"" Since the 2.11.6 deadline is extremely nigh", I\'ve tentatively postponed this PR (along with other recent ones) to 2.11.7. I\'ll make a pass through reviewed 2.11.7 PRs on Friday and move them back to 2.11.6 where feasible. In the mean time," feel free to let me know if you\'d like some help getting this reviewed by then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,9,2015-02-16 17:13:13,531.3,,,1,"b'b"" For a general utility I\'d favor a fragmented sequence alignment-type algorithm over Levenshtein distance because if I type I want it to bring up as the top entry.  The penalty for rearrangements should not be as great as Levenshtein inflicts (i.e. you have to delete it all and add it all again).  I don\'t have any reference code handy but I could write a routine.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,closed,2015-02-22 08:18:59,384.62,3,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4336,closed,-,-,-,3,5,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,opened,2015-03-24 05:39:54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,title,2015-03-24 05:39:54,00:00,,1,,"b""b' SI-8650 F-interpolator inlines literals'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,body,2015-03-24 05:39:54,00:00,,1,,"b""b' Rebase of url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,1,2015-03-24 05:39:54,114.95,,1,,"b""b' Does it inline constants only from a local scope or also across different classes?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,2,2015-03-24 05:39:54,933.0,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,3,2015-03-24 05:39:54,488.63,,1,,"b'b"" /rebuild probably caused by build yesterday\'s jenkins slowness""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,4,2015-03-24 05:39:54,661.88,,1,,"b'b"" Since validation isn\'t working anyway"," closing to clean that one unrelated test; and also add a commit for processing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,closed,2015-03-25 18:18:22,758.47,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,5,2015-03-24 05:39:54,464.98,1,,,"b""b' @som-snytt Mhh", I think this is concerning. Having things inlined is one of the major annoyances when trying to figure out what stuff needs to be recompiled. Java designers consider it a design mistake. We are currently also doing it in various places," but I think it would be better to decrease the number where this happens and not increase it. WDYT?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,6,2015-03-24 05:39:54,210.67,,1,,"b'b"" @soc The constants are already folded today. This PR just evaluates the call to at compile time if the parameters are statically known. Which reminds me: we can\'t perform this optimization if for  "," as this depends on the runtime value of the platform default line ending.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,7,2015-03-24 05:39:54,62.18,1,,,"b'b"" @retronym Hopefully it doesn\'t %n", but I don\'t recall why %%. url  @soc The ultimate goal was to reduce the cost of interpolating. Preformatting constants, but eventually not reparsing the format (and having a different backend; probably a similar goal for a regex interpolator). Another thing I noticed is that there doesn\'t seem to be an obvious way to specify a Locale as a constant (too bad it\'s not an enum).  I haven\'t given it further thought yet," but it\'s an obvious feature to do it programmatically.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,8,2015-03-24 05:39:54,580.37,,1,,"b""b' Obviously"," %% could be inlined only if there was no other formatting; an edge case.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,reopened,2015-04-08 16:16:35,1318.22,2,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,9,2015-03-24 05:39:54,1.43,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,closed,2015-04-08 19:02:22,165.78,2,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4398,closed,-,-,-,2,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,opened,2015-03-24 19:08:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,title,2015-03-24 19:08:25,00:00,,1,,"b""b' SI-5887: Can try any expression'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,body,2015-03-24 19:08:25,00:00,,1,,"b""b' WIP rebase #4334'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,closed,2015-03-25 07:29:06,740.68,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,reopened,2016-06-07 05:57:25,1348.32,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,1,2015-03-24 19:08:25,707.93,,1,,"b'b"" Rebased. There may be review work pending around hygiene? Actually"," it looks like I addressed some comments from a year ago. But there\'s a bootstrap issue with try relying on library code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,2,2015-03-24 19:08:25,35.88,,1,,"b'b"" Would it be possible to submit the part of this that fixes parsing of from the part that changes how catch expressions are translated?  I can\'t remember the context for the latter part"," and I\'m a bit hesitant about having sometimes translating into something heavyweight (an call with a lambda as an argument).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,3,2015-03-24 19:08:25,25.73,,1,,"b'b"" I\'ll refresh my memory when I\'m awake again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,closed,2016-06-07 16:48:24,650.98,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4400,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,opened,2015-04-08 17:12:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,title,2015-04-08 17:12:50,00:00,,1,,"b""b' SI-2991 No Java tupling'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,body,2015-04-08 17:12:50,00:00,1,,,"b""b' SI-2991 No Java tupling A compiler option ensures thattupling is not used to make a Java method applicable. This includes applicability tests during overloadresolution", so that Java API that was previouslyambiguous can be invoked from Scala. For example, Java will disambiguate and even though ambiguous in Scala. Turning off Java tuplingallows invoking the single-parameter method defined in Java. Anticipating deprecation of the feature, which wasnever specked, turns it off entirely. Currently," invalidates anadaptation only after overload resolution. Tupling becomes a Context mode which defaults off. Review by @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,1,2015-04-08 17:12:50,231.73,,1,,"b""b' To add tests"," restructure.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,closed,2015-04-16 21:04:35,231.75,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,reopened,2015-07-04 08:55:34,710.98,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,closed,2015-07-04 16:57:27,481.88,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,reopened,2015-07-04 19:14:06,136.65,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,2,2015-04-08 17:12:50,367.97,,1,,"b""b' Not sure if this is quite there yet", needs more tests at least, but thx @retronym for pointing out how bad the first cut was. Some external contributions, albeit appreciated," sneak under the bar.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,3,2015-04-08 17:12:50,1279.23,,,1,"b""b' Thanks for digging in"," here (though not so as to fit under the bar)! It would be nice to at least have some way of calling those enterprisey methods.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,4,2015-04-08 17:12:50,23.13,,1,,"b""b' @retronym fresh round of review?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,5,2015-04-08 17:12:50,251.62,,1,,"b""b' @retronym Really no idea anymore how this compares to sliced bread.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,closed,2015-10-26 22:50:11,216.08,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,6,2015-04-08 17:12:50,1226.18,,1,,"b""b' some links with history on this: url  url  url  url  ... surely an incomplete list...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,7,2015-04-08 17:12:50,685.07,1,,,"b'b"" I discussed with @retronym and I am sorry", but I think we won\'t be merging this, on the grounds that every such option we add splinters Scala into dialects. and the alternate dialects don\'t have tooling support, or more than slight test coverage, and having them increases the overall compiler maintenance burden. so on the balance, it doesn\'t seem clearly superior to us to the existing workaround, which is to write a little shim in Java. on the other hand, we want to know where this tupling stuff is headed in future Scala and Dotty versions," just leaving it alone isn\'t satisfactory. we\'ll discuss at next Scala team meeting that @odersky attends.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,8,2015-04-08 17:12:50,725.45,1,,,"b'b"" @SethTisue The assumption was that auto-tupling ought to be deprecated", so this was a migration path. It\'s not big bang for the complexity dollar," but does go to the newbie experience. I wonder if there\'s a meta-stackoverflow Q&A listing the Scala questions people are bored of answering. Maybe 2.13 is the version where anti-features can be dropped tout-court. I think I mentioned this b/c @lrytz is in that area of the ballpark.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,9,2015-04-08 17:12:50,1050.58,,1,,"b'b"" In light of Martin\'s comment at url  maybe we should reframe the discussion in terms of implementing a migration path to how dotty resolves overloading.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,10,2015-04-08 17:12:50,0.62,,1,,"b'b"" In retrospect", I see this as a tooling issue and not as a language issue. I\'m returning to it because of a SO question which makes you realize that people rehearse these puzzlers on a daily basis, but they are invisible. Alternatively, one could describe it as a documentation issue. Or, as a tooling issue where a reporter is needed that detects the error and the correction," and then emits the required Java class. It would be neat if the reporter could retry the compilation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4440,closed,-,-,-,3,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,opened,2015-04-08 19:02:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,title,2015-04-08 19:02:08,00:00,,1,,"b""b' SI-8650 F-interpolator inlines literals'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,body,2015-04-08 19:02:08,00:00,,,1,"b""b' Rebase #4398 to benefit from deflaked test.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,closed,2015-04-17 16:06:28,1264.33,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,reopened,2015-04-22 22:19:50,373.37,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,1,2015-04-08 19:02:08,198.72,,1,,"b""b' Rebased with additional checks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,2,2015-04-08 19:02:08,404.05,,1,,"b""b' Closing again to refactor to linter.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,closed,2015-04-23 05:04:54,405.07,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4441,closed,-,-,-,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,opened,2015-04-21 17:12:55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,title,2015-04-21 17:12:55,00:00,,1,,"b""b' SI-9277 Downgrade marginal javap features'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,body,2015-04-21 17:12:55,00:00,,,1,"b""b' Drop Java 6 support", -app, -fun," and -raw options.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,1,2015-04-21 17:12:55,136.08,,1,,"b'b"" The tests are run under java 6", so closing until it\'s appropriate to drop java 6 support. Alternatively," check for java version in tests. One test is obsolete. @adriaanm Is there a plan yet to migrate 2.12 builds to java 8? Is that something I could look at some weekend?  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,closed,2015-04-21 19:29:00,136.08,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,2,2015-04-21 17:12:55,2.95,,1,,"b'b"" I\'ve been flip-flopping on M1/2 for the Java 8 jump. Current thinking is that M1 will focus on move to the sbt build", M2 will jump to Java 8. @retronym and @lrytz have been working on the upgrade," so I\'ll let them comment on weekendable efforts in this zone.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,3,2015-04-21 17:12:55,217.08,1,,,"b'b"" This is where I got to on the modernization: url  I think has a decent  ratio and could stick around. Maybe we can resurrect after we turn on indylambda support; the current Javap output is pretty annoying. Notice below that the line between the lambda capture site in and the lambda target isn\'t displayed under  : Using instead"," we can establish the connection by looking at the bootstrap method  :  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,4,2015-04-21 17:12:55,2.67,,1,,"b'b"" As you can see the impact on the Ant build is pretty minor. I don\'t think we necessarily need to wait the coronation of the SBT build. One thing I didn\'t get around to yet is removing the redundant tests (or parts thereof) that are conditional on ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,5,2015-04-21 17:12:55,85.57,1,,,"b'b""   defaults on", so WYSIWYG. The idea is that, at this level, it\'s easier to mentally filter the REPLications (i.e. wrappings), and avoid the occasions when is confusing. The surgery happened to stop when fragile filtering syntax still worked; but it seems to me that  is desirable, along the lines of  . Similarly,  . Right now, of course, there\'s no facility for that. Similarly, it wants a reflective way to chase lambdas, App bodies, companion objects," etc; having a real to do that as well as select members to print code for would be a goal. And debugger support.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,6,2015-04-21 17:12:55,2.8,,1,,"b'b"" I\'ll contribute a PR for version-dependent tests"," since the fragile tag mechanism was my fault.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,7,2015-04-21 17:12:55,3.1,,1,,"b""b' I guess I needed that mechanism in order to test  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,reopened,2015-04-22 08:52:51,803.85,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,8,2015-04-21 17:12:55,491.42,,1,,"b""b' Restored stripped output as option.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,closed,2015-04-22 08:54:35,1.73,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,9,2015-04-21 17:12:55,908.12,,1,,"b""b' Testing the waters.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,reopened,2015-06-04 00:02:42,908.12,2,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,10,2015-04-21 17:12:55,185.63,,1,,"b""b' This needs a rebase on 2.12.x (specifically"," 8d2d3c).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,11,2015-04-21 17:12:55,57.73,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,12,2015-04-21 17:12:55,648.08,1,,,"b'b"" Sorry about that. Must have been the merge-induced brain aneurysm"," but that\'s no excuse.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,13,2015-04-21 17:12:55,203.9,,1,,"b""b' This failure is a scalap test failure. url  I can take a brief look over the weekend", but maybe someone has an idea. Yes," I mean that someone.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,14,2015-04-21 17:12:55,677.32,,1,,"b""b' /rebuild  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,15,2015-04-21 17:12:55,1055.43,,1,,"b""b' /rebuild  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,16,2015-04-21 17:12:55,422.97,,1,,"b'b"" That t8679 failed previously for #4526 so maybe something else is going on with those scalap tests? Disconcertingly", different tests are reported below. I see there is a TODO in the partest Runner around reflective invocation of ByteCode. IIRC," InputStream::available doesn\'t mean total bytes in the stream as [seems to be used here]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,17,2015-04-21 17:12:55,890.5,,,1,"b""b' The build issues turned out to be a hotspot bug (see url  All green now!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,18,2015-04-21 17:12:55,355.98,,1,,"b""b' Thx", @adriaanm ," I noticed your comment and goosed this. I also sent that info to the team at the office on why we test against specific versions of things.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,19,2015-04-21 17:12:55,40.92,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,closed,2015-06-26 03:41:20,218.63,3,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4460,closed,-,-,-,3,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,opened,2015-05-15 07:04:50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,title,2015-05-15 07:04:50,00:00,,1,,"b""b' [indylambda] Support lambda {de}serialization'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,body,2015-05-15 07:04:50,00:00,,,1,"b""b' To support serialization", we use the alternative lambda metafactory thatlets us specify that our anonymous functions should extend the markerinterface  . They will also have a  method added that implements the serialization proxy patternusing  . To support deserialization, we synthesize a method ineach class. This will be called reflectively by . This method in turn delegates to , currently defined [1] in  , thatuses to spin up the anonymous class and instantiate itwith the deserialized environment. Note: reuses the anonymous class on subsequentdeserializations of a given lambda, in the same spirit as an invokedynamiccall site only spins up the class on the first time it is run. will be moved into our standard library in the 2.12.xbranch, where we can introduce dependencies on the Java 8 standard library. The enclosed test cases must be manually run with indylambda enabled. Oncewe enable indylambda by default on 2.12.x," the test will actually test thenew feature. This commit contains a few minor refactorings to the code that generatesthe invokedynamic instruction to use more meaningful names and to reuseJava signature generation code in ASM rather than the DIY approach. [1] url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,1,2015-05-15 07:04:50,1.78,,1,,"b""b' Review by @lrytz @adriaanm  Builds on top of #4497. I will add a commit to update our reference in  to 0.5.0 of scala-java8-compat when we merge url  and release a new version.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,2,2015-05-15 07:04:50,191.43,,1,,"b""b' High-level question: could we introduce functional interfaces instead of switching to  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,closed,2015-05-16 02:23:10,1158.33,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,reopened,2015-05-16 02:27:41,4.52,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,3,2015-05-15 07:04:50,975.62,,1,,"b""b'   never generates the code to implement the serialization proxy pattern", it passes [here]url  lets us [pass in that value]url  via  . If neither functional interface nor the provided marker interfaces extend  ," that is [automatically added]url  as an additional marker.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,4,2015-05-15 07:04:50,555.12,,1,,"b'b"" Needs a bit more work"," will reopen early next week. I\'m trying to test this out with:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,closed,2015-05-16 11:48:47,561.1,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,reopened,2015-05-17 05:57:00,1088.22,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,5,2015-05-15 07:04:50,140.18,,,1,"b'b"" Thanks for the explanation why we need to use  ", I didn\'t realize does the same: it switches to if the functional interface extends serializable. Looking at the code you linked, this is actually a requirement: if you use for a serializable functional interface," it [generates]url  and methods that throw.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,6,2015-05-15 07:04:50,1242.35,,,1,"b""b' LGTM!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,7,2015-05-15 07:04:50,738.12,,1,,"b""b' :rocket: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,closed,2015-05-21 23:09:29,1032.48,0,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,8,2015-05-15 07:04:50,473.83,,1,,"b""b' :white_check_mark: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4501,closed,-,-,-,0,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,opened,2015-05-17 20:52:01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,title,2015-05-17 20:52:01,00:00,,1,,"b""b' SI-4147 Add an implementation of  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,body,2015-05-17 20:52:01,00:00,1,,,b'b\' This commit contains an implementation of a mutable red-black tree with focus on performance. It also contains a new Scala collection that is backed by the aforementioned tree. The common generic factories and traits related to mutable sorted maps didn\\\'t exist yet, so this commit also adds them. Regarding performance, overrides (from and  ) all of the most common methods for maps and also those whose default implementations are asymptotically worse than direct red-black tree algorithms (e.g.  ,  ). The method of returns an instance of  , an inner class of  . This view is backed by the same instance, and therefore changes to the original map are reflected in the view and vice-versa. The semantics of mutating a view by adding and removing keys outside the view\\\'s range are the same of the current  . A bit less focus was given on the performance of views in particular, getting the of a is O(n) on the number of elements inside the view bounds. That can be improved in the future. In a future commit, can be changed to be backed by this red-black tree implementation. I didn\\\'t add unit tests for this collection because I think writing extensive JUnit tests for all the methods would be way too ineffective. Instead, I created a separate project (available [here]url  containing a suite of ScalaCheck properties for both [ ]url  and [ ]url  and a (rather unscientific, but somewhat conclusive) [performance comparison]url  between  , and  . A sample result from this last test: I understand if you want tests for this in the Scala repository nonetheless. If that\\\'s the case, please tell me what would be a sufficient test suite for this collection and I\\\'ll add it. Please also tell me if I forgot to do something," as it\\\'s my first ""big"" contribution to Scala :) This should close [SI-4147]url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,1,2015-05-17 20:52:01,560.15,,1,,"b'b\' Could you please update the commit title to: ""SI-4147 Add an implementation of  ""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,2,2015-05-17 20:52:01,3.17,,1,,"b'b"" We are in the process of setting up property-based testing for the collections to url  Perhaps @Ichoran will take your tests cases over to the repository. However", Scalacheck tests are supported under  . I\'d suggest to add your tests initially to there," and we can move later them if needed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,3,2015-05-17 20:52:01,1.25,,1,,"b""b' Further review", please, by @Ichoran, and, if he has a few moments spare," @axel22.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,4,2015-05-17 20:52:01,2.08,1,,,"b'b"" [ ] Serialization. Add a @SerialVersionUID\'s to the classes that will be serialized and add a test for stability of serialization in  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,5,2015-05-17 20:52:01,23.32,,,1,"b""b' @ruippeixotog I forgot to say: welcome and thank you! This contribution looks to be of a really high standard already"," looking forwards to having this data structure in our toolbox.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,6,2015-05-17 20:52:01,168.92,,,1,"b'b"" Hi @retronym", thanks for the comments! I\'ll do the changes you mentioned above (please read my comments about making final, though). There is no folder in the project," did you mean  ? Can you tell me if there is a way to run only those tests using Ant or SBT?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,7,2015-05-17 20:52:01,117.63,,1,,"b""b'   or will run them. includes them"," too.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,closed,2015-05-18 11:28:32,876.52,2,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,reopened,2015-05-18 11:28:34,0.03,2,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,8,2015-05-17 20:52:01,590.2,,,1,"b'b"" @retronym", I have just updated the pull request with the changes you mentioned :) However, I didn\'t know exactly what to do in  . I suppose I should manually add entries there for  , but I don\'t know how to run those commands," as I don\'t have those binaries in my PATH. Can you guide me on what to do?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,9,2015-05-17 20:52:01,190.9,,1,,"b'b""   is from url  It\'s just a shortcut to run old versions of Scala. But in this case", just use  . The instructions in that test aren\'t really applicable to new datastructures. The intention of that test is to serialize the datastructure, record the results (in the base64 encoded strings in the test case itself)," and then check that we can continue to deserialize that in the future.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,10,2015-05-17 20:52:01,526.1,,,1,"b""b' Roger! I just did the process and updated the pull request.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,11,2015-05-17 20:52:01,502.62,1,,,"b'b"" This looks quite promising"," but I\'m at a conference and recovering from food poisoning so I\'m not going to get to it for at least a couple more days.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,12,2015-05-17 20:52:01,159.47,,1,,"b""b' .LGTM after comments are addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,13,2015-05-17 20:52:01,172.62,,,1,"b""b' I have just updated the pull request with your latest comments. I ended up adding a separate which checks invariants as keys are inserted and deleted in a  . Please let me know if it looks good to you now :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,14,2015-05-17 20:52:01,69.87,,1,,"b'b"" I noticed the build failed. Is that related to my pull request? It doesn\'t look like that judging by the Jenkins output"," but I may be interpreting it wrong...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,15,2015-05-17 20:52:01,302.78,,1,,"b'b"" Please rebase on  to get rid of the spurious errors. We\'ve switched to buiding 2.12.x PRs with OpenJDK8"," and we had to update a configuration file that filters out VM warnings from output before comparing against checkfiles.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,16,2015-05-17 20:52:01,1170.78,,,1,"b'b"" Looks pretty good so far!  Mostly style issues.  I\'ll run it through the collections laws shortly.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,17,2015-05-17 20:52:01,38.42,,,1,"b'b"" @Ichoran", thank you for the review, I hope you are feeling better! I addressed all of your comments. I didn\'t pay much attention to the code because it was mainly for me to check invariants during development," but now that it is used in the specs all your suggested fixes and improvements make sense.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,18,2015-05-17 20:52:01,70.93,,,1,"b'b"" Hmmm"," got a NPE in collections tests in  .  I\'m trying to isolate it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,19,2015-05-17 20:52:01,8.95,,1,,"b""b'   gives an NPE when transforming  a single-element map because assumes that if exists"," does also (when it passes it on to  ).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,20,2015-05-17 20:52:01,22.03,,1,,"b'b"" Once you fix the NPE (I commented on the line how to fix it)", it passes all the collections-laws tests.  But note that this isn\'t very good at exhaustively testing addition and subtraction from the library.  That is done much better by .  If you could add TreeMap there also," that would increase our confidence.  It does a fair bit of churning.  I haven\'t tested the view yet because the coverage of views is not very good anywhere.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,21,2015-05-17 20:52:01,22.83,,1,,"b'b\' This should also close url  since that basically says ""immutable RB trees use too much memory""", and the most practical solution is to use a mutable variant.  (If someone decides this uses too much memory also, that\\\'d be a different bug anyway.)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,22,2015-05-17 20:52:01,588.27,1,,,"b'b"" I have just fixed the dumb error in and added the new map to  . The scalacheck specs also cover random  sequences", mostly on a more internal level and on mutating operations. If you want," after this PR is accepted I can do a new one in which starts using a as its underlying data structure shouldn\'t [SI-6938]url  be closed only once that happened?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,23,2015-05-17 20:52:01,173.38,,,1,"b'b"" You\'re right regarding SI-6938; it\'s a little more than just having a RB tree available.  One does have to use it!  If you would like to look into whether it\'s easy to switch the wrapping in a source-compatible way", that would be great.  If not," this is already a great contribution!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,24,2015-05-17 20:52:01,41.4,,,1,"b'b"" At a first glance it should be easy to change the internals of to use the mutable RB tree instead of the immutable one without breaking client code the constructor that receives the tree", as well as all the internal methods and fields, are private. It most probably wouldn\'t be binary compatible though, and  s serialized using old Scala versions wouldn\'t be deserializable after the change. If that\'s acceptable for  , I can surely do that :) I rebased this branch on as @retronym suggested," but it didn\'t seem to solve all build issues...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,25,2015-05-17 20:52:01,425.25,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,26,2015-05-17 20:52:01,1439.8,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,27,2015-05-17 20:52:01,1257.82,,,1,"b'b"" Ping @Ichoran. The build issues turned out to be a hotspot bug (see url  Thanks for your patience! We\'ll do our best to get this merged for M2.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,28,2015-05-17 20:52:01,65.55,,1,,"b""b' Ping @axel22 -were your comments addressed? (PS: please only _start_ your comment with LGTM to signal the PR is ready for merge unconditionally)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,29,2015-05-17 20:52:01,22.37,,1,,"b""b' Yes"," they were addressed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,30,2015-05-17 20:52:01,0.05,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,31,2015-05-17 20:52:01,0.45,,,1,"b""b' Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,closed,2015-06-25 22:31:27,662.88,4,17,12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4504,closed,-,-,-,4,17,12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,opened,2015-06-08 18:16:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,title,2015-06-08 18:16:22,00:00,,1,,"b""b' SI-9350 Command option -Xreporter for custom error reporter'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,body,2015-06-08 18:16:22,00:00,,1,,"b""b' Add a setting to take a custom Reporter. Basic usage works: and Review by @adriaanm '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,1,2015-06-08 18:16:22,275.28,1,,,"b""b' Tentatively LGTM"," apologies for the delay'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,2,2015-06-08 18:16:22,259.47,1,,,"b'b"" Since Adriaan didn\'t shoot it down"," I\'ll give it a coat of paint and keep it flying.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,closed,2015-06-26 03:11:07,534.75,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,reopened,2015-06-26 17:03:54,832.78,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,3,2015-06-08 18:16:22,1215.57,,1,,"b""b' LGTM hypnotoad says :shipit: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,closed,2015-07-02 23:26:54,383.0,2,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,4,2015-06-08 18:16:22,1019.82,,,1,"b""b' Very useful! Are there any plans on backporting this to scala 2.11.8?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,5,2015-06-08 18:16:22,1028.18,,1,,"b'b"" I\'d be happy to review a minimalist version of this PR at 2.11.x\'s PR queue. It shouldn\'t  any methods unless absolutely needed. This PR also does some clean up work that I\'d rather not do anymore in 2.11. Please include [backport] in the commit message so we know to skip it when merging 2.11.x into 2.12.x. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,6,2015-06-08 18:16:22,1149.3,,1,,"b'b"" I\'d like to ask how\'s that going to work with SBT which overrides the reporter with its own? I\'m talking about this piece of code in particular: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,7,2015-06-08 18:16:22,1209.77,,1,,"b'b"" @ghik It adds a method to  ; that\'s the only API change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,8,2015-06-08 18:16:22,1213.38,,1,,"b'b"" @som-snytt Yes"," but isn\'t the option going to be effectively ignored when compiling from SBT?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,9,2015-06-08 18:16:22,1216.88,,1,,"b'b"" What\'s the emoji for not my problem? Does sbt do anything with  ? I don\'t use it enough ATM to know.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,10,2015-06-08 18:16:22,1217.68,1,,,"b'b"" In a way", I\'d worry more about breaking IDE," whose builds break when options change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,11,2015-06-08 18:16:22,1335.2,,,1,"b""b' Yep"," sbt will need dedicated support for customizing the reporter. Would be a great addition!1!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4544,closed,-,-,-,3,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,opened,2015-06-15 18:38:32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,title,2015-06-15 18:38:32,00:00,,1,,"b""b' SI-1931 Hide  in REPL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,body,2015-06-15 18:38:32,00:00,,1,,"b""b' User imports that reference Predef are moved to the top ofthe wrapping template so that they can hide implicits definedin Predef. Only the last import from Predef gets the special treatment.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,1,2015-06-15 18:38:32,50.98,,1,,"b'b"" The problem with leaving the innerly-scope imports in place is that they are not no-ops. The features you\'re trying to turn off at the top level are re-enabled by these various interleaved imports"," if you try to turn them off and on. The quarantine feature of the enhanced command was the easy-to-use solution to that. Omitting the scoped imports means you can\'t import from a user-defined object that happens to be named Predef. But it\'s tricky to construct based on an inspection of history (which corresponds to scopes).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,closed,2015-06-16 01:33:09,414.62,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,2,2015-06-15 18:38:32,749.43,1,,,"b""b' Not sure if this would work"," but one idea that came to me recently was that an alterna-REPL might eschew the much-hated wrappers in favor of: Where the REPL overrides to introduce the magic imports (with necessary nesting).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,3,2015-06-15 18:38:32,2.82,,1,,"b""b' The REPL could then just display the bona-fide FQNs of the classes"," which might offer a better mental model than todays smoke and mirrors:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,4,2015-06-15 18:38:32,813.93,1,,,"b'b"" That\'s worth exploring. I saved that fellow\'s post on Jira about censorship and how REPL is a lie. It was so heartfelt. I only hope it wasn\'t the authorities who removed his comments. During the experiment using App for wrapping (which still makes sense to me because it is the standard model for quick exploratory programming)", some subtle bug with imports and wildcards and implicits came up; right, because I also reduced the nesting, it made me nervous about semantics; also, not sure I ever understood the need for objects in addition to braces for scoping; they\'re used only for shadowing," nothing else is installed in those outer scopes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,5,2015-06-15 18:38:32,423.15,,1,,"b""b' Wait"," were you thinking:url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,reopened,2015-06-26 02:53:06,79.95,2,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,6,2015-06-15 18:38:32,925.22,,,1,"b'b"" this looks great. (but I\'m not yet qualified to sign off on the implementation details"," so you\'ll need another reviewer for that.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,7,2015-06-15 18:38:32,311.55,,1,,"b""b' LGTM"," but needs a rebase.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,8,2015-06-15 18:38:32,72.1,,1,,"b""b' I need a rebase"," too. Where can I get some?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,9,2015-06-15 18:38:32,6.63,,1,,"b""b' OK", whew," just a checkfile. Somebody changed the REPL output? Who would do such a thing?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,10,2015-06-15 18:38:32,6.03,,,1,"b""b' It would be nice if we could give the preamble negative line numbers or somesuch so that the line number in the error report corresponded to a line within the entered text. That would avoid the fragility in our checkfiles and be more user friendly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,11,2015-06-15 18:38:32,0.9,,1,,"b""b' Or maybe the REPL could install a custom reporter to do the line number translation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,12,2015-06-15 18:38:32,23.83,,1,,"b""b' (Those comments are ideas for future work"," not blockers for this change.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,13,2015-06-15 18:38:32,57.08,,,1,b'b\' Except for the tests still failing, your last comment made you my favorite person in the world. A tiny babe in arms cannot feel such deep attachment and loyalty and Scala-imprinting. I just experienced a couple of PRs where arbitrary templating made line numbers change, and what a hassle," but I didn\\\'t think of an easy scheme to normalize them. ""Duh.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,14,2015-06-15 18:38:32,64.87,,1,,"b'b"" Can\'t wait to write a test tool that updates embedded checks using scalameta. Expressed either as exprs or in  for output.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,15,2015-06-15 18:38:32,1235.17,,1,,"b""b' Furtherly rebased at the head of url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,closed,2015-08-06 23:00:39,1207.55,2,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,16,2015-06-15 18:38:32,1280.47,,1,,"b'b"" thus closing ticket number 1931", originally opened in 2009. or was it ticket number 2009," opened in 1931? can\'t remember.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4554,closed,-,-,-,2,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,opened,2015-06-18 01:32:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,title,2015-06-18 01:32:38,00:00,,1,,"b""b' SI-9206 Fix REPL code indentation '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,body,2015-06-18 01:32:38,00:00,1,,,"b""b' To make code in error messages line up with the original line ofcode", templated code is indented by the width of the prompt. Use the raw prompt (without ANSI escapes or newlines) to determinethe indentation. Also," indent only once per line.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,1,2015-06-18 01:32:38,746.18,,1,,"b""b' One test got by me because update-check will accidentally make a check file for a SessionTest"," which has the checkfile as it were embedded in the session transcript.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,2,2015-06-18 01:32:38,518.15,,1,,"b'b"" /rebuild Hoping it\'s one of those spurious IDE build failures.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,3,2015-06-18 01:32:38,120.63,1,,,"b'b"" I guess not. I\'d hate to bug him"," but I wonder if @adriaanm knows if something around presentation compiler and OSGI has changed. Maybe I\'ll just sneak by his office and see if the door is open. If he has a door.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,4,2015-06-18 01:32:38,86.92,,,1,"b""b' Who needs doors if they have headphones. Try rebasing? I think we just merged a tandem PR with scalaide related to this"," but happy hour may be playing tricks on me. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,5,2015-06-18 01:32:38,117.93,,1,,"b""b' Yep"," rebasing will fix that one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,6,2015-06-18 01:32:38,119.52,1,,,"b'b"" This is the rebased result. Is there a command to issue like rebuild or sync? Sorry I\'m out of the loop.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,7,2015-06-18 01:32:38,49.4,,1,,"b""b' A test failed in [validate-test@bb361e7]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,8,2015-06-18 01:32:38,1.95,,1,,"b""b' Scabot answers to [these commands]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,9,2015-06-18 01:32:38,508.35,,,1,"b""b' Thanks", Jason," now I see that I must check build history in Jenkins. I was dissuaded by the lack of links here. I moved changing the default \\\\nscala'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,10,2015-06-18 01:32:38,199.03,,1,,"b""b' @adriaanm", should we go ahead and merge this for 2.11.7," or is it better to leave it alone for now given that REPL stuff is also getting torn up in #4563?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,11,2015-06-18 01:32:38,68.67,,1,,"b""b' The checks are always greener on the other side.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,12,2015-06-18 01:32:38,2.78,1,,,"b'b"" They look pretty green from my desk"," but I\'m struggling to get 2.11.7 out the door in time as it is (to make matters worse the elevators are stopping on random floors today).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,closed,2015-06-20 12:29:58,657.33,4,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,13,2015-06-18 01:32:38,1238.53,,1,,"b'b"" Hope you don\'t mind my reopening and moving back to 2.11.7. I didn\'t make my deadline yesterday.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,reopened,2015-06-20 16:30:41,240.72,4,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,14,2015-06-18 01:32:38,46.03,,1,,"b""b' @adriaanm I was just fixing pasting with a custom prompt. About to push it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,15,2015-06-18 01:32:38,1412.98,,1,,"b'b"" The intention of the previous code was to obviate the ctl-D by finishing a pasted transcript with a prompt. But there\'s a bug if there\'s more than one such empty line. EDIT: The bug was not detecting by itself as a lone prompt. If you intend then you must omit the trailing space. Somewhere this commit fixes a trim. Each empty line initiates replay"," but next prompt is taken as an expression. Here res14 res15 are pasted:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,16,2015-06-18 01:32:38,97.35,,1,,"b""b' LGTM", with suggestions that hopefully will, erm," prompt a follow-up PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,closed,2015-06-22 18:27:36,116.92,4,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4564,closed,-,-,-,4,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,opened,2015-06-30 10:42:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,title,2015-06-30 10:42:58,00:00,,1,,"b""b' SAM Functions from scala-java8-compat [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,1,2015-06-30 10:42:58,3.75,1,,,"b""b' locally i get this alarming outcome:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,2,2015-06-30 10:42:58,23.98,1,,,"b'b"" [source code]url  bytecode: The mistake seems to be that the Scala compiler incorrectly selects ([which is a default method]url  as the abstract method of  ", whereas it should be (inherited from  ). Since we\'re doing mixed compilation," this is almost certainly a problem of the Java parser. I\'ll take a look.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,3,2015-06-30 10:42:58,19.88,,1,,"b""b' I think this is my bug in the backend. Try this:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,4,2015-06-30 10:42:58,3.18,,,1,"b'b"" Thanks for submitting this PR"," BTW. I tried something similar but wasn\'t able to convince to accept Java sources. I thought this was due to a limitation of our Ant tasks: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,5,2015-06-30 10:42:58,0.28,,1,,"b'b"" ok", trying now. still," it\'s probably a bug in JavaParser: the symbol flags should be the same when reading from source or from classfile. should not have the flag""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,6,2015-06-30 10:42:58,1.48,,,1,"b""b' thanks for the ScalacFork link"," i have to check what it chooses to recompile if a subset of the sources is modified.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,7,2015-06-30 10:42:58,0.32,,1,,"b""b' My theory was that the order of the decls was different in joint vs separate compilation"," and that the was only working by accident.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,8,2015-06-30 10:42:58,4.5,,1,,"b'b"" The [java parser sets  ]url  even if there\'s a default method. Checking the access flags of a javac-produced classfile"," the flag should not be there:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,9,2015-06-30 10:42:58,41.68,,1,,"b""b' pushed a fix to the java parser note that the commits show in the wrong order on GitHub"," the correct order is  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,10,2015-06-30 10:42:58,18.62,,1,,"b'b"" I have a slight preference to hide under  "," rather than  . Maybe this isn\'t too important as they should only be a temporary addition to the library.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,11,2015-06-30 10:42:58,19.02,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,12,2015-06-30 10:42:58,1.02,,1,,"b'b"" yes"," i\'m looking into this any intuitive ideas?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,13,2015-06-30 10:42:58,0.22,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,14,2015-06-30 10:42:58,0.72,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,15,2015-06-30 10:42:58,1.55,,1,,"b'b"" The latest is [2.4.1]url  We\'re using 1.50.0.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,16,2015-06-30 10:42:58,0.42,,1,,"b'b"" yeah", the issue you link mentions we need 2.4," i\'ll give it a try.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,17,2015-06-30 10:42:58,9.12,1,,,"b'b"" This PR tentatively LGTM. I won\'t be around much to continue review for the next few days"," but I think if you get through the  pain this ought to go in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,18,2015-06-30 10:42:58,0.28,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,19,2015-06-30 10:42:58,0.28,,,1,"b""b' ok"," thanks for your help!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,20,2015-06-30 10:42:58,57.6,,1,,"b'b"" i\'m running out of ideas for the bnd issue (see above)", maybe @adriaanm knows more? scaladoesn\'t have any classfiles in the empty package. can it be due to other files, e.g.,"  ? or due to a dependency of scala-library? what would that be?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,closed,2015-06-30 14:31:31,228.55,3,15,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,reopened,2015-06-30 14:34:54,3.38,3,15,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,21,2015-06-30 10:42:58,260.17,,1,,"b""b' From a clean (non-optimized) build","  succeeds for me. I did ant  && ant '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,22,2015-06-30 10:42:58,0.4,,,1,"b""b'  fails", though," since is not a valid osgi version (scala-swing). Urgh!It needs to be  . Hacky fix:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,23,2015-06-30 10:42:58,29.68,,1,,b'b\' With the revision of this PR? Doesn\\\'t work for me," i get the ""default package"" error.  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,24,2015-06-30 10:42:58,27.2,,1,,"b""b' yep"," f257f66c38  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,25,2015-06-30 10:42:58,1.7,,1,,"b""b' I do have in ", but otherwise," I just did  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,26,2015-06-30 10:42:58,0.72,,1,,"b'b"" ah. if you do  then things change. then you use starr"," which doesn\'t generate indylambda yet""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,27,2015-06-30 10:42:58,0.37,,1,,"b'b"" ok"," I\'ll run with locker and diff the manifests / jars""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,28,2015-06-30 10:42:58,0.87,,1,,"b""b' the diff will be that all closures are compiled differently. so bnd might trip over indylambda. maybe that uses some class in a top-level package?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,29,2015-06-30 10:42:58,29.4,,1,,"b'b"" it seems to be a problem of the generated function. one example is  . Its bytecode contains this: so it\'s a static field read of a top-level class. should obviously be  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,30,2015-06-30 10:42:58,1.82,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,31,2015-06-30 10:42:58,0.4,,,1,"b""b' Good find! Shittiest osgi error message ever :-p'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,32,2015-06-30 10:42:58,14.63,,1,,"b""b' pushed a fix"," and your scala-swing hack. now fails a bit later: will continue tomorrow'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,33,2015-06-30 10:42:58,7.68,,1,,"b'b"" ok"," i\'ll also have a look""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,34,2015-06-30 10:42:58,139.37,1,,,"b""b' Upgrading to all the latest shit gets me a little further (no more AME due to logback incompats)", but still failing. Error in  :  I tried to eliminate the use of BootstrapMethods from the reasons for which class initialization failed by removing all uses of lambda from ScalaVersion$," but no dice.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,35,2015-06-30 10:42:58,51.48,,1,,"b""b' Nice. The exception seems to have been triggered by properties files gone missing", which cause a NumberFormatException in ScalaVersion, which was then masked by a NoClassDefFoundError... Why so unhelpful," error message?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,36,2015-06-30 10:42:58,68.8,1,,,"b'b"" Well", beats me why those *.properties files are no longer included in the bundles. I confirmed that with bnd 1.50.0 all resources are copied over to the osgified jar (on 2.11.7). Changing nothing except for bumping the bnd version to 2.4.1 (or 2.4.0 or 2.1.0), the *.properties files are dropped from the bundles (jars in ). I\'ve tried all kinds of bizarre formulations of  ," to no avail.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,37,2015-06-30 10:42:58,20.03,,1,,"b""b' Btw"," it looks like bndtools changed their artifactId moving to 2.4.1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,38,2015-06-30 10:42:58,2.22,,1,,"b'b"" When I make ScalaVersion not throw an exception on empty version", the first set of tests pass," but the equinox run fails with another exception loading classes in . The morale: don\'t believe that exception -let\'s see if we can find a way to see the underlying one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,39,2015-06-30 10:42:58,280.65,,1,,"b""b' Some progress:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,40,2015-06-30 10:42:58,3.05,,1,,"b""b' (Pushed to url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,41,2015-06-30 10:42:58,89.87,,1,,"b'b"" @adriaanm i looked a bit around on  and found there\'s a more recent version of (3.10.100.v20150521-1310)"," but under a different groupId: instead of  . that makes pass  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,42,2015-06-30 10:42:58,1.28,,1,,"b""b' your patch to the files is still required'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,closed,2015-07-01 07:23:15,1008.35,5,33,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,reopened,2015-07-01 07:23:16,0.02,5,33,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,43,2015-06-30 10:42:58,403.65,,1,,"b'b"" phew.. let\'s see if this passes the test suite. cleaning up after.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,44,2015-06-30 10:42:58,97.65,,1,,"b'b"" it builds green. cleaned up the commits", so running the test again. i think we should keep this in [ci: last-only], because for the build to be green we\'d have to squash everything," which would be a huge commit of many things. review by @adriaanm.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,45,2015-06-30 10:42:58,1.98,,1,,"b""b' btw i marked these two as blockers for M2"," but we can change this:url url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,46,2015-06-30 10:42:58,45.18,,,1,"b'b"" Sounds good to me. Let\'s give ourselves the rest of the week to polish M2. Does that sound like enough time? Stage on ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,47,2015-06-30 10:42:58,25.12,,,1,"b""b' yes", but what i found gives you the full path to the jar," while we really need the filename only.yes!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,48,2015-06-30 10:42:58,9.92,,1,,"b""b' I think we should squash this into", say, four commits: one commit per bug fix (parser, deserializer) -should be all greenincorporating java sources + required build updates (mixed mode, osgi) -can be red," to show failing testsmove failing tests to pending (green)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,49,2015-06-30 10:42:58,0.18,,,1,"b""b' Happy to do the rebasing this morning.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,50,2015-06-30 10:42:58,217.03,,1,,"b""b' #4597'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,closed,2015-07-01 20:43:22,800.1,5,38,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4594,closed,-,-,-,5,38,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,opened,2015-07-10 16:51:31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,title,2015-07-10 16:51:31,00:00,,1,,"b""b' Fix the bug in the example in '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,body,2015-07-10 16:51:31,00:00,,1,,"b'b"" There\'s no method with argument type  . I suppose this is intended to be  . Review by @heathermiller"," @dickwall.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,closed,2015-07-11 04:14:33,683.03,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,reopened,2015-07-11 04:14:34,0.02,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,1,2015-07-10 16:51:31,343.88,,1,,"b'b"" @lastland do you agree with Lukas\'s comment?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,2,2015-07-10 16:51:31,431.52,,1,,"b""b' @SethTisue Yes. I agree.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,closed,2015-08-07 15:02:07,647.55,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,3,2015-07-10 16:51:31,555.27,,,1,"b""b' thanks for your contribution! this was a good catch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4620,closed,-,-,-,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,opened,2015-07-16 16:41:42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,title,2015-07-16 16:41:42,00:00,,1,,"b""b'  2.11 probe'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,body,2015-07-16 16:41:42,00:00,,1,,"b""b' See if it survives Scabot. Scabot should be SCARbot"," for the Scathing Review bot.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,1,2015-07-16 16:41:42,1.93,,1,,"b""b' @SethTisue the last commit detunes the power mode banner. It was just too much power.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,closed,2015-07-16 16:44:10,2.47,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,reopened,2015-07-16 16:46:32,2.37,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,2,2015-07-16 16:41:42,173.95,,1,,"b'b\' Some test output includes the ""classic"" power banner. Other REPL output changed line numbers or indentation. One may assume that line number and indentation changes are not what I was looking forward to this evening.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,3,2015-07-16 16:41:42,16.08,1,,,"b'b"" In the merge with many commits", I failed to bring the indentation fix forward. Too bad it\'s necessary to reapply a conflicting delta more than once. For the line number change, I tweaked the imports code to import possible completions only when invoked for completion (i.e.," from presentationCompile).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,4,2015-07-16 16:41:42,1153.22,,1,,"b""b' @adriaanm Yup.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,5,2015-07-16 16:41:42,27.73,,,1,"b'b"" Cool! All I did in my branch was rebase the completion wip on myrefactoring. This is much more complete", so I\'ll rebase my stuff on masteronce this is in. On Saturday, July 18,2015," som-snytt notifications@ wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,6,2015-07-16 16:41:42,610.98,,1,,"b""b' Reworked at url  with the recommended reductions but no additions.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,closed,2015-07-26 01:45:36,539.07,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4641,closed,-,-,-,1,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,opened,2015-07-26 06:42:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,title,2015-07-26 06:42:13,00:00,,1,,"b""b' SI-9270 Default xml coalescing off in 2.12'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,body,2015-07-26 06:42:13,00:00,,1,,"b""b' By default"," as of 2.12. This commit corrects the default for future versions. Proposing this bookkeeping change before I forget. And while the wounds are fresh.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,closed,2015-07-26 06:42:19,0.1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,reopened,2015-07-27 09:09:26,147.12,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,1,2015-07-26 06:42:13,942.38,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,2,2015-07-26 06:42:13,0.28,,1,,"b""b' previously: #4451 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,closed,2015-08-06 22:24:59,795.55,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,3,2015-07-26 06:42:13,1.5,,,1,"b""b' Being for the Benefit of Mr. Snytt. now to put out the flaming fringes on my sparkly costume.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4660,closed,-,-,-,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,opened,2015-09-06 00:07:17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,title,2015-09-06 00:07:17,00:00,,1,,"b""b' SI-2823 Implicit in for expression'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,body,2015-09-06 00:07:17,00:00,,1,,"b""b' Support for keyword in front of generators and midstream assignments. The optional modifier is an attachment to the pattern tree for purposes of desugaring.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,1,2015-09-06 00:07:17,16.28,,1,,"b""b' Any spec change required?  There is probably a little work required in quasiquotes to bring them into line'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,2,2015-09-06 00:07:17,6.17,,1,,"b'b"" There\'s the part. I wanted to try something minimalist. Actually", I want to fix SI-9460 by tupling the results of pattern matches instead of reapplying matches on values; currently, extractors are run multiple times," which isn\'t obvious or maybe widely known. This PR is just a test; I\'m working this weekend and won\'t drive it home straightaway. I guess I\'ll try a clean build a bit later...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,closed,2015-09-06 00:37:10,29.88,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,reopened,2015-09-06 01:16:10,39.0,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,closed,2015-09-06 01:51:56,35.77,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,reopened,2015-09-06 04:21:37,149.68,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,3,2015-09-06 00:07:17,275.85,,1,,"b'b"" @retronym Is this worth following up with spec wording? I\'ll have to experiment if quasiquotes is broken. I definitely want to use the pun on Splenda and sugar.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,closed,2015-10-26 22:49:31,1107.9,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,reopened,2015-11-10 06:15:18,445.78,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,4,2015-09-06 00:07:17,1307.93,,1,,b'b\' at the moment the action on this is over at url  @som-snytt, we won\\\'t look at the code in this PR in detail unless Martin+committee decide the SIP should become active (in which case yes, following up with spec wording, presumably adapted from @haroldl, will be key). for now," our main question about the code is whether it corresponds to ""the generalization"" @retronym suggested at ~~url ~~ url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,5,2015-09-06 00:07:17,257.02,,1,,"b'b"" @SethTisue No"," it doesn\'t apply to patterns in general.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,6,2015-09-06 00:07:17,358.53,1,,,"b'b"" I\'d suggest a test to involving a wildcard binder (  or  .) Also something like: (I worry you\'re going to double define in the block containing the yielded expression.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,7,2015-09-06 00:07:17,468.6,,,1,"b'b"" That\'s a good thought. Saved by the brace. The fresh var is not implicit yet:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,8,2015-09-06 00:07:17,657.15,,,1,"b""b' @som-snytt do you plan on getting back to this? or do you want me to take over? It would be nice to move on to other for comprehension improvements.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,9,2015-09-06 00:07:17,1155.28,,1,,"b'b"" I suggest we close this PR and create a dedicated repo for S(L)IPly work in progress. Gotta keep \'em separated. @SethTisue", @som-snytt," what say you?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,10,2015-09-06 00:07:17,10.3,,1,,"b'b"" @adriaanm you mean you folks want to create a special repo and have other folks make PRs against it? Remind me", did you want me to flag it when you get a bit pedantic? But it\'s not useful having PRs just hang out either. OTOH, PRs need champions. I\'m not totally sure people really care about -what was this PR about again? -oh yeah," introducing implicits in for expr bindings.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,11,2015-09-06 00:07:17,5.2,,,1,"b'b"" I\'m thinking that repo could make it easier for people to track and cheer on language changes as opposed to the day-to-day already-agreed-on work. I want it to be clear which bars must be met by various PRs.  I\'m also fine with introducing a different milestone for PRs that are not yet ready for merging. It\'s my understanding this PR cannot be merged until the SIP committee agrees on the language change. That\'s a much higher bar that most other PRs targeting M4.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,12,2015-09-06 00:07:17,56.35,,1,,"b'b"" I should probably frequent the dive bar and avoid the high bar. You\'re probably right that a SIP repo would be a place to gather. And it could have a gitter room.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,13,2015-09-06 00:07:17,128.83,,1,,"b""b' Closing until someone takes me out for drinks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,14,2015-09-06 00:07:17,764.07,,1,,"b""b' Getting it off the queue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,closed,2016-11-07 19:14:51,779.55,1,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4730,closed,-,-,-,1,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,opened,2015-09-23 05:46:46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,title,2015-09-23 05:46:46,00:00,,1,,"b""b' Remove the old REPL tab completion implementation'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,body,2015-09-23 05:46:46,00:00,,1,,"b""b' We kept it around behind an option in 2.11.x"," but we canjettison it in 2.12.x. Review by @lrytz '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,1,2015-09-23 05:46:46,101.75,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,2,2015-09-23 05:46:46,942.08,,1,,"b'b"" Shouldn\'t there be some sort of ceremony? And something with wine and cheese afterwards?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,3,2015-09-23 05:46:46,250.4,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,closed,2015-09-29 03:29:52,1303.1,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,reopened,2015-09-29 03:29:54,0.03,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,4,2015-09-23 05:46:46,9.6,,1,,"b""b' :wine_glass: :fork_and_knife: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,closed,2015-09-29 03:30:45,0.85,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4762,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,opened,2015-10-26 06:29:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,title,2015-10-26 06:29:45,00:00,,1,,"b""b' SI-7916: ScriptEngine support'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,body,2015-10-26 06:29:45,00:00,,1,,b'b\' Refactor the ScriptEngine support to an adaptor atop theIMain API. Allow references to resolve to context attributes. (Theattributes must be defined at compilation time, thoughthey may resolve to updated values at evaluation time.) This means that attributes are not bound statically inREPL history. In particular," we forgo the trick of bindingattributes named ""name: Type"" as typed values. Instead", an bound in dynamic context is injected intothe script as a dynamic selection where  performs the look-up in the script context. When a compiled script is re-evaluated, a new instance ofthe script class is created and defined symbols arerebound.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,closed,2015-10-26 22:48:47,979.03,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,1,2015-10-26 06:29:45,822.85,,1,,"b""b' Maybe a useful separation of concerns.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,reopened,2015-11-11 20:12:36,1283.82,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,2,2015-10-26 06:29:45,1058.67,,1,,"b'b"" This LGTM otherwise"," but I\'m not really familiar enough with JSR223""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,3,2015-10-26 06:29:45,971.65,,1,,"b""b' I think we should get this one in. It needs rebasing"," though.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,4,2015-10-26 06:29:45,97.9,,1,,"b'b"" I\'ll have to get familiar enough with JSR223.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,5,2015-10-26 06:29:45,1369.68,,1,,"b""b' Added support to capture  . '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,6,2015-10-26 06:29:45,742.75,,1,,"b""b' The following problem manifests only when using sbt as explained; it works when building locally and running  . Take this file: and run  . I get:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,7,2015-10-26 06:29:45,6.33,,1,,"b'b"" (the scala library is not on the compilation classpath"," i\'m trying to figure out why)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,8,2015-10-26 06:29:45,75.47,,,1,"b'b"" I guess it\'s that [ ]url  doesn\'t work; I set a breakpoint when initializing the compiler classpath and checked  : got  . Ideas how a good classpath / settings could be obtained? Anyway"," this problem seems unrelated to the changes in this PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,9,2015-10-26 06:29:45,14.02,,,1,"b'b"" I\'m still lacking JSR223 familiarization"," but to me this PR looks very good. It could maybe get a little more testing. Here\'s some log of my playground  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,10,2015-10-26 06:29:45,2.22,,,1,"b""b' @rjolly would you be interested to also review this PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,11,2015-10-26 06:29:45,264.72,,1,,"b'b"" This is proof-of-concept; I don\'t know what the use cases are", for interoperating with Objects; and I haven\'t exercised it much, for the usual reasons of ignorance and laziness," and not knowing if it\'s useful to pursue. Suggestions welcome. @rjolly Am I right that you can usually throw weird names in backticks? The REPL isn\'t currently as backtick-friendly as it ought to be.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,12,2015-10-26 06:29:45,1150.18,,1,,b'b\' @som-snytt I tested it, and it seems my two concerns above are solved on the Java side. For one thing," jrunscript does not bind long names like  and  anymore. Now it binds an ""arguments"" variable"," and also ""engine"" with the ScriptEngine", which solves my first issue.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,13,2015-10-26 06:29:45,161.58,1,,,b'b\' There is one more caveat, still related to binding variables. With your new scheme, one needs to jarlist not only scala-, but also scalaand scalatoo (as the former depends on it). If not done, one gets (using 2.12.0-8876c1d-SNAPSHOT): The problem is caused by these lines: , which go through the following statement: , causing the errors. Formerly the problem was avoided by casting the interpreter to , which is known outside of scala. To solve it in the present construct, we could define an interface for DynamicContext , which we would put in scala. And again regarding IMain, we should not bind it," but instead ""this"" (the Scripted instance) as instance of ScriptEngine (or nothing at all", as jrunscript is taking care of it, as seen above).\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,14,2015-10-26 06:29:45,1381.28,,,1,"b'b"" I\'m trying to resurrect a year-old branch of our project to see if I can get this to work for us.  Our use case is a bit twisty; We have a Play Framework 2.3 application that embeds a Java library that supports JSR-223 script  I need to have the automated tests operate under of course. I have hacked the Java library (and its classpath) sufficiently to get past the classic and junk.  is currently happening when I try to or occasionally even with (This may be caused by having 2.12 on the classpath for the Java library while still being on 2.11 for the enclosing Play  tried moving the app forward but my Scala dependencies at that level had a conniption",  I\'m also kind of stumbling around as to how I reference stuff in the script context. doesn\'t _appear_ to be defined, but I may have to dig back into the hacked Java lib and make sure the context is properly set there; I may have broken it trying to get it to work on Scala 2.11, before it was even supported. Are my comments about my floundering best made here, or back on SI-7916? @Lukas Rytz invited me to pop in here and contribute," and kindly provided a 2.12 build with this on it. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,15,2015-10-26 06:29:45,561.92,1,,,"b'b"" Thanks @rjolly and @MaggieLeber ", I\'ll make time to push it forward. This is the right place to comment on this implementation. I guess they don\'t require a SIP or SLIP," or a RIP (repl improvement). I kind of which there were a RIP.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,16,2015-10-26 06:29:45,375.68,,1,,"b'b"" I don\'t have this working yet in my use case. I think I need to do a cut-down exemplar without Play 2.3 and all the myriad dependencies of our app", most of whom don\'t to yet have 2.12 binaries available.  I\'m still unclear how I refer to values in the passed from within the Scala script; doesn\'t seem to be working; it gets a compile error," but I\'m not absolutely certain I\'ve got the classpath built correctly in my hack on the Java library.  My use case looks like this: ![image]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,17,2015-10-26 06:29:45,232.73,,1,,"b'b"" OK", gave up on sorting that mess; it\'s too complicated. So now I\'m trying to run Scala scripts in jMeter as JSR223 samplers.  jMeter finds the OK," but items placed in the by the host seem to get their type erased all the way back to when you try to access their members.  ![image]url  Although if you sneak up on it you can catch it:![image]url  ends up being a handy bottle to put messages in because I have no clue where is going and I don\'t seem to be able to get to the Logger or yet.  Update: Progress! ![image]url  Update: it works if you restore the erased type info!!!: ![image]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,18,2015-10-26 06:29:45,175.88,,1,,b'b\' @MaggieLeber Yes, currently all you get is an unless you cast. Example url  Previously," it took apart the bound name as a pair and that\\\'s how it was statically ""registered"" in REPL history. There\\\'s no script API to say directly ""bind as this type in the target environment."" One could hijack the API with the colon trick", or add a method that includes type info.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,19,2015-10-26 06:29:45,1057.8,,1,,"b'b"" Unfortunately", I think any approach that erases type information in the objects in a ScriptContext is in for a very rough ride from folks approaching Scala as a JSR223 implemention. It\'s common for a JSR223 host to chain script executions, sharing their contexts between executions which may occur under different ScriptEngines. Activiti and jMeter are good examples. That said," I suppose it\'s better than not working at all.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,20,2015-10-26 06:29:45,222.52,1,,,"b'b"" isn\'t this an inherent issue with JSR223 itself"," rather than a shortcoming of our implementation in particular? (or am I confused?)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,21,2015-10-26 06:29:45,6.12,,1,,"b'b"" One option is to wrap bound objects in  . It\'s dynamic all the way down... I didn\'t have a chance to look at it yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,22,2015-10-26 06:29:45,87.85,,1,,"b""b' @SethTisue Other JSR233 implementations expose the objects in the with their type info intact.  Why would one expect it to be removed? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,23,2015-10-26 06:29:45,58.75,,,1,"b'b"" Given an object", we can only ascribe to it what we can learn through reflection. Maybe that\'s good enough. I\'ll try it out. BTW, the idea is that you don\'t use in your script code. If you make a reference and there\'s no in your interpreter history but there is an in the script context," that is used (by some magic: the script is rewritten to include  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,24,2015-10-26 06:29:45,97.52,,,1,"b'b"" Ah", OK. I\'m kind of crippled up here because I have to drop my experiments into a run of jMeter and see what comes out; more often than not it\'s a compile failure with the error off in another window.  I\'ve been trying to get enough info about the context objects to fix their type correctly as @som-snytt  it\'s taking my brain on an interesting trip though Scala types. An educational journey indeed. 20 years of Java have made me a bit resistant to assimilating the idea that there is more to types than  I can be trained," even at this late date. :-) I\'d suspected that referring to $ctx might be unnecessary... Indeed:  works fine. A bit tidier.  ![image]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,25,2015-10-26 06:29:45,51.43,,1,,"b""b' @MaggieLeber Can you show a code sample or transcript or something that concretely demonstrates what you mean by that? I do not understand your claim.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,26,2015-10-26 06:29:45,131.4,1,,,b'b\' @SethTisue  Sure. Let me rip some stuff out of our tests.  This test builds a BPML process with a series of ScriptTasks. The body of Activiti ScriptTasks can be in any JSR223 language for which engines can be found on the classpath, so far we use Groovy and Javascript and we\\\'d sure like to add Scala to the vocabulary. (Beanshell and Python are other conceivable candidates," but there\\\'s such a thing as ""too much polyglot"".) I\\\'ll paste the scripts here as they\\\'re constructed in Scala strings; they\\\'re eventually wired up into a big BPML document that the Activiti engine eventually accepts as an executable deployment. The first one is in Nashorn-flavored Javascript and sets a bunch of execution variables into the ScriptContext (referred to here as  . The next step is a Groovy script that pulls the vars out of his ScriptContext and logs into a web service to write them as JSON into a MongoDB database. The resulting MongoDB document key is put into the context for subsequent tasks  in the process to pick up for later processing.  In real-world use these two steps might be widely separated in time; the values are serialized and persisted externally in the meantime and then restored to a context for the next script when it is scheduled. Here again the script context is access through  :  Note that neither the JS that created them nor the Groovy that read them back needed to fuss about ", declare or coerce the type or class of these values; they hadn\\\'t all been mysteriously erased back to Object. Does that help? I realize that we have widely different points of view here, but in my experience this is a typical JSR223 use case. It may just be that the JSR223 implementations I\\\'m familiar with are pretty loose about typing to the point of duck-ness, whereas Scala is type-strict 24/7. These may be seriously conflicting goals.  Ultimately one may have to do a type-declarative introduction to any value in the context before using it in Scala code. \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,27,2015-10-26 06:29:45,55.28,,,1,"b'b"" thanks for the detailed answer", this is helpful.JS and Groovy are dynamically typed languages; so everything is always just Object to them anyway. It\'s only statically typed languages like Scala where the concept of needing to have a more specific compile-time type for something even arises. or in other words:yes, precisely! I think it\'s simply normal and expected in both Scala and Java to have to typecast everything you get back from and  . the alternative that Som mentions of using instead is interesting. I haven\'t thought too deeply about it, but that might be suitable for some use cases. but in bare JSR223, the return types are  , not  ," so moving things into would have to be the job of some kind of additional layer or wrapper.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,28,2015-10-26 06:29:45,13.53,1,,,"b'b"" Yeah", it\'s  I see I can do the urge to automatically feed that to somehow is overwhelming... but in fact thinking about it carefully, I\'d need a time machine.  Or use reflection somehow, which is what Som is looking at.  I\'ve been so heads-down into the day-to-day, it\'s hard to keep up with the new stuff in the language like (It is new," isn\'t it? Tell me it\'s new...). Taking a few days out of work to attend the Typelevel shindig and NEScala in Philly next week may help me catch up. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,29,2015-10-26 06:29:45,792.53,,,1,"b""b' I went back and ran the same jMeter setup against 2.12.0 M3 and got the familiar ...so even as this stands", this change makes things much, much better. Me likey, @SethTisue has made me see the light about why this must work the way it does," so thanks for his patience on that. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,30,2015-10-26 06:29:45,61.58,,1,,"b""b' It sounds like this PR could be merged now"," or are there still open questions / items?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,31,2015-10-26 06:29:45,7.27,,1,,"b""b' Not from me. :+1: :shipit: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,32,2015-10-26 06:29:45,41.65,,1,,"b'b"" I strongly advise that my comment of Feb 19 be followed", namely define an interface for DynamicContext and put it (somewhere) in scala, so as to remove scripted code dependency to scala(which I carefully managed to ensure in my original implementation). Otherwise, one has to jarlist scalaand scalain addition to scala, which is already painful enough. And remove the binding of $intp as instance of IMain, for the same reason. This one is easy, the other one harder," please let me know if I can help by making a PR to @som-snytt \'s repository.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,33,2015-10-26 06:29:45,40.85,1,,,"b'b"" It\'ll take me a bit to spin up on this issue again. I\'d forgotten @rjolly \'s previous comment about interfaces; and I vaguely remember there\'s a need to do something more Dynamic with objects in the context.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,34,2015-10-26 06:29:45,289.82,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,35,2015-10-26 06:29:45,369.23,1,,,"b'b"" I wanted to spend a couple of hours on this but hit a snag. Testing with a bad ref", it throws as shown: url  I\'ll push and maybe @lrytz will hint at something. For @rjolly hint," it pre-compiles a wrapper for the current context and also the dynamic adapter (which isn\'t strictly required).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,36,2015-10-26 06:29:45,6.17,,1,,"b'b"" I\'ll take a look if I can reproduce should not make it to the backend.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,37,2015-10-26 06:29:45,772.93,,1,,"b'b"" I just noticed that adding the override induces the exception. How is that possible? D\'oh"," I guess it\'s because the compiler relies on the reporter correctly reporting error state to halt compilation. I\'m distracted b/c heading to my day job and didn\'t intend to spend hours on this. But it makes me appreciate what FOSS means as a commitment. Actually I wanted to finish my dotty repl last weekend. :(""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,38,2015-10-26 06:29:45,34.72,,,1,"b'b"" right"," it\'s actually the main loop that moves compiler phases forward: url your commitment is quite unique! feel free to put your efforts where your motivation drags you. but this one will be worth pushing through!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,39,2015-10-26 06:29:45,25.2,1,,,"b""b' So a compile error will throw: I always doubt if the position is useful...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,40,2015-10-26 06:29:45,686.13,,1,,"b""b' I encountered the wontfix where  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,41,2015-10-26 06:29:45,257.08,,1,,"b'b"" ah", you mean url  maybe when you\'re on this one next time," a rebase on current 2.12.x would be useful and unblock CI validation (assuming we manage to unblock CI itself \\xe2\\x80\\x93 url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,42,2015-10-26 06:29:45,470.33,,1,,"b'b"" This was already rebased"," but I haven\'t looked at squashing yet. In case I wanted to back something out; but probably I\'ll just move forward. The other desirable was to handle bound objects more dynamically. I think implicit conversion to Dynamic is not supported? That would have made falling back to reflective access easy.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,43,2015-10-26 06:29:45,634.85,,1,,"b""b' Is this that old problem where spiders would poke an abort link?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,44,2015-10-26 06:29:45,62.6,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,45,2015-10-26 06:29:45,643.98,,1,,"b'b"" If my assessment of this long thread is accurate"," everyone\'s requests have been satisfied and all that remains is resolving the merge conflicts that have crept in. Are there any objections against merging the current state?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,46,2015-10-26 06:29:45,100.35,,1,,"b""b' yes"," i think so too'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,47,2015-10-26 06:29:45,1.02,,1,,"b'b"" I\'ll rebase. I think there is a future opportunity for improving the user experience of working with dynamically bound objects"," but not a blocker for this PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,48,2015-10-26 06:29:45,210.58,,1,,"b""b' No objection.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,49,2015-10-26 06:29:45,840.72,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,closed,2016-05-20 15:29:47,1157.18,8,34,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4819,closed,-,-,-,8,34,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,opened,2015-11-04 22:39:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,title,2015-11-04 22:39:03,00:00,,1,,"b""b' SI-8394 Add zip method to Option [jvican]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,body,2015-11-04 22:39:03,00:00,,1,,"b""b' So this is the active pull request of #4437.Review by @SethTisue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,1,2015-11-04 22:39:03,757.67,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,2,2015-11-04 22:39:03,591.5,,1,,"b""b' I will try to figure out where the test failure is coming from.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,3,2015-11-04 22:39:03,76.97,,,1,b'b\' I think the failure is probably real (I am able to reproduce it locally). it could be some unexpected consequence of this change not being source compatible. in Scala 2.11 we have: but after this change we have: perhaps there is existing code in the  somewhere which this breaks," which then shows up in the scalap failure. we might have to rethink whether we can accept this change for 2.12 given the 2.12 promise of ""full backward source compatibility"" with 2.11. and even for 2.13 it could be questionable. @retronym observes: ""We had the same issue on 2.10 when we added something similar to option (flatten"," I think). It was a big PITA to fix up in the code base I was working on. Small changes after the fact to widely used datatypes tend to be costly""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,4,2015-11-04 22:39:03,9.03,,1,,"b'b"" I did try to see if the existing code in the Scala repo was using on  ", but failed to turn up anything. I tried removing from and looking at all the resulting compile errors to see if any of them involved calls," and I didn\'t see any. @retronym I\'m curious if you think there is any other possible way that this change could be resulting in the scalap error we\'re getting""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,5,2015-11-04 22:39:03,41.32,,1,,"b""b' Please rebase this on the tip of the 2.12.x branch. I believe the test failure will go away then. (The test was removed in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,6,2015-11-04 22:39:03,56.07,,1,,"b""b' I have rebased on top of the last commit on the 2.12.x branch. Is that okay?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,7,2015-11-04 22:39:03,569.07,1,,,"b'b"" I\'m curious. What was the error that caused that weird behavior?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,8,2015-11-04 22:39:03,258.37,,1,,"b'b"" on the question of the desirability of the change for 2.12: I\'ll bring it up at the next Scala team meeting.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,9,2015-11-04 22:39:03,533.18,1,,,"b'b"" we discussed this and decided that it doesn\'t make sense for us to accept this in 2.12. it changes the meaning of existing code", in a release where we\'ve already committed not to do that unless really necessary, and the benefit, while real, isn\'t that great.  the change might still have a chance in 2.13. its chances would be improved if either or both of these come true: by then we have a code-rewriting tool that helps mitigate the effect of breaking changes by providing automating assistance with migrating existing code it turns out that we\'re changing a bunch of Option  collections stuff in 2.13 anyway, and so it\'s easier for small-ish changes like this to get in under that umbrella  so," I am sorry! I should have realized earlier in the review process that this change was problematic \\xe2\\x80\\x94 that could have spared @kubudi and @jvican some work. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,closed,2015-11-09 22:52:13,13.17,2,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,10,2015-11-04 22:39:03,100.98,,,1,"b""b' @SethTisue is it a good time to resurrect this and accept in 2.13.x?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,11,2015-11-04 22:39:03,204.85,,1,,"b""b' @jozic yes"," I think so'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,12,2015-11-04 22:39:03,1379.88,,1,,"b""b' @jvican Do you want to reopen this PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,reopened,2017-09-28 14:23:53,931.67,2,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,13,2015-11-04 22:39:03,686.35,,1,,"b'b"" Yeah"," this has been reopened and assigned to 2.13.x. I\'ll rebase it when I get some time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,14,2015-11-04 22:39:03,18.13,,,1,"b""b' oh"," so we can get it in 2.12.5? that would be cool'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,15,2015-11-04 22:39:03,734.18,,1,,"b""b' not in 2.12.5 \\xe2\\x80\\x94 in 2.13'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,16,2015-11-04 22:39:03,1042.45,,,1,"b""b' @jvican interested in returning to this...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,17,2015-11-04 22:39:03,1057.95,,1,,"b""b' Will try to rebase it successfully in the future. Putting this on the backburner for now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,closed,2018-03-05 13:57:00,1413.12,2,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4836,closed,-,-,-,2,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,opened,2015-12-07 22:37:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,title,2015-12-07 22:37:12,00:00,,1,,"b""b' add new look for scaladoc'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,body,2015-12-07 22:37:12,00:00,,,1,b'b\' I\\\'m working on a new look for scaladoc. My goal has been to make something similar to the beautiful Typesafe sites. For now this has been for my own amusement, but if there is interest I\\\'d like to make this good enough to replace the current (in my opinion," somewhat outdated) look.  There\\\'s still a lot of stuff to do:~~Replace large ""C""-","O""and ""T""-icons with css based images.~~~~Add hide index component (left portion)~~Filter with: ordering, inherited, implicitly, visibility (right portion)~~Add the HiDPI arrows to ""Linear ""~~ To name a few... One of my goals is complete removal of the static images that are not HiDPI and replacing them with utf8 symbols or CSS. If there is interest I\\\'ll keep working on my branch then squish for merge.\''
scala	4877	closed	1	Ichoran	2015-12-07 22:37:12	24.07		+1		b'b"" I like it personally, but my tastes aren\'t always representative.""'
scala	4877	closed	2	hepin1989	2015-12-07 22:37:12	240.12		+1		b""b' will it looks ok on mobile?'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,3,2015-12-07 22:37:12,391.55,,,1,b'b\' @Ichoran thanks and don\\\'t sell yourself short :smile:  @hepin1989 I\\\'ll look into it," the current API looks ""OK"" on mobile", but not that great. Is there really anyone who uses the docs on mobile though?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,4,2015-12-07 22:37:12,14.85,,1,,"b""b' @felixmulder url  we could take a look at this:)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,5,2015-12-07 22:37:12,50.42,,,1,"b""b' I have also looked into this ... I think it would be nicer to pick scalaas a design source. If you add the small dark blue bar at the top", and replace the existing pane with medium blue color, and use the light blue for the menu on the left," it could look very nicely!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,6,2015-12-07 22:37:12,15.0,,1,,"b'b\' @soc I agree with you in that we should use the more ""official"" color scheme from scala-lang however", I think most of the colors on the typesafe site are the same as on the official site, albeit the top portion of the main site is darker. I\\\'ll post screenshots of your suggestion later today and we can compare.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,7,2015-12-07 22:37:12,660.03,,1,,b'b\' I\\\'ve updated the first post with current screenshots as of commit 324a296. @soc couldn\\\'t quite get the colors right if you\\\'ve got some hex codes for me I wouldn\\\'t mind trying them out. The one thing I\\\'ve left to do before this is truly compatible with the old version," is to add the ""with ordering"," inherited..."" filter options. Added the Scala-logo as a test should it be there? Maybe someone else doesn\\\'t want it there when they gen their docs has this discussion been had? cc: @VladUreche\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,8,2015-12-07 22:37:12,135.2,,,1,"b'b"" @felixmulder Thanks for the new design! It looks much cleaner", although maybe a bit boring due to the washed colors... maybe you could pick one of the bolder colors from the Typesafe website? @heathermiller is the design expert," so she\'ll be the one who ultimately needs to  the new design. Better coordinate with her :smile: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,9,2015-12-07 22:37:12,682.23,,,1,"b'b"" @felixmulder First dark blue strip should be 20px height", #002B36. Then 80px height, #073642. Light blue is #72D0EB. I would let the bar range over the whole width, so that you don\'t have the gray rectangle in the top left, and use the white version of the Scala logo instead. Regarding the logo: I think if you put all these things into the css," people can change it to their preferences.(It would certainly be nice to have a scaladoc option to supply a custom CSS file to use.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,10,2015-12-07 22:37:12,53.95,,,1,"b'b"" @soc will try them out", thanks! Unfortunately, the right portion of the docs is an iframe for the html file that contains the entities (package, trait et cetera). I\'ll figure out spanning the entire screen somehow if that can be made to look better. Also," the scala logo used is SVG wheareas the white scala-lang logo is png (boo). Will see if I can solve it through other means... I\'ll post the next version sometime tonight.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,11,2015-12-07 22:37:12,32.63,,,1,"b'b"" IT\'S AMAZING!!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,12,2015-12-07 22:37:12,26.27,,1,,"b""b' @felixmulder there is a big white place besides the scala logo","I thin you could post the current version number of the doc there. In fact I like this [logo]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,13,2015-12-07 22:37:12,35.73,,,1,b'b\' First off, amazing work. I can\\\'t praise you enough for how well you\\\'ve visually streamlined the interface. Putting each  into its own distinct differently-colored box," etc... It\\\'s all really reduced the visual strain induced by the old interface. Great work. Just a handful of thoughts:1. Why not keep the filters collapsed by default? I find them visually noisy and I very seldom use them.2. The Scala logo might be a bit too strong. Think of other peoples\\\' libraries generated by Scaladoc \\xe2\\x80\\x93 with such a strong ""SCALA!!"" shouting at you", everyones\\\' library might appear as if its the Scala stdlib. @VladUreche do you think there\\\'d be some way to parameterize the  shown in the title bar? At the very least, as a default, the name of the root directory could be used...? However, @felixmulder, in any case, it would be nice to incorporate the Scala logo somehow. It would be nice to visually mark Scala libraries as such... But then what of the people who use Scaladoc to generate Java APIs? :/3. Would it be possible to make the search bar in the left side panel span the width of the panel? i.e., would it be possible to remove that little triangle to the left of it? Or is it functional somehow?4. @soc\\\'s suggestion of trying to make it appear like there\\\'s one bar could be nice, I\\\'m not sure. I have to say that his suggestion does go in the direction of further simplifying the interface, more in the direction of the Elixir docs url  where clutter is absolutely minimal. But it could be that following that suggestion could mean that the sidebar is no longer perceived as a sidebar. @felixmulder, you being the designer here, I leave it to your creative discretion :)5. Did you manage to figure out syntax highlighting or anything for blocks? E.g., code examples that are regularly provided at the top each page.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,14,2015-12-07 22:37:12,52.87,,,1,b'b\' @heathermiller thanks!1. The filters are collapsed by default (as in the 1st image above), I also find them distracting.2. I agree with you as someone else suggested, if we config it by CSS people are free to change said image. It might, however," be better to choose a more discrete logo or none at all.3. The little triangle unfolds the ""A B C..."" as in the third image. There might be a better solution for this I\\\'ll experiment. Letting it span the entire width would probably be prettier.4. I wouldn\\\'t really mind having something similar to the Elixir docs", it is very nice. I\\\'ll experiment and post images regularly through the coming week.5. I\\\'m not quite sure I get what you mean here. But as you can see in the image below there is already some form of syntax highlighting. Is it sufficient? ![photo279671288471070920]url  Note that the image above is from the first commit in this PR. @hepin1989 where did you find the image? Is there an .svg-version? Are we allowed to use it? Also the version number is a good suggestion.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,15,2015-12-07 22:37:12,61.47,1,,,b'b\' Great. I couldn\\\'t tell if they were collapsed or just incomplete. Great to hear that they\\\'ll be collapsed by default.Right, in the case of someone who runs Scaladoc on a Java API, it could just be confusing. @VladUreche would you have any pointers here?The A-Z index is actually immensely useful. Using it, you can search for almost anything, methods, values, objects. This is counter to the search bar above it," which only searches for so-called ""top-level entities""", so, classes, traits," singleton objects. A great many Scala users arrive at this page for the first time and they might type in something like ""reduce"" hoping to find documentation for some reduce method defined somewhere. They then become confused because they\\\'re searching for only  and not methods so they find nothing. To top it off"," almost no one realizes they can use the alphabetical index to search for methods etc... This is an artifact of a 2008-era fear of there being too many ""members"" (methods", fields, classes, singletons etc) for a JavaScript filter to deal with. This would actually a lot less of a concern now a days, I think.  That said, it might be time to rethink this from a UI perspective... I know this is far beyond the scope of this PR, but if you would have any ideas for improving the searching functionality in Scaladoc from a UI perspective, they\\\'d be welcome! If it\\\'s a nice and feasible idea, perhaps we can find a way to make it happen. Specifically," if I searched for ""map"" or ""reduce"" how should the interface behave? What happens to the left panel? ...Perhaps we can obviate the need for this A-Z index thing as part of the UI...The sky\\\'s the limit! Scaladoc as it is was implemented to be essentially just Javadoc for Scala + Scala\\\'s features. If you think there\\\'s a better way to display documentation", we\\\'re very open to suggestions!That\\\'s great, I didn\\\'t see it posted. Looks good!\'',,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,closed,2015-12-09 15:57:41,1040.48,1,7,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,16,2015-12-07 22:37:12,4.28,1,,,"b""b' ups"," sorry..'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,reopened,2015-12-09 15:57:52,0.18,2,7,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,17,2015-12-07 22:37:12,6.55,,1,,"b'b"" @heathermiller: like @lrytz", I too was not aware of what it did until I started fidgeting with the redesign. The searchbox should definitely search for everything that would be the expected usage. It\'s a bit outside the scope; we should, however," aim to keep it in mind when designing this interface.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,18,2015-12-07 22:37:12,4.68,,1,,"b'b"" Sure. But if you have an  of how you think it should behave"," it\'s a starting point for figuring out how to make it happen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,19,2015-12-07 22:37:12,13.83,,1,,"b""b' :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,20,2015-12-07 22:37:12,238.83,,1,,"b'b\' I simplified the sidebar to be more minimal. It retains the ""..."" as a means to get to the A-Z functionality. I\\\'m no designer I study compiler technology and algorithms. My brother on the other hand is an actual designer. He came up with this for the folded up buttons at the top of the class: ![812740526_15601411063764634077]url  I think it looks pretty neat and ditches the skeuomorphism from the previous edition.  I tried letting the top cover the entire screen horizontally", it looks weird to me. I like the idea," but it doesn\\\'t feel like there\\\'s a good partition between the class description and the ""bar"" what do you think? What I mean:  cc: @heathermiller  EDIT These are another alternatives for the top of the bar:  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,21,2015-12-07 22:37:12,172.28,,,1,"b'b"" 1) This is awesome.(but while I\'ve got your attention", I can\'t resist bringing one issue up:)2) The number-one usability problem with Scaladoc for beginners, in my experience," is the non-discoverability of the toggle between the class and the companion object. Newbies don\'t realize it exists. So anything you can do to make that a great deal more obvious would be :sunny: :rainbow: :smile_cat:  :+1: :tada: :beers: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,22,2015-12-07 22:37:12,97.13,,,1,b'b\' TIL I\\\'m basically a skew-o-morph. My kid might be one, too. A big red scream balloon,Check under the sticker to win amazing new free gear!, might suffice to draw attention to the companion button.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,23,2015-12-07 22:37:12,483.63,,1,,"b'b"" @SethTisue yeah"," you\'re totally right. I\'ll think about how to emphasize its clickability. As of now this is the current look: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,24,2015-12-07 22:37:12,27.8,1,,,"b'b\' @SethTisue didn\\\'t Dick Wall at least partially resolve this issue by putting the big link to companion on the right side of the  name under ""Related Docs""?  @felixmulder Back to the issue of the index... I strongly advocate for **not** hiding it. It is already bad that a lot of people don\\\'t realize that it\\\'s there. It\\\'s worse if we make the index harder to access for those who regularly use it. Granted", I take this stance of not hiding the index assuming we\\\'re not going to have a conversation about how we can improve the  experience in Scaladoc. I\\\'m still happy to brainstorm together to try and imagine ways that this experience can be improved. About the C/O etc images at the top... I like them! The class image though, is it me or is the blue behind the green circle a bit bright?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,25,2015-12-07 22:37:12,63.17,,1,,"b'b"" @heathermiller Yeah"," that one\'s a mockup the actual one is darker. Perhaps we could have the letters vertically on the right side of the bar? (Visible always)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,26,2015-12-07 22:37:12,24.38,,1,,"b""b' Maybe we could show all available kinds (/...) at the top"," just like in the index on the left?So we would have  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,27,2015-12-07 22:37:12,23.43,,1,,"b'b\' @soc I\\\'m concerned it might look cluttered but I\\\'ll mock it up after I get home from thesis work. Another option would be to add some form of (tab-)buttons on the right instead of the ""Related docs"" hrefs?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,28,2015-12-07 22:37:12,87.05,,1,,"b'b"" For anyone looking at the failing build I\'ve removed some assets (png-files) that the HtmlFactory is copying around"," will fix in next commit.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,29,2015-12-07 22:37:12,3.68,,1,,"b""b'  @felixmulder I think you could only show the outlines of the ones not selected. I. e. invert the colors of everything in the circle in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,30,2015-12-07 22:37:12,216.2,,,1,b'b\' good point. but yeah,"partially""\\xc2\\xa0\\xe2\\x80\\x94 it\\\'s still very easy to miss.\''
scala	4877	closed	31	felixmulder	2015-12-07 22:37:12	964.98		+1		b'b"" I had an issue with  . When adding assets to the list, it couldn\'t find them despite them being in the correct folder. As such I\'ve (for now) commented out the new assets. The fonts should not be able to be copied via the current function though, so I\'ll need to remedy that before this will pass any tests. Still todo:Related docs Filter with: ordering, inherited, implicitly, visibility (right portion) Other than that, I think it\'s nearing completion...""'
scala	4877	closed	32	heathermiller	2015-12-07 22:37:12	351.77		+1		b""b' Again, I would really advocate that the index is not hidden. '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,33,2015-12-07 22:37:12,192.33,,1,,"b""b' I agree with Heather on this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,34,2015-12-07 22:37:12,26.28,,1,,"b'b\' Maybe you could leave the ""display only packages"" button collapsed", and keep the A-Z index where it is? Just brainstorming...\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,35,2015-12-07 22:37:12,26.17,,1,,b'b\'  How\\\'s this as an alternative? I think we should re-implement search. If we do that, we should get rid of the index," it\\\'s confusing. When I click on the letters I would think that the bar would jump to classes beginning with the letter clicked... :confused:  Regarding the ""display only packages"" I was planning on replacing it with a "" all"" form of cool switchbuttontypeathingy. Like one of the ""Switches"" here: url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,36,2015-12-07 22:37:12,38.82,1,,,b'b\' Yep, I totally agree that we should re-implement search. I have an idea of how we can change Scaladoc to generate a different index (I wouldn\\\'t expect you to do it, don\\\'t worry). I just don\\\'t know how would be best to visually display the search results in a meaningful way. Think about it," if you search for ""bool"" you should see a ton of things", the Boolean  object," and then all of the methods and fields that contain the string ""bool"" in them. So"," for example a ""toBoolean"" method on different classes", you know what I mean? That said, naively," I would guess that the interface should separate out the  (so-called ""entities"") from  (so-called ""members""). So maybe they should be separated by something like a header that says """" and those should sit on top of the filtered results"," and then maybe the second category ""methods", fields," members"" or something could be another header that sits below that list. Do you see what I mean?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,37,2015-12-07 22:37:12,3.97,,,1,"b'b\' Here\\\'s an example of information that I\\\'m not sure how we\\\'d display:![screen shot 2015-12-11 at 8 02 53 pm]url  Here are ""members"" that are called ""bool"" something but they live on different ... For example","Boolean"" in the scala package object, as a member on ClassTag, etc. See what I mean?\''
scala	4877	closed	38	heathermiller	2015-12-07 22:37:12	1.48		+1		b""b' Btw, +1 on the switch thingy :)'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,39,2015-12-07 22:37:12,52.78,,,1,"b'b"" Yes! That\'s exactly the way I want it to work! I don\'t want to implement it in this PR"," but I wouldn\'t mind doing it at a later point before the 2.12.x-\'s keep discussing it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,40,2015-12-07 22:37:12,15.67,,,1,b'b\' Sure thing \\xe2\\x80\\x93 I\\\'d be happy to spend some time working on it too. Maybe @VladUreche would also be available one of these days to do some brainstorming on generating the index. But for the meantime," can we just keep the:A B C D E F G H I J K L M N O P Q R S T U V X Y Z # thing? Rationale: even if we do ""A-Z"" it\\\'s still the same as having to click to expand. It adds a click to power users\\\' workflow.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,41,2015-12-07 22:37:12,1.1,1,,,"b""b' Ah \\xe2\\x80\\x93\\xc2\\xa0and one last (stupid) question. Are the keyboard shortcuts still good?There are only like 3-4: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,42,2015-12-07 22:37:12,46.52,,1,,"b'b"" They should be working. ~~How about a cookie for remembering if the letters were showing?~~ Otherwise at the very least I\'ll make it look better"," hopefully :smiley:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,43,2015-12-07 22:37:12,1092.03,,1,,"b'b"" I\'m now done with the first final draft of this PR please try building before merging. No functionality has been changed as previously discussed with @heathermiller. The resulting build should generate a doc that looks like this:  It has been tested on OS X in Chrome and Firefox.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,44,2015-12-07 22:37:12,32.95,,,1,"b'b"" ~~There\'s one known issue missing an SVG for trait with companion object. Will add this tonight but it doesn\'t change anything from the final draft otherwise :smile:~~ ~~Edit: fixed in 7a99381~~""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,45,2015-12-07 22:37:12,889.85,,1,,"b""b' Fixes have been squished into  4f5eeae. These fixes includeSVG for trait companion iconProper color title-bar color for traitUnderlined filter functions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,46,2015-12-07 22:37:12,331.63,,,1,"b'b"" Great! This looks really nice. One last request before merging \\xe2\\x80\\x93 would you mind generating the stdlib API docs and dropping them in a publicly accessible directory somewhere? Would be great to be able to try this out before merging it. Just in case there\'s a layout bug or something hidden away.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,47,2015-12-07 22:37:12,50.0,1,,,"b'b"" Sure thing", I\'ll think of someplace to host them. (Unfortunately," LTH does not permit traffic from external IPs to the student public dirs.) I\'ll find someplace to host them and then ping you should be sometime tonight.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,48,2015-12-07 22:37:12,7.93,,1,,"b""b' Dropbox should work: copy the generated docs into a folder below Public and get the public link to  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,49,2015-12-07 22:37:12,5.38,,,1,"b""b' @lrytz thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,50,2015-12-07 22:37:12,175.13,,1,,"b'b"" I added an underline to the search bar on the right pane. As such Jenkins is re-testing everything. Nevertheless", here\'s the current build: url  @heathermiller  PS: It\'s still uploading, (about one hour left as of 17:10 UTC+1h) but fully usable for most entities PS2: Noticed the firefox css box shadow issue on the left filter input," fixed it and it\'s uploading the new  (in 800 files or something)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,51,2015-12-07 22:37:12,73.52,,,1,"b'b"" Awesome", thank you very much! It looks amazing. Improvement of 10,000x over before. I just noticed the permalink icon! Couldn\'t see it in the screenshots. It\'s awesome!! Two smallish bugs that I noticed... 1. Keyboard shortcuts. When I type something in the left side panel, and press the down arrow key, old CSS seems to be used for the selected  \\xe2\\x80\\x93\\xc2\\xa0the old (shorter) height of the bar seems to be used, which causes resizing when scrolling around with the keyboard, and there appears to be an old png bg still in place. Should be a quick fix.2. When I load a page via permalink, old CSS seems to be used \\xe2\\x80\\x93 there\'s a gaudy orange highlight. I think it might actually be js. The scroll is also a bit off for the members I clicked (i.e., due to the top bar now being anchored," I think the calculation is now off for the js scrolling if you know what I mean). Do you think it\'d be possible to highlight the bg of the permalinked member a different color?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,52,2015-12-07 22:37:12,2.6,,1,,"b'b"" Ah", a new little bug...  3.When I mouse over the top bar (anywhere), a permalink icon appears in the top right hand corner of the page. For the  bar thing," it of course doesn\'t do anything. So this should be removed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,53,2015-12-07 22:37:12,2.93,,,1,"b""b' Ok", other than that," this all looks GREAT to me! Do you think those 3 little fixes above are manageable?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,54,2015-12-07 22:37:12,100.45,,1,,"b""b' Will see to it when I get home from practice. What browser and OS are you using?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,55,2015-12-07 22:37:12,102.72,,,1,b'b\' This is great! A few issues I found though:The JavaScript seems to be extremely slow (Firefox asks whether it should stop running JavaScript on that site when loading anything)Imho,"Filter functions"" should not be white, makes it hard to figure out that one can click into it. Maybe something in gray, or maybe something visually similar to the filter input box?Fonts in the icons in the index seem to be offUpper part of the scrollbar seems to be hidden by the filter box in the upper left\''
scala	4877	closed	56	heathermiller	2015-12-07 22:37:12	2.27			+1	b'b"" Hi @felixmulder, thanks! OSX + Chrome. Really excited about this overhaul!! (PS, I\'m aware that Dropbox is remarkably slow at serving sites...)""'
scala	4877	closed	57	felixmulder	2015-12-07 22:37:12	14.4			+1	b'b\' @soc I haven\\\'t changed anything that should impact performance, can you identify what the bottleneck is? Perhaps it\\\'s loading a large entry like the Array class?I don\\\'t think it\\\'s the ""white"" that is the issue, but rather the fact that it doesn\\\'t look like an input field, I might darken the background in the input box or something. Good feedback anyhoo!Looks like it is specific to firefox I\\\'m gonne see what I can do about it.On it. PS it would really help if you guys note what OS you\\\'re using.\''
scala	4877	closed	58	felixmulder	2015-12-07 22:37:12	6.6		+1		b'b"" @heathermiller Will fix, missed that one.Can\'t reproduce give me a permalink?Clicking it changes the URL in the address-field to the permalink or am I missing something?""'
scala	4877	closed	59	heathermiller	2015-12-07 22:37:12	17.07		+1		b'b"" Re #2, here\'s a link:url ""'
scala	4877	closed	60	felixmulder	2015-12-07 22:37:12	35.98		+1		b'b\' Allright I applied fixes for the following in 3c6bd0b:fonts in index icons being off in firefoxupper part of scrollbar hidden in firefoxkeyboard nav highlightingfix permalink highlighting of functions in entity I also removed the ""Source Code Pro"" font for bold fonts in entity descriptions, it looked weird. Things I haven\\\'t fixed:@heathermiller\\\'s 3rd issue no understandy ""Filter functions"" input not looking editable The last two I\\\'ll look at tomorrow if applicable :smile: ~~PS: new version url  (let it upload, patience)~~ (EDIT: new version below)\''
scala	4877	closed	61	soc	2015-12-07 22:37:12	32.72		+1		b'b\' This is how things look when I click the ""debug script"" in the ""warning: unresponsive script"" dialog: url  This has never occurred with the old one, but Array hangs every time.Additionally, there are lots of duplicate entries: url \''
scala	4877	closed	62	soc	2015-12-07 22:37:12	2.92		+1		b'b\' Also: A lot of ""not so helpful"" classes have appeared in the index, like ""CollectionsHaveToParArray"". Was this intentional?\''
scala	4877	closed	63	soc	2015-12-07 22:37:12	9.58		+1		b'b\' The bar that appears after clikcing ""focus"" hides parts of the elements.\''
scala	4877	closed	64	ctongfei	2015-12-07 22:37:12	13.95			+1	b""b' This is fabulous!But it seems that I cannot build it correctly. I checkout the branch and called the main class  but the generated ScalaDoc is still in the original style. Can anyone tell me what is the correct way to run this? '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,65,2015-12-07 22:37:12,194.78,,1,,"b'b"" @ctongfei from a clean checkout of Felix\'s branch", should be sufficient \\xe2\\x80\\x94\\xc2\\xa0the generated doc for the standard library will end up in  . and if you want to run from the command line," after you can run  . note you can get help with this kind of thing fastest in url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,66,2015-12-07 22:37:12,224.33,,1,,b'b\' Suggestion for searching members: When you start typing in the top-level search box," there could be a link that the top that says something like ""search all members..."" that when clicked takes you to a search page. (Without getting into how to implement that page.) By the way"," what exactly is included in the default search / in the sidebar? Is it ""members of a package"" (including defs in a package object)? Is it ""objects", classes," and traits"" (including inner objects", classes," and traits)? Is it ""things that are the top level of the source file"" (that would exclude classes within a block)?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,67,2015-12-07 22:37:12,11.42,,,1,"b'b\' @soc Yeah that\\\'s the jQuery script i.e. one that hasn\\\'t been modified.The ""duplicate"" entries also appear in the upstream of the scala repository however", not in the nightly build. Can someone answer why this is?This class also appears in the upstream version so someone else is gonna have to take the heat for that one.Thanks," will get right on this one! If you have time I would really suggest checking out my branch and running ""ant docs"" to see if it\\\'s just the dropbox hosting that is messed up somehow.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,68,2015-12-07 22:37:12,11.17,,,1,"b'b\' @nafg Great suggestion! This is something along the lines of what we\\\'re looking to implement. But it will be done in a different PR :)See @heathermiller\\\'s comment about ""top level entities"" \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,69,2015-12-07 22:37:12,63.78,,1,,b'b\' @soc\\\'s and @heathermiller\\\'s input from yesterday  evening is now live here: url  It\\\'s still uploading," so some entities might give you a dropbox-404. EDIT: found a bug with ""Hide All"" / ""Show All"" in the function filter section", fixed it and pushed changes. The dropbox is not up to date with this fix.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,70,2015-12-07 22:37:12,1160.5,,,1,"b'b"" I am using chrome version 47",and![image]url and you see,"it clasp with the  after click it\'s ok![image]url  how about make the  be a switch and align side with the  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,71,2015-12-07 22:37:12,317.03,,1,,"b'b"" @hepin1989 that\'s one alternative"," it might be messy to detect the scrollbar and move the button if it  be better to place it up top somewhere. I\'ll look at it tonight!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,72,2015-12-07 22:37:12,15.43,,1,,"b""b' @soc are the letters in the index centered for you now? url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,73,2015-12-07 22:37:12,31.55,1,,,"b""b' Issue #2 that I mentioned above is still present :/ '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,74,2015-12-07 22:37:12,30.6,,1,,"b""b' @heathermiller fixed? Uploaded a new version of the script to the dropbox'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,75,2015-12-07 22:37:12,83.52,,,1,"b'b"" Sort of. Yes on the scrolling issue on page load (thank you!)", but there\'s still a scrolling issue when you click a permalink on an already-loaded page. Two tiny tweaks:1. Issue: when I click the permalink (without reloading the page) it scrolls up and is under the top bar. 2. When a permalink is clicked (or reloaded) rather than this  out, can we just have the background change to a solid color so it\'s easy to see which member is permalinked to? E.g., why not reuse #c2d2dc? We already use it as a way to highlight members :) Here\'s a gif to show what I mean... First I click the permalink to show the scroller scrolling too high on an already-loaded page, and then I load a page from the permalink (here it works, but the fade is too light, I don\'t visually find the member I\'m permalinked to," a more distinct color would help here). ![screencast4]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,76,2015-12-07 22:37:12,79.78,,,1,"b'b"" @heathermiller: thanks for the help", think I fixed it now please verify on the dropbox. EDIT: Hmm," firefox seems to be able to handle it but chrome blocks access from iframe... I\'ll get back to you once I fix it for chrome""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,77,2015-12-07 22:37:12,8.23,,1,,"b""b' @heathermiller fixed'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,78,2015-12-07 22:37:12,0.28,,,1,"b""b' AMAZING! It looks great!! I gotta say"," this is really perfect! Such an awesome job @felixmulder \\xe2\\x80\\x93 THANK YOUx10^6!!! LGTM :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,79,2015-12-07 22:37:12,3.83,,,1,"b'b\' Allright so we\\\'ve gotta fix three things before this can be merged (if there are no more issues)Making ""Filter functions"" look editable""Fixing"" the offset of the ""Fold All"" button on browsers with scrollbars (i.e. non OS X)Squishing the history Any further input? PS thanks for the kind words :smile_cat: \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,80,2015-12-07 22:37:12,9.22,,1,,"b'b\' For ""making filter functions look editable"" what about something like this? ![fullsizerender]url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,81,2015-12-07 22:37:12,4.68,,,1,"b""b' Or we could also do something like the permalink", where an icon appears on hover over? Slack has a similar thing," for example: ![screencast5]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,82,2015-12-07 22:37:12,44.82,,1,,"b'b"" I like it. Sounds like we can combine the two"," I\'ll get back to you once I\'ve done something about the two remaining issues.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,83,2015-12-07 22:37:12,280.15,,,1,"b""b' Confirmed that 9554c1e also works on OS X (retina). One last (known) issue to go! Woop woop!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,84,2015-12-07 22:37:12,1045.05,,1,,"b'b"" I\'ve fixed everything I could think of and posted the changes (not uploading the entire thing again) on dropbox: url  If there are no more issues I feel done with this PR @heathermiller  EDIT: to clarify"," I\'ve only re-upped the files that have changed between versions. It took 2 hours to upload everything the first time...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,85,2015-12-07 22:37:12,19.63,,,1,"b""b' @felixmulder thank you for the great work",the new version I could not find the  ,"is that by design? ![image]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,86,2015-12-07 22:37:12,5.32,,,1,"b'b"" @hepin1989 it hasn\'t been removed but when generating the docs with the script did complain about the diagram failing to generate. This has nothing to do with the changes", however, it might be good to generate them to see that they are compatible with the new theme. I\'ll look into it ASAP. ~~@VladUreche any ideas why the type hierarchy might fail to generate?~~ Fixed it," installed graphviz. Images generated look the same as @hepin1989\'s screenshot. I suggest that someone fix the styling of these graphs in a separate PR that amends the graph generation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,87,2015-12-07 22:37:12,15.97,,,1,"b""b' @felixmulder thanks ",and how about hide this when the filter input is empty ?![image]url  and how about add the same apperance to the top left one?![image]url  another improvement I think how about add directly jump from the to the method defined in the source code? like tag in elixir docurl ![image]url  when you click it ,"it directly jump to the method definition in the source code. I think that should be very very helpful.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,88,2015-12-07 22:37:12,61.38,,,1,"b'b\' @hepin1989 added your suggestion regarding the ""x"". I will not", however add the direct jump thing it is a good suggestion. But for now, and for this PR, I\\\'m satisfied with having the source available at the top of the page. Plus, we\\\'d have to rethink the permalink thing. Maybe this is something you could do in a later PR?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,89,2015-12-07 22:37:12,91.12,,,1,b'b\' @felixmulder It looks good! One problem though, in my sketch above," I renamed ""Filter functions"" to ""Filter members"". ""Functions"" isn\\\'t quite correct terminology here since a member can be a type alias", a field, a method, etc. So can you please update it so as to correct the terminology? Otherwise this LGTM.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,90,2015-12-07 22:37:12,0.73,,1,,"b'b\' You could also write ""Filter for fields", methods, type aliases," etc"" if you feel it is more clear. I just object a bit to the use of ""functions"" here.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,91,2015-12-07 22:37:12,3.77,,1,,"b'b\' @heathermiller how about ""Filter members"," values etc"" ?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,92,2015-12-07 22:37:12,11.47,,,1,"b'b"" @felixmulder the in elixir\'s doc is on the left side",and only appear once your mouse hover.I think this PR is bigger enough just as you said. The direct jump link is a good addition too,"but maybe a separate ticket then.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,93,2015-12-07 22:37:12,4.05,,1,,b'b\' Well," a value is a _kind_ of member. So I\\\'d either say just ""members"" or I\\\'d list what a member is", e.g.,"methods, values, type aliases, etc"" rather than mixing the definition with the term itself if you know what I mean\''
scala	4877	closed	94	SethTisue	2015-12-07 22:37:12	1.1		+1		b'b\' ""Filter members"" seems accurate to me\''
scala	4877	closed	95	felixmulder	2015-12-07 22:37:12	7.02		+1		b'b\' @SethTisue @heathermiller ""Filter members"" it is :+1: \''
scala	4877	closed	96	felixmulder	2015-12-07 22:37:12	301.53		+1		b""b' Fixed the placeholder ready for merge @heathermiller'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,97,2015-12-07 22:37:12,1029.78,,,1,"b""b' Woohoo! LGTM!! THIS IS AMAZING! Thank you @felixmulder!!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,98,2015-12-07 22:37:12,25.4,,1,,"b'b"" I\'ve asked the compiler team if they have any issues with merging this (now that all the activity has settled down)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,99,2015-12-07 22:37:12,9.53,,1,,"b'b"" The changes are only template  so I would hope that they don\'t take issue...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,100,2015-12-07 22:37:12,292.98,,,1,b'b\' This is purely amazing.However, the font face is sometimes inconsistent: For monospace," sometimes it is a webfont ""Source Code Pro"""," and sometimes it\\\'s the default value ""monospace"" which will be rendered as Consolas or Menlo. There\\\'s also the problem with ""Lato"" vs ""sans"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,101,2015-12-07 22:37:12,42.62,1,,,b'b\' re @ctongfei:The Lato typeface is used for the left bar entities only," this is as intended. Open Sans is used for bread text.I want to clarify one thing regarding the ""webfont"": the ""Source Code Pro"" typeface you are referring to is an open source typeface that is freely available and included in the project as an asset. Specifically I want to make clear that there are no loading of remote resources in the docs. There might be some confusion here since Google does host the typeface on their font CDN.Source Code pro is used in the entity description ""&lt;pre&gt;"" (i.e. code snippets) sections exclusively. This is because  it looks horrendous when used inline", IMO. If you can find places where Source Code Pro should be used," but isn\\\'t please let me know where. Regarding the ""problem"" with ", you\\\'re going to have to be more specific, I don\\\'t understand what you mean.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,102,2015-12-07 22:37:12,1057.57,,1,,"b""b' I think the changes in this commit fix SI-9598 cc @janekdb '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,103,2015-12-07 22:37:12,10.27,,1,,"b""b' Also seems to remedy SI-9597 cc @janekdb '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,104,2015-12-07 22:37:12,464.2,,,1,b'b\' @felixmulder Thanks. Comments added in Jira. On a different issue," I am seeing a slow down on the ""Fold All""/""Unfold All"" behaviour. For the first seven clicks it\\\'s fast enough. On the eighth click I can sense a delay. By the time I get to the 15th click I\\\'ve counted off 30 seconds and Chrome has offered to kill the slow running script. Can you reproduce this?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,105,2015-12-07 22:37:12,12.1,1,,,"b'b"" Apologies if I\'ve not read a possible caveat about url  and what to expect of it. If I assume it\'s meant to be a fully working site then group headers will need some work. Group Headers Missing:url  Group Headers Present:url  When group headers are showing check the optional group description is looking as good as the reset of the page. Example", url  ![scaladoc-new-look-groupdesc]url  I can\'t find any uses of @groupdesc in the Standard Library so the example above is from  . Check on the group name display as well,"![scaladoc-new-look-group-labels]url  Are you generating with  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,106,2015-12-07 22:37:12,5.17,,1,,"b'b"" @janekdb confirmed the slowness of clicking  and fixed it. I\'ll push the fix momentarily. Regarding the missing file it is probably missing because my connection was poor when uploading the docs so I only uploaded about 80% of the files from the standard lib. I\'ll check on it!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,107,2015-12-07 22:37:12,30.42,1,,,"b""b' Fix for the sluggish  conundrum has been pushed in 94e7cce and is now live on: ~~url ~~ url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,108,2015-12-07 22:37:12,6.63,1,,,b'b\' ~~@janekdb regarding Group Headers," I\\\'m not sure what you mean. Both URLs you have supplied lead me to 404-sites. The dropbox one gives a dropbox-404 and the scala-lang one gives me a blank page saying ""Not Found"".~~ Thanks for the updated comment @janekdb. It looks like this currently:  Haven\\\'t seen this type of grouping before. There are some other minor annoyances with the ""experimental"" tag. I\\\'ll fix the formatting for groups and the experimental tag then commit.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,109,2015-12-07 22:37:12,31.97,,,1,"b""b'   Thanks for the input @janekdb is now styled according to the new look.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,110,2015-12-07 22:37:12,25.85,,1,,"b'b"" The complete docs are now available on dropbox. Since Janek found something in the reflect library on a hunch"," I think it\'s best if the entire build is made readily available. url url url url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,111,2015-12-07 22:37:12,8.77,,1,,"b'b\' FWIW it still says ""Filter functions"" On Mon", Dec 21, 2015 at 5:53 PM Felix Mulder notifications@wrote:\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,112,2015-12-07 22:37:12,32.3,,,1,b'b\' @felixmulder sorry for chiming in so late, I\\\'ve been flying under the radar to get some academic work done. The new layout looks awesome," and the colors are perfect! Thanks a lot for the extraordinary work you pulled off! There\\\'s are two little snags that I still see: **(1)** The missing ""abstract type"" icon: url  So", long story short, reflection uses a virtual class-like pattern: The problem is that is not visible to users, so unless we generate pages for abstract types such as  , there\\\'s no API visible. This is how we end up with a page for  : url  FYI, the way it\\\'s currently shown is: url  But it seems that currently these don\\\'t get a proper image at the top (and I\\\'d also like to double-check that they appear correctly in diagrams). For more information on the annotations that produce these pages," see [this presentation]url  Maybe an easy test case is: **(2)** The groups are shown very nicely but does it look as well if the group has a description? You can try it with: Below the ""foo"" group"," you should have the ""The foo-like methods ..."" text. Thanks!\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,113,2015-12-07 22:37:12,529.33,,,1,"b'b\' @nafg I was too lazy to regenerate the entire docs... so it _was_ fixed all along. I have now regenerated the docs and upped them to Dropbox. Should show you ""Filter members"" now instead. @VladUreche awesome feedback Vlad!1. I have added the abstract type icon: url 2. The example you suggested for groups: url  Regarding 2", I found a real-world example here: url  When it comes to the type hierarchies," I managed to get graphviz working as can be seen in the ""Annotations"" of the reflect API (URL above). As you can see", it looks the same as before. I think for this PR, it is good enough. I can fix it in a separate PR, after this one is merged. I don\\\'t, however, feel that I want to invest time into it if this won\\\'t be merged for some reason.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,114,2015-12-07 22:37:12,110.03,,,1,"b'b"" @felixmulder Thanks for this last batch of changes! I don\'t think there\'s any reason this patch wouldn\'t be merged"," it\'s an awesome addition to Scaladoc! Ping @-scala: speak now or forever hold your peace.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,115,2015-12-07 22:37:12,472.2,,,1,"b""b' Looks fantastic to me -thanks everyone!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,116,2015-12-07 22:37:12,3.67,1,,,"b'b"" @felixmulder"," can you please rebase on  ? I can\'t merge otherwise :cry:: ![screenshot from 2015-12-22 19 08 18]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,117,2015-12-07 22:37:12,108.57,,1,,"b""b' @VladUreche done :beers:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,118,2015-12-07 22:37:12,12.48,,,1,"b'b"" Great! Once all tests pass"," I\'m merging.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,closed,2015-12-22 20:59:48,301.93,12,60,48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,119,2015-12-07 22:37:12,51.32,,,1,"b""b' @felixmulder thank you for such a great contribution!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,120,2015-12-07 22:37:12,58.25,,,1,"b""b' Pop the champagne! Would like to thank everyone involved in this PR by either suggesting improvements or helping rid the new docs of bugs. A special thanks to: @heathermiller @VladUreche @janekdb @soc @hepin1989 @SethTisue  Excited to get to use this :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,121,2015-12-07 22:37:12,72.82,,,1,"b""b' WOOOO!! :clap: :beers: :tada: :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,122,2015-12-07 22:37:12,1207.38,,1,,"b'b"" We\'ll mention this prominently in the 2.12.0-M4 release notes. :santa: :christmas_tree: :beers: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,123,2015-12-07 22:37:12,1230.28,,1,,"b""b' Btw"," @SethTisue do you have any idea why the new look is not showing up in the [nightly]url  [builds]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,124,2015-12-07 22:37:12,1250.85,,,1,"b'b"" @VladUreche thanks for calling this to our attention. I\'ve opened url  on it. we\'ll fix"," but perhaps not before January.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,125,2015-12-07 22:37:12,1396.23,,1,,"b""b' Some feedback from Reddit: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,126,2015-12-07 22:37:12,119.73,,,1,"b""b' @MasseGuillaume Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,127,2015-12-07 22:37:12,722.33,,,1,b'b\' very," very cool!!! how about icons instead of ""hide"" and ""focus"" ?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,128,2015-12-07 22:37:12,819.2,,1,,"b""b' Awesome work. Sorry if this question has already been asked"," but will this be backported to 2.11.x?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,129,2015-12-07 22:37:12,871.15,1,,,"b'b"" @muuki88 Not sure", but I\'ll let @SethTisue comment on that One more issue," found in url  here\'s how the code box looks on my machine (Ubuntu 12.04 with Firefox 43.0): ![screenshot from 2015-12-30 11 38 50]url  The bottom scroll bar is redundant and shouldn\'t be shown.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,130,2015-12-07 22:37:12,1139.27,1,,,"b'b"" (not speaking for the whole Scala team on this", just my own take:) We only have [two more 2.11.x releases planned]url  one of which is imminent (and already late). And we don\'t do RCs on the 2.11.x series. Under the circumstances, I\'d be very uneasy about accepting a 2.11.x backport, since if problems are found, it might be a long time before fixes could be released. Once the new code has had many eyes on it and been proven and found stable in the 2.12 context," I think we could eventually reconsider.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,131,2015-12-07 22:37:12,1179.22,,,1,"b""b' @SethTisue In case you decide to backport nevertheless", please wait until #4888 is also merged," as it improves the readability on mobile devices!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,132,2015-12-07 22:37:12,96.88,,1,,"b""b' +1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,133,2015-12-07 22:37:12,181.47,,,1,"b'b"" For the record"," I think that @adriaanm and @SethTisue\'s sentiment is far too overly cautious in the context of a pure  facelift. I would agree with this sentiment for a change to actual  code. But I think it\'s a hands-down improvement to the readability and usability of Scaladoc. It makes the experience of viewing documentation so much markedly better that I can\'t see any sane reason to force it to sit on the 2.12 backburner for another 8 months (optimistic) to a year (likely).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,134,2015-12-07 22:37:12,317.12,,1,,"b""b' Is there any way to provide a fallback? Or to enable people to use it likean add-on? On Wed", Dec 30,2015," 6:12 PM Heather Miller notifications@wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,135,2015-12-07 22:37:12,649.45,,1,,"b'b\' @nafg: Subclassing ""HtmlFactory"" and changing the assets copied should do the trick. There\\\'d also need to be some parameter introduced to scaladoc to choose the subclass. Might be  it", but in essence that would work.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,136,2015-12-07 22:37:12,660.75,,,1,"b""b' It would be cool if it could be available in 2.11.8 with a way to switch incase there are bugs On Mon", Jan 4,2016," 1:59 AM Felix Mulder notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,137,2015-12-07 22:37:12,430.75,,,1,"b""b' @felixmulder how about add this ?![image]url I cut from hereurl '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,138,2015-12-07 22:37:12,436.07,,1,,"b'b"" @hepin1989 don\'t you think that\'s a bit more than aesthetics? Don\'t you think it should be a different pull request?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,139,2015-12-07 22:37:12,439.03,,1,,"b""b' @nafg I just want to reach to @felixmulder .and yes","it should be in another PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,140,2015-12-07 22:37:12,676.32,,1,,"b'b"" I\'m currently in Tokyo on vacation. If you\'re interested. I have been working on search"," you can preview it here (will create a PR next week most likely): url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,141,2015-12-07 22:37:12,676.98,,1,,"b""b' Please note that I have not investigated mobile functionality and that it is a WIP.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4877,closed,-,-,-,14,71,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,opened,2016-01-07 04:27:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,title,2016-01-07 04:27:59,00:00,,1,,"b""b' Use invokedynamic for structural calls", symbol literals," lambda ser.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,body,2016-01-07 04:27:59,00:00,,,1,"b'b"" The previous encodings created static fields in the enclosing classto host caches. However", this isn\'t an option once emit code in defaultmethods of interfaces, as Java interfaces don\'t allow static fields. Luckily, we can emulate a static field by using invokedynamic: whenthe call site is linked, our bootstrap methid can perform one-timecomputation, and we can capture the result in the CallSite. Review by @lrytz.  I can\'t remember why I needed to change  , but I know that the ugliness there is a symptom of a somewhat ad-hoc representation of indy calls in our trees. Ideally, we\'d be able to come up with something general purpose, so that a macro author could emit an arbitrary indy call," without needing special cases in the backend for each bootstrap method.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,1,2016-01-07 04:27:59,475.77,,1,,"b""b' Java does allow fields in interfaces:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,2,2016-01-07 04:27:59,1116.77,,,1,"b'b"" Oh", good to know. I\'ll keep that in mind as an option (we can simulate a non final field, where needed, with a mutable box). I think there is an argument that the approach still has some merit," as it exposes fewer implementation details as public static fields.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,3,2016-01-07 04:27:59,1.45,,1,,"b""b' I think it is also worthwhile to push forward to support generally in the backend"," as we can use macros to expose it through to the user level.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,4,2016-01-07 04:27:59,20.83,,1,,"b'b"" Just pointing out that exposing at the user level would be a JVM-only feature. I\'m pretty sure there\'s no way to implement such a thing in "," although I\'m not very familiar with the details of  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,5,2016-01-07 04:27:59,1232.27,,1,,"b'b"" Removing the hack in led to a test failure in  . Turns out that this was related to a problem under multi-run compilation. I\'d cached the for bootstrap methods in a place in the backend that meant that on a subsequent compilation run", emitting the boostrap method reference didn\'t populate the from a compiler  . Just before writing the classfile to disk, the backend then attempted to load the class bytes from the compiler classpath instead to determine if it is a nested class. Under the toolbox global, however, we can\'t (in general) get to classfiles this way," so we hit an assertion failure. I\'ve pushed an updated version of this PR that moves the lazy vals into the part of the backend that is created for each  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,6,2016-01-07 04:27:59,181.77,,1,,"b'b"" I\'ve pushed another version with the generalization I talked about before. See the new test for an example of a use case that can be solved with this facility.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,7,2016-01-07 04:27:59,1262.33,,1,,"b'b"" I\'ll bring this PR back soon.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,closed,2016-01-15 03:59:10,1411.18,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,reopened,2016-01-15 05:29:44,90.57,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,8,2016-01-07 04:27:59,390.93,,,1,"b""b' LGTM! Very nice work! The generalization is great"," and trading in for in is also excellent.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,9,2016-01-07 04:27:59,1186.3,,1,,"b""b' Rebased.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,closed,2016-02-12 01:57:22,1227.63,0,8,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,10,2016-01-07 04:27:59,796.07,,1,,"b""b' @retronym should we tweak url  to reflect (no pun intended) this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,11,2016-01-07 04:27:59,805.55,,,1,"b'b"" I guess it\'s fine as is since we still ultimately call the method reflectively.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4896,closed,-,-,-,0,9,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,opened,2016-01-27 21:01:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,title,2016-01-27 21:01:08,00:00,,1,,"b""b' SI-9452: Extend BigDecimal with Ordered for java interop'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,1,2016-01-27 21:01:08,201.87,,1,,"b""b'   should be be changed as well.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,2,2016-01-27 21:01:08,139.88,,,1,"b""b' Thanks for the reminder retronym'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,closed,2016-01-28 03:00:11,359.05,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,reopened,2016-01-28 03:00:14,0.05,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,3,2016-01-27 21:01:08,1291.97,,1,,"b""b' review by @Ichoran '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,4,2016-01-27 21:01:08,75.18,,1,,"b'b"" Could you add a test that verifies that the Java interop works?  Normally we recommend using junit"," though in this case there aren\'t many Java tests to built off of in ().""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,5,2016-01-27 21:01:08,769.1,,1,,"b'b"" Well", I see plus a bunch more in (that are not JUnit," but I guess that\'s okay).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,6,2016-01-27 21:01:08,53.82,1,,,"b'b"" Or you could just write a Scala test and test isInstanceOf[[_]].  That\'d do also.  (It\'s not like there\'s any doubt that the trait\'s in there now"," but tests help prevent regressions.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,7,2016-01-27 21:01:08,108.57,,1,,"b'b"" I\'ll throw in the test for isInstanceOf[. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,8,2016-01-27 21:01:08,707.48,,,1,"b""b' LGTM Thanks Shane!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,closed,2016-02-10 20:40:09,1059.92,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4924,closed,-,-,-,1,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,opened,2016-02-03 12:10:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,title,2016-02-03 12:10:25,00:00,,1,,"b""b'  to 2.12.x 20160203 [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,body,2016-02-03 12:10:25,00:00,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,closed,2016-02-03 12:12:56,2.52,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,reopened,2016-02-03 12:12:58,0.03,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,1,2016-02-03 12:10:25,809.08,,1,,"b""b' Needed to merge 2.12.x onto this PR because of a new"," trivial conflict in  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,2,2016-02-03 12:10:25,0.92,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,3,2016-02-03 12:10:25,343.9,,1,,"b""b' Anything to review"," or all conflicts were easy to fix?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,4,2016-02-03 12:10:25,324.77,,1,,"b""b' Review of the end result of by @szeiger. Other conflicts were straightforward enough. There was a big typo-fixing commit that caused some trivial conflicts.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,5,2016-02-03 12:10:25,363.52,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,closed,2016-02-04 22:50:21,637.38,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4941,closed,-,-,-,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,opened,2016-02-10 02:38:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,title,2016-02-10 02:38:56,00:00,,1,,"b""b' Fix SBT tab completion of scala command'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,body,2016-02-10 02:38:56,00:00,,1,,"b'b""   (without a trailing script argument)wasn\'t allowed. Now it is. I also supported trailing whitespace on all commands.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,1,2016-02-10 02:38:56,0.83,,1,,"b""b' Review by @SethTisue '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,2,2016-02-10 02:38:56,548.7,,1,,"b""b' Found a bug"," will be back soon...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,closed,2016-02-11 11:48:28,549.53,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,reopened,2016-02-11 12:22:04,33.6,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,closed,2016-02-11 23:04:47,642.72,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,3,2016-02-10 02:38:56,676.85,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4956,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,opened,2016-02-10 03:01:00,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,title,2016-02-10 03:01:00,00:00,,1,,"b""b' Merge 2.11.x to 2.12.x [ci:last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,body,2016-02-10 03:01:00,00:00,,1,,"b'b"" Don\'t merge this until #4956 is merged"," as I\'ve includedits commit in here.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,1,2016-02-10 03:01:00,0.5,,1,,"b""b' Review by @SethTisue '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,2,2016-02-10 03:01:00,525.92,1,,,"b""b' Found a mistake in #4956"," will reopen soon.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,closed,2016-02-11 11:47:26,526.43,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,reopened,2016-02-11 12:23:22,35.93,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,3,2016-02-10 03:01:00,678.95,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,closed,2016-02-11 23:06:29,643.12,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4957,closed,-,-,-,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,opened,2016-02-25 11:46:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,title,2016-02-25 11:46:40,00:00,,1,,"b""b' Merge 2.11.x to 2.12.x [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,body,2016-02-25 11:46:40,00:00,,1,,"b""b'   Review by @lrytz or @SethTisue or @szeiger'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,closed,2016-02-25 11:48:10,1.5,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,reopened,2016-02-25 11:48:12,0.03,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,1,2016-02-25 11:46:40,105.45,,1,,"b'b"" the integrate-ide failure is unrelated (I\'ve reported it to the Scala IDE folks on Gitter)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,closed,2016-02-25 13:33:46,105.57,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,2,2016-02-25 11:46:40,1.85,,1,,"b""b' /nothingtoseehere'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,4996,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,opened,2016-04-11 19:27:59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,title,2016-04-11 19:27:59,00:00,,1,,"b""b' [Build] Include missing web assets in scaladoc'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,body,2016-04-11 19:27:59,00:00,,1,,"b""b' Running a Scala version that is built with sbt will fail when generating docs", since some required assets are not included in the packaged Scala artifacts. This PR adds the missing assets to the sbt build definition. cc @SethTisue," the changes are related to the sbt build '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,1,2016-04-11 19:27:59,1208.15,,1,,"b""b' could you re-submit this to 2.11.x? this way it will also make it into 2.12.x"," we merge forward regularly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,closed,2016-05-02 15:36:08,1208.15,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,reopened,2016-05-02 15:36:22,0.23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,2,2016-04-11 19:27:59,1270.02,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,3,2016-04-11 19:27:59,60.92,,1,,"b'b"" this needs a rebase to fix the merge conflict. @szeiger", is it that these files are new in 2.12 scaladoc," so it\'s not needed in 2.11?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,4,2016-04-11 19:27:59,106.68,,1,,"b""b' @lrytz I ported the original filter expressions over from ant in 2.11", so I would expect them to be accurate there," but @jodersky should be able to confirm why there are needed in 2.12.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,5,2016-04-11 19:27:59,257.38,,1,,"b""b' If you publish scala 2.12 with sbt", some assets are not included in the resulting jars and hence," scaladoc will fail.@lrytz I never checked if the issue is also present in Scala 2.11 just running some tests now'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,6,2016-04-11 19:27:59,18.82,,,1,"b'b"" Can\'t reproduce this on 2.11"," I assume the new assets were introduced for scaladoc 2.12 (which looks pretty cool btw :))""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,closed,2016-05-20 12:36:52,1260.5,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5093,closed,-,-,-,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,opened,2016-04-15 17:02:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,title,2016-04-15 17:02:16,00:00,,1,,"b""b' SI-2712 Add support for partial unification of type constructors'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,body,2016-04-15 17:02:16,00:00,,,1,"b'b"" An improvement to type inference for type constructors has been added", enabled by the command line option (also enabled in mode). This fixes [SI-2712]url  in the way suggested by Paul Chiusano in a [comment on the issue]url  This has many benefits for libraries, such as Cats and Scalaz, which make extensive use of higher-kinded types. With the feature enabled the following compiles, with the type variable solved as and the type variable solved as  . Previously the compiler would have rejected this programme because,The type parameter of is a type constructor with a single type parameter, also known as kind * -The provided type,  , which is a synonym for  , has an outer type constructor with two type parameters, or kind * -The type inference algorithm required that the kinds of type parameters and their corresponding type arguments must be the same. Partial unification solves this problem by treating outer type constructors at call sites as partially applied. In the example above, the compiler does the equivalent of creating a local type alias with the correct kind and using that at the call site,   has the same kind as the type argument of and so this compiles successfully. The implementation partially applies type constructors from left to right, leaving the rightmost type parameters free. This works well with binary type constructors with a natural right bias, such as  , in Cats and Scalaz\'s disjunction. For example a operation defined with the signature illustrated below will naturally map over the value of the righthand type, corresponding to validity, whilst leaving the value of the lefthand type untouched, An [article]url  by Daniel Spiewak expands on the consequences of this strategy. A major benefit of enabling this feature is that existing workarounds for SI-2712, such as shapeless\'s and Cats and Scalaz\'s and their suffixed operations are no longer necessary. This both simplifies code from the library implementor and users points of view," and also potentially reduces compile times by virtue of being implemented as a primitive component of type checking rather than being encoded via type level computation using implicits. Enabling this feature only affects type inference hence code compiled separately with the feature enabled and disabled is fully binary compatible. There is a compiler [plugin]url  which makes this feature available for Scala 2.11.x and 2.10.x.""'",,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,1,2016-04-15 17:02:16,8.95,,,1,"b'b"" +1 I think this would be really great to get in for 2.12 -given that it\'s off by default and fixes a longstanding known issue. Thanks for your hard work @milessabin!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,2,2016-04-15 17:02:16,13.67,,,1,"b'b"" There are no words to describe the kind of impact this would have on my daily use of Scala.  I know it\'s very late in the 2.12 cycle"," but I would love to see this make it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,3,2016-04-15 17:02:16,6.77,,1,,"b""b' Is there any way to know what impact enabling the flag has on existing code", e.g. running all the tests with the flag enabled? Or, indeed," on the community build.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,4,2016-04-15 17:02:16,1.95,,1,,"b'b"" @fommil The only problem I\'ve seen it cause thus far was compiling scalaz (found by @runarorama).  Specifically", it ran into some problems with type tags.  I\'m not sure if @milessabin fixed that particular bug or not," but that\'s literally the only problem I\'ve seen.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,5,2016-04-15 17:02:16,3.85,,1,,"b""b' Here is scalaz result. I can remove some :smiley: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,6,2016-04-15 17:02:16,0.75,,,1,"b""b' +1 a much awaited fix"," this would be great to have in 2.12'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,7,2016-04-15 17:02:16,8.98,,1,,"b""b' @djspiewak the bug that @runarorama found"," and a related one that @xuwei-k found are both fixed in this PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,8,2016-04-15 17:02:16,6.07,,,1,"b'b"" I\'m unreasonably excited about this! And if there is a chance to get this for 2.12 oh my!  What a start into the weekend.  Awesome work @milessabin ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,9,2016-04-15 17:02:16,2.65,1,,,"b'b"" This causes lots of pain and leads to lots of weird magic tricks in the source code of Scala libraries that are extremely off-putting to new contributors.I would be very happy to see this fixed in 2.12 so that I don\'t ever have to understand how these tricks work or try to explain them to anybody else.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,10,2016-04-15 17:02:16,17.28,,,1,"b'b"" So", I personally like this idea (I implemented something similar in [a branch of Dotty]url  a while ago, but didn\'t pursue it further because of a million more urgent things), but there\'s a bunch of questions that need to be answered to go down that road, for example: With off we get  , but with on we get  . Is this good or bad? I have no idea. However, this seems pretty bad: With off this works fine, but with on, it fails with: in other words, is inferred and not rejected," even though this does not conform to the declared bounds.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,11,2016-04-15 17:02:16,9.32,,,1,"b'b"" @smarter Ouch! I\'m assuming that it\'s trying first because of the order of the mix-ins? If extends do things work as expected?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,12,2016-04-15 17:02:16,2.92,,1,,"b""b' @non: Yup. You can play with it easily using the sbt project at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,13,2016-04-15 17:02:16,9.73,,,1,"b'b"" @smarter It seems like this may just be a generalization of a pre-existing problem in Scala: With this I get: This doesn\'t invalidate the point that there are some things that could stop type-checking. But I do think that it\'s consistent with the kinds of problems these constraints already have.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,14,2016-04-15 17:02:16,2.27,,1,,"b""b' Everyone on my team would very much like to see this in 2.12.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,15,2016-04-15 17:02:16,6.05,,,1,"b""b' :+1: This would greatly simplify a lot of scala code we have'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,16,2016-04-15 17:02:16,0.75,,,1,"b""b' \\xf0\\x9f\\x91\\x8d for this but have to agree with @djspiewak on a post explaining how things will work"," espcially in light of what @smarter has put up there.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,17,2016-04-15 17:02:16,0.18,,,1,"b'b"" @smarter The fact that this yields different results already tells us that we\'re in  territory here. I think changing behaviour is acceptable under these circumstances.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,18,2016-04-15 17:02:16,55.13,,1,,"b'b"" @djspiewak what\'s the effect on Emm?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,19,2016-04-15 17:02:16,12.68,,,1,"b'b"" @larsrh : changing behaviour is fine"," but I don\'t think this can be done blindly: you need to think carefully about what semantics you want.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,20,2016-04-15 17:02:16,12.67,,1,,"b""b' I get to delete about 90% of the boilerplate", with an exponential decrease in compile time due to the dramatically smaller search space.  I still need the type classes," but all of the rest can be implemented in a very straightforward manner.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,21,2016-04-15 17:02:16,44.97,,1,,"b'b"" I\'m sure that @milessabin would explain things far better than I"," but here\'s a quick write-up of how the fix works and what kind of implications it has for type constructor design: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,22,2016-04-15 17:02:16,6.73,,,1,"b""b' Big :+1: for inclusion in 2.12 ... this would make my life much happier.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,23,2016-04-15 17:02:16,1.47,,,1,"b""b' \\xf0\\x9f\\x91\\x8d thank you @milessabin '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,closed,2016-04-15 21:01:43,239.45,1,10,14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,reopened,2016-04-15 21:01:52,0.15,1,10,14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,24,2016-04-15 17:02:16,4.88,,,1,"b'b"" Cool! Happy to have this go into M5 under a switch. I\'m on vacation this week (hence the fat fingering on phone)"," but will take a look when I get back. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,25,2016-04-15 17:02:16,30.52,,1,,"b""b' This is also allowing me to remove a bunch of implicits for [ ]url  Since there is a backported version for Scala 2.11.8 (which is the one I tested)"," could this also make it to a Scala 2.11.9 version?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,26,2016-04-15 17:02:16,86.17,,1,,"b""b' another data point for you: ensime-server is green.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,27,2016-04-15 17:02:16,108.9,,1,,"b'b"" A bunch of others have already said this"," but many many \\xf0\\x9f\\x91\\x8d \'s from me for including in 2.12""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,28,2016-04-15 17:02:16,42.38,,1,,"b""b' 2.12 +1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,29,2016-04-15 17:02:16,61.63,,1,,"b""b' +1 on inclusion for 2.12+1 on backport to 2.11'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,30,2016-04-15 17:02:16,282.15,,1,,"b""b' Started a community build with  : url  Note that some failures are expected"," check the end of the log of the previous round url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,31,2016-04-15 17:02:16,10.67,,,1,"b""b' @lrytz I expect failures in libraries which have workarounds for SI-2712 (eg. Cats", Kittens, shapeless, Scalaz). The workarounds typically involve introducing additional implicit definitions with differently shaped signatures. With enabled these additional implicits will become ambiguous with the primary definitions. I think a sensible transition strategy for libraries which are affected by SI-2712 would be along the lines of,Move the additional workaround definitions to an optional module.Encourage client code to enable and drop the optional dependency....Profit! Note that because this change only affects type inference," code compiled with and without the flag enabled will be binary compatible in both directions.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,32,2016-04-15 17:02:16,174.92,,1,,"b""b' No issues compiling Rapture and all its hairy types with enabled. +1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,33,2016-04-15 17:02:16,61.02,1,,,"b'b"" Feels cool from me", too \\xe2\\x80\\x94 any corner-case regressions under a option shouldn\'t be a show-stopper. I _am_ a bit worried, though, because @smarter\'s examples shows an underlying fragility: this blindly copy-pastes what Haskell does in a setting, so we haven\'t a good, principled grasp on what happens on non-Haskell things (class hierarchies). Luckily, as long as the community only translates Haskell to Scala, rather than try exploiting Scala\'s additional power in this setting, this can\'t be a problem. This might still be a pain if people try new things (I thought extensible effects through mixins might run into the problem, but didn\'t manage to get a good case in few minutes: url  Re @smarter:Is this something which _could_ be fixed (by having type inference _try again_, with potential exponential cost)? Could it also be fixed easily," or is it the kind of change that is insanely hard due to accidental complexity? Potentially yes: backtracking during typechecking can require undoing changes to the mutable state of unification variables. But shouldn\'t this be much easier in Dotty?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,34,2016-04-15 17:02:16,59.1,,1,,"b'b"" @Blaisorblade Backtracking is fairly tough to reason about IMO (which leads to unpredictable performance and implementation complexity). How much of the enclosing tree needs to succeed before you commit to a solution? A common use case might be to typecheck up to the enclosing application of implicit arguments", if _that_ search works, then commit to choice we made in type constructor inference. tries to do this by moving the unification and subseqeunt implicit search into a single implicit search. Perhaps this points to an approach where you have a single solver for implicit search and type arg inference," but that\'s a long way away from scalac or dotc.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,35,2016-04-15 17:02:16,4.47,,1,,b'b\' We could of course try the higher order unification iff the current approach of peeling off type aliases and base types fails to find a solution. This would be more compatible with the existing behaviour," but wouldn\\\'t have a chance to save the day when we ""accidentally"" unify with some base type that the user didn\\\'t intend.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,36,2016-04-15 17:02:16,11.73,1,,,"b""b' Heres an example of code that will no longer infer (under  ):  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,37,2016-04-15 17:02:16,23.0,,1,,"b""b' Probably worth adding a simple test case without the flag enabled to show that status quo is preserved.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,38,2016-04-15 17:02:16,1.53,,1,,"b""b' We try to keep our commit titles in the format  "," could you please rejig that when you next rebase?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,39,2016-04-15 17:02:16,4.27,,,1,"b'b"" @Blaisorblade:Well"," [@non\'s example]url  already works fine with dotty but fails in scalac (and I suspect [my example]url would work too if I ported my hk-unification branch to the latest dotty master). The logic is in [ ]url  and [ ]url  As far as I can tell there is no backtracking: we just look at all the base classes in order and stop at the first one that has the correct shape and respects the constraints.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,40,2016-04-15 17:02:16,11.7,,,1,b'b\' @smarter Interesting! I wonder whether the failure to check bounds conformance during scalac\\\'s existing type constructor inference is an oversight or intentional. @adriaanm Thoughts? Bounds conformance checking is subtle, we don\\\'t report a bounds error in until refchecks in order to avoid cycles that can be induced by forcing the info of in order to typecheck  . (It also is unacceptable to conditionally check bounds during typer if happens to be forced already, as this leads to unstable typechecking results depending on compilation order). IIRC, F-Bounded generics tend to throw up the troublesome cases. However, we do use bound conformance during overload selection," which is somewhat analagous to picking the ""best"" base type that unifies.  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,41,2016-04-15 17:02:16,125.65,,1,,"b""b' How would the syntax look for when want to partially apply some other way than left to right", such as the general case with Scalactic Or or, for example," if you wanted a Functor on the error type of Cats Xor?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,42,2016-04-15 17:02:16,144.8,,1,,b'b\' Neither case works, which is something I touch on in my gist.  The inference is strictly right-biased.  In theory, there should be some tricks you can perform with permutation.  For example: url I haven\\\'t quite figured out how to use the typeclass to make work yet though, but it\\\'s worth a thought.  At the very, _very_ least, it will require extra syntax in the method declaration (e.g. like  ) to get the inference to run backwards.  At that point, you may as well just use  . So in other words, tricks (and things in the same family) are still applicable," but but only for cases where you\\\'re trying to run the biasing ""backwards"".  In general", the solution here is to right-bias your type constructors.  Just as with right-biasing the inferred types in a function parameter block, or currying higher-order parameters to the right, this is just an area where the compiler is going to give you a better experience (i.e. better inference) if you do things one way rather than another.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,43,2016-04-15 17:02:16,3.55,,,1,"b'b"" @djspiewak Hmm"," could you at least use a type lambda to get the compiler to go a different direction? In other words I think you\'d want to be able at the call site to say you want a different partial application than the blessed one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,44,2016-04-15 17:02:16,6.23,,,1,"b'b"" As a theory", it seems sort of plausible.  Technically, the typeclass is doing exactly that, except it\'s generating all possible type lambdas and picking the right one automatically.  But I can\'t figure out how to actually make it apply to this situation.  Specifically: What kind of implicit magic or type lambda-ry would you add there to make the inference work?  Clearly it has to be at the declaration site, but the declaration site doesn\'t know that the call site has a two-argument type constructor!  This is\\xe2\\x80\\xa6 basically the whole essence of SI-2712.  You can use the old workaround: That certainly infers, and you can generalize the workaround a bit with  : In this particular case, permuting is sort of pointless because we aren\'t resolving anything else, but you could imagine if we needed to find a instance for  : So that all works and it\'s lovely and what not, but it\'s not the same as making Miles\'s fix work for left-biased constructors.  In fact, all of the above stuff works _today_ without the fix. In theory, it should be possible to use implicit search to munge around and repermute type constructors so that inference works in the opposite direction," but I haven\'t figured out how to do it yet.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,45,2016-04-15 17:02:16,2.9,,1,,"b'b"" Oh", one of the other things to think about is that type lambdas in and of themselves don\'t really affect the unification, which is where Miles\'s code resides.  Everything is dealiased.  This is why SI-2712 is such a huge problem to begin with, since you cannot partially apply a type constructor using a type alias (or equivalently," a type lambda).  Everything the compiler does is in terms of base types (i.e. or  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,46,2016-04-15 17:02:16,22.65,,1,,"b""b' Sorry for the spam everyone. BUT\\xe2\\x80\\xa6 @bvenners It occurs to me that if you define to be a type alias on a right-biased implementation", while and similarly become objects with extractors and constrictors, you can have all of the existing syntax work and the inference will love you. The only thing you lose is the type errors will most often refer to the underlying implementation type, and not specifically (as is the case with any type alias). But that might be the best approach for Scalactic and similar cases (it is, not coincidentally," the exact same approach used in Haskell to address this scenario).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,47,2016-04-15 17:02:16,31.75,,1,,"b""b' @djspiewak Actually I meant this: (In 3.0 Good gave up its extra type parameter for the Bad type", so it already fits F[_], so it needs to be an Or type.) I.e., I mean being explicit about the partial application at the call site rather than letting it be inferred at the call site.  Would that work, and if so, I think that means that for non-left to right types," the syntax would look the same as today. Is my surmise correct?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,48,2016-04-15 17:02:16,113.0,,1,,"b""b' Being explicit about the partial application absolutely works"," both now and after the change. This is more of an inference thing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,49,2016-04-15 17:02:16,459.45,,,1,b'b\' @djspiewak Ok, I think I get the picture. This PR is more a language enhancement than a bug fix. It doesn\\xe2\\x80\\x99t change the syntax of Scala, but does definitely modify the semantics. If the language is to change, then I wonder if we could consider a syntax change. What if designers could specify at the declaration site whether automatic partial type application happens left to right, right to left, or not at all? The latter,"not at all,"" one I include because I wonder if some compound types really aren\\xe2\\x80\\x99t intended to be partially applied, such that doing it automatically and universally might mask bugs. The other two options would allow types to be designed using whatever order makes sense to the designer. It also I think might fit Scala a bit more since type parameters in Scala aren\\xe2\\x80\\x99t actually curried, so there isn\\xe2\\x80\\x99t really a ""natural order"" for automatic partial application.\''
scala	5102	closed	50	retronym	2016-04-15 17:02:16	12.47	+1			b""b' @djspiewak Perhaps I misunderstand your point, but unification [does consider aliases]url  before [looking at base types]url '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,51,2016-04-15 17:02:16,261.23,1,,,"b""b' @retronym perhaps I misunderstood it too with the result that @djspiewak got angry and yelled at me :D url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,52,2016-04-15 17:02:16,92.15,1,,,"b'b"" @bvenners Scalactic\'s is unaffected by this change ... both in the sense of not getting worse", and also in the sense of not getting better. I\'m sympathetic to your choice of left bias for  , but I think that\'s a special case and left-to-right is more generally applicable. I also think that a simple left-to-right rule is easier to explain because it\'s consistent with Scala\'s other left-to-right rules (for dependent method types, implicit solving," etc.).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,53,2016-04-15 17:02:16,846.77,,1,,"b'b"" I wouldn\'t say that Or would be unaffected by this change", because it would render Or a second-class design in Scala. For example, imagine I submitted a PR to Scala 2.12 that did the same thing but right to left, I\'m not sure you\\xe2\\x80\\x99d feel Cats Xor and scalaz \\\\/ is unaffected by the change. But I wouldn\'t do that, because 1) I don\'t have time! 2) I am sure right to left is not always the best order either. On the other hand, I agree a left-to-right rule is simpler than one in which it can be L2R, R2L, or neither. However I\\xe2\\x80\\x99d point out that if this PR is rejected and the language left as is, that would be simpler still, because Scala would have one less feature. In design I always try very hard to keep things as simple and small as possible. Nevertheless, I observe complexity and surface area creeping in over time. One reason is that finding a simple design is difficult. But the main reason is that people actually want more complexity if it solves their problem. They want things as simple as possible, but not so simple that it makes their lives more complicated. Moreover, there is precedent in the language for something like what I\\xe2\\x80\\x99m suggesting. For example Scala has a rule that if a symbolic method name ends in a colon it is right associative, otherwise it is left associative. This enables DSL\\xe2\\x80\\x99s to be designed that read nicely. Here are some left-to-right DSL examples: Whereas constructing a list with :: is an example of a right-to-left DSL: I consider the :: expression a DSL because it makes it look like the head of the list is to the left, and that makes sense at least for people who read text from left to right. If Scala didn\\xe2\\x80\\x99t have the extra rewrite rule that symbolic operators that end in a colon used in infix notation associate to the right, we\\xe2\\x80\\x99d need to write: Scalactic Or is a \\xe2\\x80\\x9ctype DSL\\xe2\\x80\\x9d. For example: I consider this a DSL because when read left to right, it says the result of a method is: \\xe2\\x80\\x9cInt, or if something goes wrong, an ErrorMessage string.\\xe2\\x80\\x9d It isn\\xe2\\x80\\x99t for everyone, but it makes sense to a lot of people, and that\\xe2\\x80\\x99s why they choose it over other alternatives. That said, I wouldn\'t want to make this about Or specifically, but more generally, I think it would be better to not force designers of Scala types to pick an order for type parameters based on a left-to-right or a right-to-left order. Although I think it does make sense in Haskell, because everything really is curried, it does strongly encourage designers of Haskell types to pick the order of type parameters based on how they want them to partially applied left to right. In exchange you get a simpler language. I feel it might be worth it to add a touch more complexity to remove that constraint on designers in Scala.  A related question that I asked previously is does it ever make sense to _not_ automatically partially apply types. At the value level Scala by default does not automatically partially apply because it would mask bugs. Is that true that the type level? (The reason I ask, is I don\\xe2\\x80\\x99t know the answer. I\'m curious if someone has examples where automatic partial application would be the wrong thing to do.) If so, then maybe whether or not a type enjoys automatic partial application should off by default, with the ability to opt in when it makes sense. For context, I believe Martin wrote this clause in PinS: Scala\\xe2\\x80\\x99s syntax for partially applied functions highlights a difference in the design trade-offs of Scala and classical functional languages, such as Haskell or ML. In these languages, partially applied functions are considered the normal case. Furthermore, these languages have a fairly strict static type system that will usually highlight every error with partial applications that you can make. Scala bears a much closer relation to imperative languages, such as Java, where a method that\\xe2\\x80\\x99s not applied to all its arguments is considered an error. \\xe2\\x80\\xa6 Scala normally requires you to specify function arguments that are left out explicitly, even if the indication is as simple as a \\xe2\\x80\\x98_\\xe2\\x80\\x99. Scala allows you to leave off even the _ only when a function type is expected.  So at the value level," sometimes it is automatic: (println) springs to mind. But usually it is not automatic and some code has to be written to make partial application happen.""'",,,,,,,,
scala,5102,closed,54,2016-04-15 17:02:16,133.48,,1,,b'b\' It is probably worth  that partial application here is limited to inferred type arguments. When explicitly writing type arguments," one still needs to use a type alias (perhaps wrapped in a ""type lambda"") to express the partially applied type constructor:  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,55,2016-04-15 17:02:16,277.17,,1,,"b'b"" @bvenners would a declaration site annotation switching behaviour to right to left order address your issues? I\'ll put together a prototype on the 2.11.8 backport branch for you to experiment with.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,56,2016-04-15 17:02:16,7.83,,,1,"b'b"" @retronym that\'s an interesting observation"," but it\'s not clear to me where you could reasonably expect the captured type argument (  in your example) to come from in this case. Where the type is inferred from the fully applied type constructor there\'s a clear and explicable provenance for the  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,57,2016-04-15 17:02:16,0.8,,1,,"b'b\' @retronym do I need to rebase to make that failed ""combined"" go away?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,58,2016-04-15 17:02:16,55.5,,1,,"b""b' @milessabin Yes"," some way to indicate a type prefers right to left partial application would address the need. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,59,2016-04-15 17:02:16,89.27,,1,,"b""b' I have done three runs of this using a local community build", as per url [no Yhigher-order-unification]url [with -Yhigher-order-unification," not in scalaz]url [with -Yhigher-order-unification]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,60,2016-04-15 17:02:16,157.72,,1,,"b'b"" I\'ve just added an annotation to support @bvenners scenario. Usage can be seen [here]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,61,2016-04-15 17:02:16,16.2,,1,,"b'b"" The TL;DR of @InTheNow\'s comment is that with enabled for everything but Scalaz we match the results of the community build without my patch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,62,2016-04-15 17:02:16,279.72,1,,,b'b\' @milessabin Thanks very much for considering my proposal. Sorry it adds complexity. Perhaps it won\\\'t survive," but it will be good to experiment with. I will try this tonight. Quick thought. I wonder if this notion could be called ""bias"," such that the annotation would be @leftBiased. If a type was left biased it would partially apply from the right to the left.  I also have the vague feeling that a bias notion in Scala is more a tri-state, like variance, which can not only be covariant or contravariant, but also invariant. Scalactic Or is left biased. Scalaz \\\\/ and Cats Xor is right biased. The Monad transformers in scalaz are right biased, etc. But what about Tuple6? Does that have a bias at all? For that matter, does Either really have a right bias? I don\\\'t think it does, so maybe automatically partially applying it as if it were right biased would mask bugs. I do agree left bias should not be the default. It makes more sense that either right bias is the default or unbiased is the default (I.e., Either[RightBiased, UnBiased] is the default). Anyway, thanks again for adding the annotation. I look forward to trying to tonight\''
scala	5102	closed	63	milessabin	2016-04-15 17:02:16	9.87		+1		b'b"" I\'m seeing the following failure in the CI build, but not locally, Any suggestions?""'
scala	5102	closed	64	milessabin	2016-04-15 17:02:16	4.47		+1		b""b' @bvenners works well too. I think that all the constructs which are closely related are left to right, eg. solution order of implicit arguments; use of dependent method types in parameter lists to the right and suchlike.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,65,2016-04-15 17:02:16,0.47,,,1,"b'b"" Regarding automatic right bias for Either or Tuple6 masking bugs: that does have prior art in Haskell without ill effects", so this should be fine. What we know is controversial there would be something else, that in Haskell is argued by some to be a necessary consequence, though far removed from this and only sensible for  and the like) \\xe2\\x80\\x94 the corresponding Functor and especially Foldable instances being available by default, leading to (1,2, 3).length == 1. But that is _not_ a necessary consequence for Scala, I believe (and arguably even for Haskell)," so we needn\'t discuss this here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,66,2016-04-15 17:02:16,11.6,,1,,"b'b"" For the test failure", let\'s try a rebuild. While at it," you could also squash all the intermediate commits (the ones from April 17 in url  that didn\'t pass into a single one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,67,2016-04-15 17:02:16,1.77,,1,,"b""b' Will do.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,68,2016-04-15 17:02:16,122.47,,1,,"b'b"" @Blaisorblade Perhaps the reason bugs are not often masked is that after partial application", the next thing that usually happens is a typeclass instance is searched for. If the partial application didn\'t make sense, most likely the typeclass instance isn\'t going to be there, so you get a compiler error that way. Does that sound plausible? I\'m not familiar enough with Haskell to follow your (1,2," 3).length == 1 example. Can you elaborate? I\'d like to understand how that happens.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,69,2016-04-15 17:02:16,40.38,,1,,b'b\' Assume that is a type class which essentially states that a type constructor is isomorphic to lists plus some additional structure (spine). You can easily define on that, because you can just convert to the list and, well, count the elements. The way Haskell works the only possible (but not necessarily plausible \\xe2\\x80\\x93 this is disputed) way to define a  ,  ," \\xe2\\x80\\xa6 for tuples is to treat the first n 1 elements as fixed and the last one as the ""thing"". So  ", hence  .\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,70,2016-04-15 17:02:16,271.1,,1,,b'b\' The variance and bounds of the synthetic type param come from the class type parameter from which it was cloned. However," these can contain abstract types which need to be substituted with an ""as seen from"" based on the prefix  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,71,2016-04-15 17:02:16,180.2,,,1,"b'b"" @milessabin I\'ve suggested an improvement to use bounds of the higher kinded type var as a means to filter out candidates url  This improves compatibility (we can shuffle Maps under  )", and also improves inference for existing type constructor inference," for the cases the @smarter / @non discussed [above]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,72,2016-04-15 17:02:16,138.65,,,1,"b'b"" @retronym thanks ... I\'ve merged that just now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,73,2016-04-15 17:02:16,142.17,,,1,"b'b"" Could you add @smarter\'s test case? Two neg tests with the exact same source file", once with a flags file," once without:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,74,2016-04-15 17:02:16,19.68,,1,,"b""b' @lrytz done.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,75,2016-04-15 17:02:16,12.92,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,76,2016-04-15 17:02:16,248.05,,,1,"b""b' The three positive tests which are failing now appear to be doing so as a consequence of the PR from @retronym ... are these now expected failures?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,77,2016-04-15 17:02:16,1050.02,,1,,"b'b"" @milessabin I\'ve taken a quick look at those failures. I\'ve managed to fix two"," but I\'m still figuring out the third. Will share an analysis soon.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,78,2016-04-15 17:02:16,8.88,,,1,"b""b' @retronym thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,79,2016-04-15 17:02:16,1280.98,1,,,"b'b"" I haven\'t had time to finish this analysis yet. But I wanted to make a note of the connection between the bounds checking I have proposed to curtail unifications that will ultimately fail with a similar change I tried in implicit search: url  / url  Some notes on the failures:one of them happens when running the new bounds check when unifying  ", ie a case where there are two  s based on the same HK type param. I added a guard against related problems in 1cf1bae75db5f178026f6602e9a062484fa73a86, we can make these tests pass in the PR by changing to detect if and then unifying as a no-op (don\'t check bounds).the other one is a bit of a tougher nut to crack. Sorry about the slowness here, but I think it is worthwhile to push this aspect of inference forward both to cleanup the area before adding the new feature," and to improve the compatiblity story of this new feature.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,80,2016-04-15 17:02:16,255.65,,,1,"b'b"" @retronym thanks for the update ... please let me know if there\'s anything I can do to help move this along. I\'d also be keen to see progress on SI-8545 :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,81,2016-04-15 17:02:16,742.67,,,1,"b'b"" Is there a nice migration strategy for library types that currently define a custom in their companion? (I\'m thinking specifically in the context of paperdoll: url  I\'d rather not move the to somewhere it would need to be explicitly imported). (Thinking about it this may have been an unsupported use case for all along)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,82,2016-04-15 17:02:16,97.12,,1,,"b'b"" @m50d I haven\'t tried it", but in theory," moving the non-one-parameter cases to a super type (i.e. LowPriority) would resolve the ambiguity while still supporting versions of Scala which lack the fix.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,83,2016-04-15 17:02:16,441.75,,1,,"b'b"" @djspiewak that only works if the place where the other is defined extends the place where that one is defined", no? So that could be done in ScalaZ itself, but my companion object can\'t extend the ScalaZ traits (they\'re sealed)," and ScalaZ of course won\'t extend my traits.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,84,2016-04-15 17:02:16,423.07,,,1,"b'b"" @m50d Indeed", it does need to be done in .  Given that it\'s a backwards-compatible change, these projects should probably make releases with the change _now_ in preparation for the SI-2712 fix.  Well, actually validate first that the change does in fact resolve the ambiguity which Miles\'s fix introduces," and then make releases; don\'t just assume that my personal in-brain version of scalac is accurate!  :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,85,2016-04-15 17:02:16,58.22,,1,,"b""b' @m50d you could take a look at what @xuwei-k has done for [Scalaz]url  Several projects are now using the [compiler plugin version of this PR]url  ... you could do the same and experiment.[asobu]url [eff-cats]url [Kittens]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,86,2016-04-15 17:02:16,1316.13,,1,,"b""b' @retronym just pinging you with a repeat of my offer to help any way I can to make progress on the tougher nut ...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,87,2016-04-15 17:02:16,512.07,,,1,"b'b"" Hi there", I tried to skim thru the backlog to know if that one is a known regression or not, but while porting a library I had to put some explicit types to get it to compile:url  Is it expected to loose inference here? Thanks PS: To be clear I\'m totally happy to loose inference here compared to the huge benefits it bring," just checking if that\'s expected behavior.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,88,2016-04-15 17:02:16,896.97,,1,,"b'b"" @aloiscochard are you able to produce a minimal example which demonstrates the change? Looking at the [full commit]url  that this is part of"," would it be fair to say that you\'d be keen to have this change even if that type argument has to be made explicit?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,89,2016-04-15 17:02:16,557.27,,,1,"b'b"" @milessabin yes", as I said I\'m fine due to the big benefits given by the fix. That being said this bug seems genuine, I did try to isolate it, but as soon as I move the definition of the method it does compile. Which makes me believe there is no real reason for being explicit here. It feels like it is related to the separation of compilation units, I hope to isolate it," will try again an other time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,90,2016-04-15 17:02:16,1426.57,,,1,b'b\' Thanks for your patience, Miles! Let\\\'s try to get your work merged this week. I have two requests:do not introduce new classes (sadly, the annotation cannot go in -maybe there\\\'s another way, as suggested by @retronym, I believe, using type aliases to guide the direction of inference)do not introduce new flags -use instead Rationale for my second request: an experimental feature will not be experimental forever -the sooner we discover feature interactions," the betterhaving only one switch drives the quality of the individual experimental features up as a whole (""we\\\'re all in this together"")let\\\'s avoid cooking up a buffet of compiler flags: it confuses new users and risks fragmentation of the language\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,91,2016-04-15 17:02:16,126.75,1,,,"b""b' I trust the functionality change introduced by this PR; I have no idea what potentially broken  half-cooked features are in the bag and I worry that they could introduce bugs. I want to enable this functionality in my projects come 2.12 but if this change were lumped in with I (and I suspect others) would never use it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,92,2016-04-15 17:02:16,9.37,,,1,"b'b"" There\'s very little under -Xexperimental"," and if it turns out it\'s broken we\'ll fix it. You raise a good point: we should revise and document what -Xexperimental gives you these days.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,93,2016-04-15 17:02:16,3.22,1,,,"b'b"" To be precise: on 2.12 will unlock the following:this PRmore eager unification for existentials (grep for  ) We should remove the following from experimental flags", as they are not ready / not slated for a stable release (to be honest, I forgot that these were included under -I don\'t believe they should be):virtualized pattern matching (only relevant if you have a in scope)inference of method argument typesoverriding of objects and vars (maybe some day, but the implementation is not ready) PS: grep for  ,  , ," (the latter three are in  )""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,94,2016-04-15 17:02:16,6.57,,1,,"b'b"" This might also warrant a reevaluation of what\'s under then", it seems like if something has been experimental for four years and still causes issues," it should be removed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,95,2016-04-15 17:02:16,0.37,,,1,"b""b' agreed"," @smarter -that was my intention with my original comment'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,96,2016-04-15 17:02:16,7.82,,1,,"b'b"" I\'m on the fence about breaking builds by removing settings. I suggest we keep the options but make them no-ops (except for emitting a deprecation warning). Alternatively"," we can just remove them and hope we don\'t cause too much trouble :-)  Thoughts?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,97,2016-04-15 17:02:16,2.28,,1,,"b""b' Assess the damage via the community build? Could have the nice side-effect of giving more incentive for projects to get themselves into the community build..'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,98,2016-04-15 17:02:16,3.52,1,,,"b'b\' @adriaanm Eager unification for existentials sounds like the sort of thing that would change semantics in exactly the sort of code that would care about SI-2712 in the first place.  So I\\\'m\\xe2\\x80\\xa6 dubious about that. I\\\'m curious about the rationale for the ""no new types"" request.  Introducing an annotation to guide the inference doesn\\\'t seem terrible.  In fact", I would be in favor of introducing _two_ (one for right-biased," one for left-biased) and avoiding a ""preferred"" direction at all.  Is there something dire that happens with more introduced classes?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,99,2016-04-15 17:02:16,6.75,,,1,"b'b"" I suggest taking a look at the code for the improved inference for existentials -I don\'t think it\'ll interfere here. Adding annotations puts us over the complexity threshold in my opinion. I hope one day we\'ll come up with an elegant solution"," but adding more and more annotations that correlate so closely to the implementation of the inference algorithm cannot be it. As I said during the Scala Days Q&A I\'m happy to experiment with tweaks to the inference algorithm.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,100,2016-04-15 17:02:16,2.62,,1,,"b""b' So\\xe2\\x80\\xa6 we should have some sort of implicit that we import into scope then to guide the algorithm"," right?  ;-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,101,2016-04-15 17:02:16,1.22,,1,,"b'b"" Where\'s the \\xf0\\x9f\\x98\\xb1  reaction when you need it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,102,2016-04-15 17:02:16,590.0,,,1,"b'b"" I\'m comfortable with the idea of using if we\'re confident that the features that come with it either don\'t get in the way if not used", or if use is unavoidable (-Yinfer-argument-types?) that the implementation is serviceable. Alternatively could we have a single flag which defaults to all features on, but which allows named features to be turned ," similarly to how works?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,103,2016-04-15 17:02:16,12.5,,,1,"b'b"" @adriaanm on the annotation", I introduced that specifically to support @bvenners left-biased  . On balance I would prefer to keep it. I understand your concern about complexity, however, having spent quite a bit of time exploring alternative algorithms with @mandubian I\'m convinced that the simple minded, Haskell-inspired model is the right way to go, and that more sophisticated algorithms which might be able to accommodate both right and left bias without an annotation generate too many unpredictable and hard to understand results. I also think that a simple left-to-right vs. right-to-left switch at the definition site adds very little complexity both in the implementation and in terms of the cognitive load that it imposes on users of libraries. Library authors will have to understand the issue and make a choice, but if they\'re affected by this they will already have had to understand SI-2712 and made choices about how to accommodate that," so I don\'t think there\'s any significant burden here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,104,2016-04-15 17:02:16,14.57,1,,,"b'b"" @adriaanm I concur completely with @milessabin", I\'ve spent one week experimenting more complex algorithms of unifications to test current simple approach and dig into complex cases. All my studies have lead to dangerous edge-cases (as Miles can witness) where the compiler can\'t make a safe decision.The simple algorithm implemented by Miles appears to be the safer, most logical approach. it enables so many cases that were completely impossible before without introducing undecidable cases for the compiler.It also happens to be the same approach as Haskell. I\'m not a Haskell worshipper so I don\'t really care but this time I must say, this approach seems to be the most reasonable. Concerning the  , please keep it," it will be very useful to library creators.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,105,2016-04-15 17:02:16,47.78,1,,,"b'b"" @mandubian Did you try coming up with something", or did you try known algorithms (which ones)? In particular, did you try implementing, say, pattern unification as in Agda? Evidence against specific algorithms would be worthwhile.As I understand it, higher-order unification is usually agreed to be really hard to implement by itself, without needing to extend it to face subtyping or implementing it inside Scalac. (I\'d probably only try that implementing it in Dotty). I\'m aware of at least three alternative algorithms: Huet\'s algorithm (which nobody seems to use), the variant in Elf and Twelf, and pattern unification as used in Agda. I\'ve actually tried reading a bit on Twelf, but couldn\'t make head or tails of that quickly enough and couldn\'t justify the time investment; smart people I know confirmed the impression. Pattern unification (as used in Agda and now in ) has at least some good experience for it; using Agda in general feels not extremely predictable," but I strongly suspect the examples we handle would not be a problem for Agda (unless @mandubian and @milessabin confirmed otherwise). The best pointer might be Gundry\'s [tutorial implementation]url  and the code + thesis text for the core algorithm fits in <700 lines. (Caveat: I haven\'t actually studied this).url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,106,2016-04-15 17:02:16,11.13,1,,,"b'b"" @Blaisorblade the main way we convinced ourselves that the simple-minded algorithm was the way to go was by exhaustively enumerating the possible unifications for a variety of cases. Even for very simple cases we were unable to come up with simple rules (other than left to right or right to left) to select one of them which didn\'t immediately generate counterintuitive results with trivial changes in the relevant signatures. Given that we can use type aliases to guide inference where the simple rule isn\'t sufficient I\'m convinced that the simple rule is the best option overall. I think there\'s a reason that Haskell went this route and has stuck with it for so long.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,107,2016-04-15 17:02:16,12.02,1,,,"b'b"" @Blaisorblade I haven\'t tried any of those algorithms because my aim was to test current implementation with more complex cases and see if more complex implementations based on the same idea would be better or not. The main algorithm I\'ve tried is to recursively unify higher-kinded types in type args. So it digs into type tree structure and unifies from down to top. It\'s nice on paper but then you encounter lots of edge-cases in which you have to make a decision between cases and there are always 2/3 acceptable possibilities depending on what the developer expects. And when you choose one solution", it is more logical for some cases but you always find another not-so-logical case. Moreover, I fear you can make a choice that could lead to false unification which is not acceptable at all.The simple algorithm chosen by Miles (and Haskell) is naive but never fails in this way. It allows a lot more things without introducing any unexpected behavior or false unification. It just works as expected. If you need more than this," you have to use Type Aliases to lead unification where you want it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,108,2016-04-15 17:02:16,197.22,,1,,"b'b"" I echo @japgolly\'s concern about being the only way to pick up this change. We are already using a version of this change in production at Verizon via the [si2712fix-plugin]url  We understand that it\'s not a battle-tested change", but we also have confidence that if it results in issues they will most likely be related to type inference when compiling. We\'d be much more hesitant to use a blanket experimental flag which could potentially result in more serious runtime issues. I\'m all for documenting what exactly brings in and this being a part of it," but I\'d prefer for it to not be the _only_ way to pull in this change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,109,2016-04-15 17:02:16,39.2,1,,,"b'b"" @ceedubs I understand your concern", but the longer term problem is that we end up with a gazillion compiler flags that confuse users, fragment the language, and are hard to remove without breaking people\'s builds. We have a chance to prevent this now -going back later is going to be much harder. I clarified that I don\'t intend for unstable features to be enabled under -Xexperimental," which I hope should address your concern.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,110,2016-04-15 17:02:16,5.12,,,1,"b'b"" Thanks to everyone for sharing their insights on the various trade offs in terms of different algorithms. Would you agree this is starting to sound like a SIP discussion? My point is that we\'re crossing the threshold of a language change that can go in without a SIP (as evidenced by needing a lot of discussion).  I appreciate that a lot of thought has gone into picking this specific algorithm and perhaps configuring its direction is the way to go (although this has no precedent in Scala)", but I still hesitate to introduce an annotation that locks us in. If it\'s just a tweak to inference," it\'s something we can continue to tweak. An annotation never dies.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,111,2016-04-15 17:02:16,2.33,1,,,"b'b"" While we continue the discussion"," I propose reworking the PR to implement the non-controversial changes first:reduce the impact of -Xexperimental to something we\'re all confortable withintroduce the original minimal (one-directional) fix under -Xexperimentalrefine with annotation""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,112,2016-04-15 17:02:16,34.77,,1,,"b'b\' @adriaanm Can you clarify what you mean by ""refine with annotation"" in your last comment?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,113,2016-04-15 17:02:16,8.55,1,,,b'b\' @adriaanm Not trying to be overtly political here, but I\\\'m leery of diving into the SIP process simply because I\\\'ve never seen the SIP process produce anything productive.  I\\\'ve seen it take previously-productive work and slow it down massively before inclusion into the language (e.g. the futures work).  And I\\\'ve seen it take good ideas and bog them down in eternal process (e.g. the  / /  syntax change).  The only SIPs I\\\'ve ever seen make it through the process efficiently and without bureaucracy are changes like SIP-18, and we all know how well that has gone. Like I said, not trying to be overtly political, and I don\\\'t mean to stir up trouble on a PR," but whenever someone says ""file a SIP for it"""," I hear ""let\\\'s just shelve this indefinitely"".  I know that\\\'s not what you meant", but that\\\'s what I hear. If we can actually get this through the SIP process efficiently and land it with equal aplomb (ideally in the 2.12 timeframe, since it is a broadly backwards-compatible change, especially under a flag), then I\\\'m not opposed.  I just don\\\'t want things to get bogged down unnecessarily.  I\\\'m also worried that many people see this PR as a bellwether for compiler contribution.  If it gets stuck in eternal  process hell, it\\\'s going to put a serious damper on people\\\'s desire to help out on scalac.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,114,2016-04-15 17:02:16,9.93,,,1,"b'b"" I\'d prefer getting rid of the annotation. The added benefits are not worth the complexity from my point of view.If it becomes absolutely clear that switching the direction is a critical core feature"," it can still be added later on.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,115,2016-04-15 17:02:16,5.62,,1,,"b""b' Big :+1: For that (and uber flags in general)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,116,2016-04-15 17:02:16,5.95,,1,,"b'b"" I never meant to imply I want to turn this into a SIP. It\'s too late for that for 2.12. This does mean additional complexity that would make a sip necessary cannot go in at this point ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,117,2016-04-15 17:02:16,18.4,,1,,"b'b"" @adriaanm Do you feel the threshold between PR and SIP (in this case", not in general) is just the annotation?  Or the nature of the change in general? Given a choice between 2.12 with no annotation and much-later-than-2.12 with an annotation, I\'d pick the former every time.  I certainly believe that the right-based implementation is arbitrary and doesn\'t work everywhere, but it\'s workable with type aliases (outside of situations where the compiler dealiases," like chained implicit resolution) and we can always add an annotation later.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,118,2016-04-15 17:02:16,9.85,,1,,"b'b"" @djspiewak @adriaanm I completely agree", if the annotation is an issue, we can postpone it... You can\'t imagine the large doors this patch is going to open, it\'s a real game changer," specially for library writers using types...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,119,2016-04-15 17:02:16,6.95,,1,,b'b\' @adriaanm I appreciate your reasoning, but (ignoring the annotation for a moment) we\\\'re mostly talking of a well-understood experimental change:It\\\'s behind  .It\\\'s inspired by the field-tested Haskell\\\'s inference algorithm.It has no impact on binaries and binary compatibility. All this means, for instance, that changes during 2.12 across minor releases would be possible without fragmenting the ecosystem, assuming early adopters are willing to update their sources promptly and that source compatibility is not guaranteed for across minor releases. Also, keeping this out might cause _more_ fragmentation. This change is also implemented as a reflection-based compiler plugin already available which are starting to be used in production. And there\\\'s a compiler fork to which @milessabin contributes \\xe2\\x80\\x94 keeping this change out might well increase fragmentation. (Not that I actually worry about fragmentation). I\\\'m not against the annotation, but unfortunately its impact seems higher by the above standards. Also," I\\\'m not sure that ""seems a good idea now"" is a sufficient criterion", because (IIUC) also satisfied that criterion, even though many (though not me) dislike it now. Finally," could you remind us what is the stated  of the SIP process is? I find no explicit answer on url  Any of the ""obvious"" ones"," such as ""updating the spec""","fleshing out a design"" and so on seem to not apply:type inference is de-facto unspecified;there\\\'s (mostly) a clear precedent.\''
scala	5102	closed	120	adriaanm	2016-04-15 17:02:16	34.13		+1		b'b"" To reiterate: I\'m happy to have the core inference improvement (without the annotation) go in under  . No SIP is needed for that since it\'s under a flag, is likely to end up as a stable feature, is not viral, is well tested, and since inference isn\'t specified to begin with... As soon as we start adding annotations to the standard library, we do need to go the SIP route, in my opinion. An annotation is a  change. Furthermore, 2.12.x has been in feature freeze for a while now (as communicated on scala-internals) -another argument against adding annotations or changes that affect source compatibility and that are not under a flag. Please include a \\xf0\\x9f\\x8d\\x93 in replies to this message to indicate you\'ve read it in its entirety.""'
scala	5102	closed	121	adriaanm	2016-04-15 17:02:16	7.67	+1			b""b' Apologies for my brevity: I meant refining the inference algorithm (by using an annotation to configure the direction in which types argument are abstracted)'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,122,2016-04-15 17:02:16,0.68,1,,,b'b\' Hi All, This was written pre-:strawberry:, but it is still relevant, so I\\\'ll post it. Here\\\'s my two cents: I think we can both have a carefully considered, non-rushed discussion of how to do this the right way and still put something in 2.12 under -Xexperimental that eases the type lambda user pain short term. We just have to agree that whatever goes under -Xexperimental is really experimental, like the flag says, and still open to change before becoming final. I\\\'m OK with that. I have hesitated to say much in this thread yet because I didn\\\'t want to derail getting something into 2.12, because it is greatly desired and needed by folks doing things with Functors, Monads, etc. And people who aren\\\'t using Scala in that way won\\\'t really be affected by such a change, so I think something should go into 2.12 under -Xexperimental to ease the pain point. That said, I have been thinking about it a lot since Miles first submitted the PR, and I do feel the approach is not quite optimal yet. Assuming something will go into 2.12 under -Xexperimental, I will take the risk to point out that if you take a step back and look at it from a language design perspective," the original and current approach is unsatisfying because it is not ""regular"," a word language designers seem to like to use. I like to use the word ""consistent."" And moreover, the current approach is not always ""correct."" Currently, Scala doesn\\\'t automatically partially apply either at the value level or the type level because Scala allows multiple parameter lists, and there\\\'s no obvious way to know how the user wants to partially apply, or even if the user desires partial application (and if not, then it is a bug). In the original form of this PR, we just picked left to right at the type level, but don\\\'t do that at the value level, and that\\\'s not regular. It is inconsistent. I did mention earlier that if you look at what\\\'s out there today, sometimes left to right is correct, sometimes right to left is correct, and sometimes doing any partial application automatically seems _incorrect_. The example I gave was Tuple3 has three type parameters, but it doesn\\\'t make sense that you\\\'d partially apply it in any direction necessarily, left-to-right, right-to-left, inside-to-outside-counterclockwise, inside-to-out-clockwise, etc. All of those seem wrong to do automatically to me. I think it is more fitting to reality that we don\\\'t partially apply that type and make people use a type lambda to clarify what they want. And there\\\'s a good chance it was a bug, which would be nice to continue to find at compile time. If you look at Either in standard library, I think it demonstrates there are actually three possible ""biases."" Either itself is not biased to the left or the right. It is balanced. Partially applying it in any direction automatically doesn\\\'t seem appropriate to me, and might mask bugs. However, an  (obtained via ) is right-biased, and it would be convenient to partially apply it left-to-right. But on the other hand, an  (obtained via ) is left-biased, and it would be just plain incorrect to automatically partially apply it left to right. However, it would actually be convenient to automatically partially apply it right-to-left. So I think this aspect of a type constructor is what we have for years been calling ""bias,"" and what to me seems to make sense for Scala is to leave the behavior as is unless a type constructor is annotated with either @leftBiased or @rightBiased. That way the default behavior at the type level (for type constructors) is consistent with the behavior at the value level (for functions): no automatic partial application is done. That continues the consistency we have in the language today. It keeps the language ""regular,"" and it continues to give compiler errors where it is likely that they are highlighting actual bugs. However, if a type is designed such that left-to-right or right-to-left partial application makes sense, then with a simple annotation, the compiler would do that automatically and it would bust boilerplate type lambdas like crazy. I think this approach fits reality. When you look at  and , everyone knows which way each one is biased. By applying one of @rightBiased or @leftBiased, we can tell the compiler what all already know and agree on, and it will save us a lot of boilerplate type lambdas. So bias feels more like variance to me, in that there are three possibilities. The default is invariant, and that\\\'s the most strict one. With one annotation, +, you get covariance and that allows more things to compile. With the opposite annotation, -, you get contravariance and that allows more things to compile, but in the opposite direction. Now imagine that for our 2.12 experiment, we drop the @unifyRightToLeft annotation (which I\\\'d suggest we call @leftBiased) and we just unify everything left-to-right as per the original form of the PR. That reminds reminds me of another language, but surprise, it isn\\\'t Haskell! Although left-to-right what Haskell does, in Haskell the behavior is regular as far as I can tell. (My Haskell knowledge is limited, so correct me if I\\\'m wrong.) In Haskell, my understanding is that everything is curried at both the type and value level, and partial application is done left to right automatically at both the type and value level. Is that correct? If so, that\\\'s beautifully regular and darn good language design. Instead of Haskell, doing automatic left-to-right on any type constructor in Scala reminds me of Eiffel. Because in Eiffel, they just say, in an effort to make things ""simpler,"" that everything is covariant. Even though it is incorrect. One thing I like about Scala is it doesn\\\'t try to make things simpler than they inherently are. Scala\\\'s motto is: make it as simple as possible, but no simpler. So my feeling is to get rid of the odd, stuck-off-to-the-side feeling of @unifyRightToLeft, rather than dropping it, we rename it to @leftBiased and add another one, @rightBiased, and in the absence of one of these two annotations, leave the behavior as it is today: no automatic partial application. So what I think would be interesting as the 2.12 experiment is to add two annotations. They can be deprecated and removed later if the experiment doesn\\\'t work out. And there is precedent for using annotations to guide the compiler, for example: @unchecked and @uncheckedVariance. The reason I think this would be an interesting experiment, is I\\\'d like to see if it is a pain for folks using Functors, and Monads, etc., or if it actually works. Plus I could also experiment with it in Scalactic to see if I myself find it a pain to have to use bias annotations. By the way some people are feeling the same pain points with Or: url  To summarize, I would like to see something into 2.12 under -Xexperimental that will ease this pain point for folks using Scala in the ""Scalaz style."" But let\\\'s have the understanding that it really is actually an experiment and we should continue to have an open mind and try to find the best way to do it before it moves from experimental to official Scala. Thank you for reading! Bill\''
scala	5102	closed	123	adriaanm	2016-04-15 17:02:16	10.3		+1		b'b"" Bill, I agree with the sentiment of your message but not the conclusion. Annotations are a language design smell to me: is a particularly poignant example of that. The unchecked family of annotations are escape hatches for the burden of soundness. I think what we\'re seeing here is the cost of introducing a feature that would have driven library design after these libraries are already well established. If we had had currying at the type level (multiple type parameter lists, named and default type parameters), these abstractions would have naturally used them in the same way e.g., uses currying at the value level to guide type inference today. (Similar to the darn good design in Haskell you pointed out.)""'
scala	5102	closed	124	djspiewak	2016-04-15 17:02:16	22.95		+1		b'b\' @adriaanm \\xf0\\x9f\\x8d\\x93  I think I understand what you\\\'re saying.  We\\\'re on the same page and in agreement, I think. @bvenners I also read your post in its entirety, though you didn\\\'t generate a nonce emoji for me to reply with.  :-)Remember that Scala also does not _infer_ terms at the value level.  @adriaanm had a fantastic comment in his long SI-2712 panel response at Scala Days, where he said that the problem reduces to program synthesis.  This is very easily seen if you look at the value-level analogue: Obviously, the above doesn\\\'t work, but this is the direct analogue of what we are doing at the type-level!  So your metaphor is a bit skewed, because not only does Scala not infer partial-application left-to-right at the value level, it does not infer _anything_ at the value level!  Nor should it. So in a sense, this feature is not inconsistent with the value level since the value level has no analogous feature.  And where it is most closely analogous (biased parameter ordering for, e.g.,  ), it is strictly right-biased.  And so in that sense, this implementation is consistent.And for this reason, I think that, in a vacuum, it would make sense to have a and  , while the default is no partial-application inference at all.  (btw, I think that ""partial type application inference"" is probably a better term for what\\\'s happening here than ""higher-order unification", which this most certainly is not)  At the same time, I see the problems that @adriaanm is pointing out . introducing new annotations, compiler-guiding or otherwise.  An annotation is just part of the standard library.  It\\\'s always there.  You can\\\'t hide it behind a flag like you can compiler features.  And it basically has to live forever (or at least through deprecation cycles).  And that\\\'s ignoring the fact that compiler pragmas are, generally, annoying. Ultimately, Dotty has a better and more general solution to this problem (which would correctly handle your case without shenanigans), so we\\\'re (hopefully) looking at a comparatively short-term situation.  While I would generally prefer that our solution to this be unbiased by default, it really seems like biasing is our only path to getting this in the language in any form.\'',,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,125,2016-04-15 17:02:16,7.23,,,1,b'b\' @adriaanm Makes sense, but I would add out that it isn\\\'t just pre-existing designs affected by just going left-to-right like Haskell, but future ones. I.e," regarding your comment: ""I think what we\\\'re seeing here is the cost of introducing a feature that would have driven library design after these libraries are already well established."" I think the reason people use Scalactic Or is precisely _because_ it is left-biased. They like the way it reads in their code. I would like to find some way that library design in Scala not be driven to make everything right-biased because that\\\'s how the compiler automatically partially applies types. I think that flexibility would enable designs that are user-friendly and allow us to make functional programming more accessible and enjoyable to more people. I don\\\'t like annotations either"," which is why my original comment a few weeks back was to actually brazenly suggest new syntax. The variance + and are an ""annotations"," but not with an @ sign. That\\\'s definitely a SIP.  Anyway, I can live with universal left-to-right in Scala 2.12 if that gets this in under -Xexperimental. I will experiment with the type alias approach, but what I\\\'d like to ask is that folks leave an open mind at trying to find something better before this goes final into Scala, because my expectation is that left-biase will likely be a second class citizen under that approach. But I will experiment.\''
scala	5102	closed	126	adriaanm	2016-04-15 17:02:16	5.07			+1	b""b' but implicits?! :-)'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,127,2016-04-15 17:02:16,3.55,,1,,"b""b' I wish I had time to experiment with this right now", but could a base type (parent) that has the right bias bring differently-biased types into the fold? Thinking out loud, and much longer-term," I could also see solutions like where could be interpreted as  . Even dreamier: real type-level functions with pattern matching on types and simple recursion. None of this gaming the prolog engine at the type level.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,128,2016-04-15 17:02:16,12.63,1,,,b'b\' @djspiewak Sorry for the delay in responding. Took me a while to figure out how to put in an emoji. :grapes: I\\\'m curious to hear how this could be done in Dotty. @adriaanm At one point in my musings I was thinking this felt more like something that could be guided by implicit search, which could then make it even more general. (You could do the inside-out-counterclockwise thing with Tuple3.) But then I remembered I think that\\\'s kind of what Unapply does, and that isn\\\'t simple. Such a feature would need to be something special and new," because it is guiding type inference. (It occurred to me maybe we could use ""implicit type ..."" in a companion object somehow.) Anyway", I am not convinced such generality is useful. The tri-state of 1) no partial application by default, and if somehow indicated by the designer of a type, 2) left-to-right partial application or 3) right-to-left partial application seems to be a good tradeoff of simplicity and functionality. Though if that could be done without annotations that seems an improvement. But not a discussion for 2.12.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,129,2016-04-15 17:02:16,66.88,,1,,"b'b"" @bvenners but do you mean we shouldn\'t have a default unification and always require using an annotation?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,130,2016-04-15 17:02:16,141.57,1,,,"b'b"" @mandubian Not for 2.12", no. For 2.12 I\'m fine with dropping @unifyRightToLeft if thats what it takes to get something in under -Xexperimental to ease this pain point. Although our Scalaz and Typelevel friends love types and love lambdas, they hate type lambdas! It is a big pain point, and I wouldn\'t want anything I posted today to derail getting some type lambda relief under -Xexperimental in 2.12. That said, I would suggest as part of a longer term, post-2.12 discussion, that always unifying left to right is simple in Scala the way always doing covariance is simple in Eiffel. It is indeed simple, but it is also sometimes just plain incorrect. I suggested an annotation for the 2.12 experiment, but since that\'s a no go, I\'d just back up and say my gut feeling is that partial type application inference, as @djspiewak called it, should be off by default. And then there\'s some way to turn it on for specific types, either left-to-right or right-to-left, using some kind of designer declaration. Doesn\'t have to be an annotation. A couple other things suggested were extending a type or putting something in a companion object. I think such things would be useful to discuss post-2.12. I myself would like to look next at what Dotty might make possible in this area. Given Dotty seems to be the likely longer term trajectory for Scala, what is done shorter term should blend into what\'s coming down the road with Dotty. I know it is not possibly to exactly predict will happen down the road, but nevertheless I think Dotty is what I\'d want to look at next for ideas. @djspiewak you hinted you might have some idea of what would be possible in Dotty, so I\'\'d be curious to hear about it. Maybe it should be somewhere else," not on this PR discussion.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,131,2016-04-15 17:02:16,24.8,,1,,"b'b"" @bvenners I see... Solving SI2712 requires to agree on a choice", make it and assume it... But it\'s also a first step towards other type features in the future as you said.But now, let\'s bring that tool in the true reality and let people build new toys with it and investigate new horizons... Using the plugin," I already do it every day and it changes things for real ;)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,132,2016-04-15 17:02:16,69.63,1,,,"b'b"" @milessabin Sorry I wasn\'t able to get to the bottom of the unexpected consequences of my contribution here (avoiding unifiying a type param with a type constructor that don\'t conform to bounds). I\'d like to pursue this further", but I don\'t want to block progress here. @adriaanm and I chatted about this some more. Summarizing the proposals above, and the new items:[ ] Remove the annotation and associated implementation.[ ] Revert my changes to consider bounds conformance[ ] Retain an individual flag for this option, but rename it to to reflect that fact it doesn\'t implement a general HOU algorithm.[ ] Add this to the list of settings enabled by  . Note that one can use, for example, to disable one option from the group.  [ ] Actually, let\'s go one step further and start with a clean slate for  , and remove  ,  , from that list. We don\'t plan to take any of those into the language proper. You could make this change in a final commit in this PR. We\'re tossing up between this approach and the slightly different alternative of making into a multi-choice option (like  )," but we\'ll  that change in a followup.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,133,2016-04-15 17:02:16,172.2,,1,,b'b\' I just wanted to highlight something @bvenners wrote:More specifically," Haskell\\\'s type constructors and functions only take single arguments. I\\\'ve seen some references  this PR about ""left-to-right"" being ""Haskell-like"" and I\\\'d like to stress that it\\\'s very different behaviour. Picking a side is useful", but I don\\\'t think Haskell should be used to justify it.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,134,2016-04-15 17:02:16,59.9,,,1,b'b\' From an inference standpoint, it is identical behavior and materially indistinguishable from Haskell\\\'s semantics in comparable terms.  Obviously, the semantics do not carry over to other areas.  For example: Clearly that doesn\\\'t work.  Haskell gets its left-to-right unification (or equivalently,"right-biased partial application"") for free from its type constructor semantics, but just because Scala is now adding this behavior ""artificially"" doesn\\\'t make the derived semantics any less identical.Haskell as a name-drop for justification, clearly not.  But I don\\\'t think Haskell is a good name drop justification for anything.  However, citing Haskell as a good case of long-term real-world testing of these inference semantics is absolutely valid.I think you\\\'re right that Dotty discussion should be pushed off this (already quite extensive!) PR discussion.  It is worth briefly touching on the ""blending"" note by saying that Dotty\\\'s type constructors are a fundamentally different construct than what is in Scala.  That\\\'s a good thing, IMO, but it does mean that any blending is going to be a bit artificial and will miss a lot of important cases.  It\\\'s definitely not something that we can approach in any meaningful way through this vector (SI-2712).\''
scala	5102	closed	135	milessabin	2016-04-15 17:02:16	291.63			+1	b'b"" I\'m happy to go with @retronym\'s suggested plan of action. I\'d still like to see if we can accommodate @bvenners though. Here\'s one idea ... We could remove the annotation from this PR and the Scala distribution and move it to a third party library (I can put that together and publish under ) and retain the left to right vs. right to left logic in modified only so it\'s robust if the annotation class isn\'t present on the classpath. Then @bvenners would be able to depend on that third party library and use the annotation for in Scalactic. I believe that this addresses @adriaanm\'s chief concerns: there\'s no longer _any_ visible trace of this PR on the classpath if the flag isn\'t present; it also clearly becomes optional behaviour which has an impact only on library authors who want to use it.""'
scala	5102	closed	136	mandubian	2016-04-15 17:02:16	27.62		+1		b""b' big \\xf0\\x9f\\x91\\x8d '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,137,2016-04-15 17:02:16,422.32,1,,,b'b\' Thanks @milessabin. I am OK with the right-to-left not being available in 2.12. I doubt the compiler folks would want something in the compiler referring to something outside it either. I looked to see if there was an existing annotation in the Scala library that could be repurposed to do double duty," and didn\\\'t see one. Just looking for an annotation with the simple name ""leftBiased"" regardless of its fully qualified name I don\\\'t think would fly either. What I can do in the meantime is repurpose your compiler plugin that does this", and then continue designing as if there\\\'s going to be a way to at least pick between left-to-right and right-to-left in Scala eventually. Until then people can use a compiler plugin to ease right-to-left type lambda boilerplate. I see this PR as more of a pain killer than a cure, and I think most of the pain is left-to-right today. So let\\\'s ease that pain of boilerplate type lambdas in 2.12 under -Xexperimental. But then let\\\'s work on a cure. One way to look at this is that it is doing type lambda inference, and sometimes it infers the wrong type lambda. There\\\'s some solution to that and I think we can find it post-2.12.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,138,2016-04-15 17:02:16,9.9,,,1,"b'b"" @bvenners thanks for being so accommodating. I\'ll get to work on @retronym\'s proposal.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,139,2016-04-15 17:02:16,141.67,,,1,"b""b' @milessabin No problem. Thanks for this contribution to Scala.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,140,2016-04-15 17:02:16,1049.9,,1,,"b'b"" PR updated in line with @retronym\'s proposal"," squashed and rebased.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,141,2016-04-15 17:02:16,14.62,,,1,"b""b' Thanks @milessabin for keeping the ball rolling!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,142,2016-04-15 17:02:16,1330.33,,1,,"b'b"" That\'s green ... @retronym do you want it squashed now?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,143,2016-04-15 17:02:16,62.73,,1,,"b""b' Yep", ideally into two commits (first one cleaning the slate," and the second introducing the new option.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,144,2016-04-15 17:02:16,30.08,,1,,"b""b' Done.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,145,2016-04-15 17:02:16,30.18,,1,,"b""b' Well", let me qualify that: the two commits had to be done in the opposite order ... the first commit introduces the new option," the second cleans up  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,146,2016-04-15 17:02:16,1168.47,,1,,"b'b"" Agreed on all counts (though I don\'t think you intended to remove the check for the presence of the enabling flag ;-) ). Updated and rebased.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,147,2016-04-15 17:02:16,46.85,,,1,"b""b' Getting close! Dim house lights", cue spotlight," drum roll... :hushed: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,148,2016-04-15 17:02:16,600.28,,,1,"b'b"" As a final consideration", I\'d like to revisit @smarter\'s comment above url  My understanding is that it\'s about the order of places where we look for a type constructor of the expected arity. Currently, there must be one in the base type sequence (transitive closure of the clause -BTS). After this change, the BTS is not consulted and we synthesize a type constructor of the right arity using the new logic. Is this the order we want? Should we look at the BTS for existing type constructors of the right arity before we start synthesizing new ones? PS: maybe it is the order we want," but I do think this change is important enough to double check and highlight in the release notes""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,149,2016-04-15 17:02:16,1329.02,1,,,"b""b' Slight OT: TL; DR. Unlike I thought", pattern unification is by far too weak for the interesting scenarios. So I figured I should really unsuggest it, and apologize a bit for suggesting it in the first place without doing enough homework, in particular to @milessabin and @mandubian. If anybody is interested in the evidence," see (and comment) this Agda snippet:url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,150,2016-04-15 17:02:16,102.78,,1,,"b'b"" @milessabin I\'ll let @retronym do the honors", but I think this is ready to merge.  Since this definitely merits inclusion in the release notes," could you update and expand the PR description to make it suitable for that? My last comment is probably one of the things that should be mentioned as a breaking change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,151,2016-04-15 17:02:16,134.58,,,1,"b'b"" @adriaanm will do. I\'ll flag up @smarter\'s example as something that warrants further investigation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,152,2016-04-15 17:02:16,675.15,,1,,"b'b"" Merging now"," I\'ll let @milessabin update the PR description with a small example of what this means to users""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,closed,2016-05-27 07:58:17,656.42,25,78,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,153,2016-04-15 17:02:16,18.57,,,1,"b""b' Awesome! Thanks to everyone who contributed"," and especially to @retronym and @adriaanm :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,154,2016-04-15 17:02:16,614.7,,1,,"b""b' Somewhat off-topic"," but do you think that partial unification in implicit search could also have a similar solution? Example:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,155,2016-04-15 17:02:16,441.98,,1,,"b""b' @TomasMikula IIUC", if you expanded into the needed calls to implicits, you need exactly this PR (and enabling the new behavior with  ) to have the type arguments to the implicits inferred, right? Can you check if this works now? In principle it should," and e.g. the testcase url  suggests it also works in practice.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,156,2016-04-15 17:02:16,552.68,,1,,"b'b"" @Blaisorblade huh", the example actually compiles as is. I probably added Miles\'s to and forgot to call or something similarly stupid before. Thanks for checking," anyway!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,157,2016-04-15 17:02:16,826.07,,1,,"b'b"" I\'m not sure the story is over"," [here are]url  some examples which I think should compile with  /  but don\'t.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,158,2016-04-15 17:02:16,920.47,,1,,"b'b"" Here\'s something to study: url  /cc @paulp ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,159,2016-04-15 17:02:16,938.97,,,1,"b""b' @adriaanm Wow\\xe2\\x80\\xa6 That *definitely* looks like a bug to me. Fabricating the out of nothingness is a neat trick.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,160,2016-04-15 17:02:16,954.42,1,,,"b'b"" Each extraneous factor I eliminate and it gets a little worse. It turns one doesn\'t need any compiler options at all using the typelevel compiler is enough. I updated the gist to reflect this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,161,2016-04-15 17:02:16,957.87,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,162,2016-04-15 17:02:16,971.23,,1,,"b'b"" [Here\'s a sliver of a diff after adding logging]url  The side which mentions Singleton is of course TLC.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,163,2016-04-15 17:02:16,973.53,,1,,"b'b"" A guess would be that a change made to ensure inference doesn\'t throw away specific singleton types quite so aggressively that was *meant* to be behind a flag\\xe2\\x80\\xa6 isn\'t.  It sounds more related to the implementation than SI-2712.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,164,2016-04-15 17:02:16,989.28,,1,,"b""b' @djspiewak I think your guess will prove to be correct. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,165,2016-04-15 17:02:16,1127.27,,1,,"b'b"" It figures to be this", from 8301e1f526. I\'m supposing the side-effecting unapply is called," and then the settings guard is checked.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,166,2016-04-15 17:02:16,343.65,,1,,"b""b' Yup"," this relates to the literal types PR rather than this one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5102,closed,-,-,-,26,89,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,opened,2016-04-18 17:24:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,title,2016-04-18 17:24:15,00:00,,1,,"b""b' Add examples to Exception object and group members'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,body,2016-04-18 17:24:15,00:00,,1,,"b""b' Extend main comment with additional examplesGroup methods from a user perspectiveList exceptions special cased by shouldRethrowInclude overlooked withTry in opt"," either notes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,1,2016-04-18 17:24:15,5.52,,,1,"b""b' ![scaladoc-exception-examples-groups-v1]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,2,2016-04-18 17:24:15,1211.07,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,closed,2016-04-20 13:41:41,1217.43,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,reopened,2016-04-20 13:41:44,0.05,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,3,2016-04-18 17:24:15,2.03,,1,,"b'b"" meh"," jenkins doesn\'t want to pick this one up.. maybe re-submit as a new PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,4,2016-04-18 17:24:15,186.02,,1,,"b""b' Replaced by #5111 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,closed,2016-04-21 16:48:53,187.15,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5105,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,opened,2016-04-25 21:00:49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,title,2016-04-25 21:00:49,00:00,,1,,"b""b' Emit a warning when a constant expression evaluates to an error'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,body,2016-04-25 21:00:49,00:00,,1,,"b'b"" Emit a warning from the constant folder when evaluation of a constant expression results in an  "," e.g. division by zero. There are linters that can detect this but it doesn\'t seem to add any expense to just have the compiler warn about it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,1,2016-04-25 21:00:49,1315.23,,,1,"b""b' Would it be natural to put the warning under  ? Maybe or  . That was a joke.  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,2,2016-04-25 21:00:49,33.42,,,1,"b""b' Thanks. Added to lint warnings and a partest file.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,3,2016-04-25 21:00:49,47.98,,1,,"b""b' Moved the  to  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,closed,2016-04-26 20:17:27,1396.63,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,reopened,2016-04-26 20:17:34,0.12,0,3,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,4,2016-04-25 21:00:49,1054.02,,,1,"b""b' LGTM!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,closed,2016-05-02 13:51:37,1054.05,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5123,closed,-,-,-,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,opened,2016-04-27 19:26:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,title,2016-04-27 19:26:41,00:00,,1,,"b""b' Right-bias Either'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,body,2016-04-27 19:26:41,00:00,,1,,b'b\' Add operations like map, flatMap which assume right-biasDeprecate {Left,Right}ProjectionDeprecate left and right in favor of swapAdd contains, toOption, toTry, toSeq and filterOrElsetoSeq returns  instead of Don\\\'t add get There are no incompatible changes.The only possibility of breakage that exists is when people have addedextension methods named map, flatMap etc. to Either in the past doingsomething different than the methods added to Either now. One detail that moved the scales in favor of deprecating LeftProjectionand RightProjection was the desire to have toSeq return instead of like LeftProjection and RightProjection do.Therefore keeping LeftProjection and RightProjection would introduceinconsistency. filter is called filterOrElse because filtering in a for-comprehensiondoesn\\\'t work if the method needs an explicit argument. contains was added as safer alternative to  if ( &&  == $something) ... While adding filter with an implicit zero value is possible," it\\\'sdangerous as it would require that developers add a ""naked"" implicitvalue of type A to their scope and it would close the door to a futurein which the Scala standard library ships with Monoid and filter couldexist with an implicit Monoid parameter.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,1,2016-04-27 19:26:41,2.9,,,1,"b'b"" Discuss! Some notes:is called because filtering in a for-comprehension doesn\'t work if the method needs an explicit argument"," and I don\'t want to close the door to a future in which the Scala standard library ships with and could exist with an implicit parameter.There is a lot of code doing no-ops like replacing it with would require a cast. Not sure what\'s the right decision between efficiency and code beauty is ...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,2,2016-04-27 19:26:41,3.48,,1,,"b'b"" Can\'t you do something like  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,3,2016-04-27 19:26:41,6.08,,,1,"b'b"" @smarter the problem is the other case: If as any kind of transformation", the type of doesn\'t fit anymore (  and both carry both type params). If you have e. g. with then the result is  ," but is still  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,4,2016-04-27 19:26:41,17.13,,,1,"b""b' I think the problem is if you want to introduce right-bias"," you should also redefine as  . The following package works as @smarter suggested:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,5,2016-04-27 19:26:41,12.35,,1,,"b""b' @Sciss I agree with you"," but this would break every single code base where someone wrote or  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,6,2016-04-27 19:26:41,1.1,1,,,"b'b"" You could also safely use it\'s ugly as hell"," but scala-collections is already full of it...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,7,2016-04-27 19:26:41,11.5,,1,,"b""b' Why not deprecate in 2.12", add a correct implementation e.g.  ," and then in 2.14 (?) we drop the problematic  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,8,2016-04-27 19:26:41,16.95,,1,,"b'b"" @Sciss Might be possible. I just want to avoid making library author\'s lives who want to support 2.10-2.1x harder than necessary.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,9,2016-04-27 19:26:41,64.43,,1,,"b'b"" I might have missed it", but it seems it\'s missing the  . This is required if you want to extract things in a for comprehension: Oh wait," this is probably problematic... what to do when returns  ... I wished Scala made the distinction between extracting tuples or case classes and guards or pattern matching.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,10,2016-04-27 19:26:41,9.3,,1,,"b""b' @EECOLOR has the same problem as  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,11,2016-04-27 19:26:41,429.67,,1,,"b""b' Related: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,12,2016-04-27 19:26:41,2.88,,,1,"b'b\' Updated! Things to discuss:[x] Add to  ?  _Most opinions: ""no""_[x] Added  . ? (Should it special-case fatal exceptions?)  _Opinions somewhere between ""don\\\'t care"" and ""sure"," why not?""_[ ] Should be deprecated?  _Opinions generally in favor_[ ] Should be deprecated? (In favor of  )  _Opinions generally in favor", but less so than for deprecating  _[x] More precise return type for  ? (  instead of  ) _Opinions varied," usually along the lines of ""would be nice if the inconsistency with and doesn\\\'t become to apparent"" -[x] Should we switch all  s to check first?  _Mostly", I flipped cases for and  , keeping as-is._\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,13,2016-04-27 19:26:41,45.57,,1,,"b'b"" Here\'s a tiny nit-pick"," when using right-biased either the most frequent path is generally the success path (i.e. the path). Therefore it would be slightly better performance to switch most of the cases from to because IIUC Scala will check each case sequentially. One of those things you\'d never notice would can add up after a large number of calls.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,14,2016-04-27 19:26:41,843.3,,1,,"b""b' @japgolly I flipped the checks in the and types"," left as is. I think this should be the optimal configuration to have the first check succeed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,15,2016-04-27 19:26:41,63.68,,,1,"b'b\' @japgolly b/c ""In the interest of efficiency the evaluation of a pattern matching expression may try patterns in some other order than textual sequence."" I\\\'d be interested in knowing whether the compiler does the right thing when there are just two choices.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,16,2016-04-27 19:26:41,363.8,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,17,2016-04-27 19:26:41,829.57,,1,,"b""b' Added ScalaCheck tests.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,18,2016-04-27 19:26:41,1405.65,,1,,"b""b' Is a pattern match the best solution for implementing all these methods? It should compile to an instanceOf check but I would expect polymorphic dispatch to be faster still.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,19,2016-04-27 19:26:41,26.87,,1,,"b""b' My take on the discussion points:Deprecate (not needed anymore)Deprecate (in favor of  )Make return an  . toSeq methods in the collections library have varying return types. Generally immutable collections return an  (and declare it as such). is immutable so it would be consistent with the other implementations.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,20,2016-04-27 19:26:41,1251.52,,1,,"b""b' @szeiger I think @Ichoran is the performance expert ... what do you think"," @Ichoran?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,21,2016-04-27 19:26:41,196.03,,1,,"b'b"" @soc You can\'t tell in any particular case whether pattern match or instanceof will be faster", but for two cases it\'s usually equivalent once the JIT compiler gets its hands on it (both are compiled down to fast single-branch code; you don\'t do generic polymorphic dispatch which involves walking a pointer).  If it really matters," you have to benchmark it both ways.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,22,2016-04-27 19:26:41,82.67,,1,,"b'b"" If it doesn\'t matter for the JVM"," I can tell you that the virtual call is faster than the instanceof tests in .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,23,2016-04-27 19:26:41,45.55,,1,,b'b\' @szeiger Ok," fixed the things you mentioned.""Right-bias Either"" is the same"," just with an implementation bug in filterOrElse and the documentation fixed.""[squash] Add contains"" It\\\'s basically the same as  .""Deprecate Either\\\'s left", right, {Left,"Right}Projection"" The deprecations you suggested.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,24,2016-04-27 19:26:41,0.32,,1,,"b'b"" @sjrd Should I rewrite it? I\'m a bit concerned as the implementation gets longer and harder to follow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,25,2016-04-27 19:26:41,128.75,,,1,"b'b"" No", keep it like that. Actually I realized that most methods are higher-order, so polymorphic dispatch for those is bad. The best situation is that of  , which has only and as polymorphic, and then all other methods are implemented in terms of and  , without additional polymorphic dispatch. This is really good because the higher-order methods can be inlined and the closures eliminated, and only the two core methods remain polymorphic. For  , a similar implementation would be awkward," I guess. So it\'s probably best to keep the current implementation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,26,2016-04-27 19:26:41,788.8,,1,,"b""b'   WTH Jenkins?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,27,2016-04-27 19:26:41,1.02,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,28,2016-04-27 19:26:41,453.28,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,29,2016-04-27 19:26:41,106.2,1,,,"b""b' This needs a commit message. It should summarize this PR", discuss design goals, motivate the change,"...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,30,2016-04-27 19:26:41,0.3,,,1,"b'b"" Adding WIP label until that\'s taken care of. Thanks!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,31,2016-04-27 19:26:41,3.92,1,,,"b""b' Thanks for being patient with me here as I play catch up", could someone convince me this not going to break existing code? Did we run the community build against this PR? Was this discussed on scala-user? (I saw the scala-internals discussion, but I fear the audience there is a bit, erm," biased :-))'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,32,2016-04-27 19:26:41,119.38,,1,,"b""b' Will add a decent commit message! Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,33,2016-04-27 19:26:41,14.23,,1,,"b""b' Done.Discussion: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,34,2016-04-27 19:26:41,55.53,,1,,"b'b"" @soc @adriaanm The deprecation of projections affects about one line per two thousand in my personal code bases", so it definitely creates some busywork.  Would be good to count new deprecation messages in the community build.  It shouldn\'t break much code which isn\'t already right(or left-!) biasing Either because Either\'s getting new methods," not changing old ones.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,35,2016-04-27 19:26:41,1038.02,,,1,"b""b' agree. basically it needs a SLIP", not for bureaucratic reasons," but because changes like this need to be justified and agreed upon. I suggest putting it off to 2.13'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,36,2016-04-27 19:26:41,47.03,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,37,2016-04-27 19:26:41,14.12,,,1,"b""b' Alright"," closing. Anybody enthusiastic about doing a SLIP can feel free to pick this up in the future.(I think everybody who was interested in this subject has already commented during the last SIP process on Either.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,closed,2016-05-26 17:09:34,1302.88,3,27,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,reopened,2016-05-26 17:39:19,29.75,3,27,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,38,2016-04-27 19:26:41,30.63,,1,,"b'b"" I\'m still hopeful we can focus this PR to a scope that doesn\'t require a SLIP. @soc"," does it have any breaking changes beyond deprecation? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,39,2016-04-27 19:26:41,19.75,,,1,b'b\' I\\\'m suggesting that the answers to questions like these be collected in a single document interested parties can review," without everyone having to individually review years of convoluted back and forth on github comment threads and mailing list threads. I\\\'m not married to whether the word ""SLIP"" is attached to such a document", I would just like to see a design document justifying the change.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,40,2016-04-27 19:26:41,14.3,,1,,"b'b\' Right: SLIP documents under [the slip repository]url  eg [slip 22]url  do make sense for ""big"" changes. For small changes", a document isn\\\'t required.  But I agree with @SethTisue that for PR\\\'s like this (medium), a document is useful, also to record the _final_ outcome, not the journey. But to maintain a document independent to the PR is a PITA. So why not have them in the PR itself, added to  say url  ?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,41,2016-04-27 19:26:41,1.88,,1,,"b'b"" We can draft the document in the PR with the Q&A I started. Then collect the notes in the commit message", or potentially a separate doc. Overall," I prefer the commit message since we can\'t misplace it :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,42,2016-04-27 19:26:41,25.7,,1,,b'b\' If we simply _add_ the methods that give Either a right bias without _removing_ those that were used to dispatch unbiasedly, I expect the impact would be a lot less. But, you say, that just propagates confusion and error and multiple ways to do the same thing (which is bad)!  Yeah," it does.  You could do it the ""old"" way and not know", or have to deal with people writing both. So I dunno where @soc stands on this one regarding good-is-the-enemy-of-the-great.  I expect that adding a bias isn\\\'t really SLIP-worthy, whereas essentially deprecating the entire usable part of the Either interface (as opposed to it being a bare ADT) kinda is.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,43,2016-04-27 19:26:41,309.33,,1,,"b""b' @adriaanm @Ichoran There are no incompatible changes. The only possibility of breakage that exists is when people have added extension methods named  "," etc. to in the past doing something different than the methods added to now. One detail that moved the scales in favor of deprecating and was the desire to have return instead of like and do. Therefore keeping and would introduce inconsistency.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,44,2016-04-27 19:26:41,55.63,,,1,"b""b' Excellent! I fully expect it will LGTeveryone once the changes are documented at the top of the PR and in the commit message.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,45,2016-04-27 19:26:41,195.08,,1,,"b'b\' Do deprecation warnings count as an ""incompatible change""?  Some people like -Xfatal-warnings. Also", it\\\'s probably a good idea to have tests that demonstrate that behavior is identical between and the as is.  (I\\\'m assuming that\\\'ll get the case also.)  Otherwise the deprecation message isn\\\'t solved as easily as just deleting or changing a key word.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,46,2016-04-27 19:26:41,109.48,,1,,"b'b"" I\'d say they are fine for a major release. (Ignoring deprecations on a new major release should be an error \\xf0\\x9f\\x98\\x8f )""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,47,2016-04-27 19:26:41,415.0,,1,,"b""b' @Ichoran The biased ScalaCheck tests were copied from the RightProjection ones"," so this should ensure that they behave equivalently.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,48,2016-04-27 19:26:41,1.43,,1,,"b'b"" Btw"," is there a reason why scala-/ hasn\'t been updated in a while?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,49,2016-04-27 19:26:41,9.65,,1,,"b""b' Small remaining notes:takes a by-name parameter similar to  .  have the same signature", or would a difference be acceptable in this case?Should handle fatal exceptions differently when converting to  ? (See the pattern here...)The return type of seems to be all over the place in the collection library, but I think going forward we would rather prefer all of them to be instead of  ," right?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,50,2016-04-27 19:26:41,1.1,,1,,"b""b' @soc for nightly api docs"," check url  where did you get the stale link? it should be fixed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,51,2016-04-27 19:26:41,5.32,,,1,"b'b"" @lrytz Thanks"," didn\'t know that. It was just muscle memory ...  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,52,2016-04-27 19:26:41,70.55,,,1,"b'b"" I\'m not sure what you mean about the signature of  .  What are you proposing? I don\'t see any problem leaving fatal exceptions that aren\'t already being thrown inside a  .  Its job is to catch them", and it can\'t _catch_ the fatal ones safely.  But if they\'re already just sitting there in a data structure, it\'s fine. is preferred," yes!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,53,2016-04-27 19:26:41,26.15,,1,,"b""b' While the deprecations of / and the projection classes are not directly breaking code"," they still require people to change it eventually. What would be the drawback of keeping the projections around?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,54,2016-04-27 19:26:41,2.03,1,,,"b'b"" @lrytz Inconsistency of use", inconsistency of return types (as mentioned). @Ichoran usually doesn\'t have a by-name parameter," but has analogous to  . I\'m not sure can or should have that by-name parameter ... it might cause confusing behaviour when it gets rewritten in for-comprehensions where it\'s hard to inspect for developers.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,55,2016-04-27 19:26:41,3.92,,1,,"b""b' @lrytz Additionally", that sounds like an unsafe method to get the value on the right (if present).  That it instead gives you a weird transient class is a bit, well," weird.  Making that bit of weirdness go away (since it is unneeded) would be a long-term positive.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,56,2016-04-27 19:26:41,3.83,,1,,"b""b' @Ichoran +1.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,57,2016-04-27 19:26:41,2.73,,1,,"b""b' ok", sounds right. the current projection classes are basically biased eithers," but also less efficient because creating one is an allocation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,58,2016-04-27 19:26:41,56.0,1,,,"b""b' A possibility would be to deprecate to avoid confusion", but not since its rewrite is tricky: becomes  . If users could silence particular deprecations the impact of deprecations would be reduced. But without that, and with the possibility to treat warnings as errors," it may be best to be conservative about deprecations.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,59,2016-04-27 19:26:41,27.0,,,1,"b""b' Good point!  That is a less trivial rewrite.  We might want to deprecate anyway"," but add a or somesuch (just to fix the naming).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,60,2016-04-27 19:26:41,322.68,,,1,"b'b"" We just discussed this PR in the Scala team. While I think the implementation is good my recommendation was not to hurry this because there doesn\'t seem to be a broad consensus on whether it is the right thing to do. We\'re wrapping up M5 in a few days so the options as we see them now are to postpone this to 2.13 (possibly via a SLIP?) or get a non-contentious minimum version in. For example", the cleanup and possible performance improvements due to optimizing branching in existing methods for right-bias would be a useful subset. The trade-offs of the whole thing, as far as I understand," are:Most use cases are either non-biased (no change required) or right-biased (usually gets easier and faster)Left-biased use cases become harderUse of for-comprehensions can become harder (no anymore)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,61,2016-04-27 19:26:41,736.57,,,1,"b'b"" Hum ... there never was a to begin with", so that\'s not becoming harder, does it?To counter this, what about _not_ deprecating and  ? So basically provide a purely additive PR. This would also be good to simplify maintaining a codebase cross-compiling with 2.11 and 2.12. If we deprecate in 2.12, how am I supposed to write deprecation-free cross-compiling code? With an additive-only PR, if I need to cross-compile, I can still use and warning-free. If I only target 2.12," I can start taking advantage of the niceties of right-bias.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,62,2016-04-27 19:26:41,121.88,,1,,"b""b'   and have  "," the biased does not (for obvious reasons).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,63,2016-04-27 19:26:41,535.08,,1,,"b""b' @szeiger '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,64,2016-04-27 19:26:41,92.93,,1,,b'b\' A filter method is currently required for destructuring. While I understandwhy, I wish it was different from pattern matching (instead it being afeature of products). While not completely safe, I tend to add a no-op filter to custom monadictypes just for destructuring.On Jun 1, 2016 10:52 PM,"soc"" notifications@ wrote: > @szeiger url  \''
scala	5135	closed	65	Ichoran	2016-04-27 19:26:41	32.62		+1		b'b\' For the record, I don\\\'t recall actually advocating a left-biased either, and if I did, my current self disagrees with my past self.  (I may have raised it as a possible solution to certain issues.  But it raises, others, like ""Aaaah! Why are there two of them!", which is even worse than the current that looks okay until you need a projection.)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,66,2016-04-27 19:26:41,190.45,,1,,"b""b' @Ichoran '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,67,2016-04-27 19:26:41,85.43,,,1,b'b\' @soc Oh, that\\\'s what you mean.  Yes, I think that\\\'s a sensible thing to do (at least in the long run).  The point is that it is _not_ a left-biased either, but basically  , which is it\\\'s own weird viewy thing on top of  .  It can probably be a value class," and it would resolutely push the user back rightward to avoid the ""Aaah!  Two of them!"" problem.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,68,2016-04-27 19:26:41,401.5,,1,,"b""b' > @szeiger  filter withFilter Either Option Option toOption withFilter MatchError withFilter'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,69,2016-04-27 19:26:41,399.63,,1,,"b'b\' I strongly discourage exploding on ""safe"" calls like and  .  If you can\\\'t always return a sensible value", the compiler should fail to compile them.  Much of the point of these things is safe handling; throwing exceptions subverts that in a most unexpected way.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,70,2016-04-27 19:26:41,197.77,,1,,"b""b' As I said", I would like to get a conservative consensus-driven subset of this PR into 2.12.0. To give us enough time for a careful discussion," it looks like RC1 will be a better target for this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,71,2016-04-27 19:26:41,1.32,,1,,"b""b' M5 has to be out before the end of next week"," which means we have to get our PR queue flushed in the next few working days.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,72,2016-04-27 19:26:41,87.97,,,1,"b'b"" So", I\'m certain I\'m in a very small minority. I prefer a [different solution]url  and use that already in my own libraries. For me, I think a symmetrical disjunction is worth keeping when Scala makes it so easy to layer a bias on top, and I think that getting standard filter behavior and full monadic citizenship should be important aspects of any fix to  . I\'m wondering, in a selfish way, will this break my code? In practice, I conventionally use a right bias as the success case, and the bias I superimpose implements the usual methods in the usual ways. So, hopefully things would mostly still work. But I do rely upon standard filter behavior (as my bias allows me to nominate a token of the Left type to represent empty). And I use my biased Eithers in rich for comprehensions that might break with a nonstandard . This would not quite be a nonbreaking change for me. I feel like if I\'m making any contribution at all, it\'s just a contribution to stasis, and that\'s no fun. You guys have done and are doing good work. Including this wouldn\'t be the end of the world to me by any stretch. But fwiw," I\'m not entirely enthusiastic.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,73,2016-04-27 19:26:41,721.47,1,,,"b'b"" @szeiger Isn\'t all of this addressed in the commit message already?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,74,2016-04-27 19:26:41,31.23,,1,,"b'b"" @soc Sure. Which made me wonder why you\'d ask in the first place.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,75,2016-04-27 19:26:41,21.13,1,,,"b'b"" Oh. I missed that on the top-level Either the PR implements only a nonstandard rather than or methods. So this should not break code (like mine) that implicitly enriches Either with  . So that\'s good. Sorry about that! I\'m not sure I understand the motivation for adding a right bias if it won\'t fix the broken-in-for-comprehension behavior of the projections. But I don\'t think this breaks anything (of mine). (It would break left-biasing"," which the libraries I use allow. But I don\'t do that in practice.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,76,2016-04-27 19:26:41,67.42,,1,,"b'b"" I investigated the option of adding a left-biased Either  over the last few weeks. Based on that experience", I propose that we don\'t do it for now. Adding a left-biased Either would more or less double Either\'s footprint in terms of classes, methods and code," and add concerns about keeping the APIs in sync. (We would probably have to consider adding some trait to prevent the classes from drifting apart over time etc.) If there is some sign of overwhelming demand we can always revisit this decision later. Is everyone  with moving ahead with what he have already?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,77,2016-04-27 19:26:41,119.55,,,1,"b""b' @szeiger @adriaanm Ping! :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,78,2016-04-27 19:26:41,497.5,,1,,"b'b"" We just discussed this in the team meeting again. Let\'s do it for RC1"," including the deprecations. If this causes too many issues we can always undeprecate during the RC cycle or even later.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,closed,2016-07-12 22:00:21,261.03,7,54,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,79,2016-04-27 19:26:41,23.7,,1,,"b""b' still using deprecated methods in Either scaladoc. url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,80,2016-04-27 19:26:41,1239.92,1,,,"b'b"" Ouch. I\'ll fix the Scaladoc. Sorry for this oversight.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,81,2016-04-27 19:26:41,1241.28,,1,,"b'b"" It\'s too late now"," but did you intend to merge this without (me) squashing it?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,82,2016-04-27 19:26:41,761.67,,1,,"b'b"" Yes"," it was only two commits (with one being a small bug fix). It\'s been sitting around for long enough that I didn\'t expect any new issues to be discovered until it\'s merged and more people take notice.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,83,2016-04-27 19:26:41,1108.23,,1,,"b""b' I think it worth adding very useful  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,84,2016-04-27 19:26:41,1148.57,,,1,b'b\' @notxcain Seems like is a subset of that ignores the value of left... Would be nice to generalize," but I\\\'m concerned about naming (  is not in line with the common naming) and future evolution (if adapting  ). (In the sense of ""if we had some kind of interface standardizing across types"," could such a method be expressed?""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,85,2016-04-27 19:26:41,697.42,,1,,"b'b"" @soc not sure about standardisation (do we even need this interface inheritance?)"," but this operator is used in Cats (  and  ) and scalaz ( ) and it\'s very handy.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,86,2016-04-27 19:26:41,1169.68,,1,,"b""b' @notxcain  ","  ? WDYT?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,87,2016-04-27 19:26:41,861.0,,,1,"b'b"" @soc is nice", but is much better," I don\'t like prefixes in Scala :) We need some feedback from community.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,88,2016-04-27 19:26:41,1049.85,,1,,"b""b' I like the sound of  "," its at least consistent with how works'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,89,2016-04-27 19:26:41,1362.3,,,1,"b'b\' @notxcain Not ""standardization"" with a big S"," what I had in mind was ""if we ever introduce an internal trait to prevent signatures drifting apart"," would this interact nicely with this extension?"" (like what I would have done if we decided to add a left-biased Either: I would had introduced something like to make sure that the signatures of and couldn\\\'t drift apart).\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,90,2016-04-27 19:26:41,1364.0,,1,,"b'b"" @mdedetrich I think would be ok"," especially because the naming is Either-specific. (So we don\'t consume a possible name that could be a generalization of later on...)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,91,2016-04-27 19:26:41,1360.38,,,1,"b""b' for those interested", there are some afterthoughts on the design, and on the process by which this PR got formulated and merged," at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,92,2016-04-27 19:26:41,117.02,,,1,"b""b' good discussion at url  about uptake in Cats and other libraries'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,93,2016-04-27 19:26:41,923.1,,1,,"b""b' Why there is no like in previous version of in ? IMHO is much simpler than  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,94,2016-04-27 19:26:41,641.82,,1,,"b""b' Quoting myself from url Now I can show concretely what I meant by this problem. The first commit of url  illustrates the issue (the commit is url  but this link might become stale). Because 1) right-biased methods do not exist yet in 2.11 (nor 2.10) and 2) is deprecated in 2.12", there is no way to write cross-version warning-free code between 2.11 and 2.12. I have to use pattern matching instead," which in this case is much less readable and more verbose.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,95,2016-04-27 19:26:41,803.17,,1,,"b""b' FWIW", I dealt with this in FS2 under -Xfatal-warnings, -deprecation, and -Ywarn-unused-imports by creating an enrichment on that adds the 2.12 methods, implementing those in terms of pattern matching," and putting it in the main fs2 package object (to avoid an unused import warning). url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,96,2016-04-27 19:26:41,805.63,,1,,"b'b"" @mpilquist Yes"," I think we\'re going to do something similar in . It seems a bit cleaner than the current verbose code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,97,2016-04-27 19:26:41,820.42,,,1,"b'b"" @mpilquist you might want to consider a internal or impl package object (with an empty stub for 2.11) instead unless you\'re happy for those extension methods to leak into the user-land code via  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,98,2016-04-27 19:26:41,826.75,1,,,"b""b' @dwijnand I think doing so will trigger an unused import warning on 2.12 though. The extension class is marked which should accomplish the same"," no? (Ignoring non-Scala clients)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,99,2016-04-27 19:26:41,834.77,,1,,"b""b' Hmm"," not sure.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,100,2016-04-27 19:26:41,1065.18,,1,,"b'b"" re: warnings"," have y\'all tried url  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,101,2016-04-27 19:26:41,1217.42,,,1,"b'b"" @SethTisue No", I haven\'t. In theory, it looks interesting. In practice,  cannot afford to have any Scala dependency besides Scala itself. Otherwise, we wouldn\'t be able to publish for new Scala versions as quickly as needed. Note that most of the ecosystem transitively depends on  being published at this point," so we need to stay very close to the root of the dependency graph.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,102,2016-04-27 19:26:41,1229.5,,,1,"b'b"" I wonder if we should delay the deprecation of and until 2.13", to facilitate warning-free 2.11/2.12 cross-building. in my work on the Scala 2.12 community build lately I\'m seeing huge amounts of these deprecation warnings. and it\'s not clear (to me anyway) how satisfying the suggested replacement for (namely) ( ) is in practice. and if you are cross-building, there is no suitable substitute for community: how are y\'all feeling about this? now that 2.12.0-RC1 has been out for a few weeks supporting 2.11/2.12 cross-building was one of our core promises for 2.12 in addition to the comments on this in the last 13 days, see also previous discussion back in June," beginning with url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,103,2016-04-27 19:26:41,1241.22,,,1,"b'b"" I would rather not deprecate it immediately.  The benefit of right-biasing need not come with such a heavy penalty of changing existing code and living with deprecation warnings.  Yes", we\'ll be tied to .right and .left for longer, but the cost is relatively low if they are things that people don\'t want to use, and if people do want to use them," why are we taking them away so fast?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,104,2016-04-27 19:26:41,1243.83,,,1,"b""b' +1 for delaying the deprecation until 2.13. This also has the benefit of giving us some time to consider what other changes (if any) we want to make to  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,105,2016-04-27 19:26:41,1316.62,,1,,b'b\' My 2 cents: Other than two, reported scalac issues, changes are the only remaining issues and as noted ^^^ are a killer for cross version compiling," unless we all write some compat code such as [pasted by @mpilquist ]url  Is it not possible to have a standard ""2.12 fwd compat"" module for 2.10 and 2.11?  a backwards compat module for 2.12 so existing code works out-of-the-box? Or in other words", keep the change but have tools and strategies in place for easy migration.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,106,2016-04-27 19:26:41,1343.65,1,,,"b'b"" It\'s a shame"," but I\'m also in favour of postponing the deprecation. I\'d like to see support for early migration to the new form though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,107,2016-04-27 19:26:41,531.15,,,1,"b""b' @mpilquist Yep", seems to do the trick," nice one (I can stop creating impl package objects for these then) :+1:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,108,2016-04-27 19:26:41,1348.63,,1,,"b'b"" we discussed this at a Scala team meeting as well. there seems to be a consensus that the deprecation should be delayed. I\'ll make a PR for 2.12.0-RC2""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,109,2016-04-27 19:26:41,1353.67,,,1,"b""b' @SethTisue Thanks for the heads up.  Is there a _rough_ ETA for 2.12.0-RC2? And related to that", what would the advice be for a project like cats that has made some unpublished changes around this," but is yet to publish as 2.12.0-RC1? ie should it hold off on a 2.12.0-RC1 release or....?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,110,2016-04-27 19:26:41,1370.38,,1,,"b""b' We plan to merge the last few RC2 PRs this week", and release next week,assuming no new blocker bugs are discovered before the end of the week.On Wed, Sep 28," 2016 at 13:33 BennyHill notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,111,2016-04-27 19:26:41,1373.9,,1,,"b""b' :+1: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,112,2016-04-27 19:26:41,1386.73,,,1,"b'b"" We\'re hoping to freeze it in the next couple days", so then there will be a nightly which is a release-candidate-candidate. If all goes well, RC2 could conceivably hit Maven Central next week sometime. Keep an eye on url Unless there\'s a great deal of extra hassle involved," I would still strongly recommend everyone try to publish for 2.12.0-RC1 \\xe2\\x80\\x94\\xc2\\xa0_especially_ a popular dependency like Cats. The best way to avoid having to do an RC3 (heaven forbid) is for everyone to be doing as much  as possible now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5135,closed,-,-,-,10,72,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,opened,2016-05-22 16:47:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,title,2016-05-22 16:47:38,00:00,,1,,"b""b' SI-9789 use quadratic probing in OpenHashMap'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,1,2016-05-22 16:47:38,437.37,,1,,"b""b' Could you add a ScalaCheck based test to demonstrate this bug? You could use this as a starting point: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,closed,2016-05-23 00:05:00,437.37,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,reopened,2016-05-23 00:05:15,0.25,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,2,2016-05-22 16:47:38,18.42,,1,,"b'b"" I don\'t see it\'s relevance", other than as a ScalaCheck example. I\'d need to generate objects with the same hash code, and I don\'t see that here. What is the advantage of (my learning) ScalaCheck," rather than [faking it in JUnit]url  Something about  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,3,2016-05-22 16:47:38,15.88,,1,,"b'b"" Yes", I wan\'t sure if you were familiar with the layout of our Scalacheck tests, so it was just intended as an example. JUnit and Scalacheck are equally capable of testing a collection a test datatype that has a particular hashcode implementation. A JUnit test for the minimal case that shows the bug would indeed be the right place to start. I assumed from the content of this PR that you hadn\'t identified that yet, and that Scalacheck would be a way to find the problem. A Scalacheck test of would have have the added benefit to convince us that we aren\'t introducing a regression, or that it doesn\'t have other bugs. We could take another implementation as a reference,  , and check that during a randomly generated sequence of operations, the datastructures are equal. But, before you do down that route, note that we have another testing framework with a similar goal for collections that @Ichoran wrote: url  . We run that manually, it isn\'t currently part of our patch validation. Perhaps @Ichoran will be able to update that (or guide you how to update it) to demonstrate the bug in  . That might be a better use of time than a specific Scalacheck test for  , because the new test case would be then run on all map instances. url url  (Add variants that use a key type that is pathologically bad," and one that collides often.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,4,2016-05-22 16:47:38,8.95,,1,,"b'b"" There\'s already [ ]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,5,2016-05-22 16:47:38,2.03,,,1,"b'b"" Oh cool", didn\'t know about that one. If you can update that to demonstrate the bug," job done!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,6,2016-05-22 16:47:38,1.45,,1,,"b""b' Invoking Greenspun: Any sufficiently large test suite has two ad hoc", informally-specified, bug-ridden," slow implementations of half of Scalacheck. \\xf0\\x9f\\x98\\x84 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,7,2016-05-22 16:47:38,1255.72,,1,,"b""b' @performantdata  You test equality"," so you can have a mutable class that starts throwing exceptions after a certain number of tests have been reached.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,8,2016-05-22 16:47:38,71.27,,1,,"b""b' @performantdata Please include the test with this commit. It is enough to mention here that you test drove things"," and the test case hung before the patch to the implementation.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,9,2016-05-22 16:47:38,410.37,,1,,"b'b"" I\'m no longer calling this a bug"," in practice. See the [JIRA ticket]url  Need to improve the benchmark instead.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,10,2016-05-22 16:47:38,24.37,,1,,"b'b"" Based on url  I think the original algorithm comes from Python. There are some detailed notes about this in : url  Taking a step back: how widely used is  ? I hadn\'t heard of it until you started fixing it. Is it a worthy member of the standard library"," or something that might be a deprecation candidate? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,11,2016-05-22 16:47:38,6.88,,1,,"b'b"" How would anyone know? I think it\'d be valuable to have an open addressing hash map that fits into the collections framework", unlike Debox," which seems to be the most popular solution.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,12,2016-05-22 16:47:38,19.83,,1,,"b'b"" [The justification given there]url  though", is that the probe sequence is like a random sequence, and the initial hash value needn\'t be uniform. That\'s backwards from a normal implementation. One normally wants to randomize the slot at which the sequence starts (i.e., the hash value), then probe in a nearby region to take advantage of memory caching. The former utilizes the more complex computation," the latter is just an addition (not a multiplication).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,13,2016-05-22 16:47:38,29.53,,,1,"b'b"" I believe @Ichoran has a dataset to give one answer to that question: he trawled all the JARs in Maven that depend on the standard library to see what classes and methods are used. Obviously this doesn\'t inform us about closed source usage. A GitHub search is a little tricky because of a same-named collection in Spark: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,14,2016-05-22 16:47:38,515.57,,1,,"b'b"" It was only lightly used (I don\'t remember exactly how much", but far less than regular HashMap), probably because of problems with it.  and also use an open scheme, but without many of the problems, and with better performance because they don\'t have to wade through all the alternative forms of equals that an might have to. I\'m not convinced should be deprecated," but if it were I don\'t think it\'d be a huge loss.  I\'m also not convinced it\'s worth spending a great deal of time to improve it either.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,15,2016-05-22 16:47:38,92.33,,1,,"b'b"" I uploaded the performance results to the [JIRA ticket]url  I needed to write a test for keys", since an  \'s hash is simply the itself," so keys were being inserted mostly without collisions.  \'s hash is a pseuodrandom number. You can see up to about a 15% improvement in both and for  s.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,16,2016-05-22 16:47:38,10.88,,1,,"b""b' review by @Ichoran? The commit mostly consists of changes to the benchmarks"," including the ones you suggested in #5061.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,17,2016-05-22 16:47:38,283.28,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,closed,2016-05-30 09:41:38,576.38,0,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5183,closed,-,-,-,0,16,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,opened,2016-05-23 01:08:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,title,2016-05-23 01:08:03,00:00,,1,,"b""b' SI-9776 Fix type of  and improve performance'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,body,2016-05-23 01:08:03,00:00,,,1,"b""b' Fix the return type of  to be Builder[A", PriorityQueue[A]] rather than PriorityQueue[A].Improve performance of bulk inserts from O(N log N) to O(N),  primarily in the builder, ++=," and reverse.  These changes  indirectly benefit the many other methods that use the builder or ++=.Improve performance of clone.Fix SI-9757 space leak in dequeue.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,closed,2016-05-23 01:09:15,1.2,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,reopened,2016-05-23 01:13:01,3.77,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,1,2016-05-23 01:08:03,6.75,,,1,"b'b"" Squashed resubmission of #5183 on behalf of @chrisokasaki. We\'ll prefer to merge #5183 itself if git allows it!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,2,2016-05-23 01:08:03,47.78,,,1,"b""b' Thanks for your help!  Your recipe worked on #5181.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,closed,2016-05-23 02:03:38,50.62,0,1,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5184,closed,-,-,-,0,1,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,opened,2016-06-01 12:29:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,title,2016-06-01 12:29:57,00:00,,1,,"b""b' SI-9615 -Ystatistics does not enable all possible statistics'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,body,2016-06-01 12:29:57,00:00,1,,,"b'b""  now is def so it does not always return false. Currently it is initialized with default value of \'_enabled\' var.Basically -Ystatistics setting is ignored (since it sets _enabled to true later). Fixes SI-9615 For certain reasons this time I have to paste the below disclaimer:THIS PROGRAM IS SUBJECT TO THE TERMS OF THE BSD 3-CLAUSE LICENSE. THE FOLLOWING DISCLAIMER APPLIES TO ALL SOFTWARE CODE AND OTHER MATERIALS CONTRIBUTED IN CONNECTION WITH THIS SOFTWARE:THIS SOFTWARE IS LICENSED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\xe2\\x80\\x9cAS IS\\xe2\\x80\\x9d AND ANY EXPRESS OR IMPLIED WARRANTIES", INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FORANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISINGIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. THIS SOFTWARE MAY BE REDISTRIBUTED TO OTHERS ONLY BY EFFECTIVELY USING THIS ORANOTHER EQUIVALENT DISCLAIMER IN ADDITION TO ANY OTHER REQUIRED LICENSE TERMS.ONLY THE SOFTWARE CODE AND OTHER MATERIALS CONTRIBUTED IN CONNECTION WITH THIS SOFTWARE, IF ANY," THAT ARE ATTACHED TO (OR OTHERWISE ACCOMPANY) THIS SUBMISSION (AND ORDINARYCOURSE CONTRIBUTIONS OF FUTURES PATCHES THERETO) ARE TO BE CONSIDERED A CONTRIBUTION. NO OTHER SOFTWARE CODE OR MATERIALS ARE A CONTRIBUTION.""'",,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,1,2016-06-01 12:29:57,147.67,,1,,"b""b' However now compilation fails for parallel compilation with -Ystatistics on (exception below). Since this is not commonly used option maybe we can just add information in description?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,closed,2016-06-06 14:10:45,100.8,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,reopened,2016-06-06 14:10:48,0.05,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,2,2016-06-01 12:29:57,156.62,,1,,"b'b"" As I said on the JIRA ticket", I\'m a bit concerned with the performance impact of this change. We\'ll have to evaluate that before we can change this. We\'re currently heads down on getting 2.12.0-M5 out," but will do our best to take a look after Scala Days Berlin.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,3,2016-06-01 12:29:57,1428.33,,1,,"b'b"" I\'m going to close this until we can measure the performance impact. Since 2.11.9 will likely be the last 2.11 release"," I\'d rather not take any chances.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,closed,2016-10-18 17:22:34,191.77,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5204,closed,-,-,-,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,opened,2016-06-09 05:08:09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,title,2016-06-09 05:08:09,00:00,,1,,"b""b' SI-6623 Avoid $iw wrappers in REPL'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,body,2016-06-09 05:08:09,00:00,1,,,"b""b' Use a conventional import to bump context depth in REPL templates. Code is still ordinarily wrapped in a object. This is a step toward 6623-like transparency. takes the blame for this innovation.  collaborated in its commission.  batted clean-up. Notice how the handles line up.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,1,2016-06-09 05:08:09,58.43,1,,,"b""b'   broke again", in  .  Also," this was not the expected message.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,2,2016-06-09 05:08:09,493.33,,1,,"b'b"" @som-snytt I looked at the problem a bit but didn\'t find enlightenment. Could be a bug in the way it uses reflection"," or a bug in reflection itself. I would suggest deleting that method for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,3,2016-06-09 05:08:09,326.3,,1,,"b""b' @retronym I had an old fix for at url  which seems to work. More LOC. But it has broken at SI-4899 and SI-5854 and SI-8935"," which should tell us something.  paulp:Which should also tell us something.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,4,2016-06-09 05:08:09,673.07,,,1,"b'b"" Jenkins", old boy, I must say," I appreciate your company on these dark late nights. Perhaps I don\'t say it enough. But you\'re quite the chap.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,5,2016-06-09 05:08:09,728.87,,1,,"b""b' A few failures still.  This is a problem:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,closed,2016-11-07 19:15:43,847.57,2,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,reopened,2017-01-31 20:06:10,50.45,2,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,6,2016-06-09 05:08:09,79.87,,1,,"b""b' Still WIP"," but:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,closed,2017-04-10 04:26:30,500.33,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,7,2016-06-09 05:08:09,438.37,,1,,"b'b"" @adriaanm I don\'t know if this is useful pre-Adriaanite.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5220,closed,-,-,-,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,opened,2016-06-20 18:51:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,title,2016-06-20 18:51:20,00:00,,1,,"b""b' SI-5712 Support dependent argument types for constructor parameter lists'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,body,2016-06-20 18:51:20,00:00,,1,,"b'b"" Issue details can be found at url  Implementation as per @adriaanm \'s comment in the ticket. From reading the comments and the surrounding code"," this looks like the correct solution to me (unless I\'ve misunderstood something)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,1,2016-06-20 18:51:20,0.53,,1,,"b""b' I would guess this is for @adriaanm or @retronym to review'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,2,2016-06-20 18:51:20,752.63,1,,,"b'b"" Interesting I have a couple of failures. I\'ll have a look at these and update my PR sorry about that!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,3,2016-06-20 18:51:20,509.93,,,1,"b""b' No worries! Thanks for picking this up. Let us know how we can help out"," though we have to prioritize getting 2.12.0-M5 and RC1 out at this point.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,4,2016-06-20 18:51:20,1.67,,1,,"b'b"" I\'ve conservatively assigned this to 2.12.1", though we can discuss after M5 if this can go into RC1. From personal experience, changes to Namers usually take a while to get right, so I expect we\'ll have to defer until after 2.12.0," and possibly put this under a flag.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,5,2016-06-20 18:51:20,883.73,,,1,"b'b"" Great thank you! \\xf0\\x9f\\x98\\x84  I completely understand I\'m in no special rush to get this into M5"," so that works for me""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,6,2016-06-20 18:51:20,87.1,1,,,"b'b"" Here\'s a regression: Oddly", the incorrect error is only issued with has an invalid type for a prefix (  in this case.) If it has as a type," we get the expected error message:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,7,2016-06-20 18:51:20,6.68,,1,,"b'b"" Here\'s what seems to be a bug in the current implementation. Understanding this might help make the new impl correct. Seems like dependent constructor types are accidentally allowed if there is a val of the same name and type in scope.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,8,2016-06-20 18:51:20,649.42,,,1,"b'b"" Cool thank you @retronym I\'ll start looking around that and see what comes out of it!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,9,2016-06-20 18:51:20,336.95,,1,,"b""b' See also url  btw.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,10,2016-06-20 18:51:20,723.9,,1,,"b""b' @retronym what part of those last 4 examples is unexpected? Looks all expected to me.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,11,2016-06-20 18:51:20,127.83,,1,,"b""b' @retronym That reminds me of [SI-7730]url  specifically this.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,12,2016-06-20 18:51:20,3.62,,1,,"b""b' @dwijnand In code like the a1 in should refer to the a1 in the first parameter list. But it only compiles when there happens to be another a1 in scope. Yet if there IS another a1 in scope"," it is compiled as if that a1 did refer to the one in the first parameter list.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,13,2016-06-20 18:51:20,6.83,,1,,"b""b' Err.... Oh.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,14,2016-06-20 18:51:20,8.83,,,1,"b'b"" I\'ve heard good things about Err-Oh types.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,15,2016-06-20 18:51:20,587.32,,1,,"b'b\' I saw this sitting here and since I\\\'ve run into this bug every couple weeks for several years I thought ""what"," can it be so simple?"" So I took a look at Namers. No", it is not so simple, not by a long ways. I would go so far as to say that the extent to which multiple constructor parameter lists works in scalac is accidental. There\\\'s no way you\\\'re going to fix Namers for dependent constructor parameters with a small tweak to a predicate. It\\\'s missing the required logic, and much of the logic which IS there is doing ad hoc jiggery-pokery which will have to be unraveled.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,16,2016-06-20 18:51:20,508.78,,,1,"b'b"" oh yeah", basically agree 100% @paulpIt\'s good you say that because I\'ve tried (multiple times) to refactor Namers into something where I can work out how they currently work and have largely failed @adriaanm @retronym given that any PR that might resolve SI-5238 is unlikely to  be along this approach," do you want me to close this PR?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,closed,2016-09-15 09:27:06,875.77,2,11,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,17,2016-06-20 18:51:20,0.75,1,,,"b'b"" Oops didn\'t actually mean to close this PR (yet)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,reopened,2016-09-15 09:27:52,0.77,3,11,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,18,2016-06-20 18:51:20,140.13,,,1,"b'b\' i\\\'d suggest to start by tackling the smaller plugin of fixing the bug that ""Seems like dependent constructor types are accidentally allowed if there is a val of the same name and type in scope."".  That should help get to grips with the relevant parts of  that will need to be cajoled into the bigger change proposed here. I\\\'m happy to help with that after the dust settles from the 2.12.0 release.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,19,2016-06-20 18:51:20,697.97,1,,,"b'b"" There\'s a ticket where @lrytz says something about how these contexts are actually and erroneously nested", but I can\'t find it because thanks Jira.  Actor [talking into personal device]: Hi, Jira! Where is that ticket where Lukas said scopes for param lists is totally fd up? Jira [speaking as Siri]: Sorry," Lukas doesn\'t seem to use that sort of language. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,20,2016-06-20 18:51:20,190.72,,,1,"b""b' anyone interested in resuming work on this...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,21,2016-06-20 18:51:20,519.42,,1,,"b""b' @SethTisue Yes"," I am.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,22,2016-06-20 18:51:20,1342.22,,,1,"b'b"" I\'m going to close this one for now. @milessabin: happy to receive your resubmit when ready!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,closed,2018-06-01 09:38:18,10.43,4,12,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5238,closed,-,-,-,4,12,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,opened,2016-06-23 06:12:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,title,2016-06-23 06:12:27,00:00,,1,,"b""b' SI-8739 Typecheck args on failed apply'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,body,2016-06-23 06:12:27,00:00,,1,,"b""b' This allows for completion of incomplete args. The target method must not be overloaded. Previously"," arity checks would short-circuit. Work done by retronym and wedens as linked on ticket.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,closed,2016-06-23 06:56:54,44.45,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,reopened,2016-06-26 07:20:18,23.4,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,1,2016-06-23 06:12:27,41.38,,1,,"b""b' Review by @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,2,2016-06-23 06:12:27,640.4,,1,,"b'b"" I would suggest we move this to 2.12.x"," but I\'ll let @retronym take a look first.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,3,2016-06-23 06:12:27,780.05,,1,,b'b\' There is a risk with this sort of change that in a pathological case we could we could do a lot more work," e.g. through interplay with ""expected"" typechecking failures in implicit search. No example springs to mind at the moment", though.  I\\\'m not sure that swallowing errors during argument typechecking is the right thing to do.  For example, we don\\\'t report the error for in:   IntelliJ\\\'s presentation compiler highlights that as an error.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,4,2016-06-23 06:12:27,6.08,,1,,"b'b"" Here\'s a look at the [difference in post-typer ASTs]url  for a slightly extended version of that test case.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,5,2016-06-23 06:12:27,88.65,1,,,b'b\' You know you\\\'re in trouble when Jason starts making gists.  I\\\'ll move to 2.12.x since it\\\'s ancillary. I\\\'ll give it a review over the holiday, but probably more like Lunar New Year. Maybe Summer Solstice," which is a full day or two shy of a year?  Retronym: ""I think this is a dangerous and mostly marginally useful change for the last chance we have to break things in 2.11.x.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,closed,2016-12-14 08:09:01,48.72,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5243,closed,-,-,-,1,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,opened,2016-07-20 10:40:53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,title,2016-07-20 10:40:53,00:00,,1,,"b""b' Switch Windows CI build to sbt (w/ some sbt build improvements) [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,body,2016-07-20 10:40:53,00:00,,1,,"b""b' Switch Windows CI build to sbt (w/ some sbt build improvements)Use sbt in  : This essentially combines the Unix CI  jobs and  ", first publishing a  local release built with STARR and then building a new version with  that and running all tests on it.Unify repository handling across build scripts: A new function  in  , based on the existing code  in  , writes the file for sbt,  either with or without an extra bootstrap repository for resolving a  previously built version. It is used in all CI scripts to ensure that  artifacts are only resolved through the sanctioned proxies and  upstream repositories.The repository URL arguments in and  are now optional as well. These commands are used  without a URL from  ," which publishes to  instead of a temporary remote repository.is now a task instead of a command. It runs the same  sequence of sub-tasks as before but does not propagate failures  immediately. It always runs all subtasks and reports errors at the  end.The task now includes all  properties from (whose values have potentially  been overwritten with options) in  . Bootstrap build run of this version at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,closed,2016-07-20 13:44:54,184.02,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,reopened,2016-07-20 20:34:22,409.47,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,1,2016-07-20 10:40:53,684.92,,1,,"b""b' Windows build of this version at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,2,2016-07-20 10:40:53,748.43,,1,,"b'b"" Still causes problems with all subsequent Windows builds failing: url  This will probably require changes to the scripts in jenkins-infra to perform the cleanup in a different way that doesn\'t fail.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,3,2016-07-20 10:40:53,1346.33,,,1,"b""b' Cool improvements.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,4,2016-07-20 10:40:53,69.2,,,1,"b'b"" This should be good to merge. It broke the Windows build because was not set properly on the Windows worker. It is already part of our setup url  but for some reason didn\'t work (or maybe hadn\'t been redeployed since it was introduced). @adriaanm now made the change manually on the worker.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,5,2016-07-20 10:40:53,333.4,,,1,"b""b' LGTM! sbt ftw \\xf0\\x9f\\x8e\\x89 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,closed,2016-07-28 15:43:13,1148.85,0,4,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5292,closed,-,-,-,0,4,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,opened,2016-07-20 23:38:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,title,2016-07-20 23:38:43,00:00,,1,,"b""b' Fields: expand lazy vals during fields"," like modules '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,body,2016-07-20 23:38:43,00:00,,,1,"b'b"" (follow up for #5141 )# Fields phase fully expands lazy vals and modules Mixins is relieved of its bitmap emission duties.## Important changesthe locking scope of a local lazy val is now tied to the lazy val", following Dotty\'s encodingspecialized lazy vals work because the full expansion happens before specialization## Internal details Lazy vals remain  s (with a method symbol for its accessor) until the fields phase, along with deferred vals and all trait vals. Code that previously only considered  s when looking for accessors will need to widen this search to  . Also, will not lead to a field in these cases (ultimately, we should delay all field creation until fields.) Lazy val accessors, fields and bitmaps are now mixed in during the fields phase, which means erasure and specialization get a better look at them. Should we also move mixins before erasure?  @lrytz did the bulk of the work in moving our encoding of local lazy vals to the scheme used by Dotty, based on a suggestion by @DarkDimius. Locking is now down on the holder of the lazy val\'s value / init bit, instead of on the enclosing class (which had widened from the closure class to the owner of the method, making this more prone to deadlocks). All lazy vals and modules use double-checked locking, but modules no longer spin off their initialization to a compute method (it\'s short enough not to interfere with the inlining of the lazy accessor).## Notes from the implementation lab journalremove lazy accessor logic  now that we have a single ValDef for lazy vals,  with the underlying machinery being hidden until the fields phase  leave a for scala-refactoringdon\'t skolemize in purely synthetic getters,  but _do_ skolemize in lazy accessor during typers  Lazy accessors have arbitrary user code, so have to skolemize.  We exempt the purely synthetic accessors ( )  for strict vals, and lazy accessors emitted by the fields phase  to avoid spurious type mismatches due to issues with existentials  (That bug is tracked as -dev#165)  When we\'re past typer, lazy accessors are synthetic,  but before they are user-defined to make this hack less hacky,  we could rework our flag usage to allow for  requiring both the ACCESSOR and the SYNTHETIC bits  to identify synthetic accessors and trigger the exemption.  see also -dev#165  ok 7  ok 8 ok 9   previous attempt: skolemize type of val inside the private[this] val  because its type is only observed from inside the  accessor methods (inside the method scope its existentials are skolemized)bean accessors have regular method types, not nullary method typesmust re-infer type for param accessor  some weirdness with scoping of param accessor vals and defs?tailcalls detect lazy vals, which are defdefs after fieldscan inline constant lazy val from traitdon\'t mix in fields etc for an overridden lazy valneed try-lift in lazy vals: the assign is not seen in uncurry  because fields does the transform (see )ensure field members end up final in bytecodeimplicit class companion method: annot filter in completerupdate check: previous error message was tangled up with unrelated  field definitions (  and  ),  now it behaves consistently whether those are  or defsanalyzer plugin check update seems benign, but no way to know...error message gen: there is no underlying symbol for a deferred var;  look for missing  insteadavoid retypechecking valdefs while duplicating for specialize - see -privateScaladoc uniformly looks to  symboltest updates to innerClassAttribute by Lukas## TODO:### tests / review follow up[x] url [x] [x] [x] [x] [x] [x] SI-8873 var cannot be defined in case class with confusing error message[x] [x] -[x] -case-[x] [x] [x] -colon-[x] -fields-override-[x] [x]  update users of to reflect abstract  don\'t have a field[x] -[x] (check bytecode of )[X]  -understand bytecode changes in url  (thanks," Lukas!) [x] -Xcheckinit[x] look at bootstrapped bytecode diff### community build[x] bring back lazyAccessor for scala-refactoring[x] scalaz (missing sig for implicit val at position after use site)[x] scala-js ExportsTest fail (valdefs may also contribute exported methods: deferred val)[x] akka (existential in lazy val accessor)### follow ups after RC1:failing test in macro-paradiserangepos""'",,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,1,2016-07-20 23:38:43,396.25,,1,,"b'b"" I checked the test"," here\'s the fix: url  note that the diff I see is smaller than the one you link to in your comment. The only differences are in numbering lifted definitions and anonymous classes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,2,2016-07-20 23:38:43,1076.9,,1,,"b""b' Community build: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,3,2016-07-20 23:38:43,760.7,,1,,"b'b"" I\'ve taken a breadth-first pass over this and haven\'t found any issues so far. I\'ll dive in deeper tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,4,2016-07-20 23:38:43,21.47,,1,,"b'b"" @adriaanm I started looking at implementing url  but it\'s not clear to me what\'s the ultimate goal for the lazy val desugaring. Currently", the fields phase creates a variable and a getter for each lazy val. The lazyvals phase then splits up the getter into a getter and a method. Will this remain the same? Also, there\'s still some duplication between lazyvals and mixin: both have a method  ," the two implementations are basically the same. Will this also remain? For url  the idea is to expand a local into Should all of this be done in the fields phase? Or during lazyvals?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,5,2016-07-20 23:38:43,69.1,,,1,"b'b"" Thanks! My goal is to move the remaining lazy desugaring from mixin to lazyvals", so that there\'s no duplication. I have started poking around to convince myself that  \'s isn\'t used anymore. I\'m not sure I\'ll have time to move the logic that emits the init flags from Mixins to Lazyvals," but ultimately that would be the goal as well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,6,2016-07-20 23:38:43,218.4,,1,,"b'b"" Now I\'ve paged back in where I left this: mixins handles lazy vals in classes and uses the same init bit logic as checkinit"," so moving that to lazyvals could be tricky to do within the time budget for RC1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,7,2016-07-20 23:38:43,1.83,,1,,"b""b' yeah"," just found out the same :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,8,2016-07-20 23:38:43,1.42,,1,,"b'b"" so lazyvals only handles local lazy vals? then i think we can get rid of the phase and move the translation for locals to the fields phase. i\'m happy to take a look at this"," doesn\'t look too hard (famous last words).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,9,2016-07-20 23:38:43,2.62,,,1,"b'b"" Ah", that\'s an interesting approach," hadn\'t thought of that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,10,2016-07-20 23:38:43,4.0,,1,,"b'b"" It looks like it\'s some strange mixture of the two (EDIT: local lazy vals and modules in classes ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,11,2016-07-20 23:38:43,144.85,,1,,"b""b' wip: url  currently crashes in backend"," will pick it up tomorrow.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,12,2016-07-20 23:38:43,1100.08,,1,,"b'b"" @adriaanm here\'s the desugaring for local vals: url  Note that this revision is not rebased on the current top of this PR. I tried rebasing on top of this PR", the result is here: url  But this revision doesn\'t pass the test I wrote. There are a few TODOs in the commit, please take a look. A few more open questions:Can we remove the lazyvals phase? It seems it\'s still used for desugaring  s into a field," bitmap and lzycompute.Should we write the LazyHolders in Java? It would save getter / setter accesses. How should we proceed?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,13,2016-07-20 23:38:43,34.58,1,,,"b'b"" here\'s some more wip: url  things look a bit messy in the current stage. for example: gives note how the slow path is duplicated.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,14,2016-07-20 23:38:43,173.37,,,1,"b""b' Thanks! I pushed a reworked commit that expands on your wip for class members. Will incorporate the local val expansion after lunch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,15,2016-07-20 23:38:43,207.77,,1,,"b""b' validation failed because url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,16,2016-07-20 23:38:43,154.85,,1,,"b'b"" 1120e23 is mostly green"," except for:[x] [x] [x] -[x] -[x]  the problems are nulling of single-use lazy fields (I disabled because it nulled too much) and checkinit (haven\'t integrated that yet)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,17,2016-07-20 23:38:43,226.95,,1,,"b""b' @lrytz", I like the simplification of dropping the compute method for local lazy vals," but are we sure that this is ok from a performance point of view? What about the compute methods for member lazy vals?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,18,2016-07-20 23:38:43,0.68,,1,,"b""b' AFAICT"," one more thing before we can decommission the lazyvals phase:[x] add double-checked locking for module instantiation during fields'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,19,2016-07-20 23:38:43,606.6,,1,,"b""b' [x]    [x] : error: assignment to non variable[x] ", , :  warning: an unexpected type representation reached the compiler backend: ()Int.[x] ," : update check[x] -universe-code: update'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,20,2016-07-20 23:38:43,408.03,,1,,"b""b' [x] specialization \\xf0\\x9f\\x98\\xa7 [x] and local lazy vals: each iteration should have the lazy values uninitialized'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,21,2016-07-20 23:38:43,114.93,,1,,"b""b' [x] double-checked locking for local lazies?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,22,2016-07-20 23:38:43,1265.32,,1,,"b""b' url  # scalaz compile error # akka compile error # scala-js test failure  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,23,2016-07-20 23:38:43,115.38,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,24,2016-07-20 23:38:43,2.4,,1,,"b""b' Specialized lazy vals: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,25,2016-07-20 23:38:43,23.07,,1,,"b""b' is this the PR that fixes url  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,26,2016-07-20 23:38:43,103.45,,,1,"b'b"" Ah", good call -it\'s not. I don\'t think we have a pr for this one. Looksfixable in 2.12.1 thoOn Fri, Aug 19," 2016 at 15:30 Seth Tisue notifications@ wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,27,2016-07-20 23:38:43,133.58,,1,,"b""b' From akka in the community build:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,28,2016-07-20 23:38:43,825.68,,1,,"b""b' \\xe2\\x9c\\x85 url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,29,2016-07-20 23:38:43,225.82,,,1,"b""b' I did a pass over the full diff", a really nice improvement," I especially love the cleanups in mixin. Great to see the tests passing!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,30,2016-07-20 23:38:43,2.2,,,1,"b'b"" Thanks! Do you have any additional action items for me before this can be merged? I\'m investigating the latest failures (EDIT: they are benign check file updates). I was thinking of keeping the commit history mostly as is"," to document the refactoring steps.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,31,2016-07-20 23:38:43,27.32,,1,,"b'b"" Still looking at the discussion in url  so are you saying that dotty\'s approach (as outlined in url  is incorrect because reading on the volatile field does not necessarily mean that the initialized value will be read from the field? If so", then how is it different from the current approach for member lazy vals? Here, also the field is volatile," but the value field is read outside any synchronized block; so how does reading from the bit mask ensure that reading the value field will yield the initialized value?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,32,2016-07-20 23:38:43,2.73,1,,,"b'b"" Ok -let\'s chat about the local lazies because I think I may be missing something or not explaining myself well.  (First"," I\'m pushing force a slightly squashed version with reworded commit messages. No changes since last HEAD.) EDIT: Lukas resolved my confusion.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,33,2016-07-20 23:38:43,108.13,,,1,"b'b"" I think I\'m done here! \\xf0\\x9f\\x8e\\x89  Running one last community build: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,34,2016-07-20 23:38:43,606.93,,,1,"b""b' community build went green!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,35,2016-07-20 23:38:43,1232.68,1,,,"b""b' Scheduled another community build for the last commit (e61f06e): url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,36,2016-07-20 23:38:43,462.25,,1,,"b""b' Pushed some commits for discussion"," addressing review feedback.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,37,2016-07-20 23:38:43,11.47,,1,,"b""b' db1b671 will most probably require adaptations in "," if it goes in.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,38,2016-07-20 23:38:43,1319.23,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,39,2016-07-20 23:38:43,1041.82,,1,,"b""b' @adriaanm Needs a (trivial) rebase a la url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,40,2016-07-20 23:38:43,222.73,,,1,"b""b' @retronym -rebased! How do you feel about db1b671?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,41,2016-07-20 23:38:43,76.62,,1,,"b""b' That approach in erasure looks right me. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,42,2016-07-20 23:38:43,17.43,,,1,b'b\' I\\\'m not a big fan of specializing in erasure, TBH. So far," there are exactly 2 methods that are specialized so: and  . That\\\'s fine because they _need_ specialization for _correctness_. If we open the door of special-case-in-erasure to methods that want specialization ""only"" for performance (but not for correctness)", we create a precedent to justify many more such specializations. For example, what about (which looks like a free syntactic construct)? Removing the overhead of boxing in those cases should be left to an optimizer, IMO. In this case, even intra-method optimizations (which are always safe wrt separate compilation) are enough.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,43,2016-07-20 23:38:43,14.92,,1,,"b'b"" I guess we\'ll live with the extra boxes for now then"," just hope they will be unpacked before our next move. Tracking follow-up here: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,44,2016-07-20 23:38:43,78.63,,1,,"b""b' I think that ought to emit the same bytecode as the Java version", with the default compiler settings. There are a few ways to get there," and we can discuss them further for 2.12.1.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,45,2016-07-20 23:38:43,73.65,,1,,"b'b\' The easiest way to implement it for me in linker was to add several specialized ""synchronized"" methods before erasure and make genbcode collapse them back together. On 29 August 2016 13:04:31 Jason Zaugg notifications@ wrote:\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,46,2016-07-20 23:38:43,253.3,,1,,"b'b"" I would argue that [my solution]url  is a simpler way to get that specialization (its latest incarnation had no impact on scala-js", btw). It makes sense to me to special-case  \'s erasure. It doesn\'t result in an actual method call, so it doesn\'t set a precedent for other actual methods, eve if predefined. In any case, we should have the invariant that and erase to the same tree," modulo wrapping it in a marker for the backend to emit some extra monitor-related bytecode.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,47,2016-07-20 23:38:43,16.7,,1,,"b""b' /rebuild failure was due to overload again...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,48,2016-07-20 23:38:43,871.97,,1,,"b""b' I diffed the bytecode as follows"," will include some representative diffs in comments below:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,49,2016-07-20 23:38:43,0.43,,1,,"b""b' # local lazy  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,50,2016-07-20 23:38:43,3.03,,1,,"b""b' I stubbornly included my specialized erasure for  "," which resulted in the following over 2000 times: It also dropped the following unneeded casts:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,51,2016-07-20 23:38:43,0.63,,1,,"b""b' # signature for lazy compute methods  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,52,2016-07-20 23:38:43,6.42,,1,,"b""b' # no more compute method for module  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,53,2016-07-20 23:38:43,10.33,,1,,"b'b"" #  \'s underlying field no longer  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,54,2016-07-20 23:38:43,23.05,,1,,"b""b' # special erasure for synchronized after posterasure: I find this compelling enough to push my commit once more for discussion.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,55,2016-07-20 23:38:43,41.58,,1,,"b'b"" I don\'t have anything to add to my previous arguments. So if you think it\'s worth it", I yield ;) We\'ll wait until a firm decision about this is reached before releasing  0.6.12, as we\'ll need an adaptation in our back-end, as I mentioned earlier. (The whole point of releasing 0.6.12 one of these days is to support RC1," so it doesn\'t make sense for us _not_ to wait until we know what to do to ensure that support.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,56,2016-07-20 23:38:43,137.35,,1,,"b'b"" @sjrd", the version I pushed shouldn\'t need support in scala-js, assuming you run after cleanup? My argument against this opening the gates is that synchronized is not a method," while locally is. We only do this special casing for these magic methods that are truly primitive (and thus not definable in the library). ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,57,2016-07-20 23:38:43,3.42,,1,,"b'b"" Ah but we don\'t ;-) We run right after (before and  ).Yes"," being a primitive is a reasonable stance on what qualifies for special treatment.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,closed,2016-08-30 11:10:54,692.18,3,45,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,reopened,2016-08-30 11:11:06,0.2,3,45,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,58,2016-07-20 23:38:43,6.1,,1,,"b'b"" Ah I checked. Since you run after Mixins My assumption doesn\'t hold. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,59,2016-07-20 23:38:43,1.78,,,1,"b""b' Ok", great! Could you port the change from cleanups in my commit here to the suitable spot in scala-js," please? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,60,2016-07-20 23:38:43,2.38,,1,,"b'b"" Yes", OK," I\'ll do that right now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,61,2016-07-20 23:38:43,38.87,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,62,2016-07-20 23:38:43,1343.5,,1,,"b'b"" Regarding the byte code diff and fields no longer being  : that\'s progress according to the note at  From [JLS 17.5.3]url Moreover", [jvms-6.5.putfield]url  says:... and Java 9 may actually close this loophole (on older VMs," the isn\'t actually thrown) ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,63,2016-07-20 23:38:43,137.92,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,64,2016-07-20 23:38:43,16.67,,1,,"b""b' Bytecode diffs all LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,65,2016-07-20 23:38:43,45.13,,,1,"b'b"" Could the local lazy method be simplified to remove local variables after the erasure change?   I\'m happy for this to come in a followup PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,66,2016-07-20 23:38:43,581.82,,1,,"b""b' The earlier test suite failures are due to jenkins load.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,67,2016-07-20 23:38:43,164.03,,1,,"b""b' LGTM '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,68,2016-07-20 23:38:43,397.28,,1,,"b""b' \\xf0\\x9f\\x8e\\x89 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,closed,2016-09-01 08:41:28,1290.37,3,54,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5294,closed,-,-,-,3,54,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,opened,2016-08-14 07:59:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,title,2016-08-14 07:59:10,00:00,,1,,"b""b' SI-2458 Import shadows def in other unit'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,body,2016-08-14 07:59:10,00:00,,1,,b'b\' Fixes the implementation of point 4. from SLS chapter 2: We had code to deal with this:  if ( && ) { if (isPackageOwnedInDifferentUnit(defSym)) defSym = NoSymbol  But, in the  , no was around, due to filtering in  . The depth of the imported symbol was the same as the depth of the defined symbol, which didn\\\'t pass:  already had special handling for Java sources: if the import is non-wildcard and depths are equal, retain the import.  This commit does the same thing for Scala sources," using the as the criterion. It also makes the check for the ""imported ... is permanently hidden"" warning to avoid the spurious warning.  Fix by retronym Excavation and preparation of bones for mounting by community  Fixes #2458 Fixes #9552 \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,1,2016-08-14 07:59:10,968.08,1,,,"b'b"" This doesn\'t fix SI-9552. The import should be higher precedence than definition in other file. Maybe the package object fools a depth check? and separate unit  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,2,2016-08-14 07:59:10,1253.3,,1,,"b""b' Fixes the Java check for explicit import. Scala lets wildcard import hide foreign definition.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,3,2016-08-14 07:59:10,80.22,,1,,"b""b' Suffers from the broken build.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,4,2016-08-14 07:59:10,1129.52,,1,,"b""b' Some documentation notes the bug and should be updated:  url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,closed,2016-11-07 19:16:05,676.92,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,5,2016-08-14 07:59:10,217.92,1,,,"b'b"" @som-snytt what happened to this PR? Are the bugtracker entries up-to-date currently? url  is closed", url  is open," and I\'m confused).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,6,2016-08-14 07:59:10,19.13,,1,,"b'b"" @Blaisorblade The old issue was closed prematurely when the spec was clarified; this PR was meant to be implementation which also nails down the newer issue (which also objects to the behavior as specified). I don\'t remember the build status"," so I\'ll have to revisit it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,reopened,2016-11-29 21:08:24,112.32,2,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,7,2016-08-14 07:59:10,2.45,1,,,"b""b' @som-snytt Thanks \\xe2\\x80\\x94 it sounds like all the open parts are tracked by the newer issue. I dread unfixed closed issues and forgotten bugs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,closed,2016-11-30 19:28:01,1339.62,3,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,reopened,2017-12-09 03:51:36,503.58,3,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,8,2016-08-14 07:59:10,587.18,,1,,"b""b' Previous failure was due to cycle in with wildcard import from companion.  There was also an import in scaladoc that was not to spec. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,9,2016-08-14 07:59:10,564.4,1,,,"b'b"" This idiom now inoculates against accidental local dir named  : Too bad that\'s not more useful.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,10,2016-08-14 07:59:10,990.82,,1,,"b""b' Heads up for url  which is likely to collide with this.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,11,2016-08-14 07:59:10,545.17,,1,,"b'b"" Don\'t forget to update the spec deficiency about root imports and aliasing. url EDIT: That was added in url  but note the limitation mentioned on gitter. The original paulpation was url  Not sure it\'s obvious that the spec includes the behavior here", where not only two imports," but any two name bindings that can be resolved to the same type are acceptable.  The spec needs definition of root imports per se and that they are like and implementations may provide platform-specific or or whatever. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,12,2016-08-14 07:59:10,201.32,,1,,"b""b' rebase?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,13,2016-08-14 07:59:10,1438.43,,1,,b'b\' My plan is to re-do this on 2.13 and then add to make preamble imports tractable. Not sure exactly how it will work, but similarly to the leading exclusion, a source file can opt out of the preamble; however, it seems to me that the syntax should align with ordinary binding.  If I compile with then turns it off with no special magic.  If I compile with  ," then does not hide? Unless the rule is construed that ""level 4"" includes the preamble imports. I don\\\'t think anyone considered that option", i.e.," the preamble is not just stuck at the front of your source; it has level 4 ""binding force"" like bindings from a package clause that is not in the current unit.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,14,2016-08-14 07:59:10,1273.17,,1,,"b""b' Rebased with the fix for root imports aka preamble imports. No longer impacts the world like an asteroid.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,15,2016-08-14 07:59:10,272.77,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,16,2016-08-14 07:59:10,26.63,,1,,"b'b"" Gitter is down? so I\'ll ask here whether this existing behavior seems too loose:  I was considering whether the ambiguity in a test class deserves a pass. (Update: Yes", it does, even though the fix (moving import inside packages that need it) is easy. If the import goes unused," the user can ask for a warning.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,17,2016-08-14 07:59:10,1358.23,,1,,"b""b' I needed this today. > imported '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,18,2016-08-14 07:59:10,115.23,,1,,"b""b' I need this basically all the time.  > [warn] /:9: imported '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,19,2016-08-14 07:59:10,470.62,,1,,"b""b' Moving this to the next 2.13 milestone.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,20,2016-08-14 07:59:10,374.6,,1,,"b'b"" @adriaanm There\'s a forward port PR for 2.13; I have a commit to push here; would you consider that?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,21,2016-08-14 07:59:10,14.78,,1,,"b'b"" Sure", as a backport once it has landed in 2.13.x. I\'m concerned with how thin our attention is spread across the PR queue these days, so I\'d like to compact the queue. (It\'s nice to be so outnumbered," but also regret the delays this is causing.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,22,2016-08-14 07:59:10,86.52,,1,,"b""b' Superseded for 2.13 by url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,closed,2018-05-30 15:49:39,718.05,4,20,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5339,closed,-,-,-,4,20,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,opened,2016-08-17 17:49:48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,title,2016-08-17 17:49:48,00:00,,1,,"b""b' SI-6967 Primitive ClassTag unapply is deprecated'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,body,2016-08-17 17:49:48,00:00,,1,,"b""b' Follow-up to add deprecation in 2.12.0.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,1,2016-08-17 17:49:48,773.95,,1,,"b""b' Can we not remove them immediately? It should be a source-compatible change", as a call that would previously resolve to a specialized overload will simply now resolve to the generic overload," which does the same thing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,2,2016-08-17 17:49:48,701.17,,,1,"b""b' I agree with @sjrd.  is not covered by any compatibility promises anyway.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,3,2016-08-17 17:49:48,1428.23,,,1,"b'b"" Thanks for catching that oversight", @som-snytt -we should deprecate this in 2.12.x so we can remove in 2.13. It would be great if telling people  is experimental would actually be heard and give us the freedom to remove stuff, but in practice it does not... I\'d be less concerned if we were talking _, which is explicitly excluded from mima (not to mention its name)," but  is not. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,4,2016-08-17 17:49:48,11.38,,,1,"b""b' Sure. Although in this particular case", as I was saying, I think removing them is fine because it is still 100% source compatible, thanks to the overload that takes (which is not going anywhere). In fact, I argue that it is even _more_ source compatible to remove them than deprecating them. If they are deprecated," I have to go through an artificial hoop with an ascription to bypass the deprecated and choose the one taking  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,closed,2016-08-24 21:20:17,210.48,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,reopened,2016-08-24 21:20:23,0.1,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,5,2016-08-17 17:49:48,177.23,,,1,"b'b"" Right", good point! That\'s convincing to me. As I\'ll be traveling," I\'ll let @szeiger decide here.  (On my phone and buttons seem to jump around.) ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,6,2016-08-17 17:49:48,81.83,,1,,"b'b"" I don\'t have a strong opinion because of url  which goes the other way", deprecating the unapply(Any) for regex. People don\'t like messages, and they can also have subtle use cases. The only behavior change is that primitives are boxed in user code. Happy to type in whatever change is deemed OK, so long as, to quote Simon Pegg\'s Scotty," I\'m not blamed for it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,7,2016-08-17 17:49:48,619.32,,1,,"b""b' SI-9380 is not comparable to this case. In  ", _only_  s can ever be successfully matched, so it makes sense to narrow the type down to  . Here, values of arbitrary types can be matched (depending on what the represents)," so we need the overload with  . The other ones can therefore be removed.Not even that. The primitives were already boxed when given to  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,8,2016-08-17 17:49:48,106.83,,1,,"b'b"" There is a subtle difference in the implementation of the overloads vs the generic method: I\'d argue that the overloads get it right and the right course of action is to only deprecate the overloads now and fix the generic implementation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,9,2016-08-17 17:49:48,47.02,,1,,"b""b' @szeiger Your example is mostly illustrating the problems with for generics instantiated to primitive values. It has very little to do with classtags in particular.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,10,2016-08-17 17:49:48,1.77,,,1,"b'b"" If you don\'t rely on to expose weird bugs"," the behavior is completely fine:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,11,2016-08-17 17:49:48,21.7,1,,,"b'b"" I doubt that there\'s an easy way to avoid this issue (other than flat out disallowing default initializers for polymorphic AnyVals", which would limit the problem to uninitialized values). You could argue whether should ever see a in this case. Ideally it should not but it\'s probably unavoidable, too. But my main point is that the overloads are not 100% source compatible, therefore I would prefer to deprecate them first and remove them in 2.13," unless there\'s a reason for a more urgent solution that I\'m missing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,12,2016-08-17 17:49:48,3.2,,1,,"b""b' OTOH", since the generic implementation is the broken one, if we fix it now," we could also delete the overloads immediately.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,13,2016-08-17 17:49:48,17.62,,1,,"b'b"" You cannot fix the generic implementation for the case. But that\'s because is broken all over the place; not because the generic implementation is broken. There are a lot of other things that are completely broken with  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,14,2016-08-17 17:49:48,92.8,,1,,"b'b"" I know", but unless someone has a silver bullet, we can only fix them one at a time. You\'re right that the current is unfixable. could work but it would be pointless as a standalone method. As far as usage in the pattern matcher is concerned, I think the null checks for primitive types need to be removed for correctness. This does not look right to me: If the pattern matcher already knows that the types are incompatible," there\'s no reason to call  . The only case where the change is relevant is a match where and (but not  ). I would expect such a test to succeed for because a cast also succeeds.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,15,2016-08-17 17:49:48,383.52,,1,,"b'b"" We shouldn\'t. Every time you think you\'ve fixed an bug", you can make it resurface with one more indirection of generics. For example," in this case: The is so fundamentally broken that any decision making based on the behavior of is making Scala more complex for no reason whatsoever.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,16,2016-08-17 17:49:48,125.75,1,,,"b'b"" Interesting discussion. I wonder if there\'s an argument to neither deprecate nor remove. My previous reference to the  debacle was just to say that use cases are subtle (for instance", reliance on that unapplySeq producing a List and not a Vector). It\'s worth assuming that edge cases like unapply(null) are exploited. So the change pushes the bytecodes for boxing to user code (instead of in unapply). Maybe that only matters if you\'re counting bytecodes; but people do count them. Maybe there\'s no harm in the status quo. Or, I could head over to StackOverflow. Actually, in this form it\'s still a puzzler (in the sense of not unreasonable to expect the obvious): Also," I\'m not sure I understand that should match for any type test. Maybe I misunderstood the question.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,17,2016-08-17 17:49:48,810.8,1,,,"b'b"" @som-snytt Not matching null for primitives because it doesn\'t match for AnyRefs is a good point. The difference for AnyVal is that null is not a legal value", so when you get a null you know that it must be an artifact of the compiler leaving a boxed AnyVal uninitialized. But since you don\'t know what the type of that AnyVal should be (or if it\'s an AnyVal at all, and not a legitimate null AnyRef), there\'s really no correct answer after all. Not matching nulls is at least consistent between AnyVal and AnyRef. In light of this, I\'d say remove the overloads. It may not get much better, but it\'s simpler and at least no worse than the current situation. What case are you thinking of where this would require boxing in user code? If you match on an unboxed value," you don\'t have to do a type check in the first place. You only call if you have an already boxed value.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,18,2016-08-17 17:49:48,1207.5,,1,,"b'b"" Let\'s try to make a final call here today"," so we can have all RC1 PRs merged tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,19,2016-08-17 17:49:48,348.47,,1,,"b'b"" @adriaanm From @szeiger\'s last comment"," it seems to me the consensus would be to remove the overloads.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,20,2016-08-17 17:49:48,152.65,,1,,"b""b' Superseded.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,closed,2016-08-29 16:22:32,1142.15,3,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5347,closed,-,-,-,3,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,opened,2016-08-18 23:34:03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,title,2016-08-18 23:34:03,00:00,,1,,"b""b' Add flags -Ysysdef and -Ypredef to configure root imports [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,body,2016-08-18 23:34:03,00:00,,,1,b'b\' This adds a and flag to give you full control over global imports for Scala compilation units.  _Background information:_  By default, scalac imports  ,  , and into the namespace of Scala compilation units.  As it stands, we have two existing flags that adjust the behavior of predefined imports. disables all of these. disables  .  There are a few other nuances to the behavior of imports. The most important behavior is that is  if there are any direct leading imports for anything within  . For example," an import to will cause everything else normally imported by predef to be unimported.  #### Changes Introduces the notion of ""sysdefs"" and ""predefs"" for Scala compilation units. Sysdefs are global imports that are imported at the top of all Scala compilation units _under all circumstances_. Predefs are imported after sysdefs and can be masked by top level imports in the source file (to match the existing behavior of directly importing from  ). Adds which controls the global sysdef imports for all Scala compilation units. The default value is set to  . Added which controls the predef imports for Scala compilation units. The default value is set to  . I\\\'d be great to get any feedback. I would also to back port this to 2.11. \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,1,2016-08-18 23:34:03,7.23,,1,,"b""b' It looks like it would be reasonable to implement support for importing individual symbols. For example","  . Should I push this a little further?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,2,2016-08-18 23:34:03,11.6,,,1,"b""b' I would love to see this feature"," with fine-grained support as described above.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,3,2016-08-18 23:34:03,219.68,,1,,"b'b"" That was my thinking as well. There might be considerations about symbol init which makes it not work as simply as an import? The idiom would be  . Does the refactor of that part work the same? I remember the import has to be at the top of the unit", because otherwise the semantics looks like unimporting. The REPL supports it at the top. The other part is don\'t import our own package. There are postSetHooks for settings which you can use to wire -Ypredef to -Yno-imports and -Yno-predef. I guess -Yno-imports resets to empty," -Yno-predef strips Predef. (As you have it in the code.)  . uses that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,4,2016-08-18 23:34:03,324.97,,1,,"b'b"" I\'m very much in favour of this. However if deprecation warnings are added for existing compiler flags I\'d like to see some mechanism to disable them. Maybe flag deprecation warnings could also be covered by  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,5,2016-08-18 23:34:03,10.5,,1,,"b'b"" @milessabin If that\'s for cross-building sbt reasons", you can make compiler flags conditional to the scala version. I had to do that with, for example," 2.12 renaming to  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,6,2016-08-18 23:34:03,6.82,,1,,"b'b"" @dwijnand no", not really. If a warning really shouldn\'t be ignored it should be an error. If it is permissible to ignore it, at least temporarily, then it should be possible to note the warning," disable it and return a build uncluttered with noise. People don\'t ignore warnings for fun ... typically there\'s some constraint that prevents them from fixing them immediately ... that being so we should avoid imposing additional burdens on them. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,7,2016-08-18 23:34:03,439.52,,1,,"b'b"" TIL I think there\'s a proposal for warnings to be typed"," so it\'s easier to filter them (in a reporter). Then maybe they\'ll do warning suppression of a sort.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,8,2016-08-18 23:34:03,907.65,,1,,"b'b"" I made an attempt at handling import selectors-some help needed for this one"," so I\'ve added a few comments to my own code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,9,2016-08-18 23:34:03,739.63,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,10,2016-08-18 23:34:03,617.62,,,1,"b'b\' Getting the test to pass is going to be ""fun"" (read: challenging)", regardless of support for import selectors. For this test to pass, hard coded logic for needs to be generalized to handle all predefs. To make this easier, I may put a constraint that all predef imports would automatically be attached to  . This means wouldn\\\'t behave but would be fine.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,11,2016-08-18 23:34:03,11.27,,1,,"b""b' @andyscott While you are on it"," can you add something to treat named imports as wildcard imports?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,12,2016-08-18 23:34:03,2.1,,1,,"b'b"" @soc I\'m not familiar with what you mean by start trees. Can you explain?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,13,2016-08-18 23:34:03,4.3,1,,,"b""b' @andyscott  Sorry"," I was still editing ='""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,14,2016-08-18 23:34:03,420.15,,1,,"b""b' One issue I am still having: Many of the tests"," such as are failing with a diff error due to the following warning output: I noticed a few existing tests extending override the debug flag to suppress this warning. Do I need to do this for all of the failing tests or is there a better solution for  this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,15,2016-08-18 23:34:03,157.42,,1,,"b'b"" I guess you\'re talking about your local test output", not the jenkins failure  That log output is when  , which is not on for builds, right? I haven\'t followed the last changes," so I don\'t understand the semicolon separator change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,16,2016-08-18 23:34:03,154.53,,1,,"b'b"" I made the delimiter configurable for multi string settings"," since commas might be present in the import selector syntax.  . I believe I fixed that particular error in one of the last commits. It had to do with calling on an Import\'s expr. It looks like it was attaching some range information in certain cases.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,17,2016-08-18 23:34:03,22.95,,1,,b'b\' Ah. I wonder if it isn\\\'t better just to make the option parser aware of brackets. Needless to add, if we\\\'re imitating import syntax, and so on. It\\\'s commas all the way down. Or, it\\\'s not a multistring at all, but a string. When you receive it," prepend ""import"" and parse it and typecheck it.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,18,2016-08-18 23:34:03,150.42,,,1,"b'b"" I\'m okay with any of those approaches. The custom delimiter seems to work fine"," but if you\'d prefer that I go a different route let me know and I can switch it over.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,19,2016-08-18 23:34:03,370.38,,,1,"b'b"" Just noticed doesn\'t actually work. I remember the options are hardcoded (because the package isn\'t loaded yet) but it would be nice if all these options could be handled uniformly. Then would be and so on.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,20,2016-08-18 23:34:03,1139.12,,,1,"b'b"" This is very cool", and I support developing this, but we can\'t commit to shipping this with 2.12.1," so moving to the WIP milestone for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,21,2016-08-18 23:34:03,1065.95,,,1,"b""b' @adriaanm No problem! I have been slow to wrap this up. I will find some time over the upcoming holidays to put together a proper solution in a rebased PR for you all to review.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,22,2016-08-18 23:34:03,11.25,,,1,"b""b' Sounds good"," thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,23,2016-08-18 23:34:03,908.17,,1,,b'b\' I simplified the solution and also split the one new flag into two new flags to accommodate for the different behavior of different kinds of global imports. The main PR description has mostly been updated to describe this. Also," the first commit in the rebased PR intentionally fails. I wanted to run the new implementation against all the existing tests. Everything seems to work and the two tests that fail only fail because I completely disabled the existing ""no "" flags and I didn\\\'t bother to update the tests. In the next PR", I feature flagged the new behavior to make sure all existing flags work exactly as they should. I\\\'m sure I need to add more exhaustive tests, but I figure might be in a good place for a review.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,24,2016-08-18 23:34:03,807.77,,1,,"b'b\'  This is already ""covered"" (but not documented clearly) by  . I went ahead and updated the documentation for this test to be consistent with the updated documentation for the parallel test for  . \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,25,2016-08-18 23:34:03,1330.03,,1,,"b""b' @lrytz Fixed. Would you like me to rebase  squash any commits? /cc @milessabin (re: TLS 2.12.1)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,26,2016-08-18 23:34:03,72.07,,,1,"b'b"" @andyscott thanks! This PR needs to be rebased on top of current 2.12.x"," there\'s a conflict.  Leaving a second review to @adriaanm.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,27,2016-08-18 23:34:03,3.42,,1,,"b'b"" I\'ll take a look. When you rebase"," I\'d suggest squashing the commits.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,28,2016-08-18 23:34:03,5.35,,1,,"b'b"" My high-level questions: Some duplicated logic: if none of / flags is present", vs. when one of them is (e.g., what to do  ). The new code is much more complex as it needs to do lookups, while in the existing, default case we can just refer to the symbols in definitions (see  , e.g.,"  ). So it probably makes sense to keep both. It\'s maybe a bit of a historical artifact / implementation detail to have the split between predef and sysdef?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,29,2016-08-18 23:34:03,9.27,,,1,"b""b' Rebased and squashed.  @lrytz  I kept the duplicate logic to ensure perfect compatibility with the existing predef behavior. I figure", after a period of transition, we we could remove the original logic. The split behavior of  may be a historical artifact. This PR, at the very least, documents it a bit in the implementation. If the  behavior is simplified," it should be pretty straightforward to update this code to match it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,30,2016-08-18 23:34:03,10.97,,,1,"b'b"" I don\'t think we should let history impede good design", especially when we\'re talking about  features such as  /  flags.  I much prefer your original approach where you can just specify the default imports, where we could have three options:  ,  , and arbitrary list of imports. How about calling it  ," and dropping the old flags?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,31,2016-08-18 23:34:03,7.85,,,1,b'b\' Correct me if I am wrong," but what I\\\'m hearing is:  Drop and in favor of the new flag(s)  and to  This sounds great to me-but how do you want to unify the behavior of ""sysdef"" vs ""predef"" style imports?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,32,2016-08-18 23:34:03,1.5,,1,,b'b\' Yes," that\\\'s what I meant. Could you help me understand the issue with  > unify the behavior of ""sysdef"" vs ""predef"" style imports?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,33,2016-08-18 23:34:03,5.53,,1,,"b'b"" I mean", your table in the description lists the values for that correspond to the  options, right? If you specify any imports," you\'re going to have to be exhaustive. Is that what you\'re referring to?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,34,2016-08-18 23:34:03,5.83,,1,,b'b\' The default root imports are  ,  , and  . In the vast majority of cases," they all behave ""the same""-just like regular leading imports at the top of a file.  gets special treatment. Leading imports into the import space of will cause the import to to be excluded from the compilation unit. So importing at the top of your file will prevent the import to from being available.  I needed to make a distinction between the kind of root import"," so I called one ""sysdef"" and the other ""predef"". System defined imports can\\\'t be excluded while predefined imports can.  If one flag covers both of these styles of imports"," then I think we need a special syntax for the flag to distinguish the ""style"" of import", or we need to unify the behavior of all root imports.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,35,2016-08-18 23:34:03,1.48,,1,,"b""b' @adriaanm I removed the table"," since it was out dated (for the original iteration of this PR).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,36,2016-08-18 23:34:03,0.32,,1,,"b""b' Ah", thanks for reminding me. Should we preserve this behavior for the setting, though? We could just require you to use renaming to hide imports from  , like you would for any other import.  EDIT: hmm," this is confusing -let me rephrase in another comment'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,37,2016-08-18 23:34:03,1.72,,1,,"b'b"" I think we should not have this special behavior for predef imports in the setting. If you don\'t explicitly list in the list passed to  ", you don\'t get it; if you want to just import one thing from  ," name it explicitly.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,38,2016-08-18 23:34:03,0.47,,1,,"b'b\' Renaming works. I have a stashed implementation that supported using renaming to ""unimport"" any existing import (predef", leading, or otherwise).  For this PR, maybe we could stick to preserving the existing behavior for 2.12.2 and I could begin additional work to cleanup the overall behavior? That could be slated for 2.12.3 or beyond.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,39,2016-08-18 23:34:03,0.77,,1,,"b'b"" I\'d rather not do this gradually", but instead figure out the design we can stick with. This option is not used much," and I\'d rather spend our energy on this once.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,40,2016-08-18 23:34:03,3.75,,1,,"b'b"" Questions: Should we switch to one implementation for root imports? Right now I have it feature flagged. Should the new implementation have two style of imports or a unified predef import? A unified import would be a breaking change", IMHO," because an extremely small subset of Scala files wouldn\'t compile correctly anymore Can we do both of the above at once?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,41,2016-08-18 23:34:03,3.62,,1,,"b'b"" I don\'t want to change the meaning of code when not using the new flag. So", yes," we\'ll have to preserve the logic that interprets predef imports differently when type checking source code.  I assume we can use  logic to build the root context when deriving it from the flag.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,42,2016-08-18 23:34:03,6.62,,1,,"b'b\' So: Keep the ""feature flagged"" behavior Update the new implementation to have one style of import. To ""exclude"" this import", we will use import renaming \\xc3\\xa0 la  .  I have an implementation of this already tucked away. The logic to support unimportant already imports was... wonky. I had to introduce a private symbol in to keep track of which predefined imports had been unimproved. I can get a branch of this going again, if you\\\'d like.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,43,2016-08-18 23:34:03,63.28,,1,,"b'b"" Concretely"," I\'d take the current implementation   and turn it into:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,44,2016-08-18 23:34:03,16.73,,1,,"b'b"" If you just create a regular context using the value of  "," I think you won\'t be able to exclude any of the predefs. Do we want to allow exclusions on a per file basis with the current mechanism or with import renaming  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,45,2016-08-18 23:34:03,3.33,,1,,"b""b' if you just want any2stringadd", you would do  ," right?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,46,2016-08-18 23:34:03,0.58,,1,,"b'b"" If you don\'t want it"," you\'d pass in  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,47,2016-08-18 23:34:03,3.97,,1,,"b'b"" Whoops. I should clarify: On a per .scala file basis", do you want to allow excluding root imports? With the code you posted, I believe you won\'t be able to exclude root imports within a single file.  For excluding a root import in a .scala file," the current pattern is to just import something else from the same scope. to exclude  . But I could see supporting a wildcard rename to force an exclusion.  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,48,2016-08-18 23:34:03,16.0,,,1,"b'b"" Ah", I see -hadn\'t thought of that use case. I\'m not sure how useful that is. Seems like it would be subsumed by full control over predef imports? If you have some exotic sources that require opting out of some Predef imports mixed in with others that want the full set, they could either be in a different project that uses different settings or you\'d have to explicitly in the files that need it, and not add it to the list.  For a more ambitious effort," a SIP for abstracting over imports could be pretty cool -something like:   and then you can do to get that list of imports. Import identifiers would live in a separate namespace and have priority over all other identifiers.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,49,2016-08-18 23:34:03,36.78,,,1,"b'b"" For how useful this exclusion behavior is", I\'m not sure! Honestly I don\'t think the exclusion trick extremely useful for on its own, but for broader custom predefs it might be really nice-especially if it\'s given a specific syntax such as  .  Regardless: If I remove the current exclusion behavior (with the split  flags), then the new root import logic won\'t be backwards compatible with existing code. Breaking changes (extremely uncommon," I\'m guessing) under an experimental flag seem fine-but my long term goal would be to dump the existing implementation in favor of this more general implementation. What\'s the best path forward on this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,50,2016-08-18 23:34:03,10.2,,1,,"b'b"" I don\'t know. I would prefer to modularize Predef so that its parts can be wildcard-imported"," rather than relying on a special interpretation of what it means to import a named entity from Predef to avoid importing all of it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,51,2016-08-18 23:34:03,1194.1,,1,,"b'b"" Just noticed there\'s a ticket for this. url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,52,2016-08-18 23:34:03,1019.62,,,1,"b""b' I really like the concept of this!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,53,2016-08-18 23:34:03,510.0,1,,,"b'b"" Any  on how to best approach this? As it stands", I don\'t break any existing behavior-but that means I\'ve built some logic to accommodate the uncommon predef exclusion trick in the current compiler.  That being said... with the ability to specify custom predefs, I\'m beginning to like the idea of retaining the predef exclusion logic.  If I have a predef of and I import  , then it seems reasonable to me that the rest of should be automatically excluded. I suspect this isn\'t used much because most people take all of for granted and have no reason to individually import items. With custom predefs," that probably won\'t hold true.  Thoughts?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,54,2016-08-18 23:34:03,79.85,,,1,b'b\'  Good point -that made something click for me :-) ![My thinking about this case had become very uptight]url  How so? A predef module should be designed so that you can import all of it at once, no\\xc2\\xbf  BTW," I just had a neat idea on how to model abstracting over imports:   An interesting question: should an export result in a member? that way you could implement members by ""exporting"" them.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,55,2016-08-18 23:34:03,98.63,,1,,"b""b' If you could export  "," it would open up possibilities for abstraction that were previously only accessible via inheritance.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,56,2016-08-18 23:34:03,32.45,,1,,"b""b' Indeed :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,57,2016-08-18 23:34:03,252.9,,,1,"b'b"" I can\'t be the only one to remember this has been talked about before :P url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,58,2016-08-18 23:34:03,4.75,,1,,"b""b' Thanks -I for one had forgotten.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,59,2016-08-18 23:34:03,176.68,,1,,"b'b\' Some sort of ""export"" construct could be extremely useful. See also my [export-hook]url  in particular the description of [ ]url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,60,2016-08-18 23:34:03,248.68,,1,,"b""b' @adriaanm Are these just cool ideas or are they going to be materialized in a SIP? :wink:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,61,2016-08-18 23:34:03,1194.55,,1,,"b""b' FYI: this has been [merged]url  in Typelevel Scala 2.12.1.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,62,2016-08-18 23:34:03,678.63,,1,,"b'b"" Before we merge this", I\'d like to reduce this to one command line option. In code," here\'s what I have in mind: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,63,2016-08-18 23:34:03,81.03,1,,,"b'b"" I\'ll take a stab at this over the weekend when I\'ll have some hack time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,64,2016-08-18 23:34:03,643.92,,,1,"b'b"" Thank you! It\'s been a lot of back and forth on this one..""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,65,2016-08-18 23:34:03,991.78,,1,,"b""b' In a discussion with retronym", it just occurred to me this is also useful during migration. We could remove stuff from Predef," and leave DeprecatedPredef around for you to import using this flag while you migrate from 2.12 to 2.13'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,66,2016-08-18 23:34:03,649.17,1,,,"b'b"" it\'s not overly obvious", but the docs of the syntax would lead one to believe that should work," but it does not because it needs to be two separate parameters  .  A few niggles I noticed:  1. the predef seems to need to be defined outside of the compilation? e.g. I cannot put a into my project and then use  . 2. not possible to use with :disappointed: which would be useful. Workaround is to use  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,67,2016-08-18 23:34:03,7.6,,,1,"b'b"" ~~eek", most importantly, this doesn\'t seem to be recognised by the presentation compiler!~~ never mind," bug in sbt-ensime / coursier. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,68,2016-08-18 23:34:03,329.38,,1,,"b""b' Also +1 for a with single arg syntax  . Reviewing the transcript"," I may have suggested the opposite last year.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,69,2016-08-18 23:34:03,954.05,,,1,"b'b"" Some feedback.  I\'ve been using this feature in the TL build of scala (in fact that\'s why I\'m using TL Scala). It\'s great", I love it!  I\'ve found I use it to minimise rather than provide a custom, extended, one. Indeed, it\'s made me conclude that I don\'t want a at all, I just want to control the system imports.  This is what I am using:   There are some problems with going beyond the std imports / predefs:  1. developers using inferior IDEs are unable to get the benefit of this compiler feature 2. the system imports do not behave like a preamble, it feels more like compiler magic and perhaps there is an opportunity to simplify the semantics in a (breaking) future version of scala.  As an example, I was using in my sysdefs and the following code was fine   but if I were to use the default  (or none) then this code would *not* compile   because has a subpackage called  .  So, as much as I love this feature (and I\'m really looking forward to it), I must admit to being a little bit suspicious about the whole concept of a sysdef / predef (including the one in the current releases of scala). What I actually want," and what I think a lot of people will assume this is: is the ability to provide a custom set of imports that behave **exactly** like a preamble in all source files. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,70,2016-08-18 23:34:03,117.55,,,1,"b""b' one more thing", my import of means that when I have an explicit in my code," I get ambiguous imports for uses of  . Workaround is to  ... but I would have expected the import to win because it comes after the preamble. Further evidence that the system / predef imports are magical?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,71,2016-08-18 23:34:03,657.22,,1,,"b'b"" Name binding precedence and shadowing in chapter 2 of the spec is surprisingly surprising.  The spec says but doesn\'t specify how. I noticed you get a scoping level; the following says it\'s a wildcard import. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,72,2016-08-18 23:34:03,1011.48,,,1,"b'b\' Just dropping a note my use-case for this feature is to be able to provide ""orphaned type class instances""", which are implicits that aren\\\'t visible by default due to them not being defined in the companion objects of the types involved.  I\\\'d like to be able to instruct users to just use some import by default.  Seeing that this is scheduled for shipping in 2.12.3 (hopefully, fingers crossed) makes me very happy.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,73,2016-08-18 23:34:03,3.62,,,1,"b'b"" Also", I see that because this is about default system definitions and Predef, there might be conflicts involved.  I\'m personally fine with library authors preparing packages or objects for this feature (clean," conflict free).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,74,2016-08-18 23:34:03,40.35,,1,,"b'b"" btw"," this feature doesn\'t work very well with  ... lots of warnings.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,75,2016-08-18 23:34:03,6.72,1,,,"b""b' Ah"," that might be a blocker.  How does warn-unused work with the current sys imports and Predef? Does it do hard-coded filtering? Can it be fixed?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,76,2016-08-18 23:34:03,151.47,,1,,"b'b"" There\'s an old jedi mind trick: where  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,77,2016-08-18 23:34:03,146.4,,1,,"b'b""  The milestone mostly indicates we\'re open to shipping this in that release"," but we likely will need some help to address the super valuable feedback by @fommil and others before this can actually ship.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,78,2016-08-18 23:34:03,136.18,1,,,"b'b"" I\'m sorry to bump this again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,79,2016-08-18 23:34:03,8.3,,,1,"b'b"" I\'m delighted to bump it again.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,80,2016-08-18 23:34:03,451.28,,1,,"b'b"" I\'d like to finish this feature and get it shipped. I\'ll haven\'t reviewed the code or discussion in quite a while"," so over the next few weeks I\'ll try to dive back in and post back here with an update so we can sort out how to move forward.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,81,2016-08-18 23:34:03,1333.77,1,,,"b'b\' I could have used this feature today. I see I commented last April about name binding. Today I fixed the handling of ""level 4"" names", with disastrous results: from the point of view of the collections library, many implicit imports introduce ambiguity, for example, if there is a in your package, it no longer shadows the from either or  . Using the blunt instrument of  , I trade those errors for not knowing what is. So I would like to try a minimal for compiling the standard library.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,82,2016-08-18 23:34:03,12.28,,,1,"b'b"" It would also be nice for the leading import escape hatch to work for e.g.  . Otherwise", if I have package and I\'m in  , I can\'t using the relative package," without explicitly importing  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,83,2016-08-18 23:34:03,1296.35,,1,,"b""b' closing for inactivity. can always be reopened'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,closed,2018-02-24 02:27:13,173.17,7,53,25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,84,2016-08-18 23:34:03,97.95,1,,,"b""b' ![sad kitten]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,85,2016-08-18 23:34:03,123.52,,,1,"b'b"" @andyscott if you\'d still like to work on this \\xe2\\x80\\x94\\xc2\\xa0 if someone else wants to take it up \\xe2\\x80\\x94\\xc2\\xa0we\'d be happy to reopen""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,86,2016-08-18 23:34:03,2.65,,1,,"b""b' (P.S. if having some help might help this move towards the finish line"," you might post about it on url  and see if you can generate some  that way)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,87,2016-08-18 23:34:03,300.17,,1,,"b'b"" to summarise my feedback from above:  1. I personally don\'t care about Predef. I think everything can be achieved with custom imports. 2. The system imports are triggering unused import warnings", they should be special cased and the warning not emitted.  other than that," I can live with all the other glitches because I\'d really like system imports to behave as if I wrote them explicitly at the top of the file.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,88,2016-08-18 23:34:03,348.3,,,1,"b'b"" I\'m interested in helping", because I think fixing name binding in another PR will make more folks (common folk) consider controlling the implicit imports in projects," even if they are a handy default for beginners and casual REPLing. I\'ll also look at whether they warn. How can they warn if they are not in code? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,89,2016-08-18 23:34:03,313.58,,,1,"b'b"" If we can come up with a reasonable path forward I\'d be very happy to allocate some time to wrap this up (or something similar in functionality).  Is this PR the best place to continue the discussion?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,90,2016-08-18 23:34:03,573.63,,,1,"b""b' Yes please! I spinned of a scala-dev ticket to continue the discussion: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,reopened,2018-03-06 22:57:07,1229.9,8,55,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,91,2016-08-18 23:34:03,181.93,,1,,"b'b"" I left a note on scala-dev that I\'ve proposed a simplified version of this feature"," as part of a PR that has been hanging around about as long as this one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,92,2016-08-18 23:34:03,1365.78,,1,,"b""b' Heads up: if this is going to make it into 2.13"," it will need to be ready to merge by M5 (due Aug 10). '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,93,2016-08-18 23:34:03,325.25,,1,,"b""b' My simpler is at url part of url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,94,2016-08-18 23:34:03,515.13,1,,,b'b\' Looking this over again for ideas and LOC for my  .  Thinking about this during unbearably long Bay Area commutes, I wanted to minimize scans of unit trees, and also minimize context lookups, in part to avoid forcing infos. I was also thinking that you only need to look at previous imports (including renames).  But the approach taken here doesn\\\'t work for this case where a definition aliases a name in the full name of the predef object (from a test):   In a normal context lookup," the definition shadows the import.  The problem is partly that the existing implementation doesn\\\'t just look at ""leading"" imports. But switching the order of the object and the import from it shouldn\\\'t change semantics. The revised words at [this puzzler]url  are still not right", but the gist is that the import can be at the bottom of the file, like vi modelines. Possibly we should just disallow that, for the sake of efficiency.  Here is the working example, where and come from  . Uncommenting the import breaks it as shown. was to show that the nested import doesn\\\'t disqualify the predef.  Edit: there are couple of heuristics or limitations that we could apply, such as taking only leading imports, up to a def, and only at top-level or top-level package; and either requiring fully-qualified import (with the exception of  ) or warning for the case shown here, which is easy? to check for.  By fully-qualified," I wasn\\\'t even thinking ""absolute""",  -rooted.  Proposed warning, torn from the headlines of The Onion:   Or is there a fifth level of name binding that ignores definitions in imports? \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,95,2016-08-18 23:34:03,1386.88,,,1,b'b\' This work was brought forward in a slightly different form in url  which supersedes this PR.  The merged PR is one flag," and distinguishes ""sysdef"" as packages and ""predef"" as objects that are not packages. You get wildcard imports from either sort", and the order is respected, where later shadows earlier," as though nested. The way predefs are excluded is similar but arguably more workable.  ""Fine-grained"" control is not supported. Root contexts work more like nested packages than like imports.  I commented that a true could be added separately", where a preamble is just code prepended to source text. That preamble could be an arbitrary import, for example.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,closed,2018-08-10 22:42:00,1424.88,9,58,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5350,closed,-,-,-,9,58,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,opened,2016-08-30 20:51:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,title,2016-08-30 20:51:27,00:00,,1,,"b""b' Fixes to mixin forwarders'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,1,2016-08-30 20:51:27,83.52,,1,,"b'b"" :+1: for the commit about JUnit. I think it\'s a much better experience to offer those by default"," even though it does feel like burning library-specific things in the compiler.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,closed,2016-08-31 09:14:06,742.65,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,2,2016-08-30 20:51:27,659.25,,1,,"b""b' will re-open'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,reopened,2016-08-31 10:08:59,54.88,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,3,2016-08-30 20:51:27,171.97,,,1,"b'b"" About the last commit: by default the compiler would now generate mixin forwarders whenever a class inherits a JUnit-annotated default method from a trait. For we now get (by default): This is certainly good for everyone using JUnit 4", which will ignore the default method and the static method (both annotated  ) in T, and it will only execute  . I did a quick test with the current master branch of JUnit 5 url  First of all there\'s a new annotation in package  , but in some ways JUnit 5 depends on / supports JUnit 4, so the old might also be available and work, not sure. In any case, for the above source code, JUnit 5 executes the test in both cases, i.e., with and without a mixin forwarder. It doesn\'t (try to) run the static method. So the current behavior (add forwarders for JUnit-annotated methods) seems to be fine also for JUnit 5, at least for its current state not sure how things may change until their release. Note that we don\'t emit forwarders when using the new  , which is fine: the annotation only exists in JUnit 5, which doesn\'t need the forwarder. If we want to be more careful, instead of emitting the forwarders by default," we could provide a triple-choice command-line flag and set the default to  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,4,2016-08-30 20:51:27,25.63,,1,,"b""b' Sounds like the right approach to me as well. Small nit about the option choices if we do that: true|false|warn is easier to remember'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,5,2016-08-30 20:51:27,2.13,,1,,"b""b' Which"," to only warn by default?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,6,2016-08-30 20:51:27,2.22,,,1,"b""b' Also"," should it be a option? Any thoughts on naming are welcome :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,7,2016-08-30 20:51:27,99.17,,,1,"b""b' Yes to all the above :-) the main use case will be junit", which is done bydefault, right? The only way to turn that off will be to explicitly passfalse to the option that I shall not name :-)On Wed, Aug 31," 2016 at 14:36 Lukas Rytz notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,8,2016-08-30 20:51:27,9.93,,1,,b'b\' OK," so ""Yes", it should only warn," but not emit forwarders by default"" and ""yes"," it should be a option"".This is the only use case. We\\\'re not talking about emitting mixin forwarders in general", just for JUnit-annotated methods.Well, if we set the default to warn, it will only warn.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,9,2016-08-30 20:51:27,77.77,,1,,"b'b"" Ok then I misunderstood. I thought the default was to mix in forwarders fortest methods and warn for problems when we can\'t be sure to invoke theright super method. So", yes to that. I interpreted \'true\' to mean mix inall forwarders and don\'t warn, and \'false\' results in the minimal set offorwarders, thus no junit test methods and no warnings.On Wed, Aug 31," 2016 at 16:25 Lukas Rytz notifications@ wrote:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,10,2016-08-30 20:51:27,182.88,,1,,"b'b"" OK. To recap", currently there are two independent flags: enables generating forwarders **always**. In case a forwarder cannot be generated, but the resulting bytecode is still correct, there\'s a warningdisables generating forwarder for JUnit methods by default they are generated. Whenever a forwarder is required but cannot be generated, there\'s an error. My proposal was to possibly extend the option to a triple-choice (as explained above), and possibly set the default to  . This is only about the JUnit case. Another possibility, which is probably where you\'re getting at, would be to have one single option with the following choices:to generate all mixin forwarders, warn for those that cannot be emitted but are not requiredto generate only forwarders for JUnit methods, error if one cannot be emittedto warn about JUnit methods in traits, but generate only forwarders required for correctnessto only generate forwarders required for correctness In all cases, if a required forwarder cannot be emitted, there\'s an error. The default could be any of the above to be decided. We might still go for because of the performance impact (method-), otherwise we could go for or  ," I don\'t feel strongly about this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,11,2016-08-30 20:51:27,249.42,,1,,"b'b"" Yeah", I think a single option would be best.  ? : all forwarders : minimal set of forwarders : between and -only ones we know are needed for JUnit 4 Thinking about it, how useful is  ? We know it\'s broken, and our users might not, so they won\'t know to turn on the option. Maybe we can just enable it implicitly," and disable when is set explicitly (implying the user knows what\'s going on and doesn\'t need a warning). ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,12,2016-08-30 20:51:27,493.55,1,,,"b'b"" It\'s only broken for JUnit 4", when JUnit 5 arrives Scala 2.12 will still be around. OTOH, the forwarders should not hurt for JUnit 5 (as I tested above). So I think the level only makes sense if we put it as default. As an explicit option, I don\'t think it\'s too useful. The potential use case would be: somebody is using JUnit 4 and wants to make sure he\'s not writing any test methods in traits. If we do have the warning," I\'d prefer it to be an explicit option. The implicit may be a bit confusing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,13,2016-08-30 20:51:27,1.57,,1,,"b""b' The test failures in my commits are  . I rebased on current 2.12.x is that expected? @szeiger '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,14,2016-08-30 20:51:27,13.32,,1,,"b""b' Yeah apparently 1m of stack is not always enough. Jason has a commit in hisPR to just disable the test.On Thu", Sep 1," 2016 at 09:10 Lukas Rytz notifications@ wrote:'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,15,2016-08-30 20:51:27,326.87,,,1,"b'b"" OK", I think I\'m done with the discussed changes," PTAL!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,16,2016-08-30 20:51:27,267.07,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,17,2016-08-30 20:51:27,87.83,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,18,2016-08-30 20:51:27,116.15,,1,,"b""b' pushed a small cleanup to the help texts of ChoiceSetting (fdfdd253bfb4e44faf4afce1da56989ce132e15c)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,closed,2016-09-02 10:51:08,42.15,1,14,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5369,closed,-,-,-,1,14,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,opened,2016-09-08 14:38:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,title,2016-09-08 14:38:41,00:00,,1,,"b'b"" Define the root sbt project\'s scalaVersion""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,body,2016-09-08 14:38:41,00:00,,1,,b'b\' The root project is commonly used as the reference point for values," suchas ""the scala version"" of the (entire) project. For example ENSIME uses it like that. Also disablePublishing already disables publish and publishLocal.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,1,2016-09-08 14:38:41,1.13,,1,,"b""b' See url  for more context.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,2,2016-09-08 14:38:41,1193.48,1,,,"b""b' My take on this is that ENSIME uses it wrong", but I see no harm in changing it if it improves IDE support. We already do some hacks of this kind for IntelliJ. We should change it in a different way though: Change the minimum number of settings (e.g. only set  ) and add a comment why this settings is needed. The more stuff we change randomly because some IDE needs it," the harder it becomes to refactor the build to a more standard sbt layout (now that ant is gone) without breaking IDE support again.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,3,2016-09-08 14:38:41,49.32,,1,,"b'b\' Adding a ""commonSettings"" is a common sbt practice by the way.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,4,2016-09-08 14:38:41,477.35,,,1,"b""b' making my first contribution to  I got stung by this. Seems a trivial fix", made a similar change locally," thanks Dale! Will reference this from the ensime docs. Please backport to 2.11.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,5,2016-09-08 14:38:41,2.33,,1,,"b""b' looking closer", my fix was different," I did this  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,closed,2016-11-04 22:08:05,449.4,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,reopened,2016-11-05 15:46:42,1058.62,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,6,2016-09-08 14:38:41,1376.33,,1,,"b""b' @dwijnand needs rebase'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,7,2016-09-08 14:38:41,36.07,,1,,"b""b' Switched to defining the in  ", once, for all the projects," instead of defining and evaluating it multiple times.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,8,2016-09-08 14:38:41,530.65,,1,,"b""b' LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,closed,2016-11-11 03:45:39,718.95,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5387,closed,-,-,-,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,opened,2016-09-14 21:18:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,title,2016-09-14 21:18:39,00:00,,1,,"b""b' SI-8040 Improve unused warnings'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,body,2016-09-14 21:18:39,00:00,1,,,"b'b"" Add symbol names", don\'t warn for both getters and settersor for synthetics (except default arg getters). Tweak messages for readability. Warn for unused but, as an escape hatch,not for  . The latter form is deemeddocumentary. (Named args could serve a similar purpose," .)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,1,2016-09-14 21:18:39,167.42,,1,,"b""b' Exit code 137.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,2,2016-09-14 21:18:39,0.32,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,closed,2016-11-07 19:17:13,1318.57,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,reopened,2016-12-09 19:09:11,1431.97,1,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,3,2016-09-14 21:18:39,1156.87,,1,,"b""b' Rebased with @sschaef advice not to leave extraneous commented code.  Also last commit undertakes handling his url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,4,2016-09-14 21:18:39,8.22,,,1,"b""b' @lrytz Thanks for the pat on the back. It really goes a long way. Also thanks to the whole team for their time in reviewing PRs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,5,2016-09-14 21:18:39,69.97,,1,,"b'b\' The way it does constrParamAccessors is false pos on (p).  Also defaultCase$ and the  in $ which always has  RHS so nothing used.  The ""documentary pattern bind"" is actually helpful to see what\\\'s used and what\\\'s just showing what the placeholder represents. \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,6,2016-09-14 21:18:39,1356.02,1,,,"b""b' I suspect scalacOptions from  are communicated to partest. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,7,2016-09-14 21:18:39,224.22,,,1,"b""b' The funky idiom is  "," otherwise lint turns off and Ywarn is not allowed to turn it back on again. So maybe amend not to special case patvars.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,8,2016-09-14 21:18:39,30.58,,1,,b'b\' Rebased and added settings tweaks," tweaks to anonfun handling.  There\\\'s a big ""heed the warnings"" delta in waiting somewhere. I\\\'ll submit that as a separate PR. After I get green checks again here...\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,9,2016-09-14 21:18:39,38.88,,,1,"b""b' Together with the green snytt icons"," the red checks are kind of cheery in a seasonal way.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,10,2016-09-14 21:18:39,4.78,,1,,"b""b' Now if only we could make them blink.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,11,2016-09-14 21:18:39,0.48,,1,,"b'b"" There was no room left in the worker\'s stocking. I\'ve stretched it a bit.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,12,2016-09-14 21:18:39,0.43,,1,,"b""b' /rebuild  (one at a time for now)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,13,2016-09-14 21:18:39,502.73,,1,,"b""b' Riddle me this: What might you pass that is useful yet unused? DummyImplicit. (And other evidence.)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,14,2016-09-14 21:18:39,726.23,,1,,"b""b' Also"," wind.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,15,2016-09-14 21:18:39,55.17,,1,,"b""b' I think it is time to reimagine scalapuzzlers.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,16,2016-09-14 21:18:39,14.62,1,,,"b'b"" I\'m somewhat skeptical that unused parameter checks will have a high enough signal-to-noise ratio to be that useful in practice. If it doesn\'t cost us too much code to include it", and it is for opt-inners only," I\'m okay with including it though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,17,2016-09-14 21:18:39,13.3,,,1,"b'b"" By now I\'ll have to review what I attempted", but the search for a sweet spot included don\'t warn if implementing an API.  I think I didn\'t add yet: don\'t warn for abstract API, that is, for methods in a trait or abstract class. That\'s a way of signalling that there will be subclasses with overrides which use the parameter.  The other possible distinction was to warn for unused implicit params only.  The other noisy warning is  , where disables the warning. I hope the settings ergonomics will make it easy to do what you prefer. So maybe and should be disabled under  ," but with you have to turn them off explicitly.  Also check that doesn\'t warn in the filter.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,18,2016-09-14 21:18:39,1437.18,1,,,"b'b\' @adriaanm @lrytz @retronym Please give me a heads up on how to push this over the line for 2.12.2.  The ergonomical bits are not to overwarn on unused parameters and unused  . Is ""ease of disabling"" sufficient", or should it default not to warn? I tend to think default to warn all is easier to reason about. (I turned on in my colleague\\\'s gradle build and it\\\'s confusing how to exclude a heap pollution warning, for example. So I sympathize with the easily annoyed. Or sympathise.)  I wouldn\\\'t want to have to merge this code, as it is old and I am old and the earth is no longer young either. \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,19,2016-09-14 21:18:39,7.1,,,1,"b'b"" Thanks for your patience here. Let\'s get this merged before your beard is the length of Jon Stewart\'s tie. @SethTisue"," could you look at this with a fresh pair of \\xf0\\x9f\\x91\\x80 ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,20,2016-09-14 21:18:39,883.95,1,,,b'b\' To summarize  enables   is enabled is that too verbose? is now a multi-choicesetting enables all unused warnings," including and   Unused params exceptions:   deprecated methods   overriding methods   in   (other unused implicit params: warn)   class parameters   url  url  Unused privates exceptions (not new in this PR): ""readResolve"" and friends", constants (possibly inlined, no longer referenced) Unused patvars exceptions:   bindings   bindings originating in for-comprehensions (right?)   url  with  : url There are also some comments in some tests, these can probably be addressed later.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,21,2016-09-14 21:18:39,908.23,,,1,"b'b"" I\'ll try this out on the communal build. Thanks for the exhaustive and exhausting summarisation", @lrytz ," it makes me want to sleep right now.  Edit: I\'ll try it again tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,22,2016-09-14 21:18:39,226.37,,1,,"b""b' Rebased.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,23,2016-09-14 21:18:39,680.83,1,,,"b'b"" The other day", I did actually kick off a community build on my home machine, but I\'m busy at work, depressed about life, etc," and didn\'t wade through output. Probably I should find projects with and focus on those.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,24,2016-09-14 21:18:39,9.87,,1,,"b'b"" let\'s do a community build run on Jenkins against 2.12.2-bin-47754ef-SNAPSHOT: url  (404 while Jenkins untangles that mass of old USB cables in the closet)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,25,2016-09-14 21:18:39,107.75,,1,,"b'b"" discussed at team meeting. we\'ll push to get this into 2.12.2 if reasonably possible""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,26,2016-09-14 21:18:39,244.9,,1,,"b'b"" so the community build run has:   about half of the projects in the community build depend", directly or indirectly, on either macro-paradise or kind-projector, so these are just one round of failures, fixing these would very likely uncover others.  I glanced through the logs and these all appear to be projects that have enabled, and there are new warnings, hence, failed. (note that we can turn off in a project\'s entry in the dbuild config if we want to)  @som-snytt would you like to look through these and see if any of them give you pause...?  the macro-paradise one is:   in tut we see:   the errors list in scala-partest is quite long, some unused imports, some unused parameters," not possible to know at a glance whether spurious.  pcplod has:   kind-projector looks like unused imports and a unused parameter or two.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,27,2016-09-14 21:18:39,8.83,,,1,"b'b"" @SethTisue Thanks"," I\'ll spend some time with it this evening.  tpolecat\'s is especially poignant.  Probably we\'ll have to set that warning off under Xlint. Who knew people like unused params?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,28,2016-09-14 21:18:39,136.87,,1,,"b'b"" I\'m not comfortable reading the dbuild output yet. Why does the tut output show in its own file? I only witness it in  . The warning is correct. Also"," apparently -Xlint doesn\'t warn about that is never set. Spigot should spew a couple more warnings.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,29,2016-09-14 21:18:39,319.75,,1,,"b'b""  I don\'t understand the question here..  The partest log revealed the following problem:   and also this one maybe we have to back off for overridable methods?   The [  class in kind-projector]url  takes an unused parameter", which is a bit surprising, but the warning seems to be correct," the parameter is unused.  I just realized that maintaining binary compatibility can be a valid reason to keep an unused parameter. There\'s no mechanism for suppressing a warning locally..""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,30,2016-09-14 21:18:39,6.38,,,1,"b'b"" I would suggest to turn into (currently it\'s  )"," then this change is fine for 2.12.2 IMO. The implementation can be refined later.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,31,2016-09-14 21:18:39,477.22,,,1,"b'b"" @lrytz thanks so much for looking. I agree about  . I had an idea to facilitate exceptions: unused params", but I haven\'t experimented yet.  I\'ll add a commit to turn off for the default linter.  My question about the tut output:   I didn\'t see a file  , but maybe I was just too bleary-eyed.  I thought it avoided warning about synthetics and would avoid warning about defaults, but I guess there is a hole to plug.  It\'s a fundamental usage question, whether lint should warn about generated code; there was another question whether to warn about REPL synthetics. In general, can a lint rule be usefully triggered in generated code if it\'s not already triggered in the source text?  Looking at scalac warnings under -Xlint, I think missing-interpolator should give a pass to because normally you\'d write  , although in general an arbitrary interpolator could be doing an arbitrary operation on  .  BTW, when I say thanks for assistance with sussing this out, I mean it\'s a challenge coming back to this feature after time passes, and other commitments are pressing," so I really appreciate the boost. I know you all are very busy with the releases.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,32,2016-09-14 21:18:39,126.37,,,1,"b""b' Thanks for the kind words!  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,33,2016-09-14 21:18:39,1204.45,,,1,"b""b' new community build run: url  (404 til Jenkins finishes re-grouting the tub like he promised)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,34,2016-09-14 21:18:39,238.72,,1,,"b""b' test run finished"," results ready for inspection'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,35,2016-09-14 21:18:39,6.92,,,1,"b""b' It looks good to me. Can you do the necessary workarounds for the community build?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,36,2016-09-14 21:18:39,0.72,,1,,"b'b"" Actually don\'t play well together. As shown"," you must disable the lint in order to enable  . Maybe would work if the hook on only enabled settings instead of disabling. Also the help text is stale.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,37,2016-09-14 21:18:39,3.73,,,1,"b""b' Right"," it would be good to get this piece in place before we release 2.12.2. It can be a follow-up if @SethTisue prefers to have this merged sooner.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,38,2016-09-14 21:18:39,6.83,,1,,"b'b""  I\'ve spun that out as url  (summary: let\'s temporarily disable community-build-wide to get green for release"," then do better later)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,39,2016-09-14 21:18:39,53.93,,1,,"b""b' I also detuned the deprecation of [sic] which is in the paradise build. That complicates builds to no purpose"," so it remains an alias for  .  A trivial PR for KP url  which sees the unused imports under  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,40,2016-09-14 21:18:39,1258.1,,1,,"b""b' one more community build run with the latest: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,41,2016-09-14 21:18:39,31.25,,1,,"b'b"" One test failure in pcplod in the community build due to the additional warnings:  The following projects don\'t compile under -Xfatal-warnings: tut   kind-projector scala-partest Should we add to their dbuild settings?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,42,2016-09-14 21:18:39,15.3,,1,,"b'b"" I did a PR for kind-proj\'s unused imports", but not yet for tut\'s unused; I\'ll have a PR for partest. I think the answer is yes," cut them some slack for now. I didn\'t look at pcplod.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,43,2016-09-14 21:18:39,60.48,,1,,"b'b""  Yes"," I\'ll do that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,closed,2017-04-10 19:34:51,25.67,6,26,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,44,2016-09-14 21:18:39,25.32,,1,,"b""b' the imps are wearing parkas today'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,45,2016-09-14 21:18:39,1070.15,,1,,"b'b"" @som-snytt can this be disabled on a per-method basis. I have lots of genuine use cases (e.g. in mocks"," or to shadow an implicit that I don\'t want in scope).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,46,2016-09-14 21:18:39,1179.7,,,1,"b'b"" Echoing @fommil -we really need a use site disable annotation or some such. I compile everything with -Xfatal-warnings and don\'t want to give that up. As a result", upon upgrading to 2.12.2," I need to do stuff like this: Ed. changed to thanks to tip from @djspiewak.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,47,2016-09-14 21:18:39,1223.32,,1,,"b""b' please open a bug at url  comments on already-merged PRs are ephemeral'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,48,2016-09-14 21:18:39,1251.77,,1,,"b'b"" If anybody knows how to disable this warning across everything"," I\'d like to be able to do that. In combination with  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,49,2016-09-14 21:18:39,1254.15,,1,,"b'b\' @fommil -Xlint brings in which ""Enable -Ywarn-unused:imports",privates,locals,"implicits""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,50,2016-09-14 21:18:39,1254.95,,1,,"b'b"" @godenji yeah I know", but I want to now remove the ones introduced by this PR. I don\'t think it\'s possible to remove things once everything has been enabled," right?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,51,2016-09-14 21:18:39,1260.22,1,,,"b'b"" Just  . The same discussion was had about  ", you either love it or hate it," but it\'s trivial to disable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,52,2016-09-14 21:18:39,1264.32,1,,,"b'b"" @mpilquist It doesn\'t warn on unused params that are specified by superclass or that are deprecated.   But it is handier just to disable what annoys you. You can use more selectively", of course.  (Deprecating a param has no other consequence; so it\'s a quirky but harmless workaround. Maybe someone will propose a different annotation at some point," or a reporter mechanism to suppress the warning.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,53,2016-09-14 21:18:39,1267.22,,,1,"b'b"" @som-snytt Thanks. I love the new feature and want to keep it enabled (it\'s already found tons of unused implicits -vestiges of various refactorings). I just need a way to disable it for witness style implicits", where the presence of the implicit param is enough. I\'ll try out the trick," as that won\'t generate any additional bytecode like the trick.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,54,2016-09-14 21:18:39,1267.72,,1,,"b'b"" @mpilquist but won\'t you now get warnings where you call that method?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,55,2016-09-14 21:18:39,1267.87,,1,,"b'b"" @fommil it\'s the interplay of Xlint and -Ywarn that got me; I didn\'t notice that -Xlint brings in  "," which then led to much head scratching as to why my -Ywarn negations weren\'t getting applied""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,56,2016-09-14 21:18:39,1269.62,,1,,"b""b' @som-snytt is there any way (when using  ) to selectively turn on  ? I want the imports warning"," but some of these other ones are giving me a lot of false positives.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,57,2016-09-14 21:18:39,1271.83,,1,,"b'b"" @fommil Yes"," you can to one\'s heart\'s content.  I\'ll take a look if this is mentioned somewhere besides here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,58,2016-09-14 21:18:39,1272.0,,1,,"b""b' @fommil use -Ywarn-unused and selectively negate'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,59,2016-09-14 21:18:39,1275.1,,1,,"b'b"" @godenji I\'d expect turning off an option to always override enablement", as a rule," but I\'ll check whether that is hono(u)red here. The class is called for a reason. paulp tried to make it immutable once...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,60,2016-09-14 21:18:39,1275.6,1,,,"b'b"" @som-snytt I don\'t have a to do that on and I don\'t really want to have to start tricking into doing this  @godenji if I knew how to selectively negate... :confused: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,61,2016-09-14 21:18:39,1277.45,,,1,"b'b"" @fommil Ah", you mean, in use-case speak, as an sbt user," how do I discover scalac sub-options!  People also ask for updated manpages on stackoverflow.  I\'ll check that out.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,62,2016-09-14 21:18:39,1283.03,,1,,"b""b'   I am still getting '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,63,2016-09-14 21:18:39,1285.07,,1,,"b""b' this *seems* to do what I want   '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,64,2016-09-14 21:18:39,1285.43,,1,,"b'b"" @fommil it\'s because -Xlint enables which pulls in above referenced -Ywarn flags and there\'s *no* way override with -Ywarn flags""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,65,2016-09-14 21:18:39,1288.3,,1,,"b'b"" @godenji it sounds like negating with -Ywarn isn\'t respected by -Xlint:_"," we can either use url  for tweaking or you can create another issue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,66,2016-09-14 21:18:39,1290.9,,,1,"b'b\' @fommil the explicit ""negations"" should be documentary (unnecessary) on  . Thanks for the sbt snippet.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,67,2016-09-14 21:18:39,1293.02,,1,,"b'b"" @som-snytt up to you"," whatever makes it clear to the user what\'s going on. We have a workaround but likely many users will get tripped up by this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,68,2016-09-14 21:18:39,1422.87,,1,,"b'b"" @som-snytt how can I suppress the warnings here?   the doesn\'t work. It\'s when I\'m mirroring an implicit with a non-implicit.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,69,2016-09-14 21:18:39,1431.55,,1,,"b'b"" That\'s a clever idiom.  I\'ve never thought of as having a  ", but I\'ll go with it. Or," how could it not have a  ?  I\'m sure it\'s easy to exclude deprecated locals as with params.  Warning suppression has been bounced around a bit; hopefully there\'s a more general solution down the line.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,70,2016-09-14 21:18:39,1432.88,1,,,"b'b"" @som-snytt s-expressions :stuck_out_tongue_closed_eyes: this has found a tonne of unused things in ensime! Including a that should be a but until I can suppress this kind of pattern"," I can\'t turn it on in the build.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,71,2016-09-14 21:18:39,1435.95,1,,,"b'b"" Thanks for your patience. I\'ll go with the easy albeit ugly workaround with deprecation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,72,2016-09-14 21:18:39,14.85,,1,,"b'b"" I\'m also suffering the same problem as @mpilquist with the implicit evidence""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,73,2016-09-14 21:18:39,18.38,,,1,"b'b"" @som-snytt I have a false positive implicit in ensime-server if you\'re interested.   removing these implicits"," no longer compiles. Fun.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,74,2016-09-14 21:18:39,23.83,,1,,"b""b' @fommil can you isolate it and open a new bug in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,75,2016-09-14 21:18:39,26.85,,1,,"b'b"" @SethTisue I have absolutely no idea what it could be. Seems to be about chaining of implicits. Chances are it\'ll come up again in spray-json-shapeless which is easier to minimise.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,76,2016-09-14 21:18:39,27.77,,1,,"b'b"" @fommil again", it\'s not pretty," but you can deprecate the params to suppress warning. Or maybe I don\'t see it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,77,2016-09-14 21:18:39,30.23,,,1,"b'b"" @som-snytt oh", interesting, I thought that\'d cause a deprecation warning at the point of use," and it didn\'t work for the implicit shadowing.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,78,2016-09-14 21:18:39,33.32,,1,,"b""b' @fommil yes only for params", and no other tool cares about deprecated params," I hope.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,79,2016-09-14 21:18:39,35.42,,,1,"b'b"" I checked the 2.11 build and it seemed to accept that"," so that\'s a reasonable workaround (would still be good to work out why there is a false positive here though)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,80,2016-09-14 21:18:39,37.5,,,1,"b'b"" Those params are actually not used", so it\'s not a false pos," or do I miss the point?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,81,2016-09-14 21:18:39,38.12,,1,,"b""b' @som-snytt the ones in the files... if I remove them"," then the build fails. So they must be used.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,82,2016-09-14 21:18:39,41.05,,1,,"b'b"" You mean  takes an implicit Typeable? I haven\'t deep-dived yet. That API is a dependency.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,83,2016-09-14 21:18:39,41.72,,1,,"b""b' I think we can chat forever on a merged PR and no one will care. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5402,closed,-,-,-,11,53,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,opened,2016-09-19 20:34:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,title,2016-09-19 20:34:38,00:00,,1,,"b'b"" WIP"," don\'t merge: see if sbt 0.13.13-RC1 works""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,body,2016-09-19 20:34:38,00:00,,1,,"b""b' in case this turns up anything we want to report to the sbt folks.fyi @dwijnand'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,1,2016-09-19 20:34:38,145.38,,,1,"b""b' Cool"," it went green.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,2,2016-09-19 20:34:38,988.22,,1,,"b""b' Should this be closed? Or should we merge the first of the two commits?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,3,2016-09-19 20:34:38,23.48,,1,,"b""b' Btw"," the first of the two commits is #5386.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,4,2016-09-19 20:34:38,492.82,,1,,"b""b' closing"," #5386 is the one to keep'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,closed,2016-10-04 00:04:32,209.9,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,reopened,2016-10-17 22:31:17,1346.75,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,5,2016-09-19 20:34:38,1349.97,,1,,"b""b' reopening so we can see what Jenkins has to say about 0.13.13-RC3 rebased"," also'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,6,2016-09-19 20:34:38,714.78,,1,,"b""b' green again \\xf0\\x9f\\x8e\\x89 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,7,2016-09-19 20:34:38,104.62,,,1,"b""b' @SethTisue would be good to merge 61a5a6e ASAP to make it more convenient for us to try out 0.13.3-RCX locally.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,8,2016-09-19 20:34:38,0.72,,1,,"b""b' Also"," we should aim to get these changes back to 2.11.x.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,9,2016-09-19 20:34:38,1.12,,1,,"b""b' Just need to merge #5386 to do that..'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,10,2016-09-19 20:34:38,309.25,,,1,"b'b"" I merged #5386. Can\'t say backporting to 2.11 interests me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,closed,2016-10-26 17:18:50,1127.55,0,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5409,closed,-,-,-,0,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,opened,2016-10-21 10:54:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,title,2016-10-21 10:54:18,00:00,,1,,"b""b' Improve hash code of Names'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,body,2016-10-21 10:54:18,00:00,1,,,b'b\' The old approach of using the first, last," and middle charactersonly lays a trap for generate names that have little or no entropyat these locations. Fresh existential names generated in ""as seenfrom"" operations are one such case", and when compiling largebatches of files the name table can become imbalanced. I found such an example in ScalaTest:  url  This commit uses all characters to compute the hashCode. Review by @adriaanm @lrytz I expect that this change will be beneficial on large code basesthat regularly exercise  ," and neutral onmost smaller code bases. I\\\'ll perform some benchmarks to make sureof that ""neutral"" claim and post the results here.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,1,2016-10-21 10:54:18,1.4,,1,,"b""b' Related to url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,2,2016-10-21 10:54:18,24.05,,,1,"b'b"" great numbers for ScalaTest"," hope there\'s no negative impact on other projects""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,3,2016-10-21 10:54:18,1004.63,1,,,"b'b"" Here\'s one way to perform the followup work (using per-compilation unit counters rather than a global counter to generate the fresh existential names):  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,4,2016-10-21 10:54:18,104.33,,1,,"b""b' My first attempt to benchmark this for small programs showed no change (795ms->797ms) for  ", and a 2% slowdown (1645ms -I plan to re-run the benchmarks," and also compare profiles  to see is is starting to show up.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,5,2016-10-21 10:54:18,1017.22,,1,,"b""b' Have you had a chance to confirm the benchmark results?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,6,2016-10-21 10:54:18,12.22,,1,,"b'b"" Nope"," I haven\'t. I\'m going to close this one for now and revisit once we\'ve got some more benchmarking coverage next year.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,closed,2016-12-19 22:58:10,723.87,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,reopened,2019-04-10 10:08:51,670.68,2,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,7,2016-10-21 10:54:18,714.38,,1,,"b""b' Benchmark run: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,8,2016-10-21 10:54:18,1200.02,,,1,"b'b"" I\'m happy with the performance"," and will merge this now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,closed,2019-05-08 06:52:40,1243.82,2,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,9,2016-10-21 10:54:18,23.42,,1,,"b""b'  What did you observe?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,10,2016-10-21 10:54:18,41.55,,,1,"b'b"" @lrytz [neutral to ~1% regression]url I\'m hopeful that #8019 will recover a little of the regression (if it is real"," that is!). I\'ll keep an eye on the performance charts and the results our profile runs now both changes are merged.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,11,2016-10-21 10:54:18,43.8,,,1,"b""b' The motivation to revive this", BTW, was that we had a report from a customer that they had a name table bucket with 500 entries," suggesting that something in the compiler or a  was running into the same problem as we  in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5474,closed,-,-,-,2,7,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,opened,2016-11-12 17:21:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,title,2016-11-12 17:21:25,00:00,,1,,"b""b' Improve support for enum trees'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,body,2016-11-12 17:21:25,00:00,,1,,"b""b' These are the minimal changes required to allow macro authors to emit trees that end up as valid JVM enums in the backend.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,1,2016-11-12 17:21:25,3.17,,1,,"b""b' See url  for some earlier discussion.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,closed,2016-11-12 17:49:18,27.88,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,reopened,2016-11-12 17:49:34,0.27,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,2,2016-11-12 17:21:25,25.63,,1,,"b""b' Is there any way I can abort the 2.12 build?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,closed,2016-11-14 13:02:53,1153.32,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5521,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,opened,2016-11-24 09:57:12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,title,2016-11-24 09:57:12,00:00,,1,,"b""b' SI-9208 Retire implicit shadower'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,body,2016-11-24 09:57:12,00:00,,1,,"b'b"" Retronym\'s fix. See what breaks.  url  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,1,2016-11-24 09:57:12,17.68,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,2,2016-11-24 09:57:12,2.98,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,closed,2016-11-24 10:18:14,21.03,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,reopened,2017-12-14 04:22:45,1084.52,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,3,2016-11-24 09:57:12,1326.87,,1,,"b""b' I wonder if we should consider eliminating implicit shadowing altogether?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,4,2016-11-24 09:57:12,706.78,,1,,b'b\' note to self: that last change was an attempt to say, collect implicits naively from contexts," then filter for ""accessible using simple name"" rule using ordinary lookup. Maybe draconian or the type test is breaking.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,5,2016-11-24 09:57:12,876.75,,,1,"b'b"" @milessabin Definitely worth *considering*"," but I would miss it if there weren\'t some other way of unimporting implicits.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,6,2016-11-24 09:57:12,798.58,,1,,"b""b' I cherry-picked the commits fixing binding precedence"," for convenience. A shadow of the shadower remains to prefilter eligible implicits by name lookup. Probably the few lines that verify that the lookup result and the implicit are the same thing can be improved. One nuance is that the lookup must be non-recording for purposes of  . One ancient test was promoted to pos.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,7,2016-11-24 09:57:12,1257.22,,1,,"b'b"" There are two tests to address", one is scaladoc, the other is reflect.  In  , suffers some type-forcing. Annotating makes it work. But if the PR to have inferred from  , it would probably work as-is. This doesn\'t seem like a pernicious cycle to me," but I don\'t know much. I wonder what the community build would say.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,8,2016-11-24 09:57:12,995.65,,1,,"b""b' Labelled WIP; this needs to be reviewed to get in 2.12.5.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,9,2016-11-24 09:57:12,232.45,,,1,"b'b"" @lrytz Thanks I\'ll try to get back to this ASAP. How much time do I have for 2.12.5?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,10,2016-11-24 09:57:12,34.27,,1,,"b""b'  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,11,2016-11-24 09:57:12,6.85,,,1,"b'b"" @SethTisue Thanks! You\'re a help!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,12,2016-11-24 09:57:12,854.65,,1,,"b""b' When you get a chance to apply another round of polish"," please resubmit as a PR for 2.13.0-M5.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,closed,2018-04-30 08:27:57,245.2,0,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,13,2016-11-24 09:57:12,1161.37,,1,,"b'b"" I\'m very keen to see the implicit shadower retire into the shadows", as it is a major source of allocation pressure during typechecking. I feel like I\'ve already asked you, but I can\'t remember, so I\'ll ask again: what is the relationship between that part of the change and the binding precendence change? Can we get the former without the latter?  I know the hairy part about the removing the implicit shadower, is that it seems to currently obscure (shadow?) a bug in that duplicates decl implicits (once for the member in scope," and again for the members of the self type.) That should be fixable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,14,2016-11-24 09:57:12,388.12,,1,,"b'b"" The binding precedence fix is a no-brainer in its current form. FWIW. I\'ll get back on the on-ramp for this fix. Contra Adriaan"," I\'ll follow up on both 2.1[23].x.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,15,2016-11-24 09:57:12,192.02,,1,,"b""b' My latest take on the implicit shadower: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,16,2016-11-24 09:57:12,284.52,,1,,"b""b' @propensive Regarding [your previous comment]url  what kind of things would not be possible or easy without the implicit shadowing?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5555,closed,-,-,-,0,15,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,opened,2016-12-08 02:54:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,title,2016-12-08 02:54:33,00:00,,1,,"b""b' SI-4700 Types with symbolic names print in infix by default'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,body,2016-12-08 02:54:33,00:00,,1,,"b'b"" before:   after:   Building off of @VladUreche\'s work in #5401", here\'s a PR that addresses some of the comments there.  makes two-parameter types with symbolic names print infixly by default, and adds a annotation to  override that for types.  Review by @lrytz, @retronym," and others?  allison""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,1,2016-12-08 02:54:33,552.43,,,1,"b""b' Thanks @allisonhb for picking this up", it looks great in the current form! CC @adriaanm However, it adds a public class to the standard library," which is not forwards binary compatible. @SethTisue do you know why this is not flagged by MiMa? Could we ignore this case?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,2,2016-12-08 02:54:33,22.7,,1,,"b'b"" I we fixed a MiMa bug recently in our build. If this PR were rebased on 2.12.x", the compat violation ought to be reported.  I\'m not totally against the idea of allowing annotations in a minor release. Need to give it some thought.  Last time we considered this was with  ," which we decided had to wait until 2.11.0 to move from  to annotation. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,3,2016-12-08 02:54:33,61.3,1,,,b'b\' So for what little it\\\'s worth, I can\\\'t think of any places where someone would rather keep the prefix notation for symbolic type names, and only a few ([refined]url  comes to mind) where infix notation is preferred for non-symbolic names.  On the other hand, I know that at least in my workplace, types such as are a major cause for complaint. If you like I can rebase this onto 2.12.x, drop the annotation," and reinstate it in a 2.13.x PR.  allison  edit: woops accidentally pushed ""close + commit"" button...\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,closed,2016-12-09 13:30:59,636.43,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,reopened,2016-12-09 13:31:04,0.08,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,4,2016-12-08 02:54:33,547.8,,,1,"b'b"" @allisonhb I\'d be very keen to merge this in Typelevel Scala for the upcoming 2.12.1 release ... please let me know if you\'d be happy with that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,5,2016-12-08 02:54:33,1322.35,,,1,"b'b"" @milessabin that sounds great! I\'ll make a PR against TLS as soon as I get home.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,6,2016-12-08 02:54:33,49.37,,,1,"b""b' @allisonhb no need ... I can merge this PR to TLS as it stands. Thanks for working on this!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,7,2016-12-08 02:54:33,914.38,,1,,"b'b"" I did some testing what will happen if a class annotated is used (on the classpath) by an older compiler"," where the annotation doesn\'t exist.   so this seems to be safe.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,8,2016-12-08 02:54:33,5.83,,1,,"b""b' LGTM"," veto by @retronym?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,9,2016-12-08 02:54:33,666.98,,1,,"b""b' Not sure about the details of the code"," but I definitely support this design change.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,10,2016-12-08 02:54:33,517.78,,1,,"b""b' FYI: this has been [merged]url  in Typelevel Scala 2.12.1.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,11,2016-12-08 02:54:33,711.32,,1,,"b'b"" Based on Lukas\'s testing"," I think this is ready to go.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,closed,2017-02-16 20:26:52,415.8,1,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,12,2016-12-08 02:54:33,1234.4,,1,,"b""b' we get failures in the tests that I think are because of this... looks like our inferred scaladoc URLs are changing"," e.g. having to add to our CI  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,13,2016-12-08 02:54:33,1237.17,,1,,"b""b' looks like the tags of the actual scaladocs did change with this. Was that expected?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,14,2016-12-08 02:54:33,1260.13,,,1,"b'b"" I hadn\'t expected that", no! Could you file a bug at ?On Wed, Apr 19," 2017 at 12:04 Sam Halliday  wrote:>""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,15,2016-12-08 02:54:33,1261.77,1,,,"b'b"" @adriaanm I\'m not sure if it is a bug", it\'s a regression if anything," but flip flopping on regressions is not great either""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,16,2016-12-08 02:54:33,1335.67,,1,,b'b\' @allisonhb since this PR is linked directly from the 2.12.2 release notes," I\\\'ve edited your PR description to include a """" pair\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,17,2016-12-08 02:54:33,905.38,,,1,"b""b' Would be really nice if types would display accordingly in the scaladoc output.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,18,2016-12-08 02:54:33,977.9,,1,,"b'b"" I\'d settle for scalac providing utility methods that converted between all the different kinds of names that a thing can have. This is the bulk of our work interfacing with the interactive compiler in ensime.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,19,2016-12-08 02:54:33,417.7,,,1,"b'b""  that would make a great  ticket (if there isn\'t one already?)", and a nice manageably sized issue, I expect, for a volunteer contributor to tackle  was thinking of this just now because I\'m watching a talk where the speaker is demoing from Shapeless," and those types sure do look nice in infix.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5589,closed,-,-,-,2,12,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,opened,2016-12-27 17:42:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,title,2016-12-27 17:42:58,00:00,,1,,"b""b' SI-5365 Exhaustivity of extractors", guards," and unsealed traits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,body,2016-12-27 17:42:58,00:00,,1,,"b""b' This builds on @retronym\\xe2\\x80\\x99s #4929.  It handles the unsealed trait case (via an additional flag) and the extractor-only case (both raised by @durban).  It still defaults to lax checking by default. I don\\xe2\\x80\\x99t know what\\xe2\\x80\\x99s involved in testing it against the community build to see if we can do strict-by-default.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,1,2016-12-27 17:42:58,52.83,,1,,"b""b' I signed the CLA.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,2,2016-12-27 17:42:58,257.98,,1,,"b'b\' Some tests have changed the output:  From url  you can run this to update the expectations (""checkfiles"" in partest parlance)", and then see if this is as you expect. \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,3,2016-12-27 17:42:58,364.55,,1,,"b""b' @retronym Thanks. I must have been running the wrong test command locally"," since I missed the failures. Hopefully one of the failures will point me in the right direction for fixing my confusion in  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,4,2016-12-27 17:42:58,1167.0,,1,,"b""b' As @durban pointed out on #129", these changes affect blocks as well (if is used), but they don\\xe2\\x80\\x99t affect  . IMO, a block should behave more like a than like an exhaustive pattern match. I\\xe2\\x80\\x99m working to make this change, but if anyone wants to jump in with a pointer," I wouldn\\xe2\\x80\\x99t mind.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,5,2016-12-27 17:42:58,455.55,,1,,"b'b"" I\'m not following the convo"," but I had an old PR to treat catches exactly as PartialFunctions.  url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,6,2016-12-27 17:42:58,429.48,1,,,"b""b' @som-snytt Yeah", that sounds like exactly what I want. Should that PR be revived, or should I steal the part I need? (The  stuff sounds a bit intimidating, so I doubt I\\xe2\\x80\\x99d pick up the whole PR," and @retronym suggested splitting it up anyway).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,7,2016-12-27 17:42:58,1050.4,,1,,"b""b' FYI: this has been [merged]url  in Typelevel Scala 2.12.1.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,8,2016-12-27 17:42:58,382.17,,1,,"b""b' I see there is a failure on the \\xe2\\x80\\x9ccombined\\xe2\\x80\\x9d check. Does that mean I should squash failing commits so that everything in the history builds cleanly?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,9,2016-12-27 17:42:58,455.2,,1,,"b""b'  yes please. as a rule"," before final merge we ask that every commit be green (and that unnecessary merge commits be avoided)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,10,2016-12-27 17:42:58,1266.98,,,1,"b""b' Another strangeness (tested with Scalatl 2.12.1", and  ):   However with a simple trait," it seems to work fine: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,11,2016-12-27 17:42:58,442.23,,,1,"b""b' @durban Thanks. This is an interesting case. It only happens with _both_ flags enabled"," unlike the other ones that only required  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,12,2016-12-27 17:42:58,614.8,,1,,"b""b' @durban uses the so it\\xe2\\x80\\x99s an extractor"," which means it doesn\\xe2\\x80\\x99t help exhastivity. If I swap in the warning goes away. But why does a type pattern ever use an extractor?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,13,2016-12-27 17:42:58,395.42,,,1,"b'b"" @sellout Ok", thanks, that makes (some) sense. So the behavior (while somewhat surprising) seems to be correct. Those cases indeed aren\'t exhaustive, so the compiler is right.  As to why a (syntactically) type pattern uses an extractor, this comment on seems to be the answer:  So, if I understand correctly, this is to work around type erasure, and make more type patterns work (somewhat) safely. And it seems," that the  API uses this feature extensively. Fair enough.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,14,2016-12-27 17:42:58,28.63,,,1,"b""b' @durban Well", your comment just helped me understand it better than the docs I\\xe2\\x80\\x99ve been reading all morning \\xf0\\x9f\\x98\\x86  However, I wonder if we can avoid using the extractor in the case where the type annotation is the same as the scrutinee\\xe2\\x80\\x99s type? Since then you don\\xe2\\x80\\x99t really need to use the unapply. The type doesn\\xe2\\x80\\x99t change \\xe2\\x80\\x93 i.e., could be rewritten to safely," no?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,15,2016-12-27 17:42:58,3.7,,1,,"b""b' In b4 @paulp explains why that doesn\\xe2\\x80\\x99t work.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,16,2016-12-27 17:42:58,29.08,,1,,"b""b' @sellout \\xf0\\x9f\\xa4\\x94  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,17,2016-12-27 17:42:58,1.53,,1,,"b""b' @paulp url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,18,2016-12-27 17:42:58,6.38,,1,,"b""b' TIL.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,19,2016-12-27 17:42:58,174.07,,1,,b'b\' @sellout The typechecker [rewrites]url  uncheckable type tests as class tag extractor calls before the pattern matcher reasons about whether a type test is redundant (due to the type of the scrutinee and also the knowledge that previous cases haven\\\'t matched). So the pattern matcher just sees an opaque extractor pattern and emits the call.  In other words (inb4 @paulp again; TIAL),"an artifact of the implementation""\''
scala	5617	closed	20	durban	2016-12-27 17:42:58	1131.27		+1		b'b"" As a : pattern exhaustivity of destructuring  s (e.g.,  ) doesn\'t seem to be checked (either with or without this PR). I guess this is because the this code desugars to, seems to contain an annotation. What\'s the reason for inserting this  ?""'
scala	5617	closed	21	milessabin	2016-12-27 17:42:58	886.88		+1		b'b"" @sellout were you able to make any progress on @durban\'s issue?""'
scala	5617	closed	22	adriaanm	2016-12-27 17:42:58	605.62			+1	b""b' Happy to reschedule for 2.12.4 once feel we can push this forward in time.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,23,2016-12-27 17:42:58,398.22,,1,,"b""b' closing for inactivity. anyone want to try and carry this work forward...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,closed,2018-02-24 02:23:10,520.2,1,19,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,24,2016-12-27 17:42:58,788.82,,1,,"b'b"" I\'ll pick this one up too.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,reopened,2018-02-27 15:31:46,788.6,1,20,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,25,2016-12-27 17:42:58,1083.93,,,1,"b'b"" I\'m going to close this one for now. @milessabin: happy to receive your resubmit when ready!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,closed,2018-06-01 09:35:42,1083.93,1,20,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5617,closed,-,-,-,1,20,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,opened,2017-02-20 11:56:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,title,2017-02-20 11:56:22,00:00,,1,,"b""b' Move dealiasing from Uncurry to Erasure'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,body,2017-02-20 11:56:22,00:00,,,1,"b""b' The motivation is to make the uncurry info tranform an identity for more method signatures.  A few spots in erasure needed to be updated to account for the possibility of aliases"," by callng normalize  using baseType rather than just assuming that the type args and class type params line up.  Fixes -dev#297'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,1,2017-02-20 11:56:22,40.42,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,closed,2017-02-20 12:36:47,40.42,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,reopened,2017-02-20 13:10:42,33.92,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,2,2017-02-20 11:56:22,755.68,,1,,"b""b'  progressions"," seems like'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,3,2017-02-20 11:56:22,982.57,,1,,"b""b' @retronym Is this still on track for M2 or should we reschedule it to M3?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,4,2017-02-20 11:56:22,904.95,,1,,"b'b"" @szeiger We can move it. This isn\'t really user visible"," it is just an internal cleanup that should marginally help performance.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,5,2017-02-20 11:56:22,850.13,,1,,"b""b' Rebased"," and re-focused this PR on the subject of dealiasing. The patch to change how  treats the flag is noted in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,6,2017-02-20 11:56:22,23.02,,1,,"b""b' Comparative benchmarks scheduled to [appear soon]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,7,2017-02-20 11:56:22,65.93,,1,,"b""b' The performance gains are modest but measurable"," @adriaanm could you take another look at the patch from a  perspective?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,8,2017-02-20 11:56:22,155.32,,1,,"b""b' Let me this before we merge.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,9,2017-02-20 11:56:22,45.82,,1,,"b'b""   is not aware of alias types"," so we\'re missing some generic signatures after this patch. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,10,2017-02-20 11:56:22,45.93,1,,,"b'b"" Even after my latest change", we\'re missing generic signatures on static forwarders for module methods that with refinement + typealias.   minimizes to:   The difference is buried in:   Which ends up with:   Furthermore," specialization is damaged:   I\'m going to close this PR on account of the rapidly increasing worm population in the can I\'m attempting to open.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,closed,2017-08-24 04:26:08,915.43,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,11,2017-02-20 11:56:22,1214.87,,1,,"b'b"" If we try to pick this up again"," I think we should leave refined type normalization (which including dealiasing of its parents) in the info transform. We\'ll still need to adapt specialization (perhaps it is just the type map that needs alias awareness.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5722,closed,-,-,-,1,11,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,opened,2017-02-21 19:57:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,title,2017-02-21 19:57:45,00:00,,1,,"b'b\' Revert ""SI-10133 Require escaped single quote char lit""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,body,2017-02-21 19:57:45,00:00,,1,,"b""b' Reverts #5629  It broke projects in the community build url Lets bring the changes back"," but under -Xsource:2.13'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,1,2017-02-21 19:57:45,56.12,,,1,"b'b"" OK", scala-refactoring," that\'s pretty funny. akka-http is kind of off the hook because they were conditioned by writing in their docs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,2,2017-02-21 19:57:45,41.68,,1,,"b'b"" Ok"," I\'ll close this one in favor of your more surgical revert.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,closed,2017-02-21 21:35:33,97.8,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,3,2017-02-21 19:57:45,156.63,,1,,"b'b"" Ah I misunderstood. I\'ll merge this"," and please resubmit the commit that had snuck in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,reopened,2017-02-22 00:12:11,156.63,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,closed,2017-02-22 00:12:23,0.2,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,4,2017-02-21 19:57:45,21.7,1,,,"b'b"" I just wound up resubmitting with the flag check", and see if I did it right. It doesn\'t seem to impact the other commits. I had intended on two PRs but I got lazy when I saw my chance. Sorry for the hassle. Later I\'ll verify with the dbuild," where I guess d stands for something so nasty they can show only one letter of it. I\'ve run it once before. The dread build.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,5,2017-02-21 19:57:45,46.55,,1,,"b""b' @SethTisue can help with running the community build to put a  PR through its paces. Speaking of community build", I was trying to get it green again on 2.11.x," and in my haste to get some jenkins capacity wrongfully stopped the CI builds for your PR '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,6,2017-02-21 19:57:45,356.52,1,,,"b'b"" Yup", I just noticed. Jenkins was kind and told me so.  I\'ll use this as a learning experience," like don\'t mess with the syntax. Maybe I\'ll see if I can ask the community build only to parse the world.  I\'ll try to spare you further annoyance. How about if I backport this for 2.11.9? Just kidding.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,7,2017-02-21 19:57:45,439.87,,1,,"b""b' \\xf0\\x9f\\x98\\xb1 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,8,2017-02-21 19:57:45,1156.83,,1,,"b""b' 2.12 community build is green again'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5726,closed,-,-,-,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,opened,2017-02-23 07:34:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,title,2017-02-23 07:34:43,00:00,,1,,"b""b' Allow custom and methods in case class companions'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,body,2017-02-23 07:34:43,00:00,,1,,"b'b"" Don\'t emit a synthetic (or  ) when it would clash with an existing one. This allows e.g.", a  , along with a with a constructor.  We have to retract the synthetic method in a pretty roundabout way, as we need the other methods and the owner to be completed already. Unless we have to complete the synthetic while completing the user-defined one, this should not be a problem. If this does happen, this implies there\'s a cycle in computing the user-defined signature and the synthetic one," which is not allowed.  Community build: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,1,2017-02-23 07:34:43,650.77,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,2,2017-02-23 07:34:43,412.25,,1,,"b""b' Community build with forked paradise: url  Ok except for play-twirl", which seems to fail for an unrelated reason (macro compiled with older version of scala?? /cc @SethTisue," does this sound familiar?)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,3,2017-02-23 07:34:43,1161.62,,1,,"b'b"" I\'ll see about moving some of the more ambitious changes over to 2.12.2. Is there anything before 09c35ae (incl) that you\'re concerned about?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,4,2017-02-23 07:34:43,11.33,,1,,"b'b"" On second thought"," I\'ll just make the minimal changes here and move the cleanups to 2.12""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,5,2017-02-23 07:34:43,3.12,,,1,"b'b"" It LGTM"," but agree it\'s a good idea to make minimal changes in 2.11.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,6,2017-02-23 07:34:43,291.98,,1,,"b""b' Ready for final \\xf0\\x9f\\x91\\x80 .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,7,2017-02-23 07:34:43,14.85,,1,,"b""b' More ambitious wip for 2.12 moved to url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,8,2017-02-23 07:34:43,40.12,,1,,"b""b' Does this need a spec update?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,9,2017-02-23 07:34:43,352.02,,1,,"b""b' True: [x] If a companion object cc exists already", no new object is created, but the apply and unapply methods are added to the existing object instead," unless the object already has a [matching](#definition-matching) definition.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,10,2017-02-23 07:34:43,744.7,,1,,"b'b"" I really like this"," it\'s stung me a couple of times in the past.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,11,2017-02-23 07:34:43,1.2,,1,,"b'b"" btw", somewhat related," a GSoC proposal I\'m putting together for this year: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,12,2017-02-23 07:34:43,650.5,,1,,"b""b'  Maybe it flukes it with a fortuitous order of members?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,13,2017-02-23 07:34:43,726.92,,1,,"b""b' Well then"," looks like this should be the one \\xf0\\x9f\\xa4\\x9e '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,14,2017-02-23 07:34:43,276.23,,1,,"b'b"" When I reviewed the last iteration of this change", I mistakenly thought that the custom implementation replaced the entire call to  , rather than just the search for the existence of a locked decl. That\'s why I thought it was a mistake to short circuit.  This is the code I\'d imagined at the time that joins these two parts into a single member walk:  url It also avoids completing infos of members over trees that don\'t match the arity.  That said, I\'m happy enough with this change as it is. Feel free to take some ideas from my branch if you further rework this on the 2.12.x branch," but I\'m giving this the \\xf0\\x9f\\x91\\x8d here. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,closed,2017-03-03 00:32:19,1017.6,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,reopened,2017-03-03 00:32:23,0.07,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,15,2017-02-23 07:34:43,7.37,,,1,"b'b"" Thanks! For the next refinement", I\'d prefer to enrich the type completer interface so that you can ask more directly for partial completions (e.g., just the types you can determine without looking at RHS, just the type params," ...)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,closed,2017-03-03 00:40:42,8.32,0,15,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,16,2017-02-23 07:34:43,5.47,,,1,"b'b"" Sounds good. e.g. we could add a method like that gives us the shape of the method type with wildcards. To be useful", we\'ve have to change a few other places to use them, notable the checks for overriden members in namers," such as: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,17,2017-02-23 07:34:43,12.68,,1,,"b""b' Right", having a way to trigger cycle-free completion (peeling off just onelayer) may also enable experimenting with more pro-active completionschemes so that we can populate the symbol table in a tighter loop, withoutjumping back and forth and going into deep lazy completer call chains.On Thu, Mar 2," 2017 at 16:45 Jason Zaugg  wrote:>'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5730,closed,-,-,-,0,16,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,opened,2017-02-25 03:12:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,title,2017-02-25 03:12:10,00:00,,1,,"b""b' Fix pattern matching of higher-order GADTs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,body,2017-02-25 03:12:10,00:00,,1,,"b""b' Fixes #10208.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,1,2017-02-25 03:12:10,4.6,,1,,"b""b' I\\xe2\\x80\\x99m probably overoptimistic in thinking that t3346b is now a \\xe2\\x80\\x9cpos\\xe2\\x80\\x9d test \\xe2\\x80\\xa6 but I couldn\\xe2\\x80\\x99t figure out how to check what the compiler inferred for  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,2,2017-02-25 03:12:10,1376.88,,1,,"b""b' @sellout You are not overoptimistic. It should absolutely be a pos test. You might want to comment the line you added to the effect that Any is kind-polymorphic.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,3,2017-02-25 03:12:10,467.47,,,1,"b'b"" @sellout It\'d be great if you could backport this for 2.11.9.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,4,2017-02-25 03:12:10,208.0,,,1,"b""b' @milessabin Happily. Do I just make another PR against that branch"," or what?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,5,2017-02-25 03:12:10,72.03,,1,,"b""b' @sellout yup.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,6,2017-02-25 03:12:10,498.6,,1,,"b'b""  To save some busywork in the future"," I\'d suggest holding off on doing this until the primary pull request is reviewed.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,7,2017-02-25 03:12:10,471.28,,,1,"b'b"" I\'m going to close this one for now", but I\'d encourage you to try out my branch on some more real world examples you\'re cooking up. It could do with a few more tests," but isn\'t too far away from something we could merge.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,closed,2017-03-03 06:51:02,218.87,0,6,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,8,2017-02-25 03:12:10,149.58,,,1,"b'b"" What\'s the justification for closing a work in progress? If you need to clear the decks for 2.12.2 then by all means move the milestone", or add a label," but I don\'t see how closing this now is either helpful or encouraging of external contributors.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,reopened,2017-03-03 10:31:41,220.65,0,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,9,2017-02-25 03:12:10,73.75,,1,,"b'b"" Reopened. Didn\'t mean to dissuade. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,10,2017-02-25 03:12:10,1095.73,,,1,"b'b"" I\'m not so sure where I should post this", but it seems like this is the appropriate place.  ~~@retronym using your branch, I\'m able to consistently get a compilation failure from [this commit]url  but only during incremental compilation. A clean compile works fine, but if I trigger a recompilation of []url  I get [this failure]url I\'ll see if I can get a minimal example.~~  Upon further inspection," that looks like an SBT failure.  Should I go post this there?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,11,2017-02-25 03:12:10,860.8,,,1,"b'b"" My previous comment seemed to be an SBT issue", but this time, I\'ve come back with a reproducable issue!  The above compiles fine in  , but using @retronym\'s branch it hangs during the typer phase.  Manually passing the type parameter for fixes the issue," so it seems like an inference problem.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,12,2017-02-25 03:12:10,35.1,,1,,"b'b"" I\'ve found another failing case", when trying to create an algebra for a paramorphism.   fails with  I\'d like to start hacking on the compiler to help resolve this issue, but I\'m not sure where my  about progress should go.  This PR is for @sellout\'s branch, but @retronym\'s branch is the best working implementation currently," and I\'ll likely poke around where he left off.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,13,2017-02-25 03:12:10,398.87,,1,,"b""b' closing for inactivity. someone want to pick this up...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,closed,2018-02-24 02:24:54,953.22,0,9,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,14,2017-02-25 03:12:10,784.95,,1,,"b'b"" I\'ll pick this one up.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,reopened,2018-02-27 15:29:49,784.92,0,10,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,15,2017-02-25 03:12:10,1086.27,,,1,"b'b"" I\'m going to close this one for now. @milessabin: happy to receive your resubmit when ready! ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,closed,2018-06-01 09:36:05,1086.27,0,10,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5744,closed,-,-,-,0,10,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,opened,2017-03-12 05:20:27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,title,2017-03-12 05:20:27,00:00,,1,,"b""b' SI-9745 typedFunction keeps x => f(x)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,body,2017-03-12 05:20:27,00:00,,1,,b'b\' To type  , uses the expected type and to type  . Previously, it discarded the result of typechecking  ," which was a problem in the case of a where is ""erroneous"" but rewriteable to an expr that checks", e.g.,  .  This commit keeps the rewritten instead of trying to recover the erroneous tree.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,1,2017-03-12 05:20:27,46.47,,1,,"b""b' Two tests to add: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,2,2017-03-12 05:20:27,259.85,,,1,"b'b"" I\'m well impressed that we\'ve found the spot to fix this. But I\'m hesitant to touch this area in 2.12.x. Let\'s target at 2.13.x and re-rereview. @som-snytt I\'m happy to do the busywork if you\'ve expended your exasperation budget on this one...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,3,2017-03-12 05:20:27,245.73,,1,,"b'b"" Since I have no memory of this change", I\'m willing to start from scratch. There\'s a previous comment where I was on the fence about something," I wonder if it matters which side one comes down on.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,closed,2017-07-25 19:17:31,837.07,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,reopened,2017-07-25 19:18:14,0.72,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,closed,2017-07-25 19:18:44,0.5,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,4,2017-03-12 05:20:27,292.92,,1,,"b""b' Superseded url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5772,closed,-,-,-,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,opened,2017-03-15 08:10:44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,title,2017-03-15 08:10:44,00:00,,1,,"b""b' Update the spec for trailing commas (SIP-27)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,body,2017-03-15 08:10:44,00:00,,1,,"b""b' Fixes -dev#299.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,1,2017-03-15 08:10:44,9.18,,1,,"b'b\' Part of the ""fix"" for -dev#299 I should say.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,2,2017-03-15 08:10:44,164.32,,1,,"b""b' Disk space issues.  /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,3,2017-03-15 08:10:44,664.95,,1,,"b""b' rather than adding a Changelog entry here", I would suggest removing the Changelog section entirely," since it is unmaintained and the information in it is now only of antiquarian interest'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,4,2017-03-15 08:10:44,10.82,,,1,"b'b"" BTW I can fully appreciate this being seen as too minimal. I\'m not well-versed on the spec"," so I thought I\'d just start with _something_ and go from there.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,5,2017-03-15 08:10:44,588.28,,,1,"b'b"" We\'ve shipped the change officially", so we should probably update the spec sooner rather than later. I\'m still happy to revise the wording here," given more feedback.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,6,2017-03-15 08:10:44,477.97,1,,,"b'b"" I noticed trailing comma is OK in a block expression. That\'s potentially confusing because blocks have a result expression. Lexically", it is still simple. I was thinking whether trailing comma has any interaction with tokenization," but I guess trailing comma is allowed only where newline is disabled.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,7,2017-03-15 08:10:44,36.17,,1,,"b'b"" My earlier suggested revision is hidden because of collision with the update. Apparently"," there\'s no way to preserve my backticks without further research.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,8,2017-03-15 08:10:44,1057.03,1,,,b'b\' @som-snytt I like your reworded explanation so I\\\'ve updated to that," having included a ""ignoring whitespace"" clause. WDYT?  I\\\'m not sure what to action from your comment on the block example or your comment on the use of ""foo"".  Btw:  > you can use in quotes  \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,9,2017-03-15 08:10:44,1193.75,,1,,"b""b' @adriaanm / @som-snytt Do you have further review feedback"," or are we ready to merge this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,closed,2017-05-30 06:13:12,1322.47,2,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,reopened,2017-05-30 06:13:14,0.03,2,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,10,2017-03-15 08:10:44,515.23,,1,,"b'b"" LGTM  AFAICR. Also IEITMH (it\'s early in the morning here).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,closed,2017-06-12 18:14:07,720.88,2,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5779,closed,-,-,-,2,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,opened,2017-04-27 02:24:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,title,2017-04-27 02:24:26,00:00,,1,,"b""b' Include the parts of a  type in implicit scope.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,body,2017-04-27 02:24:26,00:00,,,1,"b'b"" According to the spec", the parts of a type are the union of the parts of  , ...,  . Without this, given an implicit view from defined in  \'s companion:  val t: B = new A {}  and  val t: B = { object a extends A {}; a }  had different behavior (only the latter compiled), which seemed surprising.  I somewhat feel like I\'m about to run headlong into some dark pit which Chesterton so kindly erected a fence around for people like me," but I can\'t figure out what this check was meant to accomplish (it was added with relatively little comment in commit b7bdf048b1 back in 2011).  Fixes #10288; review by @adriaanm ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,1,2017-04-27 02:24:26,563.95,,,1,"b""b' This looks like a good candidate for the next Typelevel Scala release.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,2,2017-04-27 02:24:26,756.12,,,1,"b'b"" Thanks for digging your way into this pit!  To be able to include this patch in the a 2.12 minor release"," we\'d need to predicate the new behaviour on  .  I think url  was the first to exclude  classes from contributing to companion implicits. @odersky Can you remember the motivation?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,3,2017-04-27 02:24:26,125.43,,,1,"b'b"" Good to know", @retronym! Flag check added and amended.  And yes, I\'m interested in knowing what the original reason for this check was, as well.  @milessabin, would you like that I made a PR also against TLS?  edit: whoops," that wasn\'t the button I meant to press""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,closed,2017-05-11 02:29:56,5.5,0,1,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,reopened,2017-05-11 02:30:01,0.08,0,1,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,4,2017-04-27 02:24:26,385.45,,1,,"b""b' @hrhino no need I can merge this PR directly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,5,2017-04-27 02:24:26,67.52,,1,,"b'b"" I\'d still like to chase down the opinion from @odersky about this one before we merge. Please bear with my. We\'re cutting 2.12.3 very shortly"," so I\'m going to change the milestone here to 2.12.4.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,6,2017-04-27 02:24:26,780.27,,1,,"b'b""  Without accompanying  changes"," we\'ll have to assume it was an oversight.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,7,2017-04-27 02:24:26,1395.03,,,1,"b'b"" @retronym could you run a benchmark on this PR to ensure the extra flag check doesn\'t affect performance. Once that\'s done"," I\'m happy to merge.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,closed,2017-09-28 21:09:49,1119.8,0,4,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5867,closed,-,-,-,0,4,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,opened,2017-04-28 14:39:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,title,2017-04-28 14:39:41,00:00,,1,,"b""b' upgrade to sbt 0.13.16'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,body,2017-04-28 14:39:41,00:00,,1,,"b'b"" not to be merged until 0.13.16 final is out.  for now"," we justwant Jenkins\' opinion.  @eed3si9n @dwijnand""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,1,2017-04-28 14:39:41,92.07,,1,,"b""b' Looks like Jenkins likey.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,2,2017-04-28 14:39:41,1399.33,,1,,"b""b' (looks like work on 0.13.16 got set aside in favor of getting 1.0.0 out the door)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,closed,2017-07-18 15:31:12,51.52,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,3,2017-04-28 14:39:41,0.27,,1,,"b""b' (we can always reopen)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,4,2017-04-28 14:39:41,3.95,,1,,"b""b' 0.13.16 is due out soon"," particularly given url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,reopened,2017-07-24 17:24:45,113.55,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,5,2017-04-28 14:39:41,199.78,,1,,"b""b' green on 0.13.16-RC1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,closed,2017-08-01 18:50:33,85.8,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5871,closed,-,-,-,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,opened,2017-05-03 08:47:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,title,2017-05-03 08:47:15,00:00,,1,,"b""b' Optimize CommandLineParser to avoid exponential cost'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,body,2017-05-03 08:47:15,00:00,,1,,"b""b' Echoing the performance bug in the bash scripts (#9279)", the command line parser exhibited exponential performance.  When using the command line arguments used to compile the standard library, which contains ~ 700 source files, I noticed about 1% of compilation time was being spend in evaluating the regex  . Inspection of the parser reveals that this was repeatedly being called on the rest of the command line as the parser consumed each argument.  This commit switches to using a regex that only matches the current argument, and then makes sure to split the input string using structural sharing of the backing char[] (by using  , rather than high level Scala collections operations from  ).  After this change," I no longer observed this area of code in the top profiler results.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,1,2017-05-03 08:47:15,921.88,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,2,2017-05-03 08:47:15,0.25,,1,,"b'b"" I\'ll re-open when I address the test failure.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,closed,2017-05-04 00:09:24,922.15,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,reopened,2017-05-15 13:09:59,780.58,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,3,2017-05-03 08:47:15,1405.47,,1,,"b'b"" I\'ve denitted the patch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,closed,2017-05-25 02:36:05,806.1,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5882,closed,-,-,-,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,opened,2017-05-09 09:37:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,title,2017-05-09 09:37:43,00:00,,1,,"b""b' Optimizer: avoid inlining of accidental SAM types'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,body,2017-05-09 09:37:43,00:00,1,,,"b""b' Before", any Scala defined class that happened to have a SAM was considered a function type for the inliner heuristics. This can lead to unexpected inlining, large methods and degraded performance. Jason recently saw such a case when adding an abstract method to  :   Lambdalift adds a parameter to  , so the callsite forwards the parameter. This tirggered inlining once was a SAM," and method became very large.  Now we only consider and types annotated as SAM types.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,1,2017-05-09 09:37:43,12.7,,1,,"b'b"" I quickly ran on my laptop (I didn\'t have a separate machine at hand", so just a quick test) before and after this change," the results look the same.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,2,2017-05-09 09:37:43,1100.73,1,,,"b'b"" The divergence in what the front and back-end consider to be a SAM type is a bit unfortunate. But I think that the heuristic you\'ve used here is better than that status quo to avoid surprising over-inlining.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,closed,2017-05-17 04:11:09,1113.43,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,reopened,2017-05-17 04:11:11,0.03,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,closed,2017-05-17 08:02:46,231.58,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5895,closed,-,-,-,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,opened,2017-07-07 13:25:58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,title,2017-07-07 13:25:58,00:00,,1,,"b""b' Disable tag driven publication of distribution'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,body,2017-07-07 13:25:58,00:00,,1,,"b""b' The bootstrap script is called within PR validation and nightly builds", in addition to being used in the release process.  It used to try to to automatically determine which of these contexts was active based on the whether HEAD was suitable tagged.  However, if same commit was rebuilt later as a nightly," new binaries would be created and overwrite the official ones.  This commit removes this logic. will need to be explicitly provided in then environment of the release build. References -dev#387'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,1,2017-07-07 13:25:58,1.68,,1,,"b'b"" Hmm", maybe I\'m mis-reading the request in that ticket. We\'re trying to address:  > Before the next nightly, advance HEAD on  past the tag. Otherwise," the nightly build will re-stage the release and overwrite the distribution archives on S3. TODO: should we disable this?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,closed,2017-07-07 13:32:04,6.1,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,2,2017-07-07 13:25:58,7.57,,1,,"b""b' Yeah"," I think the plan is to remove this part: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,3,2017-07-07 13:25:58,0.77,,1,,"b""b' Also url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,reopened,2017-07-07 13:40:01,7.95,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,4,2017-07-07 13:25:58,17.58,,1,,"b""b'  Actually"," just setting the is enough'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,closed,2017-07-07 18:26:21,286.33,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,5979,closed,-,-,-,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,opened,2017-08-10 09:42:45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,title,2017-08-10 09:42:45,00:00,,1,,"b""b' Collect all statistics and optimize checks'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,body,2017-08-10 09:42:45,00:00,,,1,"b'b"" References: -dev#149.  This PR does the two following things", all in the domain of statistics:  1. It allows the collection of all the statistics (before, we were only  reporting on a very narrow set of the available statistics). This is  achieved by turning into a instead of  . Related  history: ebb719f#diff-438d9e5ac0dd1965aabd4776e1ee70eaR246/ 2. It adds a mechanism to remove the overhead of checking for statistics  in the common case (where statistics are disabled). It does so by  reusing a mechanism proposed by R\\xc3\\xa9mi Forax and brought to my  attention by @retronym (more here: -dev#149).  There is one pending issues with this PR, which hasn\'t been solved yet:  * How do we keep this implementation runtime-agnostic, allowing compilers like Scalajs and  to default to a correct, inefficient implementation?  I don\'t know how to do this (or how these compilers are replacing JVM-specific implementations), so I would appreciate insights from @sjrd and @densh.  In the future, I could look into ways of expanding this implementation to all our flag checking infrastructure, which is what the referenced ticket on the top is about. However, I\'d prefer to do this in a separate PR if possible. For now, I wanted to create a very small change to see the prior results.  This PR is work-in-progress and I\'ve just opened it to check the performance penalty of my changes. Afterwards, I would like to detect what\'s the performance penalty of having statistics enabled by default," I\'m sure we can draw interesting results from there.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,1,2017-08-10 09:42:45,9.02,,1,,"b""b' Started the benchmarks"," builds 929 and 930 in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,2,2017-08-10 09:42:45,0.48,,1,,"b'b""  does not compile scalac nor scala-reflect"," so I don\'t think there\'s any insights to be had from me here ;)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,3,2017-08-10 09:42:45,17.38,,,1,"b'b""  Yeah", that was my intuition," but you commented on the ticket ()url  saying otherwise:  Which made me think that you\'re interested in compiling the compiler with Scalajs at some point in the future. :smile:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,4,2017-08-10 09:42:45,3.33,,,1,"b'b"" True"," I think it would be good to preemptively isolate such things in easy-to-swap-out files. But I don\'t have much interest in doing the work of porting scalac to  myself.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,5,2017-08-10 09:42:45,7.0,,1,,"b""b' Benchmark data points dripping slowly in here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,6,2017-08-10 09:42:45,89.38,,,1,"b""b' It would be interesting to compare with a version where is a compile-time constant ( )'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,7,2017-08-10 09:42:45,7.13,,1,,"b""b'  If this is the case", we will not be able to switch  statistics," right?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,8,2017-08-10 09:42:45,4.87,,,1,"b'b""  Yes indeed"," but it would be interesting to see if it\'s faster than the current situation where we read the field.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,9,2017-08-10 09:42:45,14.33,,,1,"b'b"" @lrytz Gotcha"," it\'s a good idea to know the lower and upper bound. I\'ve added two commits to check the performance for both and  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,10,2017-08-10 09:42:45,0.97,,1,,"b""b' OK"," should I run the benchmarks on these 3 new commits?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,11,2017-08-10 09:42:45,0.55,,,1,"b""b' Yes"," please! @lrytz '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,12,2017-08-10 09:42:45,23.35,1,,,"b""b' Updated URL with the three new commits (no data yet): url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,13,2017-08-10 09:42:45,19.53,,1,,"b'b"" url  is slower in the current results. I think this is due to and other classes setting the value of when", by default," all uses of should be executed only if is false -otherwise we cause the JVM to deoptimize. I\'m giong to add a commit to test this hypothesis.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,14,2017-08-10 09:42:45,96.03,,,1,"b'b"" I retract what I said before", there is no place where we use the setter unnecessarily. Also, I am removing the last commit since it fails because of #10460.  Now that I have all the benchmark results, I see that making a compile-time constant (23007979e6) is more or less on par with 6d006a5461, sometimes one wins over the other one and viceversa (for example, in 6d006a5461 wins, but in does). I assume this variation is natural to the benchmark infrastructure and that they yield more or less the same performance. Given these results, I infer that the use of switchpoints has been a success -we\'re able to get the same performance as a compile-time constant.  What I cannot grasp is how having a is in anyway better than the two previous alternatives, and yet the benchmarks report that this is the case. I assume this is noise, although it doesn\'t fall strictly into the error margin. I would appreciate if someone can have a look. The only explanations I see plausible are:  1. We\'ve used different benchmarking machines for the first commit and the last one. 2. The machine to run the benchmarks for all the commits is the same," but it\'s sometimes unstable.  Everything is green. So at this point it would be good to get some feedback from a reviewer.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,15,2017-08-10 09:42:45,3.48,,,1,"b'b"" Note that if the results look good"," I\'ll need to remove url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,16,2017-08-10 09:42:45,1396.48,,1,,"b'b"" There seems to be some problem here with the CLA signature checker not detecting that I\'ve signed the CLA in commit 01a4287 and blocking the rest of the commits from being . Any hints on how I could solve it?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,closed,2017-08-14 14:28:34,285.82,1,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,reopened,2017-08-14 14:28:37,0.05,1,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,17,2017-08-10 09:42:45,284.33,,1,,"b'b"" There\'s a noticeable hit in performance (~10%) when is forwarding to  . This can be seen [in the benchmarks]url |bb3e997faa|6d006a5461|63953e1388|5254231683&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1502073067834&to=1502882030576). I\'m surprised by this -I presume this change exhausts the JVM inlining budget?  The use of statics in url  seems to have no effect in performance compared to the previous approach.  What\'s your view on this @retronym? I haven\'t made use its own switchpoint because I believe that  s can only have one target -making such a change would require the switchpoint strategy to be more abstract"," being potentially slower (I\'m actually not sure if this would be noticeable or not).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,18,2017-08-10 09:42:45,1.62,,1,,"b'b"" I think the way to move forward here is to actually remove and use in all its call-sites. I don\'t think we should distinguish between the two. It makes sense to me to capture stats about those hot methods when I do want to see all the statistics.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,19,2017-08-10 09:42:45,140.02,,1,,"b'b"" Okay", I\'ve made some arrangements. You can check all the most important benchmarks here: url |bb3e997faa|6d006a5461|63953e1388|5254231683|b5a3aee4db&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1502073067834&to=1502882030576.  At the end, the statics trick did have an effect on performance," url  addresses an oversight I had.  I think this is already ready for another review.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,20,2017-08-10 09:42:45,1050.95,,1,,"b'b"" Okay", wrapping up, after all the experimentation that I\'ve done with the different commits, my conclusions are:  1. Last two commits reduce the overhead of using this approach and enabling statistics compiler-wide. This approach uses as proposed by R\\xc3\\xa9mi Forax. This approach, even though boxed, is better than the one I started with (a special-cased implementation for Statistics) because it allows callers to forward to static fields (concretely  , instead of a non-static field). The previous approach caused a ~10% slowdown. 2. The statistics infrastructure now is a little bit more polished and enabling works (not like before, that only showed a very constrained subset of all the available statistics). 3. The in the setter for enabling statistics has been replaced by the use of a reporter, and the information on the variation of the statistics measurements happens in every run instead of per global.  All in all, this PR is ready for review. If you\'re okay with the final implementation," I\'ll squash accordingly. I\'m planning to follow up with another proposal that will add more statistics.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,21,2017-08-10 09:42:45,1.77,,,1,"b""b' By the way"," forgot to mention. Final benchmarks for:  * [Cold compilation]url |bb3e997faa|6d006a5461|63953e1388|5254231683|b5a3aee4db|4119e8db7|6376343ae7&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1502349158966&to=1502913227133). No remarkable difference between any of my implementations. * [Hot compilation]url |bb3e997faa|6d006a5461|63953e1388|5254231683|b5a3aee4db|4119e8db7|6376343ae7&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1502349158966&to=1502913227133). Second-to-last commit is the winner.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,22,2017-08-10 09:42:45,1096.65,,1,,"b""b' @lrytz @retronym Can you have another look at this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,23,2017-08-10 09:42:45,170.5,,1,,"b'b"" What is the overhead of having statistics enabled? Ideally it should not skew the overall runtime too much (perhaps 10% overhead is okay). If the overhead is too high"," we\'ll need to re-separate the toggle switches for hot and regular stats. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,24,2017-08-10 09:42:45,1.02,,1,,"b'b"" Oh"," I see that in url  you\'ve done that already.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,25,2017-08-10 09:42:45,3.22,,1,,"b""b'  Right now", all of them are enabled and the overhead (when not enabled) is the one reported in my last comments. However," I have not computed the overhead when they are enabled because of url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,26,2017-08-10 09:42:45,821.87,,1,,b'b\' We can use to have the benchmark harness enable statistics via the setting.   Rough numbers," one fork on my local machine.  | Version | -Ystatistics:false |  -Ystatistics:true  2.12.3 | 781  | 876     2.12.4-bin-a8c43dc | 801 | 1035 | parent of this PR  2.12.4-bin-347d589 | 811 | 1035 | ""hot"" stats commented out  2.12.4-bin-042895b |  816 |  1067  The overhead of enabling statistics in 2.12.3 was low", largely because the setting work for many counters guarded by an of a compile time constant  The overhead of a working statistics implementation is 20-25%.   It doesn\\\'t seem to make much difference whether the counters that had been thought of as (and previously controlled with a separate constant) are enabled or not.  It would be prudent to figure out which statistics are really the hot ones, and maybe remove them.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,27,2017-08-10 09:42:45,95.15,,1,,b'b\' YourKit suggests that maintaining the of the different tree subclasses to instantiation count (in  ) and typer timings per tree subclass ( ) are the dominant overhead.  ![image]url I have found the YourKit seems to overstate the cost of (maybe its profiling somehow interferes with the intrisified nature of that?).  Anyway, removing stats: url  drops the cost of somewhat, to 945ms (15% overhead) (from 1067ms, or 30% overhead, above).  Options: Do nothing," defer a decision and implementation to a later PR Move those ""actually"" hot statistics behind a secondary almost-final value and compiler option Make them more efficient by sampling", rather than counting every invocation. Naively, bump a counter and sample when  . Less naively, bump a cheap pseudorandom value and sample when (to avoid bias from patterns in data). Delete them entirely \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,28,2017-08-10 09:42:45,6.47,,1,,"b""b'   is also fairly expensive (3% of total compile time) as it traverses all trees.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,29,2017-08-10 09:42:45,690.28,,,1,"b'b"" Thanks for the in-depth analysis", Jason.  I\'ve always liked the idea of pseudorandom sampling. I think it could give good results on these super hot counters. However, before trying it out I think it\'s better to try easier alternatives like using a new almost final value for those hot stats you\'ve identified +  . If working, that should put the overhead of running normal statistics around 12%. This is implemented in url   IMO, this effort could be split into a different PR. If url  doesn\'t reduce the overhead," I suggest merging what we have now (I\'ll clean up the git history first) and defer a decision and implementation to another PR.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,30,2017-08-10 09:42:45,90.38,,1,,"b'b"" @retronym These are my results benchmarking locally with TurboBoost disabled. I could only benchmark 2.12.3 and the last commit in this PR", since the other artifacts weren\'t accessible, even though I have the following in a global sbt file:  ## Results for 2.12.4-bin-042895b-SNAPSHOT  ## Results for 2.12.3  ## Conclusion I\'m surprised by these results, up until a point in which I would like someone to rerun the benchmarks and confirm them. Following these results, the overhead between the two is negligible. As a reminder, the last commit moves the statistics infrastructure in the initializer of  , and into a almost final value which is turned on by compiler flag (if is not present," hot statistics won\'t be shown).   Note that last commits are failing because the builds for url  were aborted. Can someone restart the CI for them?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,31,2017-08-10 09:42:45,526.87,,1,,"b""b' I have this to access PR validation builds.  url  contains fully bootstrapped builds triggered by the benchmark runs.  Even without these"," it is possible to run to publish to your  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,32,2017-08-10 09:42:45,160.35,,1,,"b""b' /rebuild  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,33,2017-08-10 09:42:45,696.08,1,,,"b'b\' I\\\'ve just benchmarked everything again to make sure the results are consistent.  1. [Logs for Scala 2.12.3]url  1. [Logs for Scala 2.12.4-bin-042895b-SNAPSHOT]url  1. [Logs for Scala 2.12.4-bin-347d589-SNAPSHOT]url  1. [Logs for Scala 2.12.4-bin-1866d1b-SNAPSHOT]url   Rough numbers without error margins (which are more or less consistent):  | Version | -Ystatistics:false |  -Ystatistics:true  2.12.3 | 1289  | 1386     2.12.4-bin-a8c43dc | ??? | ??? | parent of this PR  2.12.4-bin-347d589 | 1346 | 1633 | ""hot"" stats commented out  2.12.4-bin-042895b |  1357 |  1625 | all stats enabled & together  2.12.4-bin-1866d1b |  1326 |  1370 | ""hot"" stats split |  I don\\\'t have benchmarks for because provides almost the same benchmark results than 2.12.3", confirming that the overhead between the two is minimal, both where statistics are disabled and they are enabled.  I guess this can be reviewed again.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,34,2017-08-10 09:42:45,1322.5,,1,,"b""b' I have squashed the commits of this PR. The previous git history can be found in the [ ]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,35,2017-08-10 09:42:45,579.18,,1,,"b""b' Scheduled another [benchmark]url  to be doubleplus sure.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,closed,2017-09-20 03:54:33,805.93,2,24,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6034,closed,-,-,-,2,24,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,opened,2017-08-21 06:15:30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,title,2017-08-21 06:15:30,00:00,,1,,"b""b' Opt-in REPL banner'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,body,2017-08-21 06:15:30,00:00,,1,,"b'b"" Edit: the banner is hidden behind  .  The old welcome message is available under  .  This got a vote on gitter", so posting for feedback.   Spark doesn\'t use this mechanism," but overrides the printWelcome method in the REPL. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,1,2017-08-21 06:15:30,46.47,1,,,"b'b"" -1 That\'s a lot of visual noise for absolutely no reason. Would make me choose over for most of my small computation uses", only resorting to if I need Scala," and it\'d bother me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,2,2017-08-21 06:15:30,456.45,1,,,"b'b"" I may or may not try it again under a flag", and may or may not keep the edit to the help text.  The purpose of the banner is to make you forget that the compiler is initializing.  I also like the visual break for the start of a repl session," but maybe that\'s just my bad eyesight. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,closed,2017-08-21 14:38:25,502.92,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,reopened,2017-08-21 18:07:55,209.5,2,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,3,2017-08-21 06:15:30,225.4,,1,,"b'b"" I put the banner behind  .  My use case is that I often scroll my terminal back", and the banner helps me locate my last experiment. Also, arguably, it\'s friendly.  I already had a custom message to remove For some reason, that line is more noisome to me, as far as visual noise goes.  This PR would be 2.12 only, no-merge," and is maybe a way to try out ergonomics for 2.13. It doesn\'t really address url  Maybe should be taken as a file name instead of a string. The power banner can be a file name.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,4,2017-08-21 06:15:30,210.7,,1,,"b'b"" While neutral on adding an opt-in", the feature would have to be forward ported to 2.13," since changes to the repl won\'t merge cleanly anymore after someone went and boy scouted all over the place.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,5,2017-08-21 06:15:30,44.35,,1,,b'b\' This was research on customizing. Hopefully it will be very easy in 2.13.  I commented that it\\\'s no-merge," but I forgot the mechanism: ""[no-merge]"" in the title?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,6,2017-08-21 06:15:30,1.37,,1,,"b""b' Yes indeed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,closed,2017-09-08 06:09:57,722.03,2,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6045,closed,-,-,-,2,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,opened,2017-08-24 14:56:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,title,2017-08-24 14:56:25,00:00,,1,,"b""b' Remove deprecated view bounds in library'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,body,2017-08-24 14:56:25,00:00,,1,,"b""b' Replace view bounds with implicit parameter.  is the name used by the parser when converting the view bound to a parameter but is the conventional name. To ensure compatibility with code that might be using the generated name parameter name deprecation is included. ## TODO  [x] Update the version following cherry-pick [x] Use context bound and do not deprecate the implicit parameter name'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,1,2017-08-24 14:56:25,160.68,,,1,"b'b"" By definition or fiat or whatever", user code isn\'t supposed to use identifiers with dollars. A tool might interact with such idents, but shouldn\'t generate code with named params, which is a userland convenience.  The spec only says don\'t define idents with dollars.  The deprecation is sensitive in a good way, but also suggests the precedent that it\'s OK to rely on synthetic naming. I don\'t know if there\'s a policy when synthetics infect the API.  For example, if a function is lifted to some  ," should I exploit that? I guess it matters what is visible to Scala code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,2,2017-08-24 14:56:25,310.45,,1,,"b""b' I would rewrite instead into a context bound using  :   Naming is hard"," I welcome a better name than FromComparable :-) '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,3,2017-08-24 14:56:25,698.7,,1,,"b'b"" Is the code now following your suggestion @adriaanm ? I have added until I\'ve understood this change is and why it is better.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,4,2017-08-24 14:56:25,250.1,,1,,"b""b'   ?  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,5,2017-08-24 14:56:25,68.78,,1,,"b""b'  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,6,2017-08-24 14:56:25,263.43,,,1,"b""b'   sounds good to me. Ditto for  .  (Or  ? \\xf0\\x9f\\x98\\x81 )'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,7,2017-08-24 14:56:25,1004.87,,1,,"b""b' Hmm", build error is,"  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,8,2017-08-24 14:56:25,0.15,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,9,2017-08-24 14:56:25,1201.48,,1,,"b""b' Reverted to deprecation only.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,closed,2017-08-31 08:55:04,1078.65,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,reopened,2017-08-31 08:55:09,0.08,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,closed,2017-09-06 13:44:24,289.25,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,10,2017-08-24 14:56:25,494.28,,,1,"b""b' Thanks @janekdb! '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6049,closed,-,-,-,0,9,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,opened,2017-08-30 13:30:41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,title,2017-08-30 13:30:41,00:00,,1,,"b""b' Initialize statistics per global'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,body,2017-08-30 13:30:41,00:00,1,,,"b'b"" As described in the bug report", statistics are currently shared by different instances of because they are located in objects.  This approach has an important disadvantage.  Statistics from different global instances step on each other\'s toes, rendering the statistics infrastructure unusable in most of the Scala developers\' workflows (think sbt running in parallel several compilations). When the data is not useless, it produces races conditions and kills compilation.  This patch addresses the issue by creating a new object in that is overriden in and hence available to most of the compiler internals. This object contains all the statistics at the known definition site (  defines more statistics that are created in instead of  ).  The main goal of this implementation was to avoid moving the definition of statistics from the places where they are used. Currently, they are defined alongside the classes that have the call-sites (see, for example,  , or  ).  **NOTE**: This PR builds upon url  so it needs to be merged after it.  **EDIT**: Here\'s a summary of what this PR does:  1. It makes an overhaul of the previous statistics infrastructure that was dependent on global objects shared by different instances of Global (making the stats unusable in most of the cases). 1. It enables IOStats with a special trick that uses ThreadLocal to share instances of quantities () as suggested by @lrytz. 1. It modifies the statistics framework to listen to changes in the mutable settings and thus  according to what the driver of the compiler does. This allows to run statistics in controlled and interactive environments," enabling and disabling several times on the go. 1. It deduplicates calls to canEnable that could be hindering optimizations or affecting the runtime.  Fix #10460""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,1,2017-08-30 13:30:41,125.07,1,,,"b'b"" Oops", I\'ve just realised this is not enough. also has a global with all the quantities and I need to change that. Unless there\'s a creative way to do it," that\'s a breaking change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,2,2017-08-30 13:30:41,1030.38,,1,,"b""b'  In what sense is it breaking?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,3,2017-08-30 13:30:41,74.47,1,,,"b'b"" It is breaking in that there are some stats that need to be shut down (e.g. that are used in because the call-sites have no connection to neither nor  ).  Also", I think I\'m confused about the forwards and backwards binary compatible contract of Scalac. If we turn an into a in Scala Reflect, isn\'t that a breaking binary change? A Scala compiler 2.12.2 that wants to use Scala reflect 2.12.4 will fail to link, no? Or is this not a supported use case? If so," in which cases do changes break bincompat in Scala Reflect?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,4,2017-08-30 13:30:41,95.93,1,,,"b""b' Last commit turns the mother of all statistics",  , from an object to a trait. This is a required change to initialize per and avoid conflicts.  Note that because of my change, bincompat is broken again because of the removal of  . I have another question re bincompat for the Scala team. From the commit message:  Having said that and given the nature of this change," is it possible to whitelist it?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,5,2017-08-30 13:30:41,124.2,,1,,"b'b""  How about this hack: store the instance in a thread local that\'s initialized when the is created? Or do you think these stats are not all that relevat anyway? It is", but your change is in which is whitelisted url  As you suggest," this can be whitelisted as it\'s  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,6,2017-08-30 13:30:41,39.5,,,1,"b'b""  That makes a lot of sense. Wasn\'t sure that is whitelisted in Scala Reflect!  I\'m not sure these stats are really relevant", but I think that providing these these counters could in theory shed some light on the overhead of I/O work of the compiler, so I\'ll give your suggestion a go. The AB proposal asks for some of this data," so I think it\'s good to provide it anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,7,2017-08-30 13:30:41,515.25,,1,,"b'b"" All feedback is addressed and breaking change is whitelisted. Complexity when mixing in the trait has been removed in the last commit -now it\'s clearer to read what\'s going on.  I think this PR is up for a final review"," from url  to url  Let\'s hope the dependent PR can be reviewed and merged first so that I can rebase this one and make it easier to review.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,8,2017-08-30 13:30:41,905.3,1,,,"b'b"" Okay", I\'ve squashed the commits related to this PR. I\'ve left 4 independent PRs that summarize the changes in conceptual chunks, so that it\'s clear for future archeologists the order of the changes and the why (explained in the commit messages).  Here\'s a summary of what this PR does: 1. It makes an overhaul of the previous statistics infrastructure that was dependent on global objects shared by different instances of (making the stats unusable in most of the cases). 2. It enables with a special trick that uses to share instances of quantities () as suggested by @lrytz. 3. It modifies the statistics framework to listen to changes in the mutable settings and thus  according to what the driver of the compiler does. This allows to run statistics in controlled and interactive environments, enabling and disabling several times on the go. 4. It deduplicates calls to that could be hindering optimizations or affecting the runtime.  This is ready for review. While this is being reviewed," I\'m proceeding to benchmark this to compare results with url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,9,2017-08-30 13:30:41,1181.9,,1,,"b'b"" This PR needs a rebase on 2.12.x"," there\'s a merge conflict in GenBCode.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,10,2017-08-30 13:30:41,2.07,1,,,b'b\' For the commit messages (f9d88d10fd3837b8198d3735411e3818bbcb1075)," don\\\'t include ""Fix ..."" in the title", but at the end of the message url \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,11,2017-08-30 13:30:41,97.13,1,,,b'b\'  Yes, I\\\'m waiting on the other PR to be merged so that I rebase this one. Otherwise, if I rebase this one the CI will trigger a build for every commit," and that could block other PR\\\'s validation for a while.  Does GitHub close the issue that links if the ""Fix ..."" is at the end of the commit message instead of the title?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,12,2017-08-30 13:30:41,25.27,,1,,"b""b'  Sure"," no problem Yes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,13,2017-08-30 13:30:41,1420.97,,1,,"b""b' This is ready for review again. Commits have been rebased"," feedback addressed and [benchmarks have been scheduled]url |1dff6d12a1|c91aa41a74&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=now-30d&to=now).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,14,2017-08-30 13:30:41,216.55,1,,,b'b\' I haven\\\'t finished the review yet, but gtg right now. In the meantime, here are some minor cleanups: url There are plenty of calls, but also checks  . Could we simplify that?  Could you update the commit message where it\\\'s out of date? E.g.,"It enables IOStats with a special trick that uses ThreadLocal"". \''
scala	6051	closed	15	jvican	2017-08-30 13:30:41	14.6			+1	b'b""  I know, this PR did this before, but I removed it because I saw some weird things re performance. I can add this, but we will need to check that this simplification is actually meaningful with benchmarks. That can slow down the process to get this merged. I\'ll try to do it tonight.  Yes.""'
scala	6051	closed	16	lrytz	2017-08-30 13:30:41	259.95			+1	b'b""  I\'m happy to have this in a follow-up PR, it doesn\'t need to hold up this one.""'
scala	6051	closed	17	lrytz	2017-08-30 13:30:41	3.52		+1		b'b""  If I understand correctly, there\'s a significant slowdown. It seems grafana is slightly confused about the two commits, it cannot tell them apart, probably because they have the same timestamp due to a rebase.""'
scala	6051	closed	18	lrytz	2017-08-30 13:30:41	2.82		+1		b""b'  '",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,19,2017-08-30 13:30:41,944.7,1,,,"b'b"" I\'m trying different things to massage the performance impact. From what I can see in the benchmark results"," the benchmark machine is not quite stable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,20,2017-08-30 13:30:41,108.25,1,,,"b'b"" Removing in the call-sites has a significant hit on performance", as per url  I guess this is due to the fact that is not inlined by the JVM, and we always pay the cost of the call to the statistics instance.  I\'ve reverted the change and added a new commit that removes in the definition sites, to check if there\'s a performance degradation. In theory," this should give the same or faster running time.  **EDIT**: [Updated link to benchmarks]url |1dff6d12a1|c91aa41a74|c818f40|249f9e2|25c0d0d&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=now-30d&to=now).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,21,2017-08-30 13:30:41,60.73,,,1,"b'b"" I think the main performance hit here comes from the fact that before was static because was an object", but now it\'s not.  I don\'t think this can be addressed since it\'s fundamental to have statistics being dependent on the global instance (as motivated in the README), but I think that removing the calls in the definition site may yield some performance benefit.  In the next hours," I\'ll update this commit with a detailed table and a reading of the performance results from Grafana.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,22,2017-08-30 13:30:41,156.62,1,,,"b'b"" It seems the candidate to be merged is url  This is the performance degradation recorded by Grafana:  | better-files | scala | scalap | vector  +2.4% | +3.1% | +2.6% | +2.0% |  [Data source]url |1dff6d12a1|c91aa41a74|c818f40|249f9e2|25c0d0d&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1505924607857&to=1506530529968).  I find it difficult to reason about the performance impact since the machine does not provide consistent results across different repos and same commits. Some of the commits I would expect to behave exactly the same and yet they provide sometimes different results (an example of this is url  which should not have any impact unless statistics are enabled). I don\'t think it\'s a big deal", it just hints that the machine is not 100% stable.  @lrytz I did the experiment you asked me," and the result is that it\'s significantly slower. See the commit  url  and the [results]url |1dff6d12a1|c91aa41a74|c818f40|249f9e2|25c0d0d&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1505924607857&to=1506530529968). I provide an hypothesis for this behaviour in one of my commits above.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,23,2017-08-30 13:30:41,188.83,,1,,"b""b' 2-3% is significant.. Not sure what to do here. For comparison"," could you benchmark a version where all calls to statistics are commented out?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,24,2017-08-30 13:30:41,6.42,,1,,"b""b' Perhaps we could still have a static canenable that is the disjunction ofthe canenable of the per global statistics instances.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,25,2017-08-30 13:30:41,101.05,1,,,"b'b""  I can quickly whip up something like this", but note that there\'s a clear problem here: if a instance does enable statistics, they will be enabled for all the global instances, meaning that in a multi-project environment like sbt the enabling of statistics in one project will make other projects compile with statistics enabled too.  It is significant, but I\'m afraid it\'s the price to pay for having a working statistics infrastructure. Having statistics enabled globally for all globals makes statistics run into thread-safety issues, as we\'ve experienced in the past.  Please, let me know your position on this," I can quickly act on this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,26,2017-08-30 13:30:41,50.52,,1,,"b""b'  My idea was to have a fast", static check (using the technique) that means  . If that is true, we can consult the of the instance for the current  .  The overwhelmingly common case is that no statistics will ever be enabled," and we should strive to make this run as fast as if all the stats collection code was commented out.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,closed,2017-09-27 22:42:40,551.98,12,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,reopened,2017-09-28 01:34:08,171.47,12,12,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,27,2017-08-30 13:30:41,171.85,1,,,b'b\' Sorry," meant to hit ""comment"""," not ""close and comment""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,28,2017-08-30 13:30:41,623.28,,1,,"b'b"" My last commit massages the performance of this change", and as [reported by the benchmarks]url |1dff6d12a1|c91aa41a74|c818f40|249f9e2|25c0d0d|66b5fb1|1e09de17a3&var-source=All&var-bench=&var-host=scalabench@scalabench@&from=1505939731620&to=1506676767085) the previous performance before this change has been restored. In some benchmarks, it seems it\'s *slightly* faster but not sure if this is due to machine unstability.  The major impact in performance is due to the direct use of a static call in the if checks, instead of  . This static is just a flag that tells us if some global instance has enabled statistics. If it has, then we double-check if statistics have been enabled for that concrete global. Therefore," we only pay the price of checking the non-static fields (+2/3%) only when one global has enabled statistics.  @retronym @lrytz Can you review my last commit?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,closed,2017-09-28 17:35:33,961.42,13,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,29,2017-08-30 13:30:41,474.1,,,1,"b""b' Thank you @lrytz @retronym.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,30,2017-08-30 13:30:41,352.03,,1,,"b""b' this broke scalameta url code patterns    Lines:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,31,2017-08-30 13:30:41,353.12,,1,,"b""b' Is there a way to provide a source compat shim via  ? I have not looked at the details"," just a quick suggestion.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,32,2017-08-30 13:30:41,361.23,,1,,"b'b"" No", it\'s not possible since Scalameta is accessing directly," which doesn\'t exist anymore. Compiler plugins will need special cross-compiling for 2.12.4 onwards (i.e.  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,33,2017-08-30 13:30:41,370.97,,1,,"b""b' Ok"," I am fiddling with a patch for our fork at  branch community-build-2.12:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,34,2017-08-30 13:30:41,489.08,,1,,"b""b' url  pushed to url  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,35,2017-08-30 13:30:41,992.05,1,,,"b'b"" Hate to be the bearer of bad news", but our benchmarks have regressed.  We only run the benchmark daily, so I can\'t say for sure if this PR," or something else in #6066  #6097 #6027 #6101 #6082 #6098 #6089 is to blame. I\'ve scheduled more fine grained runs to try to isolate the problem.  ![image]url  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,36,2017-08-30 13:30:41,1002.42,,1,,"b'b\' Jorge did run the ""scala"" benchmark on the final solution of this PR url  and there was no regression. Maybe it was in url  There Jorge also ran the benchmarks without regression url  but then pushed a few more changes / added more commits.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,37,2017-08-30 13:30:41,1004.15,,1,,"b'b"" #6067 was merged after the regression", if I\'m reading things correctly.  Last known good was 95142900feeefafd587313ebabb7521c00ce813b," first known bad is d41c97f13ea2348ec6f59c24ae098d83a96f30dc""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,38,2017-08-30 13:30:41,1005.57,,,1,"b""b' OK"," thanks! I was just thinking of PR I touched on :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,39,2017-08-30 13:30:41,1255.03,,1,,"b""b' @retronym The baseline of my benchmarks was 39301 for ", and the results for this PR yielded 39250. In the attached image, it seems that the regression has been from ~3700s," so it looks like this PR is not the responsible for the regression.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,40,2017-08-30 13:30:41,1268.03,,1,,"b""b' @jvican Agreed"," #6082 appears to be the point of regression.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,41,2017-08-30 13:30:41,1232.5,,1,,"b'b\' 1e09de17a3473efb26db535a71f9ec8b03018ac2 (""Massage performance with statistics optimizations  \\xe2\\x80\\xa6"") appears to increase the overhead of having statistics enabled.   @jvican Any idea why? I\\\'ll keep digging into it.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,42,2017-08-30 13:30:41,1261.22,,,1,"b'b"" If I had to venture a guess", I would say that the fact that is not final anymore makes the access to it more expensive; but honestly, I don\'t know why. The reason why couldn\'t be final anymore was because it\'s overridden in both and  .  I\'m happy to look into this over the weekend," let me know if you\'d like me to.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,43,2017-08-30 13:30:41,21.95,,1,,"b'b"" I\'ve collected profiles in url It looks like JIT is working harder. The profile-async profile only collects after the 10x10s warmup"," but the JIT threads [dominate]url  the profile.  I\'m removing a few moving parts in url  to see if I can pinpoint the problem.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,44,2017-08-30 13:30:41,38.65,,1,,"b'b\' It\\\'s possible that I\\\'ve bisected this incorrectly and am witnessing a problem that was was already fixed by 1c47b2ffad20b6f589255b3c935c8538fd714403 (""don\\\'t try to re-disabled the almost final value"")\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,45,2017-08-30 13:30:41,51.83,,1,,"b'b"" Ha"," the problem is actually redundantly pushing into the almost final value.  I think this is the fix:   This avoids invalidating all the call sites that have (JIT) inlined  . I\'ll submit the patch tomorrow.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,46,2017-08-30 13:30:41,1120.58,,,1,"b""b' That makes sense \\xe2\\x80\\x94 this is an oversight", I thought I had done this. Thanks for looking into this," I appreciate it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6051,closed,-,-,-,14,26,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,opened,2017-09-03 08:53:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,title,2017-09-03 08:53:13,00:00,,1,,"b""b' Initial attempt at limiting *only* the compensating threads of the global EC'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,body,2017-09-03 08:53:13,00:00,,1,,"b""b' (This PR is for discussion with the reporter of the issue"," do not merge yet)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,1,2017-09-03 08:53:13,67.28,,,1,"b""b' Thanks. I have seen BlockContext before but did not know how to use it. On Mon", Sep 4, 2017 at 7:46 PM," Viktor Klang (\\xe2\\x88\\x9a) wrote:>'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,2,2017-09-03 08:53:13,160.48,,1,,"b""b' To fix the build failure"," rebase on current 2.12.x'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,closed,2017-09-06 12:43:16,230.05,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,3,2017-09-03 08:53:13,5.48,,1,,"b'b"" @lrytz I\'m experimenting with minimizing solution. will push updated PR when available.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,reopened,2017-09-11 12:55:37,12.35,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,4,2017-09-03 08:53:13,11.17,,1,,"b'b"" @avkonst I think I have created a solution for this problem. But I think I\'d like some more eyes on this"," and especially field feedback before I think it is safe to go into the stdlib.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,5,2017-09-03 08:53:13,637.38,,1,,"b""b' @viktorklang Hi", thanks. I can try to integrate it to the product and run some tests. The problem was random reproducing, until I figured out the stable reproducer (which I reported). So, not sure I can provide field feedback. It also may take time. I can have a look into it," but not sure how much I can be helpful... do you have a review / PR?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,6,2017-09-03 08:53:13,539.1,,,1,"b""b' @avkonst This is the PR :) url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,7,2017-09-03 08:53:13,660.07,,1,,"b""b' Note that the 2.12.4 window will close in 7 days.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,8,2017-09-03 08:53:13,10.02,,,1,b'b\' I don\\\'t think this change is mature enough to ship at this point. There isa workaround (increase extra threads) if one hits the edge case. I guess wecould have a flag to switch between impls but that would complicate thingseven further. -Cheers,\\xe2\\x88\\x9a On Sep 20, 2017 21:34,"Adriaan Moors""  wrote:>\''
scala	6055	closed	9	adriaanm	2017-09-03 08:53:13	15.88			+1	b""b' \\xe2\\x88\\x9a, thanks for the update.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,10,2017-09-03 08:53:13,12.62,,,1,b'b\' You\\\'re most welcome! -Cheers,\\xe2\\x88\\x9a On Sep 20, 2017 22:01,"Adriaan Moors""  wrote:>\''
scala	6055	closed	11	adriaanm	2017-09-03 08:53:13	801.38			+1	b'b"" I\'m closing this PR because it has been dormant for a while now. We\'d be very happy to receive a new PR that addresses points raised by the reviewer.""'
scala	6055	closed	closed	 - 	2018-06-01 09:34:05	1238.47	0	7	6
scala	6055	closed	12	NthPortal	2017-09-03 08:53:13	820.22		+1		b""b' @viktorklang is this superseded by #6529?'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,13,2017-09-03 08:53:13,825.1,,,1,"b""b' @NthPortal Correct. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6055,closed,-,-,-,0,8,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,opened,2017-09-11 05:35:11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,title,2017-09-11 05:35:11,00:00,,1,,"b""b' Avoid an AST traversal in the erasure phase'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,body,2017-09-11 05:35:11,00:00,,1,,"b""b' A separate traversal between preErase and re-typechecking wasresponsible for filling in super-init calls in trait constructorsand adjusting the template parents in the AST to align with theinfo-transformed class info. This commit removes this traversal and handles those concerns inthe typechecking traversal This was probably harder to do before the changes to the trait encodingin Scala 2.12.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,1,2017-09-11 05:35:11,3.33,,1,,"b'b"" The traversal I\'ve removed was reported at around 0.5% of compile time in my profiler.  Let\'s see if we can see any of that as an improvement in the [benchmarks]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,closed,2017-09-11 06:04:28,29.28,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,reopened,2017-09-11 06:05:08,0.67,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,2,2017-09-11 05:35:11,1402.85,,1,,"b'b"" The benchmarks results appear to be either very slightly positive or neutral. Ideally"," we\'d be able to benchmark the erasure phase in isolation to be able to resolve the impact of small changes like this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,closed,2017-09-27 16:02:49,597.68,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6066,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,opened,2017-10-02 04:02:01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,title,2017-10-02 04:02:01,00:00,,1,,"b""b' No illegal stars in typed select'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,body,2017-10-02 04:02:01,00:00,,1,,"b""b'   converts repeated params as required"," and should do the same.  There is a more generic issue in #6929  Fixes #8923'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,closed,2017-10-02 04:29:25,27.4,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,reopened,2017-10-02 07:34:50,185.42,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,1,2017-10-02 04:02:01,221.67,,,1,"b'b"" The first cut failed because accessors were star-typed", or star-crossed. I tested bootstrap build locally thanks to @lrytz instructions on another PR," maybe he can also say how far off base this tweak is. I didn\'t follow type completers in namers far enough to get a sense of it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,2,2017-10-02 04:02:01,77.05,,1,,"b'b"" The tweak probably isn\'t tweaky enough"," but one test failure is because it relies on previous star in function: It also re-broke varargs in ctors. I guess that relies on the accessors having star type.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,closed,2017-10-02 09:00:44,85.9,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,reopened,2017-10-02 17:26:33,505.82,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,3,2017-10-02 04:02:01,1233.08,1,,,"b'b"" This area fills me with dread"," but I\'ve been here before so I\'ll assign myself to this ticket. Let\'s move the PR to 2.13.x though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,closed,2018-06-26 22:00:09,273.6,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,reopened,2018-06-26 22:00:31,0.37,1,3,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,4,2017-10-02 04:02:01,1266.03,,1,,"b""b' ping @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,5,2017-10-02 04:02:01,572.93,,1,,"b'b"" hmm i don\'t see it"," which part of the diff fixes the bug?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,6,2017-10-02 04:02:01,171.37,,1,,"b'b"" I see the fix allows star in the signature", but requires in the application.  Essentially, instead of disallowing it, the star becomes a kind of alternative syntax for  . The spec language would say that the star type means everywhere _except_ in a method application.  Probably that made more sense back in the days of  .  But since that is no longer an option (literally), it should be disallowed except for method parameters.  I kind of like the current fix," but it\'s rather eccentric.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,7,2017-10-02 04:02:01,288.25,1,,,b'b\' Added a commit that disallows in  .  Maybe that should be deprecated until  ?  The previous commit still does something, compare to [last year]url   The original report, that fails but succeeds, is fixed by stripping star in  . But with the parser change, the star type is not expressible, so you can\\\'t import something of star type. The print-tab in REPL might see it if I reverted that change; I haven\\\'t tried that yet.  It\\\'s probably the aliasing bit that retronym found dreadful. I don\\\'t see a new test, and I don\\\'t remember which tests fail without that change, which I\\\'ll have to puzzle over a minute.  You may have noticed 38 Down in the Friday NY Times crossword,rotary phone," @retronym so-called. I wonder if ""compiler engineer"" could be considered a retronym. Then is retronym a compiler engineer or the other way around? \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,8,2017-10-02 04:02:01,1077.72,,1,,"b""b' closing for inactivity"," can be revived & reopened whenever'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,closed,2018-11-06 13:50:07,949.6,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,9,2017-10-02 04:02:01,255.18,1,,,"b""b' Since retronym is dreadfully hung up"," I moved the other commits to separate PRs.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,10,2017-10-02 04:02:01,48.2,,1,,"b""b' new PR: #7399 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6107,closed,-,-,-,3,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,opened,2017-10-27 06:08:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,title,2017-10-27 06:08:23,00:00,,1,,"b""b' Merge 2.10.x + PR 6113 to 2.11.x [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,body,2017-10-27 06:08:23,00:00,,1,,"b""b' This brings in backports of basic support for Java 9.  When running on Java 9", the command line and runner scripts must be run with to allow the compiler access to  ," which is the basis of our implementation the platform classpath.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,closed,2017-10-27 06:08:48,0.42,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,reopened,2017-10-27 06:09:07,0.32,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,1,2017-10-27 06:08:23,918.47,,1,,"b'b""  I\'ve noted the limitation in the PR description.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,2,2017-10-27 06:08:23,1.05,,1,,"b'b"" I\'ve dropped the commit that used  /NIO for the platform classpath impl: I\'d forgotten that 2.11 also needs to build on Java 6!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,closed,2017-11-01 03:53:11,1304.07,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6151,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,opened,2017-11-09 18:09:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,title,2017-11-09 18:09:02,00:00,,1,,"b""b' Backport of fix to 10587'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,body,2017-11-09 18:09:02,00:00,,1,,"b""b' Do not merge yet.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,1,2017-11-09 18:09:02,224.48,,1,,"b""b'  the whole package could just be exempted from MiMa"," I imagine...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,2,2017-11-09 18:09:02,711.37,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,3,2017-11-09 18:09:02,178.2,1,,,"b'b"" @SethTisue The entire *impl cannot (unfortunately) be exempted because the scala-java-8-compat jar messes around with the DefaultPromise.  I\'ll add an exemption to the removed class.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,closed,2017-11-14 14:21:10,1212.13,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,reopened,2017-11-14 14:21:16,0.1,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,4,2017-11-09 18:09:02,46.4,1,,,"b""b' @ktoso @rkuhn Sorry for pinging you"," just need a sanity check for this :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,5,2017-11-09 18:09:02,30.25,,1,,"b'b"" No idea", could you explain the rationale and show why we\'re safe to revert this now," what\'s the assumption on JDK version? Would have to release this and test against akka to be sure it does not cause regressions -perhaps you can do that?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,6,2017-11-09 18:09:02,18.53,,1,,"b'b"" @ktoso Assumption of JDK8 (Scala 2.12+). I believe historically FJP wouldn\'t escalate exceptions on wrapped Runnables to the UncaughtExceptionHandler of the executing thread"," which is why we wrapped it ourselves and delegated. The only observable difference that I can think of right now is that uncaught exceptions will now lead to worker death (which arguably is more correct).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,7,2017-11-09 18:09:02,841.97,,1,,"b'b"" @ktoso @viktorklang What\'s the status of? Could you summarize the ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,8,2017-11-09 18:09:02,259.27,,1,,"b'b"" @retronym AFAIK: Only binary compatibility problem would be if anyone is instantiating this class (AdaptedForkJoinTask) themselves", which does seem unlikely given its visibility. Semantically, the change is that now we\'re going to rely more on the FJP implementation\'s termination semantics, which we overrode with the AdaptedForkJoinTask, to intercept uncaught exceptions," which at least IIRC on Java7 didn\'t behave the same.  What does the community build say about this change?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,9,2017-11-09 18:09:02,867.95,,1,,"b'b""  there is some breakage in the 2.12 build I need to fix first"," but once that\'s done I\'ll return to this ticket and trigger a test run.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,10,2017-11-09 18:09:02,1428.73,,1,,"b'b"" @viktorklang could you rebase this against current 2.12.x? I did a community build run but I got some strange failures I don\'t think are related to your changes. rather than investigate"," I\'d like to try again against fresher code.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,11,2017-11-09 18:09:02,1013.92,,,1,"b'b"" @SethTisue rebased and push-f-d to viktor\'s branch. @viktorklang assuming the community build is fine"," can this be merged?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,12,2017-11-09 18:09:02,216.27,,1,,"b""b' @lrytz AFAIK: yes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,13,2017-11-09 18:09:02,135.78,,1,,"b""b' community build queued: url  (404 til Jenkins catches up)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,14,2017-11-09 18:09:02,861.22,,1,,"b""b' Compared to the previous run", scala-async and cats-effect failed.  scala-async shows a number of errors like this:  Not sure what to make from this, but it seems unrelated.  For cats-effect   Not sure why," it used the same revision as in the previous build.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,15,2017-11-09 18:09:02,568.3,,1,,b'b\' @lrytz the community build failures seem unrelated," so I think we can just hit ""merge"" on this?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,16,2017-11-09 18:09:02,860.38,,1,,"b""b' \\xf0\\x9f\\x91\\x8d '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,closed,2018-02-28 11:52:07,1290.85,2,15,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6171,closed,-,-,-,2,15,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,opened,2017-11-22 21:33:08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,title,2017-11-22 21:33:08,00:00,,1,,"b""b' Warn-unused uses type alias in nesting check'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,body,2017-11-22 21:33:08,00:00,1,,,"b'b"" A reference from the body of a class is not a usage of the class"," but a reference to a local type alias of it is a usage of the type alias.  Also don\'t warn about filter for refutable pattern.  Also is a usage of  .  Simplify message for a that isn\'t mutated.  Fixes #10623 Fixes #10394 Fixes #9058 Fixes #10282 Fixes #10448""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,closed,2017-11-23 07:59:11,626.05,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,reopened,2017-11-23 19:40:24,701.22,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,1,2017-11-22 21:33:08,1416.47,1,,,"b""b' this seems to have been forgotten about. can you suggest a reviewer?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,2,2017-11-22 21:33:08,11.1,,,1,"b""b' @SethTisue I believe the community that wants the fix will step up to review it! I believe in the community!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,3,2017-11-22 21:33:08,352.25,,1,,"b""b' I need another session to exercise the last commit. While debugging the underlying issue"," I realized I know nothing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,closed,2018-02-22 15:37:54,1197.5,2,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,4,2017-11-22 21:33:08,749.88,,,1,"b'b"" And we\'re back under 2","100 issues in !""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,5,2017-11-22 21:33:08,763.3,,1,,"b""b' \\xf0\\x9f\\x99\\x80 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,6,2017-11-22 21:33:08,869.62,,1,,"b'b\' I\\\'ll create a few new issues to address @SethTisue \\\'s nits. Is there a ""nit"" label?\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,7,2017-11-22 21:33:08,885.18,,,1,"b'b"" very glad to see this crossing the finish line! \\xf0\\x9f\\x8e\\x89  thanks Som", greatly appreciate your ongoing commitment to this unused warnings work," it\'s a real boon for code quality community-wide""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,8,2017-11-22 21:33:08,901.7,,1,,"b'b"" I won\'t rest until all the code is used.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,9,2017-11-22 21:33:08,912.78,,1,,"b""b' no child (in any abstract syntax tree) left behind'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,10,2017-11-22 21:33:08,916.72,,1,,"b'b\' ""I speak for the trees."" The Lorax.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,11,2017-11-22 21:33:08,434.87,,1,,"b""b' Looks like this regressed for a local val captured in a CBN closure:   nok:  ok:  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,12,2017-11-22 21:33:08,1206.55,,,1,"b'b"" thanks @som-snytt ... ~~I\'m still getting false positives in synthetic methods. I don\'t know how to create a minimisation that doesn\'t depend on the scalaz-deriving compiler plugin.~~  (Actually this might have been a bug in my compiler plugin...)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6190,closed,-,-,-,2,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,opened,2017-11-24 17:11:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,title,2017-11-24 17:11:02,00:00,,1,,"b""b' Fix for SI-9881 in branch 2.11.x'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,body,2017-11-24 17:11:02,00:00,,,1,"b""b' Retrofits fix for SI-9881 to branch 2.11.x. Contains the changes of #5640 .  - This change should fix [Spark issue 22393]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,1,2017-11-24 17:11:02,1032.95,,1,,"b'b\' Not sure what causes the failure: ""combined \\xe2\\x80\\x94 Found earlier commit(s) marked failure: 68118b""...\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,2,2017-11-24 17:11:02,0.52,,1,,"b""b' Jenkins"," re-test this please.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,3,2017-11-24 17:11:02,393.62,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,4,2017-11-24 17:11:02,139.03,,1,,"b""b' It seems that failed due to the fact I did not sign the cla before I created the PR; and fails because the failed... Not sure how can we fix this...'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,5,2017-11-24 17:11:02,19.18,,1,,"b""b' yeah"," looks like a Scabot limitation. we can just it before merging'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,6,2017-11-24 17:11:02,2.4,,1,,"b'b"" note that in general", we\'re no longer accepting changes for 2.11.x and there are currently no plans for a 2.11.13 release. you might able to persuade @adriaanm," but you\'d probably need to explicitly make a case that this is both sufficiently critical and sufficiently safe""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,7,2017-11-24 17:11:02,6.4,,,1,"b'b"" Hi", thanks for the info. The bug does not seem to be critical (marked as minor in Jira), so I don\'t think we should make too much effort to  this one. Currently looking for alternative fixes for the [issue]url  it seems that the problem only appears if is set to true. Will look for a way to force Spark-shell to a non-class based behaviour," if possible.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,8,2017-11-24 17:11:02,1384.32,,,1,"b'b"" I would be open to a 2.11 release dedicated to fixing bugs that affect Spark (at least a half dozen", to make it worth cutting a release), if someone is willing to step up and coordinate the work. We can\'t afford to invest in 2.11 anymore, but I won\'t stand in the way of progress :-) (Wellllll, *ideally*," the progress would be for Spark to upgrade to 2.12 ;-))  Regarding this bug: the workaround of turning of the class based encoding is unlikely to work because I think Spark relies on it for improved serialization or lower memory retention? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,9,2017-11-24 17:11:02,980.28,,,1,b'b\' Hi @adriaanm," Thank you for the information and the opportunity. I looked into Spark issues related to ""Spark-shell"" and came up with a list of tickets that have some chance of being caused by a bug in the Scala 2.11 repl:  * [SPARK-22393]url  created: 2017/10/17 (confirmed", this is bug cause by the underlying Scala repl) * [SPARK-20706]url  created: 2017/05/11 (unconfirmed) * [SPARK-10806]url  created: 2015/09/15 (unconfirmed) * [SPARK-7043]url  created: 2015/04/15 (unconfirmed) * [SPARK-5150]url  created: 2015/01/08 (unconfirmed)  Based on this list, I find it highly unprobable to collect the number of changes that would warrant a 2.11 release. Thanks for the info and the opportunity, though.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,10,2017-11-24 17:11:02,1.12,,1,,"b""b' As discussed above"," it does not seem practical to plan a release for these changes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,closed,2017-11-29 11:10:51,1079.82,0,8,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,11,2017-11-24 17:11:02,292.93,,,1,"b""b' Thanks for digging in", @mpetruska! We are still considering another 2.11 with some other small fixes," so we could try to tackle at least a few of the spark shell issues that have a low chance of causing regressions. Track url  for the planning around it. I expect a release either late this year or beginning of January.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,12,2017-11-24 17:11:02,22.0,,1,,"b""b' Re-opening to allow tracking the changes in -dev#451.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,reopened,2017-11-29 16:25:48,314.95,0,9,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,13,2017-11-24 17:11:02,625.05,,1,,"b'b"" labeling as WIP so it doesn\'t show up when filter on that label\'s absence""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,14,2017-11-24 17:11:02,389.95,,1,,"b'b"" Tested locally. TODO: bring back CI for 2.11.x if we\'re going to do cut another release.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,closed,2018-06-01 09:20:53,1015.08,0,11,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,15,2017-11-24 17:11:02,743.58,,1,,"b""b' this is failing on Windows at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,16,2017-11-24 17:11:02,765.78,1,,,"b""b' Is \\xe2\\x80\\xa6 is this complaining about white space (maybe Windows line-ending issue)?  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,17,2017-11-24 17:11:02,1158.3,,1,,"b""b' very likely Windows line endings'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,18,2017-11-24 17:11:02,770.63,,1,,"b""b' attempting a fix over at url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6195,closed,-,-,-,1,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,opened,2017-12-04 00:12:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,title,2017-12-04 00:12:56,00:00,,1,,"b""b' Assorted compiler optimizations'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,1,2017-12-04 00:12:56,0.4,,1,,"b""b' Selected from #6115 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,closed,2017-12-04 00:13:41,0.75,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,reopened,2017-12-04 00:14:08,0.45,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,2,2017-12-04 00:12:56,1434.15,,1,,"b""b' Here are the [benchmark charts]url  for the recent history before this PR"," and for the commits in this PR.  The aggregate improvement appears to be ~6%.  Only the final commit is benchmarked so far. The other points will fill in over the coming hours. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,3,2017-12-04 00:12:56,68.65,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,4,2017-12-04 00:12:56,310.25,,,1,b'b\' The biggest wins appear to be Optimize  Use AnyRefMap in hot parts of the compiler. Optimize generic sig parser  The change could be deemed slightly controversial as it calls in reverse order. This would change the order of side effects in views over  .  The change needs some more investigation on the correctness front, the intermediate commit I added to assert what I\\\'d assumed in the refactoring failed. It does not appear to be a major performance win," so I\\\'ll defer that change until I have time to investigate.  ""optimize enclosingRootClass"" needed some last minute changes to be able to distinguish based symbol tables (  and  ) from the those built on a traditional classpath. There is a chance that the call I needed to add adds some cost that outweighs the benefit of not walking the owner chain. I\\\'ll play with alternatives and microbenchmark before commiting to a change. \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,5,2017-12-04 00:12:56,1018.9,,1,,"b'b"" I\'ve pushed the trimmed down version discussed above. For posterity"," the original sequence of commits are in branch [-take1]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,6,2017-12-04 00:12:56,17.48,,1,,"b""b' /sync'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,7,2017-12-04 00:12:56,783.95,,1,,"b'b"" I\'ve applied url  in my scalac fork to compile Scalatest\'s test suite with statistics enabled"," and I\'m seeing a 20s improvements (from 111s to 90s). The Scalatest test suite has around 300.000 LOC.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,8,2017-12-04 00:12:56,1248.22,,1,,"b""b' The only contentious part of this is 84890f3. @szeiger perhaps you can think about whether reversing the order of calls to in is okay"," or if we should refactor to use tail mutation (perhaps via a  ). Merging in the meantime.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,closed,2018-03-21 09:35:01,560.88,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6209,closed,-,-,-,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,opened,2017-12-18 16:08:10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,title,2017-12-18 16:08:10,00:00,,1,,"b""b' Compare getter and setter by .accessed instead of .point. Fixes #10448.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,body,2017-12-18 16:08:10,00:00,,1,,"b'b\' After enabling -Xlint in my project I started getting regular "" on NoPosition"" errors", which made me disable -Xlint. The stack trace points always pointed to TypeDiagnostics so with some help from Adriaan this commit changes the logic to not rely on  . I haven\\\'t been able to find a minimal reproduction for this error, so there is no accompanying test.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,1,2017-12-18 16:08:10,60.08,,1,,"b""b' Seems the change broke -Xlint for some tests"," url  I will try and take a look.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,2,2017-12-18 16:08:10,177.6,,,1,"b'b"" Thanks for reviving this", it was on my list. I was going to write a quick macro as a test, but it couldn\'t be a partest. Also, for pattern vars," I don\'t know if there is a better test and I don\'t remember offhand why the symbol is not identical.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,3,2017-12-18 16:08:10,1390.77,,,1,"b""b' @olafurpg still interested in getting this across the finish line"," now that the holidays are past...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,4,2017-12-18 16:08:10,9.4,,1,,b'b\' @SethTisue MLK day is only twelve hours past, we\\\'re still hung over," cut us some slack. ""Party like a King.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,5,2017-12-18 16:08:10,275.47,1,,,"b'b\' @som-snytt look at the massive 2-month-plus gap in url  though. right now seems to be the only time of year getting any work done at all is even possible. (""Knabenschiessen"" sounds alarming \\xe2\\x80\\x94 that\\\'s when they take all the boys outside and shoot them?)\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,6,2017-12-18 16:08:10,5.4,,1,,"b""b' @som-snytt FYI this is interfering with development of lightbend-emoji"," which I am currently extending into a cryptocurrency.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,7,2017-12-18 16:08:10,234.52,,1,,"b""b' How about just:   '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,8,2017-12-18 16:08:10,463.62,1,,,"b'b"" @SethTisue if someone is motivated to take this PR to the finish line then be my guest. Feel free to reuse the diff without attribution. I am afraid I don\'t have time to investigate this further. I am still impacted by this bug and disable -Xlint because of it.  @retronym I applied your diff on top of this PR but still fails for me locally. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,closed,2018-01-17 11:45:02,1176.87,2,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,9,2017-12-18 16:08:10,1148.3,,,1,"b'b"" I\'ll take a whack"," thanks @olafurpg ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,10,2017-12-18 16:08:10,315.87,,,1,"b""b' The position test was for  . Warning is disabled anyway now. Parser rewrite to could preserve the magic attachment. Also would be a nice escape hatch.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,reopened,2018-02-16 01:58:12,853.17,2,6,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,11,2017-12-18 16:08:10,829.38,,,1,"b'b"" @som-snytt reopened on the assumption you\'re still interested in picking it up""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,12,2017-12-18 16:08:10,62.82,,1,,"b""b' Superseded by a commit in url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,closed,2018-02-16 03:01:23,63.18,2,7,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6232,closed,-,-,-,2,7,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,opened,2018-01-08 23:32:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,title,2018-01-08 23:32:26,00:00,1,,,"b""b' Improve error message when using a Java class as a value.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,body,2018-01-08 23:32:26,00:00,,,1,"b'b"" As pointed out in gitter", it\'s kinda unfair to our users to refer to a Java class as an in error messages, despite that being what the compiler sees.  Also," the error emitted by sounds kinda strange to my picky ears. is perfectly fine IM(V)HO. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,closed,2018-01-09 01:11:31,99.08,1,0,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,reopened,2018-01-09 01:29:15,17.73,1,0,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,1,2018-01-08 23:32:26,165.37,,1,,"b'b\' Updated to be slightly less ambitious. Saying ""Java class"" everywhere for Java-defined classes is maybe worth it", but doing so only for Java statics modules is silly, and enabling it for classes changes a lot," and not always in good ways (e.g. ""superJava class"" showing up as part of a message).  For now let\\\'s just change it in this specific message (gotten from  ", where the un-valueness of Java-defined classes is uncovered).\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,2,2018-01-08 23:32:26,887.95,1,,,"b""b' Updated with a shorter comment", a longer commit message," and less extraneous margin stripping. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,3,2018-01-08 23:32:26,0.95,,1,,b'b\' For the record,"I value Java classes."" (Says my t-shirt.)\''
scala	6252	closed	4	lrytz	2018-01-08 23:32:26	162.67		+1		b""b' /rebuild'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,5,2018-01-08 23:32:26,992.02,,1,,"b""b' @hrhino this is almost ready"," just include the changes from your other branch url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,6,2018-01-08 23:32:26,727.98,,,1,"b'b"" Thanks for the ping. Changes squashed. I had tried to be a bit cleverer but I\'ve given up for now. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,closed,2018-03-02 11:27:41,598.43,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6252,closed,-,-,-,2,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,opened,2018-01-17 16:24:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,title,2018-01-17 16:24:19,00:00,,1,,"b""b' Remove uses of the @bridge annotation in compiler.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,body,2018-01-17 16:24:19,00:00,1,,,"b'b"" It\'s and unused"," so I doubt this will break anyone.  edited: obviously this wouldn\'t bootstrap. I should have known.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,closed,2018-01-17 16:32:37,8.3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,reopened,2018-01-17 16:38:39,6.03,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,1,2018-01-17 16:24:19,382.82,,1,,"b'b"" assuming re-STARRing is needed", and if you don\'t already know the drill there," let us know""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,2,2018-01-17 16:24:19,219.42,,,1,"b'b"" So I\'m kinda aware of how STARR works. I was intending to try to get this merged for M3 and delete it in M4", since someone (you? :D) would change to M3.  Is there a way to get a reSTARR between milestones? I know I can update  , and that your Jenkins publishes versions tagged with commit numbers, but I didn\'t think they were resolvable from local scala builds.  Anyhow, I\'d love to know how this works. Up until now I\'ve just guessed from PR and commit comments.  Thanks," Seth!!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,3,2018-01-17 16:24:19,29.02,,,1,"b'b"" It is probably easiest to just defer removal of the annotation until after the next restarr (that looks like what you\'ve done in the latest commit.)  We have restarr-ed between releases before", but it requires a bit of manual work to cut a tag and a release," so where possible we try to use the natural milestone cycle for such changes.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,4,2018-01-17 16:24:19,5.22,,,1,"b'b"" @retronym thanks. I\'m inclined to just run nature run its course. There will be a M4", according to github, and a second PR will take a single file removal (I hope). Basically, if this gets merged in a  before 2.13," it\'s all good :D""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,5,2018-01-17 16:24:19,7.35,1,,,"b'b"" oh", I was confused because I hadn\'t seen the earlier version of the code, before you changed it not to remove the annotation, apparently.  so, you can save learning the between-release re-STARR-ing dance for another day, then. (basically it means rolling a release like normal, just giving it a special in-between version number so nobody thinks it\'s something they should actually use for any other purpose... see e.g. @db6c152b981622adb2106ac4812e1d8edf87b41d) (aside: well, I guess we *could* have STARR point to a selected nightly build, by adding a resolver? I\'m not 100% sure why we don\'t do it that way," but I guess actually publishing something to Maven Central just seems safer... surely _is_ safer. there was that one time we accidentally deleted all of our nightly builds \\xf0\\x9f\\x98\\xb1\\xf0\\x9f\\x98\\xb1\\xf0\\x9f\\x98\\xb1)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,closed,2018-01-22 22:11:57,333.3,2,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,6,2018-01-17 16:24:19,13.67,,1,,"b""b' @hrhino time for followup PR...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,7,2018-01-17 16:24:19,925.73,,1,,"b'b"" .....really? I\'ll take a look. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6268,closed,-,-,-,2,4,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,opened,2018-01-17 17:23:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,title,2018-01-17 17:23:40,00:00,,1,,"b""b' upgrade sbt 0.13.16 -> 0.13.17'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,body,2018-01-17 17:23:40,00:00,,1,,"b'b"" not for merge", yet. let\'s wait until 0.13.17 final is out.  for now," let\'s just see if Jenkins likes it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,1,2018-01-17 17:23:40,290.25,,1,,"b'b"" Jenkins likes it", fyi @eed3si9n @dwijnand I\'m going to close this for now to get it out of the PR queue," but I\'ll set a reminder to come back to it once the final release is out""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,closed,2018-01-17 22:13:55,290.25,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,reopened,2018-01-31 21:59:19,1425.4,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,2,2018-01-17 17:23:40,1427.58,,1,,"b""b' updated for 0.13.17 final'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,3,2018-01-17 17:23:40,674.23,,1,,"b""b' \\xf0\\x9f\\x92\\x9a'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,closed,2018-02-01 15:15:43,1036.4,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,4,2018-01-17 17:23:40,968.17,,1,,"b""b' Curious if the Scala build is not on SBT 1.x due to some hurdle or performance?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,5,2018-01-17 17:23:40,969.17,,1,,"b""b' @nafg working on it. #6256'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6269,closed,-,-,-,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,opened,2018-02-18 02:22:30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,title,2018-02-18 02:22:30,00:00,,1,,"b'b"" Don\'t accept wildcard type bounds.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,body,2018-02-18 02:22:30,00:00,,1,,b'b\' Specifically, wildcards aren\\\'t a first-class type according to the spec," which claims that they ""... must appear as a type argument of a parameterized type."".  Putting wildcards in places they don\\\'t belong usually draws either ""unbound placeholder"" or ""identifier expected"" errors", but if we get to with one we can be a bit more specific.  Also scouted the grammar of that spec fragment.  Fixes #10733.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,1,2018-02-18 02:22:30,1235.03,,1,,"b""b' This currently works because the two forms are the same: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,2,2018-02-18 02:22:30,39.05,1,,,"b""b' Regressive messaging:  Is it possible to just add the extra advice to the current message? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,3,2018-02-18 02:22:30,1252.47,,1,,"b'b"" The messaging isn\'t really the part that I\'m concerned about; I just thought it would be a nice bonus. The real issue here is that turns into and the position for both type declarations in the refinement claim to contain the position of  . I had considered finding a way to patch that up (the position for ranges over only?) but since this is dubiously useful and likely illegal syntax it seemed more expedient to simply forbid it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,4,2018-02-18 02:22:30,47.1,1,,,"b'b"" Yeah I was looking at it again because you linked that other existential ticket. Nobody liked the [commit message]url  I came across", a classic paulpism, except one fake twitter featuring a naked person.  I was about to check out why normal typebounds works out differently. Usually," underscore and ident are pretty symmetrical. The change you point out that introduced it was paulp reducing boolean args.  Probably I\'ll come close to understanding existentials just as dotty swoops in to eliminate them.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,5,2018-02-18 02:22:30,246.42,1,,,"b'b"" Yeah", the awkward part here is that when parsing we don\'t know, at the point of  , that we\'re within a parameter of a function. As far as I understand it the spec forbids that, too, which probably helps with making the grammar context-free. I think it\'s an important enough use that we should probably support it anyhow.  Possibly the solution is to parse like it does right now," and then reject it at  if we\'re not looking for a type argument. I\'ll poke at that.  EDIT: paulp\'s commit messages are half the reason I open the annotation sidebar in IntelliJ. They take the edge off the frustration at times.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,6,2018-02-18 02:22:30,1018.68,1,,,"b'b"" That\'s a clever check. I can\'t tell (off the top of my head) if we\'d ever see the current message.  I expected to see just extra advice on the current message like [in my stab]url I wonder if you could add those two finals in my stab? Reading the paulp refactor", it\'s not obvious what is overridden in the little hierarchy. That has confused me the few times I\'ve ever looked at it.  I was going to add something around that weird arg to which doesn\'t express much about what is going on. Parsing is a small part of the runtime," it should also be a small part of time spent understanding and fixing bugs... ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,7,2018-02-18 02:22:30,52.0,,1,,"b'b"" Indeed. Thinking at this now I should probably just use like elsewhere.  The extra advice is nice.  I\'ve never fully understood the control flow through that part of the parser. I think it may be offended by me poking at its sensitive parts. More finality sounds good.  The current message shows for and similar"," btw.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,8,2018-02-18 02:22:30,254.85,1,,,"b'b"" The two  s you added are overridden in and  . being sometimes a special but only if is actually is all boiling down to a bunch of logic that I thought I understand but maybe don\'t.  I like the error message improvement"," though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,9,2018-02-18 02:22:30,179.7,,1,,"b""b' /sync'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,10,2018-02-18 02:22:30,1059.6,,1,,"b'b"" Make them final in [here]url Not sure if there\'s a reason not to make the implementations vals [something like]url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,closed,2018-04-23 19:03:42,1001.2,5,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,11,2018-02-18 02:22:30,1174.05,,1,,"b""b' @hrhino ping"," I noticed this on my laptop.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,12,2018-02-18 02:22:30,5.17,,,1,"b'b"" Thanks @som-snytt. I read the comments thread earlier and thought maybe it would be better to start from scratch. After more thought"," maybe not. I\'ll reread it for real over the weekend.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,reopened,2018-06-08 15:46:37,1242.92,5,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,13,2018-02-18 02:22:30,2.65,,1,,"b""b' See also url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,14,2018-02-18 02:22:30,1.75,,,1,"b""b' @smarter nice! do you mind if I reappropriate the test cases there"," too?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,15,2018-02-18 02:22:30,2.1,,1,,"b""b' Help yourself.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,16,2018-02-18 02:22:30,1410.05,,1,,"b""b' :wave: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,17,2018-02-18 02:22:30,596.1,,,1,"b""b' Fun times: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,18,2018-02-18 02:22:30,17.4,,1,,"b""b' where do we stand"," here? tentatively pushing to 2.13.0-RC1'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,19,2018-02-18 02:22:30,4.78,,,1,"b'b"" That\'s fine. I\'m revisiting this right now", actually. Incorporating the dotty test showed changes like the one I just posted, making it a not-completely-applicable addition to our test suite (yet). I\'ll file a bug for that regressive messaging," as well as the one that @som-snytt helpfully yet misleadingly pointed out above.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,20,2018-02-18 02:22:30,139.42,,,1,"b'b"" I think Scala should accept anything wild", like those poker games that go over my head. Otherwise, I defer to @hrhino \'s excellent judgment. In fact, the wilder," the better!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,21,2018-02-18 02:22:30,467.08,1,,,"b""b' Sprayed some scope-creep-B-gon on this PR. It now addresses exactly and only the type bounds issue"," which hopefully makes it acceptable enough.  Filed the regressive messaging bug at #11064.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,22,2018-02-18 02:22:30,208.57,,1,,"b'b\' ""Type Bound"" was my first Gina Gershon movie. Probably we need more bound and binding puns.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,23,2018-02-18 02:22:30,2.93,,1,,"b'b\' ""Wildcards Unbound"" sounds like some kind of action movie.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,closed,2018-11-02 11:11:41,1165.07,6,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6335,closed,-,-,-,6,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,opened,2018-02-18 02:58:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,title,2018-02-18 02:58:20,00:00,,1,,"b'b"" Right-associative arguments don\'t lose singleton type""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,body,2018-02-18 02:58:20,00:00,,1,,"b'b""   becomes during parser. That causes to get a non-singleton type", which isn\'t necessarily what you want. The secret handshake, of course," is to make a  .  Fixes #10726.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,1,2018-02-18 02:58:20,720.2,,1,,"b""b' /sync'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,2,2018-02-18 02:58:20,302.77,,1,,"b'b"" This only works once:   because is typed as  . I\'m not sure what can be done about that. It\'s specced like that", so likely nothing," but it feels less than optimal.  Edit: and people say Scala has too many symbols:  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,closed,2018-04-23 19:03:43,965.38,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,3,2018-02-18 02:58:20,845.95,,1,,"b""b' Why is this being closed without merging?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,4,2018-02-18 02:58:20,756.17,,1,,"b""b' I believe you got an answer on Gitter", @milessabin, but in case anyone else comes across this, it was due to legal issues," not because the PR is problematic.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,reopened,2018-05-15 20:22:53,79.17,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,5,2018-02-18 02:58:20,833.85,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,6,2018-02-18 02:58:20,1142.03,,1,,"b'b"" @hrhino I\'ve rebased this on your behalf to please the CI gods.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,7,2018-02-18 02:58:20,280.9,,,1,"b""b' ah"," thanks! I tried that once but I forgot to anoint myself with blessed oils and force-push at the wax of the moon.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,8,2018-02-18 02:58:20,146.57,,1,,"b""b' \\xf0\\x9f\\x99\\x87 \\xf0\\x9f\\x99\\x87 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,9,2018-02-18 02:58:20,190.28,,1,,"b""b' @hrhino could you check why the patch in this PR (after rebasing) changes the output of  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,10,2018-02-18 02:58:20,108.35,,,1,"b""b' Good catch", thanks. Updated," and I added a handful of more cases for the positions around right-associative arguments and final vals.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,11,2018-02-18 02:58:20,950.4,,1,,"b""b' @hrhino pushed another commit that removes the unreferenced ValDefs"," in case the references to them get constant-folded. Let me know what you think.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,12,2018-02-18 02:58:20,271.7,,,1,"b""b' That commit LGTM indeed. I considered doing that but decided it may have been too much scope creep for one (originally tiny) PR. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,closed,2018-06-01 20:28:22,5.48,0,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,13,2018-02-18 02:58:20,262.95,,,1,"b""b' On June 1", 2018 4:28:59 PM EDT," Lukas Rytz  wrote:>Merged #6336. Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6336,closed,-,-,-,0,11,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,opened,2018-03-14 00:00:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,title,2018-03-14 00:00:06,00:00,,1,,"b""b' Handle rangepos of by-name right-associative applications properly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,body,2018-03-14 00:00:06,00:00,,1,,"b""b' And", as a bonus, those with infix type args.  The by-name case is a simple tweak to the SIP-34 translation: the pos of the newly-typed needs to encompass the inlined rhs of the synthetic  . was made for this.  For right-associative applications with explicit type args, the situation gets pretty hairy in that we have something akin to: that parses to  The problem is that the type argument falls within the  , so both the and of the contain that position. was made for this. was made for concision.  Fixes #10751.  Also more accurate positions for dynamic invocations. The is positioned at the dynamic name and the  /  reaches over that.  Fixes #10203, and likewise closes #8562.  Tweaks the advice given on an invalid assignment to work with rangepos.  Position the result of during update rewrite.  With this commit and #6335 (#10733)," the compiler bootstraps with rangepos and all the partests pass with it on.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,closed,2018-04-23 19:03:43,1143.62,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,1,2018-03-14 00:00:06,1077.3,,1,,b'b\' okay," I have gotten the \\xf0\\x9f\\x91\\x8d to do as I will with Scala. Apparently the CLA requires not that they sign it but that I ""represent that you have received permission to make Contributions on behalf of that employer""", which I have (as of yesterday). (also, rebased to make sure of no breakage)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,reopened,2018-05-14 17:57:25,1373.7,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,2,2018-03-14 00:00:06,177.08,,,1,"b""b' @hrhino welcome back!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,3,2018-03-14 00:00:06,653.03,,1,,"b'b"" I\'ve added a merge from 2.13.x to resolve a merge conflict.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,4,2018-03-14 00:00:06,265.32,,,1,"b""b' Thanks! \\xf0\\x9f\\x98\\x84 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,closed,2018-05-28 07:06:19,788.9,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6423,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,opened,2018-03-14 03:14:56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,title,2018-03-14 03:14:56,00:00,,1,,"b""b' Offer stronger guarantees under the Java Memory Model for List & Vector (using releaseFence)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,body,2018-03-14 03:14:56,00:00,,1,,"b'b\' Use memory barrier after mutating List and Vector internals. The barrier is the same one that the JDK adds to the end of a constructor of a class with final fields.  The general pattern is that we have a just-created ""larval"" object graph", which undergoes some mutation (e.g. appending elements to the tail of the list in the builder). We return that larval object to the caller of, say,  or , and they could store it to a plain field which would let another thread observe it. According the the JMM, the other thread might not see all the mutations.  The release fence will prevent re-ordering of stores that preceed it (the tail mutation, for example) it with stores that suceeed it (the caller of storing the resulting list to a field).  The runtime support is a bit complicated becausse we need to be cross compatible with JDK 8 and 9+. We use method handle based reflection to achieve this. This has zero runtime overhead in the manner used.  I\\\'m putting this PR forward as WIP as part of the discussion in  url Fixes #7838 \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,1,2018-03-14 03:14:56,47.03,,1,,b'b\' Even after this change, we still have a gaping hole in  , as the is erased to a JVM public setter:   With this, can be mutated maliciously after construction, even under the presence of a security manager that prevents reflective access, so any security sensitive code really needs to take defensive copies of incoming Lists before input validation and defensive copies of any internal lists before exposing them.  So the argument for a bona-fide immutable List is still very valid.  We might be able to use some tricks to make the variable properly private, and have expose a to the selected classes that are allowed to access this. The JDK internals, pre-JPMS," uses a similar pattern to manage ""friend"" access to sensitive operations across packages.  My kingdom for larval object support in the VM. (See 41m url \''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,2,2018-03-14 03:14:56,1277.75,,1,,"b""b' Is it possible to reduce the visibility of to ~~ ~~ ** ** at most", if not to  ? Then," it could perhaps have its privacy protected by the JVM.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,3,2018-03-14 03:14:56,207.75,,1,,b'b\' @NthPortal I gave that some thought, but there are a few problems that I see. First, Scala\\\'s erases to JVM public because of the way that Scala lets you access such a member from within  . So we\\\'d need a way to make things really JVM package private. There\\\'s a ticket somewhere suggesting an annotation for that purpose. I guess the other way is to write a Java class with the field\\\'s and setter and have extend that, but that\\\'s a bit icky.  Second, we don\\\'t seal the package, so it\\\'s possible for anyone to load an extra class in that package. Pre-JDK9," the Java standard library had VM support to seal ""java.**"".   User libraries can get a similar effect with [Sealed packages in JARs]url  We haven\\\'t used that so far", no doubt there would be compatibility problems if and when we start doing this. I suppose we\\\'ll have to face up to those problems anyway, once we ship scalaas a JPMS module, as that new module system has outlawed split packages.  We need to develop a better threat model to find a path forward. Scala has to make a bunch of stuff JV M public, so maybe it isn\\\'t worth building a strong defense around when other avenues are open.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,4,2018-03-14 03:14:56,53.4,,1,,"b""b' I think a fence is certainly a valuable start"," regardless.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,5,2018-03-14 03:14:56,1320.68,,1,,"b'b"" I\'ve added a commit to show what I propose for -dev#408 (conforming the the stricter bytecode verifier in classfile format 53)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,6,2018-03-14 03:14:56,606.02,,1,,"b'b"" I\'m tentatively pushing this to M5. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,7,2018-03-14 03:14:56,907.57,,,1,"b'b"" I\'ve published an updated which should make happy again. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,8,2018-03-14 03:14:56,445.52,,,1,"b""b' Would be good to move this forward for M5. What needs to be done? Testing (jcstress)? Ask @viktorklang for review Rebase"," upload another new  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,9,2018-03-14 03:14:56,1025.03,,1,,"b'b"" I\'ve taken a shot at writing a failing test", but so far failed to reproduce the issue.  My attempt is included here, you can try it with:   I\'ve tried to create a test to show the issue with a class: url I\'d expect that to fail occasionally when asks the JVM to reorders instructions ( )," sometimes we should see the assignment of before the assignments of all of the internals of that list. But I can\'t get that to fail (and hence motivate the addition of the release fence)  /cc @ktoso""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,10,2018-03-14 03:14:56,181.52,,,1,"b""b' @retronym Looks nice! Is there any preliminary numbers for possible performance impact?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,11,2018-03-14 03:14:56,24.63,,,1,"b'b"" As a first approximation of performance impact", I ran a benchmark from -benchmark  Only one fork, so don\'t read too much into these numbers, but performance seems unchanged. The compiler is a pretty good test suite for the single threaded performance  ," too.   Is that because this operation comes [for free on x86]url  ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,12,2018-03-14 03:14:56,1357.88,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,13,2018-03-14 03:14:56,1379.45,,1,,"b'b""  [x] We\'ll need to add a fence to once url  is merged""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,14,2018-03-14 03:14:56,1109.32,,1,,"b'b"" I\'ve rebased this on 2.13.x: Added fence to   Cherry-picked aa83dcd71d from another PR to avoid the need to publish after modifying  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,15,2018-03-14 03:14:56,4.55,,1,,"b""b' @lrytz Rebased to resolve conflict'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,16,2018-03-14 03:14:56,19.13,,1,,"b""b' needs another rebase'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,17,2018-03-14 03:14:56,436.9,,1,,"b""b' @retronym lets split the last commit out to a new PR (trait setters use fences)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,18,2018-03-14 03:14:56,128.52,,,1,"b'b"" @retronym how do you see the state of this PR? Some commets by Viktor could still be addressed It seems you didn\'t manage to make jcstress show races with lists in the current state (before this PR)  I\'m happy to merge this (once the change to mixin fields is split out) if you feel it\'s ready.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,19,2018-03-14 03:14:56,1286.45,1,,,"b'b"" @lrytz @adriaanm  I\'ve split the trait setter to a separate PR. I\'ll do another pass to address @viktorklang\'s comments on Monday. I wasn\'t able to make demonstrate the bug"," unfortunately.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,20,2018-03-14 03:14:56,424.73,,1,,"b""b' @retronym maybe rebasing will restore Scabot to its senses'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,21,2018-03-14 03:14:56,193.23,,1,,"b""b' I took the liberty of rebasing and force-pushing'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,22,2018-03-14 03:14:56,667.6,,1,,"b'b"" I added a commit that moves to  . I\'d like to start out by trying to rely on the JDK inliner to inline that method.  If we agree that this is the right approach"," I\'ll need to update the other PR to target this new method.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,closed,2018-08-16 05:39:36,144.67,1,18,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,reopened,2018-08-16 05:39:39,0.05,1,18,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,23,2018-03-14 03:14:56,1246.93,,1,,"b'b"" @retronym can I go and ahead merge this? it looks like there isn\'t anything here that we can\'t tweak further before RC1?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,24,2018-03-14 03:14:56,104.65,,1,,"b'b"" @SethTisue The last commit introduces a semantic merge conflict with #7028. I\'ll drop it from the PR and resubmit it separately along with some better error handling for platforms where  aren\'t available. That followup could come after M5 IMO.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,25,2018-03-14 03:14:56,3.3,,,1,"b""b' Hmmm", on second thought I think its better to fix the semantic merge conflict right away," rather than risk bootstrapping issues with modules or the by letting the sands of ._ shift needlessly.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,closed,2018-08-18 15:49:45,610.1,1,20,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6425,closed,-,-,-,1,20,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,opened,2018-03-19 14:26:23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,title,2018-03-19 14:26:23,00:00,,1,,"b""b' Add synthetic value class companion near its class.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,body,2018-03-19 14:26:23,00:00,,1,,"b'b"" Redux of 9e1de6ee81e9eaf9d8ac59446bc97c79b5ff0cb6.  Make sure that the class in question actually exists in the tree we\'re about to put the synthetic companion in. Otherwise extmethods might not see the extendable methods until after it\'s too late to add it to the companion stats.  Fixes #10783.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,1,2018-03-19 14:26:23,247.92,,1,,"b'b"" The case pushes the line past 80 chars", and 4-deep nested methods don\'t excuse that. (Comment lines don\'t count," I guess).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,2,2018-03-19 14:26:23,69.1,,1,,"b""b' Adriaan likes long lines. is 135 columns. Also  . at 147. I may get one of those wraparound  monitors.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,3,2018-03-19 14:26:23,9.82,,,1,"b'b"" Evidently so. is 203", and that\'s after only a cursory search. The tradeoff is, of course, against the length of the file, like good old  . No one said typing Scala was easy, though.  Do you mean one of [these]url  My laptop fits two-column github view mode with 85 columns or so," depending whether my browser\'s in fullscreen mode or no. I wonder if my company would let me comp one of those. I wonder if it\'s because Lightbend got him one. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,4,2018-03-19 14:26:23,308.1,,1,,"b'b"" I simplified the check", which now uses the double secret companion-finding method. Scaladoc excludes synthetic members and doesn\'t go past  , so I couldn\'t find a way to reproduce this.  Adding the test cases you asked for makes me wonder whether this (and, e.g., #5877) aren\'t symptoms of a more difficult bug that can\'t find a companion in a different tree.   runs into the same problem here. The fix for that would likely involve a double traversal of the AST inside of extmethods," or slapping an attachment on something (the method symbol of the method-with-extension?) that holds the RHS. I\'m not sure how sane either of those are. EDIT: even has a [case]url  specifically handling extendable methods. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,5,2018-03-19 14:26:23,227.33,1,,,"b'b"" We could rule that problem out by requiring the companions", even package owned ones, should be co-defined in a scope. Does that sound too onerous? We could phase it in with a deprecation.  A double traversal in extmethods wouldn\'t be too horrible, as the first one would only need to be shallow (because value classes may only be top level).  Adding cross references to other trees via symbol or tree attachments is a tool of last resort," it is all too easy some intervening transform to update the tree leaving a stale one in the attachment.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,6,2018-03-19 14:26:23,490.17,1,,,"b'b"" That doesn\'t seem very onerous at all", but technically the spec only disallows them in different scopes, so it may require a tweak to that language.  Any feature which requires moving trees into companions post-typer would either break here or provide guidance on how to continue. (Constructor default getters are done in namer so they appear to be exempt.) I\'m trying to think of another such beast.  I\'ll prototype the double traversal and we can see if it hurts performance. This is a pretty minor edge case," either way.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,7,2018-03-19 14:26:23,244.6,,1,,"b'b"" It seems to me that if there is an attachment", it\'s easier to just use it," rather than doing look-ups. Case classes are common; I don\'t know when gets expensive.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,closed,2018-04-23 19:03:43,277.33,2,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,8,2018-03-19 14:26:23,159.8,,1,,"b'b\' @hrhino The issue is still labelled ""has PR""", hint hint.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,reopened,2018-08-05 20:02:23,58.67,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,9,2018-03-19 14:26:23,21.23,,1,,"b'b"" Winks", hints, nudges, &c. acknowledged and accepted. I forgot how many alternatives came up during review. I\'ll consider them all with a fresh mind. Maybe I\'ll get a friend to write them down anonymously," for double-blind self-review. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,10,2018-03-19 14:26:23,202.4,,1,,b'b\' While I re-familiarize myself with what I did here, I decided to post on the contributors\\\' Discourse regarding Jason\\\'s suggestion above: url By doing this," I\\\'ve probably ensured that it will never be implemented (""make it out of committee"," as we say here"")", but it was worth a go.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,11,2018-03-19 14:26:23,3.37,,1,,"b'b""  I\'ll try to give some urgency to this to unblock it after the next SIP meeting. The change seems fair. I\'ll kickstart some discussion internally too so that as many SIP committee members check out your thread as possible.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,12,2018-03-19 14:26:23,14.95,,,1,"b'b"" @jvican thank you! FWIW", this specific bug can be fixed in ways other than that, and I personally think it\'s cleaner to go with an approach more like the one that\'s here right now.  Thank you for taking such a quick look at this," though! \\xf0\\x9f\\x99\\x8f  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,13,2018-03-19 14:26:23,1138.2,,,1,"b'b"" So", I guess no SIP is needed after all! Ping me if you have more mini SIPs you wanna discuss in the future," I\'m sure you will :smile:""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,14,2018-03-19 14:26:23,756.63,,,1,"b""b' So two \\xe2\\x9c\\x85 from Andrew and Jason. @hrhino are you happy to land this PR now?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,15,2018-03-19 14:26:23,316.02,,,1,"b'b"" I don\'t see why not. There doesn\'t seem to be any un-addressed commentary.  The change to enforce that companions are co-defined can come later. (Are you asking so this can make the last forward merge before M5?)  Also", shh," you\'re going to reveal @som-snytt\'s secret identity!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,16,2018-03-19 14:26:23,19.45,,1,,"b""b'  Nope", just giving a pass at the 2.12.7 PR queue too, and confused by the state of this.  Ok," then thanks for the PR :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,closed,2018-08-08 12:55:32,1013.15,2,11,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,17,2018-03-19 14:26:23,4.85,,,1,"b""b' Thanks for the merge! \\xe2\\x9d\\xa4\\xef\\xb8\\x8f '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6443,closed,-,-,-,2,11,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,opened,2018-03-26 15:14:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,title,2018-03-26 15:14:20,00:00,,1,,"b""b' Don\\xe2\\x80\\x99t use setNext to implement ListBuffer#update'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,body,2018-03-26 15:14:20,00:00,,1,,"b""b' Fixes -strawman#522'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,1,2018-03-26 15:14:20,2.83,,1,,"b""b' @lrytz I think the fix you committed was correct. This one is an optimization. We should eventually replace other methods (e.g.  ) that rely on to take advantage of the same optimization.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,closed,2018-03-27 05:30:56,856.6,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,reopened,2018-03-27 07:21:50,110.9,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,closed,2018-03-27 07:36:41,14.85,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,reopened,2018-03-30 05:22:40,1305.98,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,closed,2018-04-05 16:22:03,659.38,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,reopened,2018-04-06 14:22:52,1320.82,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,2,2018-03-26 15:14:20,1202.8,,1,,"b""b' @julienrf FYI"," I rebased this PR and pushed (-f) to your branch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,closed,2018-04-23 08:44:41,1101.82,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6469,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,opened,2018-03-28 01:15:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,title,2018-03-28 01:15:13,00:00,,1,,"b""b' Assorted optimizations to the new collections'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,body,2018-03-28 01:15:13,00:00,,1,,"b""b' I spotted some inefficiencies while profiling a compiler buildwith the new collections. The benchmark score regressed by 15%. With these changes"," results areabout at parity again.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,1,2018-03-28 01:15:13,102.97,,,1,"b""b' Changes look good to me!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,2,2018-03-28 01:15:13,6.05,,1,,"b'b"" The broader question is", where else do we need similar overrides, either to match or exceed our old performance? e.g Do we expect to create an iterator and a lambda?  Pragmatically, I\'d suggest erring on the side of performance for  ,  , and  ," which are the workhorses for many applications.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,3,2018-03-28 01:15:13,380.97,,,1,"b""b' @retronym For information", I\\xe2\\x80\\x99ve done some work on and and applied some performance optimizations to them. As far as I remember, is as performant is in 2.12. I\\xe2\\x80\\x99d be interested to know more details about the profiling work you\\xe2\\x80\\x99ve done. That being said, I didn\\xe2\\x80\\x99t do much work with regards to the performance of  s and  s," and I guess we may find some inefficiencies.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,4,2018-03-28 01:15:13,165.8,,1,,"b""b' Here are the profile results for 457dfd07449a8b7943b2a6c614fb57ea2a7b452e: url They were generated with after for the commits under test.   Look at (or equivalently", open in Java Mission Control), to see the hotspots.  I believe that the absence of an override for was the main problem. Every pattern match like in the compiler needed to call the generic  . Here, I chose to add the override in  ," rather than  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,closed,2018-03-28 12:42:06,686.88,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,5,2018-03-28 01:15:13,941.48,,1,,"b""b' @lrytz what was your reason for closing?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,6,2018-03-28 01:15:13,92.33,,1,,"b'b"" It wasn\'t intentional", GitHub closed the PR becasue I was force-pushing to the branch. Or, to be precise," because our repo doesn\'t allow force-push I was deleting and re-creating the branch.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,reopened,2018-03-30 05:24:50,1002.73,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,closed,2018-04-05 16:22:03,657.22,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,reopened,2018-04-05 16:23:17,1.23,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,closed,2018-04-06 14:11:57,1308.67,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,reopened,2018-04-06 14:14:15,2.3,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,7,2018-03-28 01:15:13,9.8,,1,,"b""b' Added the changes to url  as they were approved.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,closed,2018-04-09 05:34:37,920.37,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6476,closed,-,-,-,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,opened,2018-04-05 09:43:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,title,2018-04-05 09:43:38,00:00,,1,,"b""b' Define zip on Option'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,body,2018-04-05 09:43:38,00:00,,1,,"b""b' Fixes #8394'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,1,2018-04-05 09:43:38,30.0,1,,,"b""b' Would it be too breaking to take an as parameter rather than an  ? I find it confusing. Will the existing implicit conversion be triggered when called with a collection?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,2,2018-04-05 09:43:38,69.83,,,1,"b'b""  good question", I\'m not sure. perhaps we should run that change against the community build? (Seth?) the existing implicit conversion is from option to collection, not the other way round," unless I\'ve misunderstood you..""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,3,2018-04-05 09:43:38,26.03,,1,,"b""b' I meant", in case we have  , then users already using will get a compilation error. Unless the implicit conversion from to collection is triggered," in which case the existing code will always compile.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,4,2018-04-05 09:43:38,94.87,,1,,"b'b""  if zip on Option takes Option"," then no amount of Option to collection conversion triggering is going to help.  here\'s what the test looks like if you change the signature: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,5,2018-04-05 09:43:38,5.25,1,,,"b'b""  \\xf0\\x9f\\x91\\x8d. I think being able to say is a misfeature which could lead to surprising bugs. It\'s the same as which I wouldn\'t consider overly burdensome", as compared to the potential of thinking one or both sides are full collections (not  s).  Since 2.13 is going to require users to adjust their collections usage anyways," I propose that we can drop this feature. (I do wonder how often it\'s used in the wild; I count zero uses in my code FWLIW).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,6,2018-04-05 09:43:38,3.88,,1,,"b""b'  It could", because collections have a operation that takes a collection as parameter. But as you\\xe2\\x80\\x99ve shown," the conversion isn\\xe2\\x80\\x99t triggered and we get compilation errors\\xe2\\x80\\xa6'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,7,2018-04-05 09:43:38,14.17,,,1,b'b\' @julienrf ah I see what you mean now! yeah implicit conversion will only kick in the method is missing," it won\\\'t look for alternative ""overloads"".  @hrhino  let me change my PR to propose that", let\\\'s see what the team thinks.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,8,2018-04-05 09:43:38,7.83,,1,,"b'b"" To argue against myself: there\'s a consistency argument that while we can remove we cannot remove as long as there\'s an implicit conversion"," which I can\'t see going away any time soon.  That said I\'d still rather see only take  s.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,9,2018-04-05 09:43:38,113.58,,1,,"b'b"" Why not have two signatures on  :   I know how to write the second one with CBF.  Not sure I\'d do it right from memory for the new collections.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,closed,2018-04-10 00:46:37,902.98,2,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,10,2018-04-05 09:43:38,410.98,,1,,"b'b"" I agree with @hrhino: I think we should have only and not overload it. Because:  * As much as possible", should be self-contained and not pull in collections stuff. * is clearer, better, more explicit code anyway.  Dale says he\'s not working on this anymore," but I (at least) would welcome a new PR on this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,11,2018-04-05 09:43:38,175.0,,1,,"b'b"" this is at least third PR (after #4836 and #4437) with same intent which gets closed.  @SethTisue can we just reopen this one? what else need to be done here? it looks reasonable as it is"," no? 2.13 is going to be non compatible with 2.12 anyway?  I\'m open for picking this up and finishing it ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,reopened,2018-04-16 04:20:49,214.2,2,9,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,12,2018-04-05 09:43:38,166.27,,1,,"b'b"" I\'ve reopened the pr"," in case it is mergeable as is.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,13,2018-04-05 09:43:38,569.67,,1,,"b'b"" @jozic this is nearly to the finish line", but, some of the review feedback at url  has not been addressed yet  want to do the last tweaks...? (#4437 is the only other ticket you need to look at," I looked at the others and didn\'t find anything still pending.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,14,2018-04-05 09:43:38,76.58,,,1,"b""b' thanks @SethTisue"," I will check it out soon'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,15,2018-04-05 09:43:38,39.67,,1,,"b""b' @SethTisue Please let me know if I missed any review feedback at #4437.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,16,2018-04-05 09:43:38,70.32,,,1,"b""b' thank you guys! Hopefully this time we gonna get it!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,17,2018-04-05 09:43:38,258.67,,1,,"b""b' Rebased and squashed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,closed,2018-04-25 07:32:35,191.77,2,13,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,18,2018-04-05 09:43:38,617.1,,,1,"b""b' thanks everybody"," on this group effort'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6491,closed,-,-,-,2,13,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,opened,2018-04-05 22:37:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,title,2018-04-05 22:37:39,00:00,,1,,"b""b' LazyList head computed only once'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,body,2018-04-05 22:37:39,00:00,,1,,"b'b"" Original pull-request in [collection strawman ]url  as suggested by @julienrf"," if I understood correctly I should make PR here instead. I\'ve added the test as suggested.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,closed,2018-04-06 14:11:57,934.3,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,reopened,2018-04-06 14:12:23,0.43,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,1,2018-04-05 22:37:39,1057.03,,1,,"b""b' Wondering why this PR does not trigger any automated checks"," anyone can explain to me why?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,2,2018-04-05 22:37:39,1361.42,,1,,"b'b"" There are no automated checks for 2.13.x-new-collections"," we\'re planning to merge back to 2.13.x soon. It\'s probably best to keep this PR open and retarget it to 2.13.x after the merge.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,3,2018-04-05 22:37:39,1298.6,,1,,"b'b"" Something\'s wrong with the build status. Both individual commits are marked as failed in github even though the 2nd one succeeded according to Jenkins.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,4,2018-04-05 22:37:39,9.38,,1,,"b'b\' The ""combined"" status of the last commit in a PR is only green if every commit is green. We mandate all commits to be green in this repo.  In this PR", @wibisono please just squash all the changes into a single commit.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,5,2018-04-05 22:37:39,7.63,,1,,"b'b"" @lrytz I\'m referring to 2056ea3. It\'s marked as failed here but url  succeeded.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,6,2018-04-05 22:37:39,8.9,,,1,"b'b\' This is what I see for 2056ea3: ![image]url ""validate-main"" passed"," but ""combined"" failed\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,7,2018-04-05 22:37:39,7.03,1,,,"b'b"" Ah"," you\'re right. This is really confusing. The individual commit status icons are basically useless this way.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,8,2018-04-05 22:37:39,164.73,1,,,"b'b"" Should\'ve not committed the failing test first"," sorry for the confusion. I merged them into one commit as suggested and try to follow contribution guideline.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,closed,2018-04-12 14:26:51,14.47,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6495,closed,-,-,-,2,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,opened,2018-04-25 10:20:54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,title,2018-04-25 10:20:54,00:00,,1,,"b""b' Replace UnApply to Apply in resetLocalAttris'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,body,2018-04-25 10:20:54,00:00,,1,,"b""b' This change is a backport of #6356 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,1,2018-04-25 10:20:54,239.77,,1,,"b'b"" Please wait with backport PRs until the original PR has been approved. We\'re trying to keep the depth of the PR queue lower"," so that we are able to spend a bit more time on all active PRs.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,closed,2018-06-01 14:20:40,239.77,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,2,2018-04-25 10:20:54,82.63,,1,,"b""b' Hi", @adriaanm ," could you reopen this PR since #6356 is merged'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,reopened,2018-08-03 15:55:36,94.93,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,closed,2018-09-07 14:27:11,1351.58,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6556,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,opened,2018-04-27 13:03:46,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,title,2018-04-27 13:03:46,00:00,,1,,"b""b' Change flags from Int to Long"," and remove hasFlag(flag: Int) method.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,1,2018-04-27 13:03:46,1181.73,,1,,"b""b' moved from url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,2,2018-04-27 13:03:46,2.9,,,1,"b'b"" Thanks to @rorygraves \'s help comparing the performance. We observed slightly better CPU time: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,3,2018-04-27 13:03:46,195.65,,1,,"b""b' ping @retronym '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,4,2018-04-27 13:03:46,24.37,,1,,"b""b' The change looks reasonable to me. I need to run this through our benchmark suite to see if I can reproduce the gains.  Was this change driven by profiler results? How do they look ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,5,2018-04-27 13:03:46,571.52,,,1,"b""b' This change was an initial small task to introduce another team member into scalac contribution. @ccjoywang has included the profilerResults that @rorygraves confirmed.  To be honest we were not expecting to see any measurable improvement from this. I never looked in detail as to the change and what actually is generated differently in the code after C2", as I would have expected that at most it is a stack frame saving (which I would expect to be inlined) and int  I expected the performance to be flat, and no worse," but happy to take the small win \\xf0\\x9f\\x98\\x84 We did rerun the benchmark to confirm the results a couple of times before we published'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,6,2018-04-27 13:03:46,517.75,1,,,"b'b"" Sorry about the delay on this one. I suggest that we target this to 2.13.x as a few of the methods we\'re changing here are part of the de facto API of the compiler"," and could cause unnecessary breakage in compiler plugins.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,closed,2018-09-03 06:37:41,1053.92,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,reopened,2018-09-03 06:40:08,2.45,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,7,2018-04-27 13:03:46,46.72,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,closed,2018-09-05 07:24:24,44.27,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6567,closed,-,-,-,1,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,opened,2018-04-30 18:36:17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,title,2018-04-30 18:36:17,00:00,,1,,"b""b' Prune polymorphic implicits more aggressively'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,body,2018-04-30 18:36:17,00:00,,,1,b'b\' In  , before we attempt to fully typecheck the pending candidate implicit, we first attempt to partially instantiate type variables in both the candidate and the target type and check for compatibility. If the compatibility check fails we can immediately prune the the candidate without having to fully typecheck it.  In the kinds of implicit searches typical of the inductive style found in shapeless and related libraries this can result in a drastic reduction in the search space and a corresponding reduction in compile times.  This commit is much simpler, more generally applicable," and less invasive than my earlier work on inductive implicits in #6481 which was doing similar pruning almost by accident. It turns out that almost all of the speedups in that earlier PR were due to the pruning rather than to any special casing of inductive patterns.  The compilation benchmark (a shapeless-style ""select element by type from a large HList"") from that PR is carried over here (in ) and shows the same performance improvements",  As an added bonus users of shapeless and shapeless-based libraries which use shapeless\\\'s type will see benefits immediately without needing to wait for and port to byname implicit arguments. \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,1,2018-04-30 18:36:17,166.7,,1,,"b""b' Ported to Dotty here: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,2,2018-04-30 18:36:17,1176.67,,1,,"b""b' I added some statistics counters to the 2.12.x branch and tested a few projects",  The top-level count is the number of calls of and the subcounts are of mismatches at the first  ," the and the final respectively.   @adriaanm I can add the counters on this branch if you think that would be valuable.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,3,2018-04-30 18:36:17,1269.57,,1,,"b'b"" Benchmark moved to the compiler-benchmark project [here]url  Also incorporated @dwijnand\'s layout suggestion ;-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,4,2018-04-30 18:36:17,271.62,,1,,"b""b' Rebased", addressed issues raised in review," moved benchmark to [compiler-benchmark]url  and fixed an issue with Specs2 revealed in a 2.12.x community build run.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,5,2018-04-30 18:36:17,119.7,1,,,"b'b"" This PR puzzled me: in [the benchmark file]url  the only optimization this can possibly be doing is skipping the typechecking of 499 calls", surely that can\'t be that expensive?  I\'m not a JVM performance expert but I know how to use  , that was enough to realize that we spent most of our time not typechecking, or doing implicit searches, or anything useful like that. It turns out the real culprit is [computing error messages!]url  These messages will never be displayed since some other branch of the implicit search will succeed, but they\'re eagerly computed (in Dotty, error messages are always lazy to avoid this sort of things).  As a proof of concept," here\'s a one-liner fix that gives the same speed-up as this PR: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,6,2018-04-30 18:36:17,17.15,,1,,"b'b"" @smarter blimey!  Your one-liner doesn\'t account for _all_ of the speed up of this PR. For me it takes the time down from > 400s to about 25s", whereas this PR takes it down to 14s. But as you say," it does appear that the error message generation accounts for a remarkably large proportion of the time!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,7,2018-04-30 18:36:17,19.6,,,1,"b""b' This was fun. For the record I got a very similar speed-up in Dotty by fixing a completely different issue: url  :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,8,2018-04-30 18:36:17,23.03,1,,,"b""b' Recommendation for an actual fix without a huge refactoring of how error messages are handled: change and to take a instead of a  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,9,2018-04-30 18:36:17,19.23,,,1,"b'b"" Ah 94% of the CPU taken generating \'helpful\' details.  @smarter \\xf0\\x9f\\xa5\\x87 That must be a record or some form in the ratio of smallest fix to largest benefit.  @milessabin \\xf0\\x9f\\xa5\\x88 at another 40% of what is left that a pretty healthy second place I am very happy if I can get a solid 1% or 2% in a PR \\xf0\\x9f\\x98\\xa2 . I could not find a medal that low to compare""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,10,2018-04-30 18:36:17,3.75,,1,,"b""b'  I think the secret is finding an unusual test case that stresses the compiler in some way :).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,11,2018-04-30 18:36:17,3.17,,1,,"b'b"" I can\'t reproduce the Jenkins failure locally. Finger\'s X\'d it\'s spurious ...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,12,2018-04-30 18:36:17,0.18,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,13,2018-04-30 18:36:17,2.3,,1,,"b'b"" @smarter looks like a good suggestion. I\'ll incorporate it here.  On balance I think it\'s better to do fewer useless things than to do the same number of useless things but faster. Better still to do fewer useless things and faster too :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,14,2018-04-30 18:36:17,11.17,1,,,"b'b"" While we\'re at it",  we can make a val, so that even when is enabled it isn\'t evaluated twice.  Currently:  \\xf0\\x9f\\x92\\xaf to making  /  by-name. That won\'t eliminate all the cost, as a lot of error messages eagerly compute the message, so just issuing the error is costly," even before calling  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,15,2018-04-30 18:36:17,7.57,,1,,"b'b""   now byname ... note that it\'s which is the real killer here and that\'s on a different execution path.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,16,2018-04-30 18:36:17,41.55,,1,,"b""b' Something like this might be worth a shot: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,17,2018-04-30 18:36:17,10.6,,,1,"b'b\' ... and then rebase this PR to move the ""Prune polymorphic implicits more aggressively"" to the last commit so we can evaluate the benefits incrementally.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,18,2018-04-30 18:36:17,16.72,,1,,"b""b' As you pointed out to me offline"," url  might be a way forward here.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,19,2018-04-30 18:36:17,13.75,,1,,"b'b"" @retronym some features of that library don\'t optimise until java 9 from tests that I have done (I was testing on 10 when I saw the issues that I posted to you a while ago) It was not this API though (I was looking at url  but needs careful testing on different VMs  The clue is probably that the source doesn\'t compile in java 8. Its easy enough to make it compile but when I did the optimisation was lost running in java8"," but worked on java 9""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,20,2018-04-30 18:36:17,643.42,1,,,"b""b' @retronym done.  Timings for the benchmark with neither commit: ~410s With just the pruning: ~15s With just the error message optimization: ~25s With both: ~14s'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,closed,2018-05-04 10:38:38,962.35,4,14,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,reopened,2018-05-04 10:38:57,0.32,4,14,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,21,2018-04-30 18:36:17,5.58,1,,,"b""b' Accidentally closed the pr"," sorry'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,22,2018-04-30 18:36:17,1047.02,,,1,"b'b"" It is probably worth explicitly stating the trade off here: the logic in the pruning steps is a cheap", but not free," version of what happens for candidates that survive pruning. So we\'re _adding_ work in some cases for the benefit of reducing the search space.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,23,2018-04-30 18:36:17,1009.25,,1,,"b'b"" It\'d be good to create a testcase similar to url  but that doesn\'t benefit from the implicit pruning"," to test the reduced cost of error messages by itself.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,24,2018-04-30 18:36:17,1045.22,,,1,"b'b"" I\'ve submitted the zero-risk part of the PR for M4 as #6612"," with Jason\'s suggestions included. Happy to also merge this one if it\'s ready by Monday.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,25,2018-04-30 18:36:17,45.15,,1,,"b'b"" I already merged the minimal PR. If you\'d like to get the further improvements into M4"," please have this PR ready for merging by Monday and let us know. I\'m scheduling this for M5 for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,26,2018-04-30 18:36:17,47.92,,,1,"b'b"" I guess I missed that deadline :-D  I\'ll get this in shape for M5.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,27,2018-04-30 18:36:17,1365.25,,1,,"b'b"" Ping? I don\'t think this is crucial for M5. It can happen post 2.13.0 as far as I\'m concerned.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,28,2018-04-30 18:36:17,265.57,,1,,"b'b"" I\'m still trying to track down an issue which showed up in the 2.12.x community build. I\'ll update here as soon as I have a fix there.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,29,2018-04-30 18:36:17,385.78,,1,,"b'b"" (this has now missed M5", but maybe it could still make 2.13.0-RC1. regardless," officially milestoning as 2.13.x based on Adriaan\'s remark)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,30,2018-04-30 18:36:17,603.03,,1,,"b'b"" Can you give me until COB tomorrow? I think I\'ve fixed the issue revealed in the 2.12.x community build"," but just need a little more time to confirm that.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,31,2018-04-30 18:36:17,29.08,,,1,"b'b"" Sure"," ping me when you feel this is good to go and we\'ll try to get it in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,32,2018-04-30 18:36:17,412.68,,1,,"b""b' @adriaanm this is ready to go now.  It roughly halves compilation time for the large hlist select benchmark which is now in -benchmark [here]url  On my machine the compile time is ~32s compared with ~61s on the prior commit.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,33,2018-04-30 18:36:17,191.27,,1,,"b'b"" @adriaan FYI", if you\'re wondering why this is still quite a bit slower than I was reporting earlier, so was I ...  I\'ve just done a rather laborious git bisect and discovered that it\'s down to #6530. Currently on plain 2.13.x the benchmark compiles in 22s with #6530 reverted, and this PR compiles the benchmark in 14s with #6530 reverted," which is back to the numbers I originally reported.  That slowdown is completely orthogonal to this PR ... I\'ll see if there\'s anything I can do about it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,34,2018-04-30 18:36:17,47.88,,1,,b'b\' The slowdown caused by #6530 is fixed in #7012," and combined with this PR the ""select from large hlist"" benchmark compiles in ~16s again.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,35,2018-04-30 18:36:17,809.28,,1,,"b""b' Also rebased.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,36,2018-04-30 18:36:17,470.9,,1,,"b""b' does this need a community build before merging?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,37,2018-04-30 18:36:17,153.18,,,1,"b'b"" @SethTisue It wouldn\'t hurt"," but I\'m confident that I worked through the issues on the 2.12.x community build.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,closed,2018-08-10 09:10:16,1351.32,5,25,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6580,closed,-,-,-,5,25,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,opened,2018-05-03 02:40:51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,title,2018-05-03 02:40:51,00:00,,1,,"b""b' Reduce allocations in findMember'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,body,2018-05-03 02:40:51,00:00,,1,,"b""b' This commit tries to reduce memory allocations noticed in the issue url  by @retronym.  #### Possible Cause of the Excessive Allocations  The following line: Is pre-prending the list to the previous  . Now", suppose contains symbols for which is true, and suppose that each of those symbols has elements in its  . You would then end up with a list of length  , which would have that many cons ( ) objects. Moreover, each call to is not to a  , but a  , which means that it creates a list of length  , and then has to copy that list (to prepend is to copy) and throw that away. ####  Fix  Instead of concatenating, we keep a list of lists, one for each refinement class. This could, ideally, halve the memory leak due to that line. For the previous example," it will reduce the number of object created from to  . This will be more effective if those lists are longer.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,1,2018-05-03 02:40:51,401.23,,1,,"b'b"" I wouldn\'t characterize this a memory leak (that implies that we\'re holding on to memory after this operation is complete). It is just an unnecessary allocation of a temporary datastructure.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,2,2018-05-03 02:40:51,763.48,,1,,"b""b' Something along the lines of: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,3,2018-05-03 02:40:51,108.27,,1,,"b""b' @retronym The second set of changes tries to address that. I think it includes some of the lines in your diff above. The reason why I use a custom data structure", rather than a standard collection, is that I could not think of another way to cover a scenario with alternating evaluated and non-evaluated list of parents. For instance, you could add three classes  , then evaluate the parents of as  , and only that (they are searched in LIFO order)," and then add more classes whose lists of parents were never used.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,4,2018-05-03 02:40:51,16.73,,1,,"b'b"" Typically", there are 0 refinement classes in the base class list.  Sometimes, there is 1   Or in really esoteric cases, more than one refinements in the base type sequence:   Even when we find a refinement class in the BTS, typically doesn\'t need to check if the found member is owned by a parent of one of the refinements. This is only in the special case when the found member is  .  So the goal here is not to make fast," but instead to avoid calling before we need to.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,5,2018-05-03 02:40:51,19.87,1,,,"b""b' Well", I am afraid I did not know those numbers. The solution, as is, does delay the call to until it is first needed, but with some overkill, and with the little overhead of two arrays that, from what you say," will be mostly empty. I will fix that.  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,6,2018-05-03 02:40:51,98.0,,1,,"b""b' @retronym I have reimplemented the auxiliary class", to use a linked List of Either, instead of the two arrays. This solution should have a negligible overhead, in number of objects allocated, provided that 1) there are usually few refinement classes in the base class list," and 2) the need to perform the call to is very rare.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,7,2018-05-03 02:40:51,256.85,,1,,"b'b"" I think we can actually get away without any allocations to keep track of refinement parents by re-traversing the prefix of in the rare case that we are dealing with a lookup of a private member of a refinement parent.  url In that branch"," I\'ve also showed how to setup the micro benchmark to test this out.   ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,closed,2018-05-29 06:25:17,224.43,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,reopened,2018-05-29 06:25:21,0.07,1,8,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,8,2018-05-03 02:40:51,26.6,,1,,"b'b"" Once the benchmark is setup", you can also use the Flight Recorder profiler provided by sbt-jmh   That shows that all the remaining allocation is of the class itself (I\'ve prototyped a way to get rid of that, too," in url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,9,2018-05-03 02:40:51,814.07,,1,,"b""b' @retronym The benchmarks have been added to the PR branch"," and I have run them a few times. The results indicate a clear reduction of memory allocations and an increase in throughput. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,closed,2018-07-23 01:17:16,1131.92,1,10,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,10,2018-05-03 02:40:51,293.6,,,1,"b""b' Thanks for your contribution! I think the result we finally arrived at is both faster _and_ simpler than before :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,11,2018-05-03 02:40:51,517.22,,,1,"b""b' Thanks", this was an interesting read. I only saw it because of my github feed," which I appreciate.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6592,closed,-,-,-,1,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,opened,2018-05-09 19:02:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,title,2018-05-09 19:02:02,00:00,,1,,"b""b' Rename ImmutableArray to ArraySeq'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,body,2018-05-09 19:02:02,00:00,,1,,"b""b' Fixes url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,1,2018-05-09 19:02:02,22.6,,1,,"b""b' (this also needs a rebase on the partest in-source)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,2,2018-05-09 19:02:02,221.57,,1,,"b""b' I think we may need another collection a for this'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,3,2018-05-09 19:02:02,979.58,1,,,"b'b"" rebased on the insource-partest pr for now to test", but unfortunately that created 100 jobs on jenkins," as there\'s no here...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,closed,2018-05-10 15:25:48,1223.77,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,reopened,2018-05-10 15:28:23,2.58,1,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,4,2018-05-09 19:02:02,182.55,,,1,"b""b' Tests look good", but the category failed because I need to build a new  . I did that recently," so no big deal.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,5,2018-05-09 19:02:02,3.02,,1,,"b'b"" Added another commit that renames to  . So basically there\'s and  . @szeiger suggested this in url  I\'m not 100% sure it\'s a good idea", because creating a is not always explicit," due to  . It might be too confusing. Let\'s discuss!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,6,2018-05-09 19:02:02,126.37,,1,,"b""b' Also", if we name it instead of  , we basically change the semantics of from 2.12 to 2.13. Users of 2.12 would have to use  . We could add a migration warning.  The change of semantics is also there in current 2.13.x, is a deprecated alias for  . So users get a deprecation warning. If we keep this," we should also add a migration warning.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,7,2018-05-09 19:02:02,32.78,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,8,2018-05-09 19:02:02,0.92,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,closed,2018-05-12 17:17:10,108.78,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,reopened,2018-05-12 17:17:14,0.07,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,9,2018-05-09 19:02:02,790.37,,1,,"b'b"" Gah", this also needs a new scalacheck release.. I can do that through a  \'d scala version i guess.  There\'s also a binary incompatibility in the new macroAnnots tests.   @adriaanm are there any pre-compiled binaries involved here? Otherwise it must be that code is being compiled with the starr compiler, but then executed with locker or quick. Just running locally worked for me," so I\'m not sure.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,10,2018-05-09 19:02:02,267.08,,1,,"b""b' It turns out just rebuilding scalacheck with a local Scala version is not enough"," because the scalacheck artifact depends on the Scala library it was built with. So that Scala version needs to be on maven... We can either 1. Release another to maven (with the rename) and the build scalacheck using that 2. In-source scalacheck 3. other ideas?  I vote for 2.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,11,2018-05-09 19:02:02,30.95,,1,,"b""b' \\xf0\\x9f\\x91\\x8d to in-sourcing'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,12,2018-05-09 19:02:02,434.33,,1,,"b""b' Added a commit that in-sources scalacheck. TODO: update IntelliJ templates.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,13,2018-05-09 19:02:02,879.25,,1,,"b'b"" FYI", it turns out  also depends on this PR to be merged," if it does and what portions of it do :-s I had not realized that before.  I\'ve already updated after #6620.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,14,2018-05-09 19:02:02,5.43,,1,,"b'b"" I\'ll merge this as soon as it goes green.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,closed,2018-05-14 14:11:06,1253.87,1,14,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6611,closed,-,-,-,1,14,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,opened,2018-05-10 18:19:16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,title,2018-05-10 18:19:16,00:00,,1,,"b""b' Fixes #10864'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,body,2018-05-10 18:19:16,00:00,,1,,"b""b' Fix doc error'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,1,2018-05-10 18:19:16,58.28,,1,,"b""b' Also", if you want," this can be retargeted to the branch so it will show up in the docs for 2.12.7 and later version in the 2.12 series.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,2,2018-05-10 18:19:16,110.53,,,1,"b""b' Thanks for pointing that out"," made changes. In order to retarget to should I close this pull request and create a new one?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,3,2018-05-10 18:19:16,7.42,,,1,"b""b' Nope! Do you know how works? You can do   and you should be able to change the target of this PR to safely.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,4,2018-05-10 18:19:16,624.73,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,5,2018-05-10 18:19:16,0.98,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,6,2018-05-10 18:19:16,1.35,1,,,b'b\' please squash into a single commit," and we\\\'ll merge.  not sure why the ""combined"" check is confused.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,7,2018-05-10 18:19:16,76.43,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,8,2018-05-10 18:19:16,15.03,,1,,"b'b"" we\'re working on the Jenkins breakage.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,closed,2018-05-11 14:10:52,1191.6,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,reopened,2018-05-11 14:11:06,0.23,1,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,9,2018-05-10 18:19:16,297.93,,1,,"b'b"" hmm so Jenkins is back up"," but Scabot isn\'t actually triggering jobs. we\'ll keep on it""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,10,2018-05-10 18:19:16,269.65,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,11,2018-05-10 18:19:16,69.15,,1,,"b""b' Can we merge this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,closed,2018-05-11 19:57:24,346.3,1,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,12,2018-05-10 18:19:16,7.08,,1,,"b'b"" thanks @kamilduda"," and welcome! sorry \'bout the CI troubles""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6613,closed,-,-,-,1,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,opened,2018-05-13 21:51:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,title,2018-05-13 21:51:36,00:00,,1,,"b""b' Cleanup "," by moving most to partest'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,body,2018-05-13 21:51:36,00:00,,1,,"b'b"" This pull request is an idea to gather comments", as looks pretty niche," but at the same time I know it\'s also used by MiMa: url  WDYT should be done with this code?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,1,2018-05-13 21:51:36,43.92,,1,,b'b\' What to do with  ? Paulp liked it; I took a look once to polish it; but I concluded it was a bit over the top. I liked the idea of the DSL, but I recall snags around Spec vs Instance or whatever. I forget what I came up with," except that I called it ""paulptional"". soc installed it in partest", but partest is switching to sbt-only, so that ought not extend its life.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,2,2018-05-13 21:51:36,23.82,,1,,"b'b"" Now that you mention it MiMa is sbt-only these days too. Or does  still invoke MiMa via it\'s command-line interface?  I think what should be done is remove the usage of  in partest and MiMa", and then it can all go. Even DemoSpec," as I don\'t think it\'s fair to call it a test for url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,closed,2018-05-13 22:59:21,67.75,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,3,2018-05-13 21:51:36,12.93,,1,,"b'b"" soc wrote that issue", too.  I think there is a need to parse command lines, but I\'m not sure where," off the cuff. Tell me again when the Dark Ages will pass and our progeny will tell their progeny how they used to try to get words expressing commands into the computer.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,4,2018-05-13 21:51:36,62.77,,1,,"b""b'  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,5,2018-05-13 21:51:36,831.6,,1,,"b""b' what happened here"," why was this closed?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,6,2018-05-13 21:51:36,10.7,,1,,"b""b' I thought it was best to first remoe the usages of  both in mima and partest"," instead of this move proposal.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,7,2018-05-13 21:51:36,7.18,,1,,"b""b' ah okay. well the MiMa thing happened and partest is re-in-sourced"," so feel free to take it on now :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,8,2018-05-13 21:51:36,5.67,1,,,"b'b\' Now I remember: partest\\\'s usage of  is pretty hard-core (unlike mima\\\'s).  So.. maybe instead of ""remove"" we should go back to ""move"". Go go gadget re-open.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,reopened,2018-05-21 14:30:11,930.83,1,9,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,9,2018-05-13 21:51:36,1233.47,,1,,"b""b' @som-snytt WDYT?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,10,2018-05-13 21:51:36,220.73,,1,,"b'b"" I haven\'t used CLI partest in a very long time now"," so I would support just dropping the feature.  I remember it was necessary to run it as FSR...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,11,2018-05-13 21:51:36,7.27,,1,,"b'b"" I\'ll look to dropping the main part. But IIRC most of the use of  is used by the sbt plugin too"," for option parsing etc.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,12,2018-05-13 21:51:36,1143.53,,,1,"b""b' Looks good to me"," @SethTisue passing on to you :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,13,2018-05-13 21:51:36,12.73,,1,,"b""b' Issue status summary:  * most of  has been removed from the library * most of it has survived by being repackaged into partest *  /  now live on only in alongside (for the rest of "," t7591 works because it depends on partest and thus the repackaged code)  * the CLI of partest (ConsoleRunner) was culled * the use of  in mima has been culled'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,14,2018-05-13 21:51:36,338.25,,1,,"b""b' Merge conflicts with url  so rebased.  Review by @som-snytt"," perhaps?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,15,2018-05-13 21:51:36,125.78,,1,,"b'b"" I\'ll give it :eyes: soon.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,closed,2018-06-04 09:31:52,1141.68,1,15,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,16,2018-05-13 21:51:36,980.12,,,1,"b'b"" This change shouldn\'t hold back the 2.13.0-M5 milestone"," and closing it is one way to do that.  If this change is of interest I\'d be happy to take and respond to feedback in order to land this change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,17,2018-05-13 21:51:36,1221.47,1,,,"b""b' Sorry"," I had a busy weekend IRL. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,18,2018-05-13 21:51:36,1292.08,,,1,"b'b"" That\'s OK. Feedback still very welcome.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,19,2018-05-13 21:51:36,563.75,,,1,"b""b' @dwijnand @som-snytt interested in reviving this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,20,2018-05-13 21:51:36,580.43,1,,,"b'b"" Sorry", I\'m lame. No," literally! I had to hike five miles on the hottest day of the year with no gear! One way! It has left me lame. I\'ll limp toward a review.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,21,2018-05-13 21:51:36,1090.55,,1,,"b'b"" @SethTisue What\'s your take on this change?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,22,2018-05-13 21:51:36,1265.72,,,1,"b'b"" FTR"," another hot weekend. I just noticed an improvement () worth improving url but it\'s only used by . LOC are technical debt!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,23,2018-05-13 21:51:36,1270.43,1,,,"b'b"" A subsequent PR can mv the parser to .  Oh"," I can\'t reopen because the branch has been zapped! Poor branch!""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,24,2018-05-13 21:51:36,1272.87,,1,,"b""b' A subsequent PR can add the sbt tool for updating the parser under project", from settings," then migrate partest to use settings.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,25,2018-05-13 21:51:36,471.67,,,1,"b'b""  Dale the Branch Zapper strikes again. he\'s notorious!  nonetheless"," summoned the commits out of some occult alternate dimension  rebased and resubmitted at #7804""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6639,closed,-,-,-,4,17,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,opened,2018-05-16 09:35:36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,title,2018-05-16 09:35:36,00:00,,1,,"b""b' Make ClassfileParser more efficient", lazy," and less cycle prone. [ci: last-only] '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,body,2018-05-16 09:35:36,00:00,,1,,"b'b""   Don\'t intern non-names as Names (e.g. string constants", descriptors,   and generic descriptors Use type completers for method signatures of Java methods, bringing   them into line with the way we enter Scala-originated method symbols.   This should be beneficial for performance, and also avoids cycles   that have been reported by users. But, be sure that these lazy types don\'t hold a reference to the   entire classfile. Instead," make our constant pool implementation   use only the slice of the classfile containing the pool.  Fixes -dev#287""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,1,2018-05-16 09:35:36,3.17,,,1,"b""b' /cc @smarter this is the branch we were discussing yesterday.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,2,2018-05-16 09:35:36,44.17,,1,,"b'b"" TODO:  [x] Test that we in fact don\'t capture the full classfile bytes from lazy type completers. [x] Try a bit harder to replicate the old approach of  "," rather than the hack.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,3,2018-05-16 09:35:36,302.1,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,4,2018-05-16 09:35:36,850.07,,1,,"b'b"" @lrytz I\'ve implemented my idea to gather the descriptor", signature, param names, and constant indices and  use these in the completer.  I\'ve also added logging for the name table size under  ," we can see the effect of the changes herein for a hello world compilation: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,5,2018-05-16 09:35:36,0.93,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,6,2018-05-16 09:35:36,86.8,,1,,"b'b"" I\'ve briefly tried this change out within -benchmark.  shows that reduce 37.7MiB to 36.36MiB (0.96x).  Execution time for the same (measured over more forks) also slightly improves:   I\'d expect this improvement to be mostly experienced by small compilation batches like  ; in larger runs the classloading time isn\'t that significant.  What I haven\'t done is measured the retained size of the compiler before and after this change. While we\'re saving on some "," we are keeping the of the constant pool of java classes around.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,7,2018-05-16 09:35:36,1240.35,,,1,"b'b"" @lrytz I\'ve tried the refactoring to trim the stored internally within  ", using a transparent offset. I pulled the thread a bit further and extracted an interface  . A second implementation of this uses a internally, as well as a single instance of for UTF decoding.  This opens the door to: using memory mapped byte buffers to read classfiles from disk (although I\'m not sure its a good idea). having a small pool of reusable  -s for classfile reading (like we already do for source file reading), knowing that we can release the buffer back to the pool after we\'ve  -ed the constant pool.  TODO: [ ] benchmark the changes [x] if  , we don\'t actually need the anymore, so we should avoid the method. (The current implementation actually does that already," is only called for Java classes.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,8,2018-05-16 09:35:36,293.67,,1,,"b""b' LGTM otherwise"," feel free to squash or not.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,9,2018-05-16 09:35:36,17.55,,1,,"b'b""   has a constant pool 7918 bytes out of a classfile size of 17591. That\'s a bigger proportion that I intuited. So its not clear to me what\'s the best trade off", maybe it would be better to eagerly parse it into into basic data types (like String)," so we don\'t need to capture the at all for later use in the lazy completers.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,10,2018-05-16 09:35:36,980.12,,,1,"b'b"" I\'m trying out the approach reading everything we need from the constant pool when setting up the completers. I\'ve also tried using a completer for the class info type itself", which nicely replaces the ad-hoc cycle avoidance implemented in  .  The part that I\'m not happy with is the way that we still eagerly resolve references to enum constants in annotations, which could trigger extra classfile parsing. I think it would be better to have a pass that only extracts the enum owner name and enum name, and then resolves that to the actual symbol lazily (when the annotated methods is completed, or even later when its annotations are first forced). Same story for class constants. We could eagerly construct a tree representing the applied annotation," and wrap that in  .  I\'ll give this a bit of thought and leave this PR as WIP for now.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,11,2018-05-16 09:35:36,751.82,,1,,"b""b' closing for inactivity"," can be  whenever'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,closed,2018-11-06 13:46:20,250.73,0,10,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,12,2018-05-16 09:35:36,4.78,1,,,"b'b"" Does it really need to be closed ? That seems like it\'ll make it much more likely it will be forgotten about. It certainly decreases the visibility of future changes for anyone looking at the PR queue.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,13,2018-05-16 09:35:36,4.47,,1,,"b'b"" we use the queue to track work items that are actively being pursued. therefore we like to keep the number of open PRs manageable. anything over 50 or so leads to widespread forgetting and neglecting", PR-queue-wide, and lately we\'ve been up around 80\\xe2\\x80\\x93120, it\'s too much.  it\'s ultimately Adriaan\'s call whether to adopt a different policy," but that\'s how we currently manage the queue and have for some time.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,14,2018-05-16 09:35:36,592.25,,1,,"b""b' This has the WIP label"," could that be used to filter out WIP PRs?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,15,2018-05-16 09:35:36,500.93,,1,,"b""b' It can", but it also matters what shows up in the default view, in practice," that\\xe2\\x80\\x99s what everybody\\xe2\\x80\\x99s going to look at 80% of the time.  Ticket for continuing discussion around this: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,reopened,2019-02-12 06:00:29,974.15,1,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,16,2018-05-16 09:35:36,1314.47,,1,,"b'b"" I\'ve revived this by rebasing atop the latest 2.13.x. Benchmarks [running]url  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,17,2018-05-16 09:35:36,1294.42,,1,,"b""b' [Benchmark results]url  for the latest commit vs 2.13.x.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,18,2018-05-16 09:35:36,232.05,,,1,"b'b"" I\'ve cleaned this up. Its sprouted a few partest failures which I believe are noise and will trim back tomorrow. Then it\'s ready for re-review.  The allocation rate improvement now looks a bit more impressive than [last time I measured]url  That\'s due to caching the buffer for the classfile bytes. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,19,2018-05-16 09:35:36,98.73,,1,,"b""b' @retronym rebased"," ready to merge?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,20,2018-05-16 09:35:36,922.33,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,21,2018-05-16 09:35:36,0.1,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,22,2018-05-16 09:35:36,10.03,,1,,"b""b'  That looks like a GADT typechecking difference between Scalac and Dotty unrelated to this PR.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,closed,2019-03-19 03:13:36,1273.12,1,19,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,23,2018-05-16 09:35:36,158.9,,,1,"b'b"" @smarter I\'d recommend porting these changes over to dotty. [ ] Avoid use of table entries for signatures", descriptors, fully-qualiified classnames [ ] Use lazy class and member types for Java-defined symbols from the classpath, making sure that the completers don\'t capture references to the  , but instead to  (constant pool entries) [ ] reuse the for parsing, allowing for reentrancy (which we still get the internals of classfile parser need to force the info of some other package," which needs to first parse its package object class.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,24,2018-05-16 09:35:36,707.03,,1,,"b""b' @retronym Agreed"," this PR has been on my mental todo-list for a while :). Just opened an issue to keep track of it: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6653,closed,-,-,-,1,20,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,opened,2018-05-22 00:05:01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,title,2018-05-22 00:05:01,00:00,,,1,"b""b' Iterator string smarts'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,body,2018-05-22 00:05:01,00:00,,1,,"b'b"" Many iterators know if they are empty or not. But they can\'t tell us.  Also trailing iterator of a span is more reluctant to forward hasNext.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,1,2018-05-22 00:05:01,194.83,,,1,"b""b' So much code to put in a .js file for ... what benefit exactly?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,2,2018-05-22 00:05:01,151.4,,1,,"b'b"" @sjrd Just for a break. I was waiting on someone else\'s commit at the office.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,3,2018-05-22 00:05:01,10.97,,1,,"b'b"" as discussed at #10892"," I don\'t think we should make this change.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,4,2018-05-22 00:05:01,14.18,,1,,"b'b"" Hey @som-snytt thanks for the patch. I like how you\'re using  information to make toString as informative as possible.  However I\'m not sure about this solution as the REPL output you put in #10892 seems a bit.. schizophrenic.  In terms of change size"," ignoring tests this is about a -25/+50 LOC change. Perhaps that\'s a bit on the heavy side.  What\'s your motivation (or thinking) for proposing this solution?  Oh and thanks for picking up my ticket so fast! <3""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,5,2018-05-22 00:05:01,14.38,,1,,"b'b"" Thanks all for looking. It does look weird; it would make more sense as special cases in or a similar typeclass; the motivation is that these iterators know more about themselves than they let on"," and someone learning about their behavior in REPL deserve to share that info. Not that I feel strongly about it.  I\'ll reopen with just the fix to the trailing iterator of a span result.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,closed,2018-05-22 06:30:47,385.77,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,reopened,2018-05-22 17:46:08,675.35,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,closed,2018-05-23 09:49:07,962.98,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6668,closed,-,-,-,0,5,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,opened,2018-06-05 21:51:13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,title,2018-06-05 21:51:13,00:00,,1,,"b""b' Replace  traits with type aliases'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,body,2018-06-05 21:51:13,00:00,,1,,"b""b' Fixes #9080.  This commit is adapted from #5288 and is thus:  Co-authored-by: Simon Ochsenreither '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,1,2018-06-05 21:51:13,3.62,,1,,"b'b"" This PR doesn\'t actually compile currently"," I get: This also happened at some point in #5288 but was apparently resolved: url  Assuming it actually worked then I don\'t see why it\'s failing now. Is it possible that the resolving rules have changed such that is now preferred to ?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,2,2018-06-05 21:51:13,20.72,,1,,"b""b' Opened url  to try to solve the bootstrapping conundrum.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,3,2018-06-05 21:51:13,791.57,,1,,"b'b"" I think we should merge #6730 and do the change here after M5.  Why doesn\'t this PR remove the Serializable / Cloneable traits?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,4,2018-06-05 21:51:13,133.02,,1,,"b""b'  Done. This required tweaking url  more.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,5,2018-06-05 21:51:13,1059.35,,,1,"b'b"" Looks good! Let\'s reopen this after releasing M5. I marked url  as blocker and assigned it to RC1 to make sure we don\'t forget.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,closed,2018-06-07 07:19:29,568.27,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,reopened,2018-08-29 04:30:35,1271.1,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,6,2018-06-05 21:51:13,1346.12,,1,,"b""b' Reopened and rebased now that M5 is out.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,closed,2018-08-29 06:59:32,148.95,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,7,2018-06-05 21:51:13,423.32,1,,,"b'b"" Somewhat to my surprise"," git bisect is blaming this PR for shapeless\'s current brokeness in the community build: url  Reverting 82fd5910a2862ccc9967e99c7e9828453eed195a confirms it.  I\'ll try and work out what\'s going on.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,8,2018-06-05 21:51:13,518.57,1,,,"b'b"" It appears that the problem is that an intersection previously inferred as is now being inferred as which is being used in an invariant context where the two are incompatible.  I can\'t see any obvious way of tweaking the test which will cross build before and after this PR. It\'s not a huge deal in this case", and [I\'ve commented out the test]url  without any real loss," but it suggests that this change might cause bigger problems elsewhere in the community build.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,9,2018-06-05 21:51:13,565.48,,,1,"b'b"" thanks"," I\'ll keep an eye out for it.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6729,closed,-,-,-,2,7,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,opened,2018-06-06 07:43:39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,title,2018-06-06 07:43:39,00:00,,1,,"b""b' fix IterableOnce#flatMap example code'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,body,2018-06-06 07:43:39,00:00,,1,,"b""b' url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,1,2018-06-06 07:43:39,87.52,,1,,"b""b' What do we get if we write  ? It seems that the problem lies more on the side of the operation. (and this would be fixed by #6728)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,2,2018-06-06 07:43:39,364.68,,,1,"b""b' Interestingly this lost a lint warning"," present in 2.12: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,3,2018-06-06 07:43:39,1135.78,,1,,"b'b"" I don\'t understand why this fails for but not for   ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,4,2018-06-06 07:43:39,10.15,,1,,"b""b' Works for too... \\xf0\\x9f\\x98\\x95 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,5,2018-06-06 07:43:39,1404.5,,1,,"b""b' @adriaanm [any idea \\xf0\\x9f\\x91\\x86]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,6,2018-06-06 07:43:39,153.5,,1,,"b""b' Some form of implicit search getting in the way? I\\xe2\\x80\\x99m on vacation until Monday. No repl in sight :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,7,2018-06-06 07:43:39,4.47,,1,,"b""b' hope you get some other sight instead \\xf0\\x9f\\x97\\xbc (almost)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,8,2018-06-06 07:43:39,1439.65,,1,,"b""b' smaller -type alias issue?: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,9,2018-06-06 07:43:39,38.4,,1,,"b""b' Looks like type inference fails to constrain from  "," while it does so when comparing against  . This then breaks  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,10,2018-06-06 07:43:39,8.02,1,,,"b""b' self contained (no collections): '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,11,2018-06-06 07:43:39,38.77,,1,,"b""b' See #6789'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,12,2018-06-06 07:43:39,1.8,,,1,"b""b' Thanks for spotting the bug"," @xuwei-k! I think my PR will resolve it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,closed,2018-06-13 13:50:53,367.23,1,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,reopened,2018-06-13 17:10:46,199.88,1,11,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,13,2018-06-06 07:43:39,200.25,,1,,"b'b"" I can\'t figure out how to fix this properly"," so it\'s better to fix the documentation.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,closed,2018-06-13 17:11:18,0.53,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6739,closed,-,-,-,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,opened,2018-06-10 10:06:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,title,2018-06-10 10:06:26,00:00,,1,,"b""b' Support -Yimports for implicit preamble imports'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,body,2018-06-10 10:06:26,00:00,,1,,b'b\' Take to mean are root imports of the form: and where the import from a module can be disabled with usual idiom," an import at the package level.  **in detail:**  The ""root"" imports which constitute the context for Scala source files can be managed explicitly.  The default root context imports symbols from  ",  , and  .  These imports can be turned off with  , or just the with  .  A new option,  , allows these root imports to be specified explicitly as fully-qualified names of packages and objects. Order is significant, because later imports shadow earlier ones, as though they were in nested scopes.  Currently, root imports from can be disabled in a source file by introducing an explicit import from  . Typically,  . Now, any root import from a predef object can be disabled using the same idiom. (There are some restrictions due to the way a source file is processed: generally, the import should be at the package level and appear at the top of the file. Also, a package object is not subject to this idiom.) \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,closed,2018-06-10 10:08:14,1.8,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,reopened,2018-06-11 01:54:23,946.15,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,1,2018-06-10 10:06:26,961.73,1,,,"b'b\' @lrytz Here is which instead of trying to scan for the ""disabling import""", just waits for to notice an import selecting from the module to disable. It means that source code order now matters; the import can\\\'t sit at the bottom of a package with impunity. In other words," it reduces the effect of action at a distance.  It occurs to me that maybe ""disabling"" should be scoped in the normal way", like a form of shadowing, where only the innermost import context from a root import is active. I didn\\\'t attempt that because the behavior is very different.  This PR currently removes scanning for the predef module in this unit; I\\\'ll restore that, possibly using the same mechanism: when you notice you\\\'re typechecking your predef, disable the import.  I may add a lint flag to warn when a predef is disabled; since there can be many  , it\\\'s easier to mistakenly have an explicit import that does the wrong thing.  Edit: I guess there is no test for not compiling with enabled. It strikes me that it\\\'s sufficient to warn when encountering the predef and disabling the import; the warning would say to either disable the or  ; I wonder if my imports PR supports that syntax? Doesn\\\'t everyone clamor for it? or clamber for it?\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,2,2018-06-10 10:06:26,446.92,,1,,"b""b' What are your thoughts about the  of supporting module (and package) members in the list?  Does work to disable root imports?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,3,2018-06-10 10:06:26,329.55,1,,,b'b\' When I reviewed Andy Scott, I remembered the feature of just making them look like regular imports. I did at least want to support members in the sense of members of stable member  .  I thought I\\\'d return again to whether and supporting rename syntax etc," gives up the simplicity. It\\\'s true that root imports are ""just an import.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,4,2018-06-10 10:06:26,791.75,,1,,"b""b' More tests to come. More option syntax", something like and  . Not sure why the values must be absolute instead of relative to previous contexts," which is more obvious and sane.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,5,2018-06-10 10:06:26,584.63,,1,,"b""b' I think or could be a separate effort.  There", a preamble would simply prepend to the compilation unit," without the special weirdness of root imports. A preamble is just some statements.  I hope lands without preambleness.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,6,2018-06-10 10:06:26,4.65,,1,,b'b\' How about a preamble,  . That could not work transparently because of relative packaging. Besides imports," what do people most want from a preamble?  Edit: I guess this is another reason everyone wants top-level defs. or  "".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,7,2018-06-10 10:06:26,66.17,,1,,"b""b' My \\xf0\\x9f\\x91\\x80 had been lurking approvingly. :shipit: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,closed,2018-08-08 15:11:58,797.58,2,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,8,2018-06-10 10:06:26,0.82,,,1,"b""b' Wohoo!! Thanks @som-snytt'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,9,2018-06-10 10:06:26,109.67,,,1,"b""b' Thanks"," what could go wrong?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,10,2018-06-10 10:06:26,181.97,,1,,"b'b\' @SethTisue I\\\'ll ~contribute~ reconsider some verbiage:  The ""root"" imports which constitute the context for Scala source files can be managed explicitly.  The default root context imports symbols from  ",  , and  .  These imports can be turned off with  , or just the with  .  A new option,  , allows these root imports to be specified explicitly as fully-qualified names of packages and objects. Order is significant, because later imports shadow earlier ones, as though they were in nested scopes.  Currently, root imports from can be disabled in a source file by introducing an explicit import from  . Typically,  . Now, any root import from a predef object can be disabled using the same idiom. (There are some restrictions due to the way a source file is processed: generally, the import should be at the package level and appear at the top of the file. Also, a package object is not subject to this idiom.) \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,11,2018-06-10 10:06:26,572.07,1,,,"b'b"" This is actually really not useful in practice. I don\'t want to import the members from at all; I want it to just  . If I wanted  ", doesn\'t it stand to reason that I would type  ? I assumed this existed to complement  , but with this working the way it does, I have no use for it at all.  The part that really hurts is," it seems like it would be absolutely trivial to fix this issue. Is there any chance of a PR fixing it getting in before this is completely unchangeable?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,12,2018-06-10 10:06:26,610.0,1,,,"b""b' there\\xe2\\x80\\x99s still time to change this. it\\xe2\\x80\\x99s just a flag so there aren\\xe2\\x80\\x99t hard compatibility guarantees even after 2.13.0 is out"," but obviously it would be better to get any changes in before that.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,13,2018-06-10 10:06:26,612.82,,1,,"b""b' (perhaps this is one where a thread on url  might spark some design discussion even from folks who don\\xe2\\x80\\x99t follow the  PR queue)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,14,2018-06-10 10:06:26,792.2,1,,,"b'b"" @edmundnoble I think you\'re asking for  . The difference in usability is that a preamble is just something stuck onto the front of your source text. A root context is more like what you get with nested package clauses", where members of the roots are visible to mycode, with usual shadowing. That\'s different from  . (Root contexts have lower name binding precedence," too.) I\'ll try to propose a that satisfies what I think you\'re asking for.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,15,2018-06-10 10:06:26,794.58,,1,,b'b\' @edmundnoble Also please note I\\\'m exercising everything I learned in Sunday school to respond to your comment that,"This is actually really not useful in practice."" I took that to mean simply that I didn\\\'t address your use case. But I hope that does cover it.\''
scala	6764	closed	16	fommil	2018-06-10 10:06:26	1024.08			+1	b'b"" Personally I think this is pretty useful, but yeah I agree that something more explicit would be even better. Thanks @som-snytt !  Had I more than (checks watch) 3 hours left doing scala, I\'d be excited about typing this... ""'
scala	6764	closed	17	som-snytt	2018-06-10 10:06:26	1378.87		+1		b'b""   are aliases for so you can save precious time and omit them in the presence of  . There was talk on the ticket about getting rid of those options, but I think they are a handy shorthand. I\'d be happy to entertain suggestions for a better name than the misnomer  . lacks something. Naming is so hard, it becomes tractable only through crowd-sourcing.""'
scala	6764	closed	18	fommil	2018-06-10 10:06:26	1385.08		+1		b""b' @som-snytt should be in my opinion (or  ). is **definitely** a misnomer.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,19,2018-06-10 10:06:26,1412.55,,1,,b'b\' @fommil Instead of crowd-sourced," fommil-sourced. I\\\'ll try out  . There is a distinction between ""predef"" objects and packages in the prelude. I hope prelude isn\\\'t too close to preamble. In one", you\\\'re just ambling, in the other, you\\\'re just playing around, ludus.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,20,2018-06-10 10:06:26,292.98,1,,,b'b\' I had a branch if I can find it that goes the other way to support Andy Scott\\\'s syntax. (As in my previous comment url I liked this PR because it is not finicky: you define packages and Predef objects to wildcard import from.  The follow-up was just to take regular import syntax,  , and treat them like regular imports (so rooted names are not required). I wanted to avoid having two options (for packages versus predef things you can opt out of in source code). I still have lingering doubts about opting out of your own predef, but the feature can still be supported on the current basis," that the qualifier of an import is not a package.  My concern about ""import syntax"" is that it could wind up very confusing", and it increases the surface area outside the source text. The dubious notion is that I need because I don\\\'t want to create an object that aliases it because we don\\\'t export.  Another difference is that an explicit import has higher precedence, so it\\\'s harder to reason about where the package might include a  . (That would be ambiguous.) I haven\\\'t exercised these edge cases yet. In the current PR, everything is wildcard import, so there is no ability to induce ambiguity with the option.  Using import syntax seems familiar, but it\\\'s also true that everyone hates import syntax and it needs to be simplified. So this PR is simple, and import syntax would be finicky.  If I can find the branch, though, I\\\'ll propose the finicky PR.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6764,closed,-,-,-,6,13,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,opened,2018-06-11 15:22:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,title,2018-06-11 15:22:26,00:00,,1,,"b""b' Factor out strict implementations of transformation operations.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,body,2018-06-11 15:22:26,00:00,,1,,"b""b' Factor out common operations of StrictOptimizedIterableOps and StrictOptimizedSortedSetOps.  Add StrictOptimizedMapOps and StrictOptimizedSortedMapOps.  Only operations that were implemented more than once have been factored out. Some other operations could be factored out", though, so that they could be reused by custom collection implementations (like, for instance," [here]url Fixes -strawman#325'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,1,2018-06-11 15:22:26,2.83,,1,,"b""b' Is there a way to run the benchmarks to check that I didn\\xe2\\x80\\x99t do anything wrong?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,closed,2018-06-12 08:09:22,1006.93,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,reopened,2018-06-12 08:09:26,0.07,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,2,2018-06-11 15:22:26,1232.0,,1,,"b'b"" You\'ll have to run the benchmarks locally"," we don\'t have any infrastructure for automatic benchmarking yet. See url  for details.  The test failures appear to be due to url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,3,2018-06-11 15:22:26,1247.02,,1,,"b""b' @szeiger how can I workaround #10853?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,4,2018-06-11 15:22:26,2.1,,1,,"b'b"" @julienrf you can make more things non-final", add a in the comment with a reference to the ticket," and also add the methods to the ticket description. We\'ll fix it before M5.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,5,2018-06-11 15:22:26,114.88,,1,,"b""b' Rebased and fixed tests.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,6,2018-06-11 15:22:26,1308.3,,1,,"b""b' The compiler seems to crash. You can probably reproduce it by running and then running the compiler ( ).'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,7,2018-06-11 15:22:26,124.78,,1,,"b""b' Running didn\\xe2\\x80\\x99t errored on my machine. It\\xe2\\x80\\x99s not clear to me what\\xe2\\x80\\x99s the \\xe2\\x80\\x9ccombined\\xe2\\x80\\x9d jenkins status means"," but the other checks are green.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,8,2018-06-11 15:22:26,28.8,1,,,b'b\' Ah," sorry I didn\\\'t see that you only fixed the build in the second commit. ""combined"" just checks if all commits in the PR are green. So just squash the changes into one.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,9,2018-06-11 15:22:26,1359.08,,1,,"b""b' If I do it for  ", for instance," that looks like this:  Is that what you have in mind?  We should make these internal operations public so that users writing custom collections can use them (see url  for instance)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,10,2018-06-11 15:22:26,177.87,,,1,"b""b'  Yes", that looks good. should be sufficient," right?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,11,2018-06-11 15:22:26,91.9,,,1,"b""b' @szeiger Done!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,12,2018-06-11 15:22:26,128.4,,1,,"b""b' Are there any useful lazy sets or maps? I was under the impression that lazy building only makes sense for seqs so we could use strict implementations by default for maps and sets without needing extra mix-in traits.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,13,2018-06-11 15:22:26,54.42,,1,,"b""b' In the standard library we only have  . Maybe it\\xe2\\x80\\x99s premature abstraction", but I think it\\xe2\\x80\\x99s better to keep the view-based implementations in and  ," just in case someone wants to implement a non-strict or  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,closed,2018-07-19 17:47:30,578.07,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6776,closed,-,-,-,1,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,opened,2018-06-13 13:48:40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,title,2018-06-13 13:48:40,00:00,,1,,"b'b"" Don\'t derive type var constraints from type param bounds""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,body,2018-06-13 13:48:40,00:00,,1,,"b""b' This overly constrains type checking"," as reported in #6739 and #10819. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,1,2018-06-13 13:48:40,29.03,,1,,"b""b' Looks like you need to be less ambitious. Or differently ambitious.   (one of a number of failures in Travis CI)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,2,2018-06-13 13:48:40,42.6,,1,,"b""b' As usual"," my ambitions are being adjusted towards the more ad-hoc. I think I have a compromise brewing.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,3,2018-06-13 13:48:40,42.88,,1,,"b""b' Bah", it passes the test suite," though.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,4,2018-06-13 13:48:40,1333.3,,1,,"b""b' As usual"," too much code has started to rely on this. Not sure we can do much here.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,closed,2018-08-08 13:56:29,7.82,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,reopened,2018-08-08 14:31:37,35.13,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,5,2018-06-13 13:48:40,35.58,,1,,"b'b"" No", we really can\'t let this escape into the wild. It\'s only been enabled since M3," so not sure why so many tests fail. Must be doing something else wrong.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,6,2018-06-13 13:48:40,98.45,,1,,"b""b' /cc @milessabin '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,7,2018-06-13 13:48:40,14.82,,,1,"b'b"" @adriaanm that looks a lot nicer. What\'s the issue with sip23-widen?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,8,2018-06-13 13:48:40,32.63,,1,,"b'b"" @adriaanm Ahh ... OK"," I see. We need to propagate the from the symbol to the constraint so that it\'s available [here]url  Just stopping widening isn\'t sufficient.  I\'m not saying there isn\'t a better way to do that ...""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,9,2018-06-13 13:48:40,38.5,,1,,"b""b' Hmm ... or perhaps not. Something must be being propagated from the constraint to some other type variable somewhere.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,10,2018-06-13 13:48:40,37.72,,,1,"b""b' Ok"," thanks for checking & clarifying. I think that makes sense then. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,closed,2018-08-09 12:29:04,1317.45,0,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6789,closed,-,-,-,0,10,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,opened,2018-06-19 17:24:26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,title,2018-06-19 17:24:26,00:00,,1,,"b""b' addressing url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,1,2018-06-19 17:24:26,10.65,,1,,"b""b' Also"," don\\xe2\\x80\\x99t forget to sign the Scala CLA :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,closed,2018-06-19 17:44:59,20.55,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,reopened,2018-06-19 17:45:04,0.08,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,2,2018-06-19 17:24:26,162.78,,,1,"b""b' @julienrf edited the note for willForceEvaluation per your suggestion"," and added it for more of the collections.  Should I add it to collections found in  that uses newSpecificBuilder? Thanks!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,closed,2018-06-25 11:27:35,1062.52,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6824,closed,-,-,-,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,opened,2018-06-23 10:58:37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,title,2018-06-23 10:58:37,00:00,,,1,"b""b' Partest supports Crash?! again and X failure in terse mode'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,body,2018-06-23 10:58:37,00:00,,,1,"b'b"" More partest janitorial duty", inspired by SZ.  Notably, steps or actions in a test produce instead of boolean, to support status. Previously," a compiler crash resulted in a generic failure.  A crash result was witnessed manually by injecting a crasher; outright crashes are so rare now that I didn\'t go looking for one. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,closed,2018-06-23 11:00:47,2.17,0,0,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,reopened,2018-06-26 17:28:49,388.03,0,0,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,closed,2018-06-26 17:31:12,2.38,0,0,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,reopened,2018-06-27 12:27:02,1135.83,0,0,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,1,2018-06-23 10:58:37,518.77,,,1,"b'b"" Just to show how charming the terse output looks. Also tidy. The X is in red.   Well", it\'s tidy but it looks like there is an off-by-one race condition when outputting dots, three lines are too long. It\'s the correct total number of dots," but each line should be 72 dots.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,2,2018-06-23 10:58:37,828.37,,1,,"b""b' \\xe4\\xbe\\x98\\xe5\\xaf\\x82'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,closed,2018-08-03 09:25:51,1258.82,0,1,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,3,2018-06-23 10:58:37,656.68,,1,,"b'b"" I don\'t see my stack trace: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6847,closed,-,-,-,0,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,opened,2018-06-26 21:23:02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,title,2018-06-26 21:23:02,00:00,,1,,"b""b' Remove  literal singleton types'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,body,2018-06-26 21:23:02,00:00,,1,,"b'b"" Symbol literals may be removed in the future", as discussed in url  SIP-23 added literal singleton types for all supported literals," but it seems more prudent to not allow Symbol literal singleton types until we\'re sure that Symbol literals will not be dropped.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,1,2018-06-26 21:23:02,3.47,1,,,"b'b"" Bootstrapping is a bit messy. I\'ve bumped the pickling format version to 5.2 but it should really either be 5.0 (since it\'s exactly the same as before) or 6.0 (if we insist on monotonicity", since it\'s not backwards-compatible with 5.1), but either of these things breaks the tests since apparently we run the tests with the standard library compiled with STARR. So it seems like doing a major bump of the pickling format is impossible," how was this done in the past?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,2,2018-06-26 21:23:02,631.68,1,,,"b'b"" I agree", we shouldn\'t add stuff we know will cause migration pain. Should just String instead of Symbol literals. What do you think," @milessabin?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,3,2018-06-26 21:23:02,493.7,,1,,"b""b' I take the position that if there are literals then there should be corresponding literal types.  If Dotty is going to remove symbol literals then the literal types should go with them. In the meantime I think it would create more irregularity in Scala to take them out now.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,4,2018-06-26 21:23:02,0.75,,1,,"b'b"" FTR I\'m all in favour of symbol literals being removed from Dotty.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,5,2018-06-26 21:23:02,1428.52,1,,,"b'b""  The problem is", if Symbol literal types exist they need to be present in the pickled format, if Scala 2.14 ends up using TASTY as a backend, that means that they need to be part of TASTY and handled by Dotty. It also means that removing them would be a breaking change for TASTY, which is exactly the kind of things we don\'t want to do. Alternatively you could introduce the feature in 2.13 and remove it in 2.14, but then what\'s the point," except confuse and make it harder for users to upgrade?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,6,2018-06-26 21:23:02,5.57,,1,,"b""b' @smarter I agree that that sounds awkward"," but I think I would be more concerned about inflexibility in TASTY if what you describe is really the case. Is there any current TASTY documentation you can point us at?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,7,2018-06-26 21:23:02,3.58,,1,,"b'b"" We don\'t have worked out documentation yet", the best I can give you is the comment on top of url  I don\'t understand what you mean, this isn\'t specific to tasty, this is just the definition of an incompatible change: if a feature is removed from a format," then any existing file of this format using this feature cannot be used with a tool that implements the new version of the format.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,8,2018-06-26 21:23:02,179.4,1,,,"b""b' I suggest that before merging this PR", we go through the SIP process. For better or worse, symbol literals are part of the language now and are even part of the pervasive metadata format," so the potential for breakages is non-trivial and should be discussed by the SIP committee.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,9,2018-06-26 21:23:02,6.42,,1,,"b""b' I disagree.  This PR is about disallowing symbol literals as singleton types"," not about removing symbol literals. Literal singleton types are a new feature of 2.13 so nothing will break.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,10,2018-06-26 21:23:02,16.68,,,1,"b""b' @smarter Literal singleton types have been formally accepted by the SIP committee in url  As a committee member"," I am against informally backing out of anything that we formally ratified.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,11,2018-06-26 21:23:02,7.8,,1,,"b'b"" Ok"," so can we agree that this should be decided at the next SIP meeting? There\'s not much time left until 2.13 RC1 and it\'s binary compatibility requirements kick in.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,12,2018-06-26 21:23:02,1.92,,1,,"b""b' In fact", since this change may require a new starr (still not sure about that, see my first comment)," it should be done before the M5 release ideally.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,13,2018-06-26 21:23:02,27.17,,1,,"b'b""  I\'m not sure whether the process allows for on-the-spot decisions", but I\'ll leave that to the process lead (/cc @jvican). Otherwise," I don\'t mind discussing this topic at the next meeting if it makes it into the meeting agenda.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,14,2018-06-26 21:23:02,27.57,,,1,"b""b' This wasn\\xe2\\x80\\x99t in my radar", thanks for looping me in @xeno-by. I\\xe2\\x80\\x99ll add this to the next sip meeting," it\\xe2\\x80\\x99s definitely something that needs a formal discussion and approval of the Committee. @smarter can you create a small sip motivating this change so that we can discuss it in our upcoming meeting?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,15,2018-06-26 21:23:02,11.95,,1,,"b""b' Does this really really need a SIP? I think @adriaanm understands the issue well enough and will be present at the meeting.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,16,2018-06-26 21:23:02,12.75,,,1,"b""b' Yes", it needs it so that we can all discuss it and go through the normal number-review procedure. A short proposal with a clear motivation suffices," nothing fancy.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,17,2018-06-26 21:23:02,28.97,,1,,"b'b"" I suggest a new concept:a SIP *amendment*"," which wouldn\'t need to be numbered nor reviewed for months etc. but would just be a lightweight way to amend an approved SIP before it has reached a production version. It would basically be two paragraphs (what changes and why) and could be dealt with within one meeting.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,closed,2018-07-01 21:30:55,7.88,4,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,reopened,2018-07-01 21:31:03,0.13,4,12,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,18,2018-06-26 21:23:02,14.98,,,1,"b'b"" It sounds like a good idea", but how would you know that such an amendment wouldn\\xe2\\x80\\x99t take more time to review and approve? When to draw the line between that and a proposal ?  Technically speaking, there\\xe2\\x80\\x99s no reason why a proposal cannot have a short introduction and motivation (two paragraphs as you mention) and be numbered and approved in the same day. People associate sips with heavyweight proposals but that ain\'t need to be the case!  A proposal may be an amendment. And we\\xe2\\x80\\x99ll need one if we want to discuss this in our next meeting... it should take 30 min," really.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,19,2018-06-26 21:23:02,303.65,,1,,"b'b"" M5 is now imminent. I suggest we merge this for M5 and then revert it later if the SIP committee decides we need to. @adriaanm wdyt?  (removes Scala-team hat", dons SIP-committee hat)  Speaking as a SIP committee member, I will certainly listen with an open mind to any discussion on this at the next meeting, but: we\'ve already had a fair amount of discussion right here on the ticket, and so far I think the TASTY argument trumps the consistency argument. Especially since is pretty minor," obscure stuff.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,20,2018-06-26 21:23:02,160.23,,1,,"b'b"" Why not wait until the SIP committee decision before merging? I understand that M5 implies a feature freeze", but if lifting the feature freeze for a revert of this PR is on the table, then it would make sense for lifting the feature freeze for a merge of this PR to also be on the table.  @SethTisue I agree that this is a pretty minor language feature, but I would still like to suggest that we don\'t set the precedent of cutting corners, especially on the verge of the Scala 2 to Scala 3 transition, where we\'ll have to apply unprecedented rigor to ensure a smooth migration path for the Scala community.  Moreover," as proposed in url  let\'s set aside some time during a SIP meeting (e.g. the next one) to discuss the role that the SIP committee should play in vetting changes to the Scala compiler. E.g. should we discuss deprecation warnings for language features? What kind of compatibility guarantees should we uphold? Etc etc. I can volunteer to kickstart a discussion thread at -. /cc @jvican ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,21,2018-06-26 21:23:02,340.05,,,1,"b'b"" Relative to the impact of this PR (removing something that has not shipped in a final release", which shouldn\'t have been added in the first place), I find what you\'re proposing too heavyweight. Given how full the SIP plate is with 2.14/3.0 stuff, I would argue the opposite: let\'s keep our process focussed on the big picture, and not sweat the small stuff.  I\'m merging this PR. Happy to discuss this particular change and the meta level at the next SIP meeting. If the committee feels this needs to be reverted," we can do so for RC1.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,closed,2018-08-07 11:10:27,819.4,4,14,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,22,2018-06-26 21:23:02,17.35,,1,,"b""b' url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,23,2018-06-26 21:23:02,410.48,,,1,"b'b"" @smarter This appears to have broken  .  @adriaanm The fact that this passed CI suggests that isn\'t being run ... is that intentional?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,24,2018-06-26 21:23:02,768.57,,1,,"b""b'  url  shows:   and url  shows   so both CIs are running the test.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,25,2018-06-26 21:23:02,780.43,,1,,"b'b"" presumably it\'s because CI does:   which isn\'t happening when you just do locally  so I expect the local test failure will go away once we re-STARR onto M5.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6864,closed,-,-,-,4,17,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,opened,2018-07-05 00:15:25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,title,2018-07-05 00:15:25,00:00,,1,,"b""b' Some tests on jdk10'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,body,2018-07-05 00:15:25,00:00,,1,,"b""b' Fixes -dev#522'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,closed,2018-07-05 00:16:36,1.18,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,reopened,2018-07-09 16:07:20,950.73,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,1,2018-07-05 00:15:25,1119.32,,1,,"b""b' @lrytz Maybe you have a quick answer why this check fails on Java 10. (safeToInline is expected false.)  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,2,2018-07-05 00:15:25,22.95,,1,,"b'b""   is used in a couple of places to flag change in reflect behavior that I didn\'t nail down yet. That\'s just to let the test suite proceed instead of failing early.  partest is tweaked to handle filtering check file on  ", but I realized that only and are required in the current regime.  No attempt to do java modules: avoid and jaxb in tests, and one test filters the which may fail in future. Actually it WARNs once by default, so I didn\'t discover all the warnings; I see it in the output.  I tested on OpenJDK Java 10 not 9.  There are still errors in other categories under  ," as well.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,3,2018-07-05 00:15:25,70.9,,,1,"b""b' Also taking the opportunity to remove extraneous flags files. It would be nice if for directory could be hidden in  . Partest will find group flags there"," but that feature is unused by any test. Flags enabled for are naturally set for that compilation round.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,4,2018-07-05 00:15:25,519.42,,1,,"b'b""  It seems the annotation class moved in 10  url checks for  "," but it\'s now  . The test should just look for either of the two. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,5,2018-07-05 00:15:25,41.68,,1,,"b'b""  We need to tweak the desugaring of structural calls a little bit to avoid this.  Instead of:   Which is called from", e.g.   Which compiles to:  When running on JDK9+, we should call rather than  . First, we\'ll need to put some JDK-dependent code in  , and call via reflection or via a helper method that we compile under JDK9 in our build.  Then, we need to change the compilation of structural calls to pass the receiver, rather than reciever class down.  For source compatibility," we should probably leave the current signature of alone (it could be used from userland) and create a new method.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,6,2018-07-05 00:15:25,32.47,,1,,"b'b""   now uses class metadata to find the simple name", rather than the fragile approach of parsing the full classname.  I think that  is failing because we\'re emitting invalid metadata in the attribute in  ," possibly because of an interaction with  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,7,2018-07-05 00:15:25,9.0,,1,,"b'b"" The comment in the test is right"," the javadoc says should be empty for anonymous classes. I haven\'t sorted what\'s expected here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,8,2018-07-05 00:15:25,8.3,,,1,"b'b"" @lrytz Thanks! I\'d noticed the package change elsewhere"," but too lazy to drill down here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,9,2018-07-05 00:15:25,783.02,1,,,"b""b' Dread   '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,10,2018-07-05 00:15:25,220.55,,1,,"b""b' From the [migration guide]url  That probably foils:  url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,11,2018-07-05 00:15:25,4.52,,1,,"b""b' Something like this ought to be cross JDK compatible: '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,12,2018-07-05 00:15:25,72.35,,1,,"b'b"" Thanks @retronym I dusted off and built jdk11", after spending time trying to remember  , which was the hard part. I also got Eclipse Photon, which is looking pretty nice in dark mode; I don\'t know if that means I\'ll never update Scala-IDE at the office; I was hanging on to Neon in case I ever needed it," but I failed to persuade the Eclipse guy at the office to even review any Scala code. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,13,2018-07-05 00:15:25,1058.47,,1,,"b""b' @retronym OK to squash to one commit? Not sure any history worth preserving. I was about to look at osgi test breakage"," but maybe one can merge before fixing all the things.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,14,2018-07-05 00:15:25,151.98,,,1,"b""b' Could you please keep the flag file removal separate? Otherwise squashingsounds fine.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,15,2018-07-05 00:15:25,421.45,,1,,"b""b' Worth mentioning that zulu 10 crashed twice this week trying to sbt.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,16,2018-07-05 00:15:25,6.5,,,1,"b'b"" What\'s left? OSGi reflection tests", I presume? Once is happy," I propose we add to the Travis build matrix.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,17,2018-07-05 00:15:25,35.97,,1,,"b'b"" Yes"," I keep running out of time windows.  I\'ll pursue a couple of clean-ups that I forgot while squashing...  Edit: the weekend is coming up. Maybe book this PR and I\'ll follow up.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,18,2018-07-05 00:15:25,771.77,,1,,"b""b' First"," fix the bane of my existence on the first commit.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,19,2018-07-05 00:15:25,542.87,,1,,"b""b' Then fix the test munged by a git conflict. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,closed,2018-07-16 00:44:01,516.68,1,16,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,20,2018-07-05 00:15:25,1335.42,,,1,"b""b' Consider the progress booked!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,21,2018-07-05 00:15:25,1211.67,,,1,"b""b' thank you so much", Som," for this epic PR!!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,6889,closed,-,-,-,1,16,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,opened,2018-08-24 10:02:47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,title,2018-08-24 10:02:47,00:00,,1,,"b""b' More capable inliner [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,body,2018-08-24 10:02:47,00:00,,1,,b'b\' This PR brings several improvements to the inliner and optimizer.  ## Teaser   ## State of 2.12  In 2.12, there is a single round of inlining. After building the call graph, the heuristic looks at every callsite and decides which ones to select for inlining These inline requests are then filtered (avoid cycles) and ordered (leaves of the request tree are inlined first) The selected callsites are inlined Then the closure optimizer runs and re-writes closure invocations that appear within the same method as the closure allocation (to directly call the closure body method instead). Local optimizatinos then clean up (closure allocation is eliminated, lots of other cleanups)  ## Changes to inlining procedure  This PR changes the inlnier and closure optimizer to run in a loop (or," more precisely an inner loop of the inliner and an outer loop of inliner and closure optimizer): The beginning is the same as in 2.12 (build call graph and select inline requests) The inliner no longer ""fixes up"" the call graph of the callsite method (remove inlied callsite", add those of inlined code). Instead, methods changed by the inliner removed and re-added to the call graph. This re-runs the type analysis, which may result in a more precise call graph (callsites may get a more precise receiver type after inlining). Callsites in methods changed by the inliner are re-checked by the inliner heuristic, potentially creating new inline requests (for callsites that could not be inlined in the previous round). This is the inner loop. Once inlining is done the closure optimizer runs Methods changed by the closure optimizer are once again passed to the inliner to check for more callsites to inline. The inliner and closure optimizer run in a loop until they are done, this is the outer loop.  ## Inliner heuristics  The inliner heuristics are adjusted, changes in this PR are marked (new). They work as follows Methods or callsites annotated are not inlined We don\\\'t inline into forwarder methods (including synthetic ones, such as  , bridges,  forwarders) Methods or callsites annotated are inlined Higher-order methods with a function literal as argument are inlined Higher-order methods where a parameter function of the callsite method is forwarded to the callee are inlined (new) Methods with an parameter are inlined. When nested methods update variables of the outer method, those variables are boxed into objects. Inlining the nested method usually allows eliminating the box. (new) and are inlined if the receiver is statically known to be an array. Those methods have a big pattern match for all primitive array types. This pattern match is later reduced (by cleanup optimizations) to the single matching case. (new) Forwarders, factory methods and trivial methods are inlined. This includes bridges, methods, trivial methods such as closure bodies, etc.   Field accessors are **not** inlined, because fields are private. Inlining a field accessor changes a call to a public getter into a field read of a private field. This would mean that methods accessing fields can then no longer be inlined into different classes (it would cause illegal access errors).   Trait super accessors (static methods in interfaces that use to call the default method) are not inlined, because the would have different semantics when inlined into some different class. (*)  (*) Note that trait super accessors are still inlined when selected by a differnt heuristic, for example if they are higher-order methods with a function literal argument. In this case the static forwarder is inlined, and then also the is inlined. So the actual default method body is ultimately inlined.  ## Size limits  Inlining is now subject to size limits. The limits were chosen by looking at method sizes when compiling the compiler and how they affect running time of the ASM analyzers. They are definitely up for dicsussion, and should maybe have command-line flags.  -annotated, higher-order, synthetic forwarder and methods are inlined if the resulting method has <= 3000 ASM instruction nodes higher-order callsites with a forwarderd function parameter, methods with params, factories and forwarders that  are inlined if the result is <= 2000 ASM instructions generic forwarders and trivial methos are inlined up to 1000 ASM instructions  ## Improvements to local optimizations  There are several improvements to local optimizations (cleanups) Nullness analysis is now branch-sensitive Local variables created by the inliner for arguments of the callee, and local variables inlined into a method, are nulled out at the end of the inlined code. This fixes url  The inliner creates fewer local variables hodling arguments: if there is already some local variable holding the argument at the callsite, it is re-used in the inlined code. The optimizer treats module loads as always non-null. This slightly twists semantics: if a module is accessed in its super construtor, the field is still null. The behavior can be disabled with  . The optimizer eliminates module loads of some built-in modules ( ,  ,  ). This can delay / skip initialization of those modules. The behavior can be disabled with   The optimizer can delay class loading, for example by eliminating an unused  . This can be disabled with  . and optimization is improved   it knows about array types, which means array type tests can be eliminated statically   it uses a nullness analyzer to rewrite checks Some intrinsics are re-written by the optimizer   is rewritten to   when is statically known to be an array is rewritten to   when is statically known to be a primitive array is rewritten to  ## Compiler performance  First the good news: the compiler built with the new  runs ~2.5% faster on the larger codebases and  , around 1% faster on the small codebase. [Results here]url The not so good news: running the optimizer is a significantly slower than before. Compiling the compiler with the optimizer enabled: the jvm phase went from 43 seconds to 93 seconds.  By far the most amount of time is spent in the analysis, which computes producers and consumers. This analysis is used in a number of places: rewrite closure invocations, push-pop, box-unbox, remove stale stores. It might be possible to fuse the local optimizations that use this analysis into one.  Besides taking a lot of cpu cycles, asm analyses also have a huge memory churn. This can be easily observed by attaching a profiler, there is basically constant minor GC going on as soon as the compiler reaches the backend.  ## Bugfixes  Fixes some older bugs An unused should not be eliminated, as it throws a CCE (bug in 2.12) Inlining may cause a crash when writing the classfile and computing stack map frames (ClassBType of inlined code not created and cached during inlining, also bug in 2.12) \''
scala,7133,closed,1,2018-08-24 10:02:47,117.27,,,1,"b'b"" Test failure due to more inlining"," leading to url  Oh and travis doesn\'t like the long time spent in the inliner :)  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,2,2018-08-24 10:02:47,168.47,,,1,"b""b' This is finally getting ready now! I summarized the changes in the [PR description]url  Feedback is very welcome", /cc @Ichoran, @non, @mkeskells," @fwbrasil'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,3,2018-08-24 10:02:47,31.08,,,1,"b""b' @lrytz interesting work! I wonder if static inlining could hurt performance"," though. The JIT compilers can make much more informed decisions based on the runtime profile. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,4,2018-08-24 10:02:47,237.65,1,,,"b'b"" Yes", static inlining can certainly hurt performance, mostly because the JVM prefers working with small methods (the exception to that rule is probably the rather low default  ).  The goal of the Scala inliner and optimizer is to produce bytecode that the JVM can handle better. Or in other words, perform some optimizations that are common in Scala and that we know the JVM doesn\'t handle very well. There are basically two areas of interest: Higher-order methods: they lead to megamorphic callsites if not inlined / specialized enough. Also closure elimination can improve performance as the JVM\'s escape analysis seems to run into limitations when the code becomes more complex. Boxing: inlining can sometimes enable the elimination of boxing and unboxing. This has limited scope, it doesn\'t help for primitives in data structures (for example using an  ).  We inline very small methods as this does not increase method sizes and can sometimes lead to better static method-local analysis (for example when inlining a factory method).  All of the JVM discussion above is about HotSpot (version 8 in particular I don\'t know if there were substantial changes in this area in 9/10/11). Once GraalVM becomes more prevalent we\'ll have to re-asses the situation. Graal definitely has a more powerful inliner with heuristics geared towards higher-order methods / functional patterns, and partial escape analysis might also have a substantial impact on Scala code. In the best case the Scala optimizer becomes obsolete," in the worst case the rewrites performed by the Scala optimizer have a negative effect when running on Graal.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,closed,2018-09-28 13:56:57,234.17,1,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,reopened,2018-09-28 14:00:13,3.27,1,2,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,5,2018-08-24 10:02:47,1335.62,,1,,"b""b' Pushed changes (proposed and written by @retronym) to cut dependencies of Java sources on Scala files in the library", and switched to JavaThenScala. This allows inlining code that references those Java-defined types, see url  This shows a slight performance improvement," see 3rd data piont in [this graph]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,6,2018-08-24 10:02:47,880.25,1,,,b'b\' I ran the compiler benchmark for 3 scala versions  baseline compiled with the optimizer disabled baseline compiled with   this branch compiled with  on 3 vms  Oracle 1.8.0_181 / HotSpot Graal CE 1.0 RC7 Graal EE 1.0 RC7  on 2 machines  Our benchmarking machine (debian) My MacBook Pro 2018 Results on the benchmarking machine (i7-6700, 64 GB RAM, Debian 8.8) (unit is  ). In parentheses is the factor to the baseline. 2.13.0-pre-84de40d-noopt | 2.13.0-pre-84de40d | 2.13.0-pre-8d17277-SNAPSHOT  HotSpot | 742.931 \\xc2\\xb1 2 (1.0) | 713.849 \\xc2\\xb1 2 (0.961) | 678.911 \\xc2\\xb1 2 (0.914)  Graal CE | 695.825 \\xc2\\xb1 4 (0.937) | 662.258 \\xc2\\xb1 2 (0.891) | 660.256 \\xc2\\xb1 2 (0.889)  Graal EE | 578.633 \\xc2\\xb1 3 (0.779) | 565.439 \\xc2\\xb1 2 (0.761) | 552.111 \\xc2\\xb1 2 (0.743) |  Summary: The optimzier helps on HotSpot (makes the compiler ~9% faster) For Graal CE, the optimizer is still useful (makes the compiler ~5% faster) Graal EE helps a lot. The non-optimzied compiler on Graal EE runs 22% faster than on HotSpot, and 15% faster than the optimized compiler on HotSpot. The optimzier doesn\\\'t help much on Graal EE, but it doesn\\\'t hurt.  Results on my MacBook Pro (i7-8850H, 16 GB RAM," macOS 10.14): 2.13.0-pre-84de40d-noopt | 2.13.0-pre-84de40d | 2.13.0-pre-8d17277-SNAPSHOT  HotSpot | 743.920 \\xc2\\xb1 7 (1.0) | 710.432 \\xc2\\xb1 6 (0.955) | 694.129 \\xc2\\xb1 6 (0.933)  Graal CE | 840.872 \\xc2\\xb1 9 (1.130) | 813.020 \\xc2\\xb1 8 (1.093) | 803.120 \\xc2\\xb1 7 (1.080)  Graal EE | 741.984 \\xc2\\xb1 7 (0.997) | 723.949 \\xc2\\xb1 8 (0.973) | 711.624 \\xc2\\xb1 6 (0.957) |  I have no idea why Graal doesn\\\'t do better on my mac. I ran the entire thing twice with the same results. The ""VM options"" in the JMH log are the same Maybe it has to do with thermal throttling on these modern laptops? I\\\'ll reach out to some other people to run the same benchmarks.   EDIT: numbers from a *couh-custom-cough* Mac mini (i7-7700", macOS 10.13.6): 2.13.0-pre-84de40d-noopt | 2.13.0-pre-84de40d | 2.13.0-pre-8d17277-SNAPSHOT  HotSpot | 676.918 \\xc2\\xb1 18 (1.0) | 634.494 \\xc2\\xb1 17 (0.937) | 605.897 \\xc2\\xb1 12 (0.895)  Graal CE | 761.947 \\xc2\\xb1 13 (1.126) | 732.228 \\xc2\\xb1 10 (1.082) | 720.851 \\xc2\\xb1 9 (1.065)  Graal EE | 655.619 \\xc2\\xb1 14 (0.969) | 654.756 \\xc2\\xb1 22 (0.967) | 650.311 \\xc2\\xb1 20 (0.961) |  We observed very similar results on an iMac (i7-6700K).   EDIT 2: By request, I ran the benchmarks in a Linux VM (Debian 8.11) on my MacBook Pro. The results are basically the same as in a non-VM Linux. So Graal really seems to have suboptimal performance on macOS. 2.13.0-pre-84de40d-noopt | 2.13.0-pre-84de40d | 2.13.0-pre-8d17277-SNAPSHOT  HotSpot | 789.424 \\xc2\\xb1 6 (1.0) | 739.186 \\xc2\\xb1 6 (0.936) | 709.407 \\xc2\\xb1 5 (0.899)  Graal CE | 737.478 \\xc2\\xb1 6 (0.934) | 701.744 \\xc2\\xb1 6 (0.889) | 694.954 \\xc2\\xb1 6 (0.880)  Graal EE | 645.798 \\xc2\\xb1 10 (0.818) | 630.580 \\xc2\\xb1 6 (0.799) | 607.286 \\xc2\\xb1 6 (0.769) |   EDIT 3: Filed url \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,7,2018-08-24 10:02:47,906.08,,1,,"b'b"" at Lukas\'s request", community build run queued:  url currently 53 projects are expected to be green, so it gives some assurance," not as much as the 2.12.x community build of course""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,8,2018-08-24 10:02:47,875.4,,1,,"b""b'   \\xf0\\x9f\\x91\\x8d '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,9,2018-08-24 10:02:47,21.2,,,1,"b""b' oh nice! i was already getting worried looking at the summary.. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,10,2018-08-24 10:02:47,11.17,,1,,"b""b' Rebased"," hopefully got the  headers right. Ping @retronym :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,11,2018-08-24 10:02:47,246.63,,,1,"b'b"" Love these changes", I can see them making a lot of difference especially to heavy collections users," and I think they\'ll make people more confident in their understanding of what can and can\'t be inlined.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,12,2018-08-24 10:02:47,608.18,,1,,"b'b"" @lrytz Here\'s a commit to update the in our SBT build: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,13,2018-08-24 10:02:47,75.42,,,1,"b'b"" @lrytz Impressive! Looks like the work to improve expanded to be a rewrite! I am very late to the party here and will make some time to have a look in more detail this week I have a few questions in the interim though  has this been tested with the parallel backend if nothing else this should be able to reduce some of the extra overheads of inliner as inliner is part of the for local optimisations isn\'t it?  is this change readily back-portable to 2.12 I know there are 200+ files changed but a lot of non jvm stuff that looks mechanical (FunctionN etc)", and I thought that jvm was quite similar  did you already look at the inliner warnings in the current build I presume this will be a separate PR(e.g. a PR better use the new inliner)," but I recall there were a bunch of inliner warnings that I used to see in making a new dist""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,14,2018-08-24 10:02:47,250.4,,,1,"b'b""  Very good point", I\'ll test the parallel backend. It will not help for inlining, because inlining works across compilation units, so we cannot parallelize. But it works for all the intra-method optimizations, which is where most of the time is spent anyway. Technically I don\'t see a problem backporting it to 2.12. So it\'s a question of risk, it\'s a big change that impacts generated bytecode. We should at least gain a bit of confidence first and see how well it does on 2.13.x. No, it\'s a good suggestion. We might learn a few useful things from looking at those warnings. Last time I looked, the main problem was mixed compilation: when a Scala method references a Java type for which there\'s no bytecode available," we cannot inline that method. This was very common because we have some core classes in the library written in Java. This PR fixes that by going back to JavaThenScala.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,closed,2018-10-26 13:04:37,1384.4,2,7,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,15,2018-08-24 10:02:47,259.98,,1,,"b""b' \\xf0\\x9f\\x8e\\x89 \\xf0\\x9f\\x8e\\x89 \\xf0\\x9f\\x8e\\x89'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,16,2018-08-24 10:02:47,278.52,,1,,"b'b""  Doesn\'t this effectively rule out a change for Scala 2.12.x? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,17,2018-08-24 10:02:47,465.38,,1,,"b'b""  I don\'t think that it\'s ruled out by any principles. Binary compatible bytecode changes are OK"," so it\'s a risk-value tradeoff.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,18,2018-08-24 10:02:47,22.1,1,,,"b""b' Yeah thats what I meant by effectively"," judging by the size of the PR and how much has changed I suspect it would be very hard to make sure its completely binary compatible with the 2.12.x series'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,19,2018-08-24 10:02:47,1426.75,,1,,"b'b""  I think the risk that (a backport of) this PR breaks binary compatibility is very small. What changes is optimizations within methods", and the selection of callsites that are inlined. None of that changes the binary interface of the released scala-library.  The risks I see are bugs in the inliner / optimizer, which could lead to wrong or invalid bytecode when compiling a project with the optimizer enabled (or even  bytecode in the released scala-library) unexpected / large compile time increases. It\'s know that the additional inlining introduced in this PR causes the optimizer to take more time. I took measures to keep it under control (size limits)," but there\'s a risk that certain code patterns need more time to analyze than expected.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7133,closed,-,-,-,3,11,7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,opened,2018-08-29 07:00:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,title,2018-08-29 07:00:57,00:00,,1,,"b""b' Backport some compiler performance improvements [ci: last-only]'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,body,2018-08-29 07:00:57,00:00,,1,,"b""b' Backports:  #7109 #7107 #7105 #7103 #7102 #7098 #7097 #7096 #6990 #6967 #6607 #6664 #6631 #6622 #6618 #6607 #6605 #6604 #6599 #6597 #6524 #6297 #6292 #6291 #6234 #6214 #6209 #7128 #7149  #7143'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,1,2018-08-29 07:00:57,1066.37,,1,,"b""b' Benchmarks [scheduled]url  results to appear [here]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,2,2018-08-29 07:00:57,95.1,,1,,"b""b' Benchmarks are showing ~10% improvement.  The next candidates for backporting: #7099  #7099 #7140 #7142'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,3,2018-08-29 07:00:57,181.2,,,1,"b""b' Impressive!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,4,2018-08-29 07:00:57,48.75,,1,,"b""b' \\xf0\\x9f\\x93\\xa3 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,5,2018-08-29 07:00:57,159.57,,,1,"b""b' @retronym a word of warning on url  ... this broke a few things in the 2.13.x community build as discussed [here]url  Clearly a bug is being relied on in those cases", nevertheless, including this change will break code which currently compiles on 2.12.6.  If you want to get 95% of the positive effect of that change, then url  will do it ... if you recall," early pruning eliminated most of the unnecessary thunks.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,6,2018-08-29 07:00:57,1201.77,,1,,"b'b"" Thanks", @milessabin.  I\'ve whittled the Specs2 thing down to:   Which compiles with 2.12.6, fails with this PR," and works again with this PR with which disables the error message optimization.  The output is:  I think the implicit search is during static overload resolution.  I\'ll keep pulling the thread to see what is at fault here.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,7,2018-08-29 07:00:57,1378.58,,1,,"b""b' @milessabin Your assessment was spot on"," the use of the type operations in was registering a constraint on a type variable in the of an implicit search.  We can make the test above fail by applying this patch to 2.12.6.   '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,8,2018-08-29 07:00:57,146.12,,1,,"b'b"" FTR"," here\'s my failed attempt to fully isolate a test case:   ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,closed,2018-09-04 06:18:25,1397.47,0,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,reopened,2018-09-04 06:18:28,0.05,0,8,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,9,2018-08-29 07:00:57,1232.38,,1,,"b""b' Added a few more"," which will add to the [extended benchmark plot]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,10,2018-08-29 07:00:57,216.65,,1,,"b""b' /synch'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,11,2018-08-29 07:00:57,4.57,1,,,"b'b"" @adriaanm The main thing to review here is the bug fix to  ", which was motivated by the investigation of the way that the side effects leak was causing specs2 compilation to change course when error message creation was surpressed.  I started out predicating this on  ," but added a commit to turn the fix on unconditionally after we chatted about this and thought it might be such a corner case that we\'d be willing to sacrifice bug-compatibility.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,12,2018-08-29 07:00:57,4.2,,,1,"b'b"" I wasn\'t able to identify subset of commits that would give most of the performance benefit"," performance ratchets up fairly steadily. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,13,2018-08-29 07:00:57,1.0,,1,,"b'b"" This will need a careful merge forward to 2.13.x"," I\'ll volunteer for that job.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,14,2018-08-29 07:00:57,1125.32,,1,,"b""b' Running commnunity builds: [2.12.7-bin-5d34c2d-SNAPSHOT]url [2.12.7-bin-da58d8e-SNAPSHOT]url  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,15,2018-08-29 07:00:57,1119.97,,1,,"b""b' /rebuild da58d8e'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,16,2018-08-29 07:00:57,1.78,,1,,"b'b"" Manually kicked off a build of that last sha"," since the list of commits is too long for scabot (haven\'t implemented paging). url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,17,2018-08-29 07:00:57,119.5,1,,,"b'b"" This PR breaks which has a [ version of vast swathes of Typer]url  that no longer compiles.  @olafurpg We\'d need another PR like url  to prepare for 2.12.7. Is that something you\'re able to help out with?  This coupling is really"," really undesirable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,18,2018-08-29 07:00:57,660.02,,,1,"b'b"" Thanks for dealing with the macrofallout. Let\'s get this merged.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,closed,2018-09-18 09:03:57,165.48,2,14,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7147,closed,-,-,-,2,14,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,opened,2018-09-12 14:01:00,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,title,2018-09-12 14:01:00,00:00,1,,,"b""b' Add helpful message to IndexOutOfBoundsException'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,body,2018-09-12 14:01:00,00:00,,1,,"b""b' Addresses url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,1,2018-09-12 14:01:00,87.45,,1,,"b""b' Down voted because it increases size of method that are frequently used in deep loops or hot paths of parsers and serializers.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,2,2018-09-12 14:01:00,997.43,,1,,"b'b\' It\\\'s not obvious to me that the ""bound"" is the first index that\\\'s out of bounds.  It also makes no sense to me to say a negative index is out of bounds since the bound is", say, 5 -from the tests, neither looks right to me. \'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,3,2018-09-12 14:01:00,263.43,,1,,"b'b"" Hi"," I\'m the initial issue reporter and I\'m happy that this is reactivated. Hope this will be merged soon and the exception message will become more understandable.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,4,2018-09-12 14:01:00,27.52,,1,,"b'b"" @martijnhoekstra  Thanks for pointing the problem. Message is updated to show lower bound (0) and upper bound (length 1)  @plokhotnyuk  I understand your concern. It may require Scala maintainer\'s guidance and design decision for tradeoff between usability and performance.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,5,2018-09-12 14:01:00,50.43,,1,,"b'b"" @exoego I still think things should be phrased a bit better. I\'m leaving some suggestions (which are no more than suggestions)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,6,2018-09-12 14:01:00,807.62,1,,,"b'b"" @plokhotnyuk I\'m not convinced that this will cause performance problems without seeing a benchmark of some sort. And if it does"," you can always move the construction of the message to another method.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,7,2018-09-12 14:01:00,525.53,1,,,"b""b' I agree with the change"," but would keep the message shorter. should work for all types and all operations ().'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,8,2018-09-12 14:01:00,110.9,,1,,"b""b' @martijnhoekstra LGTY?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,9,2018-09-12 14:01:00,1267.35,,,1,"b""b' @lrytz yes"," seems good'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,closed,2018-10-03 12:47:40,1366.67,3,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,reopened,2018-10-03 12:47:43,0.05,3,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,10,2018-09-12 14:01:00,877.93,,,1,"b""b' @adriaanm  Can I have your moment to get review on this? Perhaps you missed my response during GitHub outage. Thanks in advance \\xf0\\x9f\\x98\\x83  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,11,2018-09-12 14:01:00,460.58,1,,,"b""b' Sorry for the delay! I\\xe2\\x80\\x99ve been in meetings most of this week and last. I\\xe2\\x80\\x99ll take a look as soon  as I can. Thanks for your patience. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,12,2018-09-12 14:01:00,429.77,,,1,"b""b' Thank you"," @exoego! LGTM'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,closed,2018-11-05 16:27:16,219.55,4,7,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,13,2018-09-12 14:01:00,455.7,1,,,"b'b"" Sorry my vote is too late to count this election cycle", but I think it\'s malodorous to sprinkle the string construction everywhere. Java 9 has a ctor that takes the index. I wonder if they debated whether to also accept the range. By convention," could print upper as or  . I don\'t see that it was considered here to subclass with that constructor.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,14,2018-09-12 14:01:00,870.5,,1,,"b""b' I wasn\\xe2\\x80\\x99t aware of that option. The vote is never final", we can keeprefining and evolving this.On Thu, Nov 8," 2018 at 01:02 som-snytt  wrote:>'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,15,2018-09-12 14:01:00,989.58,,,1,"b""b' A subclass sounds good"," actually!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,16,2018-09-12 14:01:00,874.45,1,,,b'b\' Alternatively,"companion objects"" in the package which take the appropriate parameters this removes any possible confusion about having different exception types, as well as makes it easier to support and  .\''
scala	7210	closed	17	exoego	2018-09-12 14:01:00	887.9	+1			b""b' I am sorry but it is unclear for me what is a problem between new error messages in this PR and a new String constructor introduced in JDK9.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,18,2018-09-12 14:01:00,946.17,,,1,"b'b"" The contrast is between and or similar. It could be a factory method", but then you incur module load. Putting the string adds in one place is cleaner by some measure. JDK9 doesn\'t matter," but shows they also think it\'s a good idea. One can dream of requiring java version  Worth adding that the old Josh Bloch advice was to have a field for the interesting datum. That is overkill assuming you always know what index you tried.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7210,closed,-,-,-,7,8,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,opened,2018-09-22 18:55:38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,title,2018-09-22 18:55:38,00:00,,1,,"b""b' small optimization for one call value'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,closed,2018-09-22 19:10:42,15.07,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,reopened,2018-09-22 19:10:48,0.1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,1,2018-09-22 18:55:38,1031.4,,1,,"b""b' @densh Do you need this refactoring? and is it worth to contribute to the version earlier than 2.13?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,2,2018-09-22 18:55:38,32.27,,1,,"b""b' OK", now the remaining change is cosmetic," it just saves a local variable. Should this PR remain open?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,3,2018-09-22 18:55:38,82.65,,1,,"b'b"" @lrytz If in your opinion this cosmetic solution is not worthy of a merger", you can close it, and I can solve more serious things. Let\'s just say, this PR was as a research," that a simple person can help the community""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,4,2018-09-22 18:55:38,16.03,,,1,"b'b""  We\'re really thankful for the countless contributions we get from our community", so please feel welcome to join!  I\'m going to close this PR," as it doesn\'t fix any problem.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,closed,2018-10-01 14:18:00,1147.2,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7250,closed,-,-,-,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,opened,2018-09-24 02:39:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,title,2018-09-24 02:39:43,00:00,,1,,"b""b' Modify existentialAbstraction to avoid calls to contains.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,body,2018-09-24 02:39:43,00:00,,1,,b'b\' The method performs a fix-point transitive closure loop," which at each iteration compares a list of ""candidate"" parameters with a list of ""already marked""", which is a subset of it. The test includes both equality (same object) and a call to the method, which would create a object.  We modify the code, to move quick equality check before doing any call to  . This should avoid creating the object, but would perform two list traversals in each loop.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,1,2018-09-24 02:39:43,490.95,,,1,"b'b"" On a meta-note", I don\'t mean to take this PR too far off its course," and I certainly don\'t mean to bikeshed. I do think it\'s worth poking around here a bit before we move to the next one :-)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,2,2018-09-24 02:39:43,573.07,,1,,"b""b' @adriaanm I have incorporated to the PR the changes you wrote in the comment", with a small change: instead of only keeping the ever-growing  , it uses a _border_ list," which are the elements introduced in a previous iteration. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,3,2018-09-24 02:39:43,586.45,,1,,"b""b' Regarding optimization of  ", we could add a fast path for (either with an override in that class or with a type test in  ), that just checks the directly," rather than allocating the  . We seem to commonly to ask during type inference.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,closed,2018-09-25 06:10:11,210.47,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,reopened,2018-09-25 06:10:13,0.03,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,4,2018-09-24 02:39:43,89.6,,,1,"b'b"" Looking good", @diesalbla -thanks! Could you please integrate your commit message as comments into the code, and update the one I wrote originally," to document the purpose of the borders? This stuff if pretty subtle.  I\'d also encourage you to incorporate @retronym\'s suggestions.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,5,2018-09-24 02:39:43,761.4,1,,,"b'b"" @adriaanm I have applied some of the short-cuts suggested by @retronym on the  . Regarding the quick-case for  ", I am afraid I don\'t know enough of the ADT hierarchy, so I have left it as a soft short-cut," and kept the default.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,closed,2018-09-27 13:19:49,429.6,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7257,closed,-,-,-,1,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,opened,2018-11-01 11:29:57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,title,2018-11-01 11:29:57,00:00,,1,,"b""b' Upgrade to ASM 7 for improved JDK 12 compat'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,body,2018-11-01 11:29:57,00:00,,1,,"b""b' improves compatibility with JDK 12'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,1,2018-11-01 11:29:57,125.1,,1,,"b""b' release-notes-able", I think. if this resolves any known issues or improves JDK 11 (or 9+) compat," could you say so in the PR description...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,2,2018-11-01 11:29:57,38.2,,,1,"b'b"" url  is as expected", so idk what\'s up with the CLA check," isn\'t fixing it""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,3,2018-11-01 11:29:57,9.68,,1,,"b""b' Close Reopen pull request?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,closed,2018-11-06 14:44:41,194.73,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,reopened,2018-11-06 14:44:43,0.03,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,4,2018-11-01 11:29:57,22.02,,1,,"b""b' /sync'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,5,2018-11-01 11:29:57,72.65,,1,,"b""b' sigh. as for the Travis-CI failure","   and many more such lines follow.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,6,2018-11-01 11:29:57,1021.65,,1,,"b""b' Rebased to include the Xss from url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,7,2018-11-01 11:29:57,257.4,,1,,"b""b' Any chance to get this merged?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,8,2018-11-01 11:29:57,569.43,,1,,"b""b'  @lrytz ping'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,closed,2018-12-04 22:46:15,481.53,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,9,2018-11-01 11:29:57,392.33,,,1,"b'b"" I don\'t think there\'s a noticable change for users"," it\'s mostly interesting for us because our fork is now very close to the official release.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,10,2018-11-01 11:29:57,157.52,,1,,b'b\' as per url  and url  this improves JDK 12 compat (projects that don\\\'t compile on JDK 12 on 2.13.0-M5 do compile on recently nightlies that include this PR)," so I\\\'ve added the release-notes tag and updated the PR description to say ""improves compatibility with JDK 12""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,11,2018-11-01 11:29:57,116.95,,1,,"b""b' submitted 2.12.x back port at #7780 '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,12,2018-11-01 11:29:57,18.6,,1,,"b""b' ASM 7.1 released"," includes bug fixes: url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7384,closed,-,-,-,0,12,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,opened,2018-11-11 07:13:30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,title,2018-11-11 07:13:30,00:00,,1,,"b""b' Deprecate  ", ,"  and  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,body,2018-11-11 07:13:30,00:00,,,1,"b""b' There are many great concurrent libraries out there"," so we could deprecate these. And I think the and pacakges could live out of the Scala core library too.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,1,2018-11-11 07:13:30,259.77,,1,,"b""b' My informal impression is that these classes are little used and can be slated for removal"," but I\\xe2\\x80\\x99m curious what GitHub search has to say.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,2,2018-11-11 07:13:30,124.47,,1,,"b'b"" Yes", If I was not wondering the source code," I would never know them existing. Scalaz or Monix\'s MVar could be used. I have not found a direct replacement of  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,3,2018-11-11 07:13:30,838.98,,1,,"b""b' refs url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,4,2018-11-11 07:13:30,1121.68,,1,,"b""b' @hepin1989 want to finish this up...?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,5,2018-11-11 07:13:30,221.35,,1,,"b""b' @SethTisue Yes","Will update it soon:)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,6,2018-11-11 07:13:30,255.92,,1,,"b""b' I would avoid mucking with before it is spun out. Its recent history is", someone fiddles," then the change is reverted. I just restored the use of  . Maybe it can be replaced by  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,7,2018-11-11 07:13:30,13.8,,1,,"b""b' @som-snytt I looked into the code","  is not a drop-in replacement of the current behavior.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,closed,2018-12-05 06:32:18,1398.8,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,reopened,2018-12-05 06:32:21,0.05,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,8,2018-11-11 07:13:30,3.98,,1,,"b""b'  I could replace the to  "," I think this will happen in 2.14?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,9,2018-11-11 07:13:30,307.48,,,1,"b""b' As @som-snytt suggested", I deferred migrating away from  , that could be done in 2.14 development progress. @viktorklang The chances have been dropped," thank you for the review.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,10,2018-11-11 07:13:30,920.52,,1,,"b""b' rebased. the previous error related to url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,11,2018-11-11 07:13:30,421.92,,,1,"b""b' The PR looks fine now", the question is if we want to do those deprecations ( , ,"  and  ). @viktorklang?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,12,2018-11-11 07:13:30,205.13,,1,,"b'b"" @lrytz I\'ve personally never used them", and implementation-wise I\'m not sure I ever would want to, so I think it would be my opinion that they\'d be deprecated. As to *when* that would be most preferable," I do not know.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,13,2018-11-11 07:13:30,40.02,,,1,"b""b' Personally", I never use them too, as we are moving to Scala 3 and there are so many good options out there too. If we could deprecate it," then we could move them out of the core library as to a separate module.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,14,2018-11-11 07:13:30,1128.8,1,,,"b""b' If we get well-funded complaints we can un-deprecate them :)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,closed,2018-12-19 08:57:24,145.05,1,11,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,15,2018-11-11 07:13:30,696.6,,,1,"b'b"" thanks"," @hepin1989 (and @viktorklang). I\'m pleased to see this got merged.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7410,closed,-,-,-,1,11,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,opened,2018-11-13 23:08:37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,title,2018-11-13 23:08:37,00:00,,1,,"b""b' Update build dependencies", jackson,"jol and junit '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,body,2018-11-13 23:08:37,00:00,,1,,"b""b' Update the jackson",jol and junit ,so does the sbt. I junit could be upgraded to junit 5 with migration lib," but that should not do in this one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,closed,2018-11-22 14:12:13,903.6,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,1,2018-11-13 23:08:37,156.5,,1,,"b""b' @hepin1989 why closed?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,2,2018-11-13 23:08:37,198.35,,1,,"b""b' @SethTisue I should add an issue to the  then.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,reopened,2018-11-27 05:52:22,940.15,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,3,2018-11-13 23:08:37,52.2,,,1,"b'b"" (it\'s totally fine to just open a pull request"," not every PR needs to have an issue first)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,closed,2018-12-04 22:35:23,1003.02,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,4,2018-11-13 23:08:37,1000.0,,,1,"b""b' a followup PR bumping sbt again (to 1.2.7) would be welcome :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7426,closed,-,-,-,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,opened,2018-11-27 00:59:22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,title,2018-11-27 00:59:22,00:00,,1,,"b""b' Leading import _root_ is always root package'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,body,2018-11-27 00:59:22,00:00,,1,,"b""b' Warn if there is an alternative relative _root_", and ignore it.  In any position other than the start of an import clause, remains an ordinary, if rather homely," identifier.  Fixes #6217'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,1,2018-11-27 00:59:22,105.68,,1,,"b""b' Actually it needs to happen for other qualifiers"," too. I resisted pushing it down to typer.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,closed,2018-11-27 04:13:51,194.48,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,reopened,2018-12-03 06:00:51,107.0,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,2,2018-11-27 00:59:22,1039.62,,1,,"b""b' Reworded and squashed. I hope this is a useful change for anyone (anyone?) who may need to use and do so with confidence. At least until a better solution to this schismatic controversy is discovered in the labs at EPFL.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,closed,2018-12-11 20:45:57,885.1,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7465,closed,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,opened,2018-11-28 09:01:33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,title,2018-11-28 09:01:33,00:00,,1,,"b""b' Rename partitionWith to partitionMap"," and improve doc'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,body,2018-11-28 09:01:33,00:00,1,,,"b'b\' See: url Rationale: the ""with"" suffix is woefully uninformative. Almost any method that takes parameters could be called  . There are a couple of projects in the community where this method was called  "," but I think it was more an artifact of the ""naming is hard"" problem. The standard library should strive not to perpetuate poor name choices.  On the other hand", describes well what this method does: it is partitioning + mapping. Similarly,  is flattening + mapping, and is grouping + mapping, so this would be consistent with other methods in the collections library.\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,1,2018-11-28 09:01:33,20.48,,1,,"b""b' Arrayops\\xef\\xbc\\x9f'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,2,2018-11-28 09:01:33,7.67,,1,,"b""b' I think should stay as deprecated alias of in 2.13 and be removed in 2.14.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,3,2018-11-28 09:01:33,76.8,,,1,"b'b"" @hepin1989 the method was not present in  . Seems like an oversight. Should I add it?  @martin-g that\'s fine with me.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,4,2018-11-28 09:01:33,573.72,,1,,"b""b'   does not exist in 2.12. If we go for  \\xc2\\xa0instead"," there is no point in introducing a deprecated in 2.13.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,5,2018-11-28 09:01:33,0.9,,1,,"b""b' It should be added to and  ", indeed. (that could be done in a separate PR," though)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,6,2018-11-28 09:01:33,13.55,,1,,"b""b' @LPTK I think yes.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,7,2018-11-28 09:01:33,1.9,,1,,"b""b' @julienrf is there a better way to check methods provided on all of these types\\xef\\xbc\\x9flike some kind of checking\\xef\\xbc\\x9f'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,8,2018-11-28 09:01:33,5.3,,1,,"b""b' @hepin1989 we should add a test that compares the available methods on each. I remember that Lukas has started prototyping something along those lines"," but I don\\xe2\\x80\\x99t know what\\xe2\\x80\\x99s the status is.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,9,2018-11-28 09:01:33,309.5,,1,,"b'b"" @julienrf yeah", otherwise," it\'s so easy to have oversight.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,10,2018-11-28 09:01:33,1108.27,,,1,"b'b\' The name change looks good.  has a rather specific meaning as a suffix to names: it is used when you supply a custom function instead of the ""natural"" function", e.g. vs.  .  So :+1: for changing this to  , as this is a map.  (  already takes a custom function; there is no natural partition for most types.)\'',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,11,2018-11-28 09:01:33,1288.4,,,1,"b'b\' I agree with @Ichoran. is not related to in the way these ""with"" methods usually are. The closest Haskell equivalent would be so I think is a good choice.  ArrayOps omits some lesser used or methods or those that are not easily optimizable in favor of going through when needed but since has to return new arrays it should be added.  The two  s should then call the method but this is still missing for other methods (like  ). It could be done in this PR or a separate one.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,12,2018-11-28 09:01:33,70.83,,1,,"b'b""  url  I didn\'t do any work on this.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,13,2018-11-28 09:01:33,445.22,,1,,"b'b"" @LPTK To you"," in case you weren\'t notified automatically.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,closed,2019-01-14 10:02:40,61.12,1,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,14,2018-11-28 09:01:33,477.77,1,,,"b'b"" @Ichoran oops"," didn\'t mean to close it. I made the changes and rebased.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,reopened,2019-01-14 10:21:52,19.2,2,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,closed,2019-01-14 15:22:12,300.33,2,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7475,closed,-,-,-,2,11,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,opened,2018-11-30 09:39:43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,title,2018-11-30 09:39:43,00:00,,1,,"b""b' Bug Fix #11240. Now Array", Seq," ArraySeq sortWith return the sorted a\\xe2\\x80\\xa6'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,body,2018-11-30 09:39:43,00:00,,1,,"b""b' \\xe2\\x80\\xa6rray instead of the old array.  #11240'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,closed,2018-12-02 09:04:02,1404.32,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,reopened,2018-12-02 09:04:10,0.13,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,1,2018-11-30 09:39:43,589.48,,,1,"b""b' the code change looks good"," but normally we also want to have test coverage for a bug fix. is that doable here?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,2,2018-11-30 09:39:43,322.03,,1,,"b""b' @SethTisue I have added test coverage now'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,3,2018-11-30 09:39:43,10.58,,,1,"b""b' @SethTisue is it good now? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,4,2018-11-30 09:39:43,536.83,,,1,"b""b' Thanks"," good catch!'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,closed,2018-12-10 09:58:44,54.57,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7480,closed,-,-,-,0,3,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,opened,2018-12-14 17:37:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,title,2018-12-14 17:37:06,00:00,,1,,"b""b' Introduce an unused annotation'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,body,2018-12-14 17:37:06,00:00,,1,,"b""b' Fixes #10790'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,1,2018-12-14 17:37:06,1073.67,,1,,"b""b' /sync'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,2,2018-12-14 17:37:06,1.1,,1,,"b'b"" Let\'s try the low level approach.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,closed,2018-12-29 11:31:52,1074.77,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,reopened,2018-12-29 11:32:08,0.27,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,3,2018-12-14 17:37:06,307.37,1,,,"b""b'  @som-snytt would it be difficult for the unused-detection code to recognize directly? otherwise it seems like piling hack upon hack. annotations extending each other seems weird to me"," and hijacking in this context was a hack in the first place'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,4,2018-12-14 17:37:06,232.4,,,1,"b""b' Although this solution has a certain elegance to it", superseded by url  which instead of piling hack upon hack," just shoves it off to one side and maybe spreads it around a little to make sure the garden is evenly fertilized.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,closed,2019-01-09 20:31:38,539.5,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7529,closed,-,-,-,1,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,opened,2019-02-04 16:04:52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,title,2019-02-04 16:04:52,00:00,,1,,"b""b' Promote -deprecation to -Xlint:deprecation'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,body,2019-02-04 16:04:52,00:00,1,,,"b""b' Promote to  "," and demote complaining about missing to lint.  (Setting the lint option also enables ordinary  ; the lint is a superset.)  Was: Adopt flag for  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,1,2019-02-04 16:04:52,358.35,1,,,"b'b"" [JEP 277: Enhanced Deprecation]url  says How did Java programmers confuse themselves to the point that they don\'t know what mean? Does this confusion exist among the Scala programmers? At least for me", means that the API is eventually going away. Adding I feel like would actually increase the uncertainty rather than clarity.  If some API says in Scala 2.13," what would that mean? I would much rather go the opposite direction of adding or whatever for non-removal warnings like #7790.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,2,2019-02-04 16:04:52,76.1,1,,,b'b\' @eed3si9n Although I have some opinions about deprecation and migration which I won\\\'t bother to elaborate, I will offer unequivocally that deprecation is not just about removing API.  For example,It encourages bad coding practices, url  is a possible semantics.  You could deprecate appending to a List with no intention of removing the API.  Someone, maybe smarter, said Scala is different from Java because it throws out API all the time.  But even Scala would not throw out list append. There is no mechanism for doing so. But it could deprecate append when the receiver is statically known to be a List. The message might suggest ListBuffer, or prepend and reverse, or what have you.  Deprecation is a way to ward off impending doom. It is a prayer which says to the gods, But I am too unimportant to destroy just now, let me live a bit longer as you purge the evil-doers. It is always unclear how long such a dispensation may last.  Edit: I mean to describe deprecation as understood, not to suggest that Scala couldn\\\'t rewrite the rules," though in that case I\\\'d probably suggest discarding the word ""deprecation"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,3,2019-02-04 16:04:52,149.18,1,,,b'b\' I just read Shakespeare\\\'s Tempest. @NthPortal is like Ariel, swooping in to confuse us by liking each contradictory opinion.  You know it was only an illusion that the ship split apart in the storm," which itself was also an illusion.  ""Their rising senses begin to chase the ignorant fumes that mantle their clearer reason.""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,4,2019-02-04 16:04:52,159.42,,,1,b'b\' @som-snytt lol, I just thought both of you made good points.  Honestly though, I would prefer a different annotation for the example you gave, because it\\\'s still part of the API, and if you need to append a single value to a (which is conceivable), it\\\'s what you should use. In my mind," means ""don\\\'t use this anymore"""," not ""well this is generally not what you want", but sometimes it is, so you might not want to use it," unless you actually do"".\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,5,2019-02-04 16:04:52,622.45,1,,,"b'b"" I\'m reminded of our notorious greek cliff-avoidance comment in the compiler. Sadly"," it doesn\'t look like we\'ll get this -deprecation-story to the 2.13 port.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,6,2019-02-04 16:04:52,1.73,,1,,"b'b"" As I said on the other PR -I\'d really-really-really like to get something like this into 2.14"," since we can\'t get there for 2.13 it seems. Closing this one until we branch for 2.14 \\xf0\\x9f\\x98\\x9e ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,closed,2019-03-21 14:52:06,1367.23,5,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,7,2019-02-04 16:04:52,159.23,1,,,"b""b' Reopening to revert just the surprisingly controversial parameter.  Restored to RC1 because of the lint option.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,reopened,2019-03-21 17:31:20,159.23,6,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,closed,2019-03-22 07:54:39,863.32,6,2,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,8,2019-02-04 16:04:52,864.23,,1,,"b""b' Maybe we can sneak in forRemoval using hashtags.  ", or when less serious,"  .'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,9,2019-02-04 16:04:52,7.73,,1,,b'b\' @NthPortal footnote," the constructors for java boxed primitives says: They tease us with ""rarely"""," but it would be an example where ""don\\\'t use this"" is qualified.\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7714,closed,-,-,-,6,4,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,opened,2019-02-11 05:00:20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,title,2019-02-11 05:00:20,00:00,,1,,"b""b' Override SeqView#sorted'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,body,2019-02-11 05:00:20,00:00,,1,,"b""b' Override to allow sorting the result of operations without creating an extraneous intermediate collection.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,1,2019-02-11 05:00:20,1.75,,1,,"b'b"" This allows usage somewhat similar to Java\'s  s: ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,2,2019-02-11 05:00:20,2.13,,1,,"b'b"" (I don\'t think this change is binary compatible"," though I am open to adding a forwarding override so that this change can be made for 2.13.1)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,3,2019-02-11 05:00:20,576.7,,1,,"b'b"" Could this be done in a more lazy way? I think that this the only View method returning an other View", which forces the collection isn\'t it? Maybe it warrants a new class  . That implementation could defer forcing the collection (maybe with a  ), and could also perform some of the other transformations before the sort ( would be really easy, would be harder but it would be possible to select the top n elements without sorting the whole thing," etc)  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,4,2019-02-11 05:00:20,135.85,,1,,"b'b"" Sorting is strict", and there\'s not really any way around that. It is still strict without this change, for reference. I don\'t see this as any different than  , which also forces evaluation.  is not guaranteed to be stateless (there are places in the stdlib where it is not)," and would require effectively sorting anyway.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,5,2019-02-11 05:00:20,52.45,,1,,"b""b'  Why?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,6,2019-02-11 05:00:20,21.33,,,1,"b'b"" >Sorting is strict", and there\'s not really any way around that. It is still strict without this change, for reference. I don\'t see this as any different than  , which also forces evaluation. is not guaranteed to be stateless (there are places in the stdlib where it is not), and would require effectively sorting anyway.   returns an Iterator, did you mean  ? The difference with is that it returns a not a so it is apparent that it forces evaluation. But that\'s fine, already is implemented in a strict way before this PR so that\'s not a critique of this PR specifically.  for  , I\'m thinking if someone does then it would be better to implement this as because that\'s potentially a lot less sorting to do. for etc, well finding the top elements according to some and sorting them can be a lot less work than sorting the entire collection and then taking the top  ," if is much smaller than the underlying size.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,7,2019-02-11 05:00:20,5.8,,1,,"b'b"" @joshlemer I don\'t think you can reorder and because should present the elements in sorted order to _every_ method thereafter unless we can guarantee a lack of side-effects (which we currently don\'t).  There are various optimizations possible involving and the like; you can even get to be somewhat lazy if you e.g. use heapsort or a variant of quicksort where you retain the unsorted right-hand branches until they\'re needed.  However", getting all the algorithms in for these things takes a considerable amount of work.  You\'ve already done quite a lot of such work, and it\'d be nice if you did more," but it\'s hard to promise that it will be worth it in this case (i.e. that people will rely on that behavior).  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,8,2019-02-11 05:00:20,76.07,,1,,"b'b"" @julienrf it\'s not binary compatible because without this override", the method returns a  .  Also, compiles to:   and calls to without this change will call that and then cast the result to (I think). compiles to:   From the bytecode perspective," this change adds a completely new method.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,9,2019-02-11 05:00:20,650.08,,1,,"b'b"" @julienrf @szeiger I\'ve changed both implementations to use instead of  .  Still TODO: scaladoc for  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,10,2019-02-11 05:00:20,1219.22,,1,,"b'b"" Part of the motivation for this PR", besides not having do unnecessary work, is to have a way to sort a collection and convert it to another type without building an intermediate collection. Thus, after this PR, you can sort a view   I think this change is good regardless there\'s no sense in having the view do extra work but another approach for that use case is to have a method. Some disadvantages of this include being able to pass in a for an unordered collection," making the semantics of the method somewhat confusing (e.g. will not yield a  ).""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,11,2019-02-11 05:00:20,1215.02,,,1,"b'b"" I still wonder if underlying view here should not be forced. I think evaluating here will lead to surprising behaviour and even without the optimization of things like   etc", forcing will lead to surprising behaviour in cases like...  here, forcing wasn\'t necessary.   I think more  surprising would be something like  I get that even before this change, was forcing evaluation," I think lazifying it would be nice though.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,12,2019-02-11 05:00:20,155.45,1,,,"b'b"" I\'m open to making it lazy. it\'s pretty trivial to extract the logic to a class and mark the field as  . I\'m not entirely convinced of the value though. you\'re basically saying that if you call but don\'t use it", you\'re wasting work. yes," but the same is true of and other methods.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,13,2019-02-11 05:00:20,19.87,,1,,"b'b"" @NthPortal  Yes", the difference in the case of is that it returns  , not any kind of View," so it is apparent and clear that it is a terminating operation. In the case of a View is returned so there\'s a reasonable expectation that transformations don\'t force evaluation. I *think* the only other strict transformation that returns  as the outer-most type is  transpose and maybe that too should be lazy in views.  ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,14,2019-02-11 05:00:20,38.52,1,,,"b'b"" I share the concerns about lack of laziness.  I think we should push as hard as possible for lazy-only operations", with others explicitly being terminal (i.e. not returning a view).  The user can always again.  I\'d suggest recasting the method in favor of a method that _only_ takes factories.  If there isn\'t already a marker trait for factories," we can add one.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,15,2019-02-11 05:00:20,39.63,1,,,"b'b"" @Ichoran adding still wouldn\'t solve the problem of the existing method  I apologize for belabouring the point", but strictly evaluating view transformations also breaks in that further mutations to an underlying mutable collection (of which the view is a view of) won\'t be reflected in the final collection:   I think just making it lazy is sufficient, no need for an other method. In fact you don\'t want to restrict factories to  \'s, one could also want to sort and then build to Map (to affect which value wins for each key) or SeqMap (is also order-sensitive).  We can also add pattern matching in to specialize for some factories. For instance, when building to (the factory) we could avoid the secondary array all together and just build an array and sort it in place. More generally," exposes a method. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,16,2019-02-11 05:00:20,6.0,,1,,"b'b"" Regular shouldn\'t have a  .  You can\'t efficiently operate on a view without an intermediate collection.  So what are you to do with  ?  (Noteyou can always make the set mutable and mutate it between the take and drop"," which reveals exactly the problem that you warn about.)""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,17,2019-02-11 05:00:20,13.53,,1,,"b'b"" @Ichoran Ok", sure. That might be a much better use case for url  than I was able to think of at the time ;-)  But if we don\'t want that, and we want to still bend the general view rule of evaluate-each-time in the name of performance," I would suggest just doing:  This will let your example just compute the sorted array once but preserve the laziness of the transformation""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,18,2019-02-11 05:00:20,4.63,,1,,"b'b""  what about  ? tangent: this somewhat hits on a possible design issue (that I think we\'re too late to address) of not having a super trait for sequential collections. and it doesn\'t. unfortunately",  , so it can\'t not have without also not being a (which has many drawbacks).  I think I actually like the idea of it being lazily sorted it\'s somewhat more like Java\'s  , which is also lazily evaluated," which is part of the motivation behind this change""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,19,2019-02-11 05:00:20,0.83,,1,,"b'b"" I\'m not against a  ; is it too late to add it though?""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,20,2019-02-11 05:00:20,6.75,,1,,"b""b' if we have a class for then its method would have all the context it needs to make  implementations per underlying collection type  factory type. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,21,2019-02-11 05:00:20,13.6,,1,,"b""b' I have pushed a version with and lazy sorting. I have copies of all the old branches in case we want to revert.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,22,2019-02-11 05:00:20,119.43,,1,,"b""b' I suppose then that the implementation of sorted in SeqOps should become something like  and its implementation moved to  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,23,2019-02-11 05:00:20,16.35,,1,,"b'b"" @joshlemer I would tend to agree"," but I would like others\' input before making that change""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,24,2019-02-11 05:00:20,573.27,,1,,"b'b"" Ugh", so we can\'t avoid after all?  I guess if we can\'t," is the way to go instead of  .""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,25,2019-02-11 05:00:20,55.88,,1,,"b""b'  No"," a is *not* a  . We can move from to so that only proper  s get it.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,26,2019-02-11 05:00:20,21.67,,1,,"b""b' And maybe", at the same time," (the only other method that currently forces strict evaluation)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,27,2019-02-11 05:00:20,11.17,,,1,"b""b' @szeiger Oh"," whew!  I should have checked.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,28,2019-02-11 05:00:20,473.53,,1,,"b'b"" @joshlemer I don\'t think there\'s anything that says *has* to be strict though I think just no one has an implementation that\'s lazy.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,29,2019-02-11 05:00:20,9.25,,1,,"b""b' @szeiger currently"," the return type of is what should it be if we move it to  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,30,2019-02-11 05:00:20,834.08,,1,,"b'b"" @NthPortal The same line of thought made me spent most of yesterday on yet another attempt to radically simplify the collections hierarchy (no Ops classes", no C and CC type parameters). The first step was surprisingly straight-forward for but then I got stuck again with  . Getting back to your question though: The important part of this design is using abstract types instead of type parameters. We already have but no  , which is exactly what we need for  . is not a great name because unlike the different CC types there is only a single C type," but as long as it\'s defined in it\'s not entirely wrong.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,closed,2019-02-21 15:10:11,609.85,3,26,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,reopened,2019-02-21 15:10:17,0.1,3,26,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,31,2019-02-11 05:00:20,10.58,1,,,"b""b' @szeiger I don\\xe2\\x80\\x99t remember exactly the details but we\\xe2\\x80\\x99ve already tried trading type params for type members"," and we didn\\xe2\\x80\\x99t like the result. Maybe one reason is that the error messages then become harder to understand (since they refer to path-dependent type instead of an instantiated type parameter). But maybe that reason can be fixed in the compiler.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,32,2019-02-11 05:00:20,245.8,,1,,"b'b"" ~~@szeiger but is a concrete type for ( "," to be precise). Unless I\'m missing something~~""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,33,2019-02-11 05:00:20,1090.0,,,1,"b'b"" This works: url   needs just like  . You could make it instead but that\'s just another name for because it is known to be unsound. Setting these type members to concrete types causes problems but as long as they are only aliases of type parameters everything works just fine.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,34,2019-02-11 05:00:20,18.1,1,,,"b""b'  Having these unsafe type members allows us to write nonsensical code that compiles (e.g. url  We should really really be careful before introducing a new one.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,35,2019-02-11 05:00:20,1430.92,,1,,"b'b"" @julienrf There\'s clearly a lack of type-checking that needs to be fixed so that inherited type members are re-checked in subtraits. My understanding of the problem is not good enough to tell if that will fully fix it or if there\'s some bigger underlying soundness problem.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,36,2019-02-11 05:00:20,518.77,,1,,"b""b' this is ready for squash+merge"," I think? any remaining objections?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,37,2019-02-11 05:00:20,909.78,,1,,"b""b' I think getting rid of would be better in the long run but the method exists in 2.12 so it makes sense to make these changes. We can revisit this for 2.14 and possibly deprecate the method. In other words: No objections.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,closed,2019-02-28 05:00:32,830.25,5,30,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7733,closed,-,-,-,5,30,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,opened,2019-02-22 00:42:29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,title,2019-02-22 00:42:29,00:00,,1,,"b""b' [backport] upgrade to ASM 7'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,body,2019-02-22 00:42:29,00:00,,1,,"b""b' 2.12.x backport of #7384  goal: improve compatibility with JDK 12"," as per [-builds#864]url  and [#11372]url fixes #11372'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,1,2019-02-22 00:42:29,86.17,,1,,"b'b"" in a local partial community build run on JDK 12", I verified that several projects that failed before are green now: scalaz,scala-async,scala-partest  but let\'s do a full JDK 12 run on Jenkins, too," just in case: url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,2,2019-02-22 00:42:29,5.17,,1,,"b""b' I verified locally that url  goes away with  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,closed,2019-02-22 04:10:22,207.88,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,reopened,2019-02-22 04:10:24,0.03,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,3,2019-02-22 00:42:29,975.5,,1,,"b""b'  the results show that this PR raises the number of green projects in the community build from 98 to 139"," and without introducing any additional failures  @adriaanm @retronym shall we merge?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,4,2019-02-22 00:42:29,1.58,,1,,"b""b' (one additional piece of due diligence: url  shows that 7.0 is still the most recent ASM version)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,5,2019-02-22 00:42:29,339.22,1,,,"b'b"" As far as I can tell", the compilation errors only happen when the backend optimizer is turned on, since that\'s what triggers ASM looking into classfiles from your dependencies, why not degrade gracefully and have the optimizer not look into classfiles it can\'t read ? Or if that\'s not possible, at least make the optimizer output an error message explaining to the user that he needs to downgrade his JVM, disable the optimizer," or upgrade his scalac.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,6,2019-02-22 00:42:29,69.88,,,1,"b'b""  yes", likely correct, I didn\'t get to the bottom of every individual failure, but every one I did look at it turned out to involved the optimizer seems like a good suggestion," but it exceeds my own ambitions for this PR. perhaps someone else will take it up""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,7,2019-02-22 00:42:29,1367.8,,1,,"b'b"" I\'m going to go ahead and merge this because I think we should have nightly builds that work on JDK 12. And for the community build.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,closed,2019-03-01 00:08:41,1198.28,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7780,closed,-,-,-,1,7,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,opened,2019-03-08 01:07:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,title,2019-03-08 01:07:18,00:00,,1,,"b""b' Optimize checkAccessible for super constructor calls'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,body,2019-03-08 01:07:18,00:00,,1,,"b""b' Allocation of this lambda accounted for 6% of lambda allocation in the compiler.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,closed,2019-03-08 01:08:21,1.05,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,1,2019-03-08 01:07:18,1.27,1,,,"b""b' Oops"," this was wrong-headed.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,reopened,2019-03-08 01:33:04,24.72,1,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,2,2019-03-08 01:07:18,24.82,,1,,"b""b' Take 2.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,3,2019-03-08 01:07:18,1131.05,,1,,"b""b' @retronym Is this ready to merge?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,4,2019-03-08 01:07:18,451.15,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,closed,2019-03-25 00:34:31,1381.45,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7831,closed,-,-,-,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,opened,2019-03-09 15:14:19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,title,2019-03-09 15:14:19,00:00,,1,,"b""b' 11369:New implementation of '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,body,2019-03-09 15:14:19,00:00,,1,,"b""b' New implementation of Summary: :  minor change to adjut latest change according changes in : major changes as per the need of the issue 11369  : A minor test added'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,closed,2019-03-14 08:23:44,1029.42,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,reopened,2019-03-14 08:23:47,0.05,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,1,2019-03-09 15:14:19,1036.87,,1,,"b""b' How to rebuild this?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,2,2019-03-09 15:14:19,689.62,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7839,open,-,-,-,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,opened,2019-03-25 06:36:34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,title,2019-03-25 06:36:34,00:00,,1,,"b""b' Optimize formalTypes'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,1,2019-03-25 06:36:34,41.85,,1,,"b""b' /rebuild'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,2,2019-03-25 06:36:34,70.17,,1,,"b""b' It may be worth it to add into the companion object something like the [ ]url  method"," '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,3,2019-03-25 06:36:34,47.2,,1,,"b""b' Can we re-target to 2.12? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,closed,2019-03-25 09:15:47,159.22,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,reopened,2019-03-25 09:15:50,0.05,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,4,2019-03-25 06:36:34,81.43,,1,,"b""b' @diesalbla adding what to  ?'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,5,2019-03-25 06:36:34,494.08,,1,,"b""b' @hrhino A method to build a list of length N"," where all the positions are the same value.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,6,2019-03-25 06:36:34,507.93,,1,,"b""b' Ah. Yeah. We have  ", but its parameter is by name," so not quite what we need. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,7,2019-03-25 06:36:34,1138.67,,1,,"b'b"" I\'ve also added a utility method and used that. Note that is efficient"," it shares the input list.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,8,2019-03-25 06:36:34,1140.75,,,1,"b'b"" @diesalbla I\'m going to be targetting more changes primary to 2.13"," and doing backports selectively if any prove to have a compelling performance benefit. The merges from 2.12.x to 2.13.x are already pretty tricky.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7920,open,-,-,-,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,opened,2019-03-25 10:48:18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,title,2019-03-25 10:48:18,00:00,,1,,"b'b\' Revert ""GlbLubs polyTypeMatch: No matrix no transpose""\''",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,body,2019-03-25 10:48:18,00:00,,1,,"b""b' Reverts #7897  it broke scaladoc on scalaz in the community build  (from url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,1,2019-03-25 10:48:18,18.2,,1,,"b""b' @adriaanm Ok. I have seen the error in the original one. Do you have the Scaladoc that caused the error? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,closed,2019-03-25 11:06:30,18.2,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,reopened,2019-03-25 11:06:33,0.05,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,2,2019-03-25 10:48:18,35.53,,1,,"b'b"" It\'ll be tricky to repro because it crashed while documenting scalaz with no indication of which part. Likely there\'s a bug somewhere else that\'s causing a mismatch between type param and args"," but there\'s not much to go on from the error.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,closed,2019-03-25 11:42:35,36.03,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,3,2019-03-25 10:48:18,7.65,1,,,"b""b' @adriaanm The error is a mistake between indexes in the loop that replaced the transpose. \\xf0\\x9f\\x98\\x9e I was asking for the Scaladoc"," just to have another regression test.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,4,2019-03-25 10:48:18,46.57,,1,,"b""b' Please resubmit when you can -RC1 is now locked down"," but 2.13.1 will be out soon too :-)'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,7921,closed,-,-,-,1,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,opened,2019-05-13 10:11:06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,title,2019-05-13 10:11:06,00:00,,1,,"b""b' allow publishing testkit'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,body,2019-05-13 10:11:06,00:00,,1,,"b'b"" Don\'t skip publishing testkit"," it\'s a dependency for partest  Fixes url ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,1,2019-05-13 10:11:06,24.95,,1,,"b'b"" If this pops up in url  then we\'re golden.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,2,2019-05-13 10:11:06,218.67,,1,,"b'b"" I have no idea what I\'m doing""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,closed,2019-05-13 14:14:43,243.62,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,reopened,2019-05-13 14:27:49,13.1,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,3,2019-05-13 10:11:06,34.2,,,1,"b""b' url ![there it is]url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,4,2019-05-13 10:11:06,48.43,,1,,"b""b'  @martijnhoekstra does anyone? Well", Dale," I suppose.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,5,2019-05-13 10:11:06,220.58,,1,,"b""b' Should this make the RC2 cut? '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,6,2019-05-13 10:11:06,225.13,,1,,"b'b"" I want it for snapshot testing (so I dont really care", as long as RC2 is soon, which it probably is). Im not sure anyone else cares.  While I think this is riskless," that sounds like famous last words. So let\'s not. ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,7,2019-05-13 10:11:06,344.0,,1,,"b""b'  '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8056,open,-,-,-,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,opened,2019-05-27 23:16:30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,title,2019-05-27 23:16:30,00:00,,1,,"b""b' List: add specialised flatMap with Option'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,body,2019-05-27 23:16:30,00:00,,1,,"b""b' The general method of the class takes any type that is an  ", and then uses its iterator to create a new list with the elements of that iterator. For most other types, the cost of creating an iterator is a relatively small overhead with respect to the size of the final List.  But not so for  : since each is going to have at most one item, it follows that is going to create as many objects as elements has the final list.  For this reason, we introduced a specialised method, which is like a copy of the general one," but avoids creating the Iterator.'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,1,2019-05-27 23:16:30,28.95,,1,,"b""b' It is a lot of code", true, but IMHO it may be worth it. Using and a to is a case that I have seen often. The method has the cost of creating an allocating the iterator," which is one memory object per object in the result list. '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,2,2019-05-27 23:16:30,35.15,,1,,"b'b"" Couldn\'t you just do this within the regular method"," just through pattern matching? ""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,3,2019-05-27 23:16:30,4.13,,1,,"b""b' @joshlemer Yes", that would be an easier option, and one which would not alter either the source or binary interface," so it can be back-ported to 2.12  The only problem I could see is that this would introduce a branching inside every iteration of the outer  . '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,closed,2019-05-28 00:25:09,68.65,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,reopened,2019-05-28 00:28:56,3.78,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,4,2019-05-27 23:16:30,24.75,,1,,"b""b' Follow-up in url '""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,5,2019-05-27 23:16:30,340.28,,1,,"b'b""  Probably best block until there\'s evidence that the impact is significant enough.""'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,closed,2019-05-28 15:26:39,897.72,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
scala,8097,closed,-,-,-,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
