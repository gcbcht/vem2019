REPOSITORY,ISSUE_ID,STATUS,EVENT,CREATED_AT,TIME DURATION,NEGATIVE,NEUTRAL,POSITIVE,MSG,,,,,,,,
memcached,31,closed,opened,2012-12-04 19:25:10,,,,,,,,,,,,,
memcached,31,closed,title,2012-12-04 19:25:10,00:00,,1,,b'b\' Fix segfault if memcached recieved next string," that did ""c->rlbytes"" not correct int number.\''",,,,,,,
memcached,31,closed,body,2012-12-04 19:25:10,00:00,,1,,"b""b'   Patch was written by sherlockhua@163.com.I just did refactoring. Issue at url '""",,,,,,,,
memcached,31,closed,1,2012-12-04 19:25:10,2.73,,1,,"b""b' Already have #4 issue.'""",,,,,,,,
memcached,31,closed,closed,2012-12-04 19:27:54,2.73,0,3,0,,,,,,,,,
memcached,31,closed,reopened,2012-12-04 20:17:51,49.95,0,3,0,,,,,,,,,
memcached,31,closed,2,2012-12-04 19:25:10,370.32,,1,,"b""b' Closing this out... I picked another patch which had a test.'""",,,,,,,,
memcached,31,closed,closed,2013-12-09 01:38:13,320.37,0,4,0,,,,,,,,,
memcached,31,closed,-,-,-,0,4,0,,,,,,,,,
memcached,36,closed,opened,2013-01-24 19:33:13,,,,,,,,,,,,,
memcached,36,closed,title,2013-01-24 19:33:13,00:00,,1,,"b""b' Record and report on time spent in listen_disabled'""",,,,,,,,
memcached,36,closed,body,2013-01-24 19:33:13,00:00,,,1,"b'b"" Hi.  We had some issues on production where we were in a listen_disabled state and it would have been operationally useful to know how long the server was in this state across the various events. I\'ve written a patch which reports on the time the server is in the listen_disabled state in microseconds. Thanks for your time! zwischenzugs""'",,,,,,,,
memcached,36,closed,closed,2013-12-10 13:09:08,1055.92,0,1,1,,,,,,,,,
memcached,36,closed,1,2013-01-24 19:33:13,1403.22,,1,,"b""b' Why did you close this?'""",,,,,,,,
memcached,36,closed,2,2013-01-24 19:33:13,1236.62,,1,,"b'b"" It was so old I\'d assumed it had been rejected. Do you want me to re-open? On Tue", Dec 10, 2013 at 6:56 PM," dormando notifications@ wrote:""'",,,,,
memcached,36,closed,reopened,2013-12-14 15:36:50,147.7,0,3,1,,,,,,,,,
memcached,36,closed,3,2013-01-24 19:33:13,286.22,,1,,"b'b"" No"," I just suck. I did a bunch of the PR\'s last week. Have a lot more left.""'",,,,,,,
memcached,36,closed,4,2013-01-24 19:33:13,4.78,,,1,"b""b' Oh OK :) If you need to know the context in which this became important"," let me know. Z'""",,,,,,,
memcached,36,closed,5,2013-01-24 19:33:13,184.82,,,1,"b""b' That might be nice. The current system counts the number of times you end up in this state"," which is the most useful information so far as I can tell. How was the amount of time spent in that state useful to know? They both indicate the same thing.'""",,,,,,,
memcached,36,closed,6,2013-01-24 19:33:13,505.47,,1,,b'b\' The situation was a major outage on a high transaction e-commerce site. Thecause was memcache being misconfigured resulting in possible downtime onthe main site. The question being asked by the customer ops team," internal dev teams andour senior management was: ""how long was the downtime?"""," and answering thisquestion quickly would have been a lot easier if there was a lower bound towork from (eg ""not more than 10 seconds cumulatively""). In our case", a small amount of cumulative downtime would mean the systemhad stayed up and working, even if the listen queue had been disabled manytimes. Z On Sun, Dec 15, 2013 at 11:29 PM, dormando notifications@ wrote:\'',
memcached,36,closed,7,2013-01-24 19:33:13,374.07,,1,,"b""b' Hi"," any update :)?'""",,,,,,,
memcached,36,closed,8,2013-01-24 19:33:13,315.92,,1,,"b""b' Hi"," any update?'""",,,,,,,
memcached,36,closed,9,2013-01-24 19:33:13,1367.1,,1,,"b""b' Is this worth pursuing?'""",,,,,,,,
memcached,36,closed,10,2013-01-24 19:33:13,778.25,,1,,"b'b"" rebased", fixed up slightly," and pushed to \'next\' tree.""'",,,,,,
memcached,36,closed,closed,2015-11-19 07:09:40,932.83,0,9,3,,,,,,,,,
memcached,36,closed,-,-,-,0,9,3,,,,,,,,,
memcached,90,closed,opened,2014-12-04 03:03:02,,,,,,,,,,,,,
memcached,90,closed,title,2014-12-04 03:03:02,00:00,,,1,"b""b' Remove the global lock"," make the hash table expanding simpler and grace'""",,,,,,,
memcached,90,closed,body,2014-12-04 03:03:02,00:00,,,1,b'b\' Several months ago, I pushed a post on the google group to discuss about global lock when hash table expanding. When trying to do that some days ago," I found it is much simpler than the discuss. We can use only one item_lock when expanding.  Both bucket of hash table and item_locks are evaluate by "" bucket = hv & hashmask(mask)""", so the bucket of hash table is the lowest N bits of the hv, and the bucket of item_locks is also the lowest M bits of hv.  N should be greater than M(by default N is 16, M is 12).  Because the expanding is add a bit at the highest of \\\'bucket\\\', it does not change the item lock. Both of new bucket and old bucket use the same item lock. So we can process expanding with only one item_lock. cool!  After remove global lock, the expanding can process concurrently with slabs_rebalancer, since they hold item_lock.\''
memcached,90,closed,1,2014-12-04 03:03:02,1095.07,,,1,"b'b"" Interesting. Need to verify this a bit harder", but I hadn\'t thought about it since fixing the item lock table.. which used to track the hash power level. A few things:Please don\'t deviate from the style of the surrounding . You\'re culling spaces and a few things. Just make it look closer to the stuff around it.The item lock table autosizes itself a bit by the number of worker threads enabled, and while HASHPOWER_DEFAULT is 16," it could at some point be equal or higher. The init code needs to actively defend against the item lock table being equal or larger than the hash table.""'",,,,,
memcached,90,closed,2,2014-12-04 03:03:02,439.0,1,,,"b""b' Sorry for the style. I will fix it.I have tried to keep it safe in the  assoc_start_expand()"," it will return directly if item_lock_hashpower >= hashpower. It seems not necessary to expand if item_lock_hashpower >= hashpower.'""",,,,,,,
memcached,90,closed,3,2014-12-04 03:03:02,1163.78,,,1,"b'b"" I squashed this", and added a commit to clean up the item lock, comments. also made it bail on start if hashpower isn\'t large enough, as your code simply disabled hash expansion in this case. It\'s pushed into \'next\' tree now," thanks.""'",,,,
memcached,90,closed,closed,2014-12-27 00:00:53,1257.85,1,0,4,,,,,,,,,
memcached,90,closed,reopened,2014-12-27 00:11:51,10.97,1,0,4,,,,,,,,,
memcached,90,closed,4,2014-12-04 03:03:02,29.8,1,,,b'b\' of course _now_ I realize why this isn\\\'t safe: assoc_expand() has to be called with all threads locked. it swaps out the entire hash table. except I think the code as it is, is also slightly unsafe. cache_lock() is held during the assoc_expand() call... which prevents assoc_insert()\\\'s from being called while the hash table is being swapped. However there\\\'s no lock on the reads anymore, so you could get an invalid read if the pointer swap isn\\\'t atomic (32bit systems?), and in the short time while the table is swapped but flags haven\\\'t been updated. This is worse because, in assoc_expand:    expanding = true;    expand_bucket = 0;.. expand_bucket might still be at the high value from the last expansion since it\\\'s zeroed out at start and not at the end of the last expand. Threads could look at old_hashtable before the pointer swap is spread. Can sort of fix this by changing the ordering around when expand_bucket is called," and leaving a global lock around assoc_insert() which we can hold while calling assoc_expand().... and fixing the ordering a bit internally... It\\\'s still ""technically"" incorrect since I can\\\'t enforce a memory barrier with worker threads after editing  variables. So an assoc_find() call could end up with \\\'expand = true; hashpower = oldvalue; expand_bucket=0; old_hashtable = NULL\\\' briefly. So we might still need the item_global_lock() after all.\''",,,
memcached,90,closed,5,2014-12-04 03:03:02,20.85,,1,,"b'b"" I probably will just throw item_global_lock back in... but otherwise remove cache_lock from the process. This means assoc_insert() won\'t need a global lock around it during normal operation... which would be nice. alternatively we\'d have to either RCU access to the hash table pointer or CAS-ish it before every access"," which would be a waste of extra pipeline stalls.""'",,,,,,,
memcached,90,closed,6,2014-12-04 03:03:02,135.45,,1,,"b'b"" There\'re a thousand things I could do for this", but I settled on this one:url  it\'s back in the next branch, with this commit now on top of it. It pauses all threads during assoc_expand(). Ultimately this is probably better as it removes the  logic in item_lock() entirely and should speed up the common case. It was a  before and is one again now, and can be  by presizing. Haven\'t benched it yet. been throwing it through some testing. still not confident it\'s correct. need to move on for some other work," and this should still fix the other crash you were asking about.""'",,,,
memcached,90,closed,closed,2014-12-28 03:06:59,175.13,2,2,4,,,,,,,,,
memcached,90,closed,7,2014-12-04 03:03:02,704.97,,,1,"b""b' Thoughtful idea and great work! Though we still have to pause all threads"," it is much readable and should be more effective. Thanks a lot.'""",,,,,,,
memcached,90,closed,-,-,-,2,2,5,,,,,,,,,
memcached,163,closed,opened,2016-05-31 11:25:45,,,,,,,,,,,,,
memcached,163,closed,title,2016-05-31 11:25:45,00:00,,1,,"b""b' Will memcached work reliably for implementing a locking mechanism?'""",,,,,,,,
memcached,163,closed,body,2016-05-31 11:25:45,00:00,,,1,"b'b"" url  Is it possible that Memcache doesn\'t reliably due to some performance reason even if the is present i.e it is has been before? Lets say the no: of concurrent users is 24", and the request load is higher for example. How about  , is it possible that a i.e a delete operation can fail without a reason leaving the intact in Memcache?  Will help me in anyway better? In other words can I Implement a locking Mechanism using Memcached? Name says \'memcached\' and I have read that it might actually remove data if it thinks its too much using LRU algorithm which is bad already but it might impact only if the volume is huge. But if and is not reliable like Database then it will not work for any logical operations. For Caching it is fine but it usually doesn\'t work well if you have any logic assosiated with that. For example," for locking we have a logic that checks if key is present then deny access to the end user. I am seeing that very rarely both users are able to access the resource and I am not able to understand why this is happening.""'",,,,,
memcached,163,closed,1,2016-05-31 11:25:45,511.28,,1,,"b'b"" url (plus some of the other Usage pages on the wiki might be helpful). If you\'re using it to block access to banned users memcached really should be caching the state from something more persistent underneath.""'",,,,,,,,
memcached,163,closed,2,2016-05-31 11:25:45,2.1,,1,,b'b\' (to half answer your other questions: no," gets won\\\'t fail ""for performance reasons"" from the server itself. Also sets overwriting a key that fail remove the original key", acting as a delete). If you\\\'re having random get failures, you\\\'d also be having random set failures. You\\\'d be having issues with your configuration somewhere: url  but fundamentally it doesn\\\'t just break when you do those sorts of things.\'',,,,,
memcached,163,closed,3,2016-05-31 11:25:45,632.0,,1,,"b'b"" Thanks @dormando for your response. We are implementing a simple lock mechanism like this suppose we have two admin users A and B trying to access a certain persons page", we need to give write access to only the first guy and deny it for the second guy. We do this by a simple logic like this lookup if the patient key already exists in memcache i.e  . If it exists, then the user requesting access is denied," else a key is and access is given for that user. So I think my doubt about and is clarified in the sense that it is reliable. We will have three scenarios where we do  1) no key is present in memcache its a potential problem for us because it doesn\'t lock as expected2) key is present in memcache ideally this wont happen for us because a set will happen only if get returns empty so our logic should prevent this3) value is None to delete the key this will work just as expected even if its a miss because you say that the key will be deleted even if its a miss. Now I will have a look at the configuration details things like cache expiry etc. I read that it might remove **LRU** contents for example. If this happens then I can\'t have a guaranteed lock right? I mean it can potentially break all the logic we have correct? I also need to think how we are handling the scenario where memcache server is disconnected and how our application is handling this.""'",,,,,
memcached,163,closed,4,2016-05-31 11:25:45,10.77,,1,,"b'b"" Did you read the wiki page I linked? It uses add. Using get and set isn\'t reliable at all", there\'s a race condition between your get and your set. Also sets override sets, but an add will fail if it\'s already set (though some clients don\'t expose the failure to the user!). And again; you really can\'t rely on memcached for doing that if there would be a data problem if the lock fails. Ghetto locks are useful for instances where you want _generally reduce_ the number of concurrent users to a thing. IE: The number of users generating a heavyweight response, or rate limiting. See: url  If you could corrupt or otherwise do any damage to data if the lock fails, you should really be using your database in some atomic manner. IE: marking user A\'s session in the DB and associating it with the person\'s page somehow (with a timeout value, probably), and then caching the session in memcached. If the key goes missing," user A gets their session back. User B still sees that the record is locked via the main datastore.""'",
memcached,163,closed,5,2016-05-31 11:25:45,148.33,,1,,"b'b"" @dormando You mean this scenario right? User A\'s thread: User B\'s thread Its possible that both the  happened together and returned no value as expected because there was nothing in at that point of time and now happened for both users? Now makes sense because it enforces more rigidity by raising an error if key is present right? I will make check my clients if it suppresses them.""'",,,,,,,,
memcached,163,closed,6,2016-05-31 11:25:45,512.5,,1,,"b'b"" That is correct. That\'s the definition of a race condition. url  shows the safe pattern to avoid race conditions.""'",,,,,,,,
memcached,163,closed,7,2016-05-31 11:25:45,562.1,,,1,"b'b"" @dormando", Thanks, this helps me understand this problem clearly. As a side note, I wrote a small gist to simulate this race condition," not sure if it is 100% correct [Memcache Race]url  Can anyone double check and let me know if that proves the point? I just wanted to demonstrate the race condition so that I convince them our team to move our API\'s to wherever we do locking. There seems to be no reason to use and when does everything we want more safely. I have created a post to review this script url ""'",,,,
memcached,163,closed,closed,2016-06-04 03:04:50,939.08,0,7,2,,,,,,,,,
memcached,163,closed,reopened,2016-06-04 03:05:25,0.58,0,7,2,,,,,,,,,
memcached,163,closed,closed,2016-06-04 06:35:54,210.48,0,7,2,,,,,,,,,
memcached,163,closed,8,2016-05-31 11:25:45,1127.9,,1,,"b""b' Hi"," I think we can use  Spring boot setIfAbsent (redis getSet) method to avoid the race condition and original solution provided by Nishant should work. Any thought?'""",,,,,,,
memcached,163,closed,-,-,-,0,8,2,,,,,,,,,
memcached,364,closed,opened,2018-03-20 02:54:43,,,,,,,,,,,,,
memcached,364,closed,title,2018-03-20 02:54:43,00:00,,1,,"b'b"" can\'t visit url  to download package""'",,,,,,,,
memcached,364,closed,body,2018-03-20 02:54:43,00:00,,1,,"b'b"" can\'t visit the site url  in china  can anyone give me a link to download the package? ths""'",,,,,,,,
memcached,364,closed,1,2018-03-20 02:54:43,139.6,,1,,"b""b' Do you know if this used to work? I recently moved the site from linode to digitalocean...'""",,,,,,,,
memcached,364,closed,2,2018-03-20 02:54:43,20.8,,1,,"b""b' OK "," hope it finish soon ...'""",,,,,,,
memcached,364,closed,closed,2018-03-20 05:35:07,160.4,0,4,0,,,,,,,,,
memcached,364,closed,3,2018-03-20 02:54:43,66.57,1,,,"b""b' Sorry"," I was asking if you were able to download from  in the past?'""",,,,,,,
memcached,364,closed,4,2018-03-20 02:54:43,6.92,,1,,"b""b'  yes we can download everyday ","how long can the site be visit .'""",,,,,,,
memcached,364,closed,reopened,2018-03-20 06:48:36,73.48,1,5,0,,,,,,,,,
memcached,364,closed,5,2018-03-20 02:54:43,4.17,,1,,"b""b' I will try to fix it. Where are you exactly?'""",,,,,,,,
memcached,364,closed,6,2018-03-20 02:54:43,1.07,,1,,"b'b"" i\'m in chengdu . china ""'",,,,,,,,
memcached,364,closed,7,2018-03-20 02:54:43,13.63,,1,,"b""b' if you use linux (like ubuntu or centos) you can install with package manager: or depending on which you use.'""",,,,,,,,
memcached,364,closed,8,2018-03-20 02:54:43,10.53,1,,,"b'b"" For security we can\'t use yum command  today we download  soucecode from github ", make && make install it ,"finished  input \'memcache -V\' it appareds \'Unknown\' i think there must someting goes wrong.  sorry for my poor english.""'",,,,,,
memcached,364,closed,9,2018-03-20 02:54:43,4.27,,1,,"b""b' Try:    if okay:  '""",,,,,,,,
memcached,364,closed,10,2018-03-20 02:54:43,79.05,,1,,"b'b"" i\'ll try it later ","but i think there isn\'t any difference with download the zips""'",,,,,,,
memcached,364,closed,11,2018-03-20 02:54:43,7.08,1,,,"b""b'   will be wrong unless git is used :( sorry'""",,,,,,,,
memcached,364,closed,12,2018-03-20 02:54:43,1318.42,,1,,"b""b' can visit now.'""",,,,,,,,
memcached,364,closed,closed,2018-04-02 06:46:49,1438.22,3,11,0,,,,,,,,,
memcached,364,closed,-,-,-,3,11,0,,,,,,,,,
memcached,451,open,opened,2019-01-11 04:22:53,,,,,,,,,,,,,
memcached,451,open,title,2019-01-11 04:22:53,00:00,,1,,"b""b' how to dump sasl'""",,,,,,,,
memcached,451,open,1,2019-01-11 04:22:53,38.15,,1,,"b""b' memcached-tool use **lru_crawler metadump all** to dump the data", but sasl enabled memcached is not supported for ASCII protocol," and I can not found **lru_crawler metadump all** command in the [BinaryProtocol]url  how to back up data in the sasl enabled memcached?'""",,,,,,
memcached,451,open,2,2019-01-11 04:22:53,0.38,,1,,"b""b'  '""",,,,,,,,
memcached,451,open,closed,2019-01-11 05:01:25,38.53,0,3,0,,,,,,,,,
memcached,451,open,reopened,2019-01-11 05:01:37,0.2,0,3,0,,,,,,,,,
memcached,451,open,3,2019-01-11 04:22:53,932.72,1,,,"b'b"" Hey",  Sadly," there\'s no binprot equivalent for metadump yet :( there\'re a handful of what I\'d considered  commands that weren\'t ported to binprot. It\'s on the roadmap and issues like this helps me prioritize things.""'",,,,,,
memcached,451,open,-,-,-,1,3,0,,,,,,,,,
memcached,454,closed,opened,2019-02-07 15:46:57,,,,,,,,,,,,,
memcached,454,closed,title,2019-02-07 15:46:57,00:00,,1,,"b""b' Patrick dehkordi patch 1'""",,,,,,,,
memcached,454,closed,closed,2019-02-07 15:47:06,0.15,0,1,0,,,,,,,,,
memcached,454,closed,reopened,2019-02-12 05:20:35,813.48,0,1,0,,,,,,,,,
memcached,454,closed,1,2019-02-07 15:46:57,397.0,,1,,"b'b"" So"," what\'s going on here?""'",,,,,,,
memcached,454,closed,2,2019-02-07 15:46:57,477.7,,1,,"b'b"" closing \'cuz non responsive and I have no idea what this is.""'",,,,,,,,
memcached,454,closed,closed,2019-04-16 06:21:39,61.07,0,3,0,,,,,,,,,
memcached,454,closed,-,-,-,0,3,0,,,,,,,,,
memcached,478,closed,opened,2019-04-12 08:12:45,,,,,,,,,,,,,
memcached,478,closed,title,2019-04-12 08:12:45,00:00,,1,,"b""b' centos7 install memcached 1.5.x compile error'""",,,,,,,,
memcached,478,closed,body,2019-04-12 08:12:45,00:00,,1,,"b""b' #/-release CentOS Linux release 7.6.1810 (Core)  #uname -a  Linux  3.10.0-957.5.1.el7.x86_64 #1 SMP Fri Feb 1 14:54:57 UTC 2019 x86_64 x86_64 x86_64  #yum install gcc gcc-c++ make libevent Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile  * base: * epel: * extras: * updates:  Package gcc-4.8.5-36.el7_6.1.x86_64 already installed and latest version Package gcc-c++-4.8.5-36.el7_6.1.x86_64 already installed and latest version Package 1:make-3.82-23.el7.x86_64 already installed and latest version Package libevent-2.0.21-4.el7.x86_64 already installed and latest version Nothing to do '""",,,,,,,,
memcached,478,closed,1,2019-04-12 08:12:45,59.85,,1,,"b""b' Does 1.5.12 work?  does... adding to the top of logger.c fix it?'""",,,,,,,,
memcached,478,closed,2,2019-04-12 08:12:45,405.72,,1,,"b""b' fixed\\xef\\xbc\\x8cthanks'""",,,,,,,,
memcached,478,closed,closed,2019-04-15 15:58:19,465.57,0,4,0,,,,,,,,,
memcached,478,closed,3,2019-04-12 08:12:45,243.78,,1,,"b""b' which fixed it? 1.5.12 or did you have to actually change the code?'""",,,,,,,,
memcached,478,closed,4,2019-04-12 08:12:45,535.83,,1,,"b""b' ver:memcached-1.5.7  i change the code in logger.c adding #include '""",,,,,,,,
memcached,478,closed,reopened,2019-04-16 05:27:25,809.1,0,6,0,,,,,,,,,
memcached,478,closed,5,2019-04-12 08:12:45,30.05,,1,,"b""b' going to leave this open until we actually fix it..'""",,,,,,,,
memcached,478,closed,closed,2019-04-27 08:43:12,195.78,0,7,0,,,,,,,,,
memcached,478,closed,-,-,-,0,7,0,,,,,,,,,
memcached,485,open,opened,2019-05-03 14:50:53,,,,,,,,,,,,,
memcached,485,open,title,2019-05-03 14:50:53,00:00,,1,,"b""b' prove  fail'""",,,,,,,,
memcached,485,open,body,2019-05-03 14:50:53,00:00,,1,,"b""b'  **Ends in same fail results** '""",,,,,,,,
memcached,485,open,1,2019-05-03 14:50:53,206.27,,1,,"b'b"" how\'re you doing that? why is it whietspace checking .o and binaries?  version? os? hacking on it? git checkout? more info please?""'",,,,,,,,
memcached,485,open,2,2019-05-03 14:50:53,5.4,,1,,"b""b'  1.5.13  > os?'""",,,,,,,,
memcached,485,open,3,2019-05-03 14:50:53,5.62,,1,,"b""b' is the directory you checked this out into a git repository?'""",,,,,,,,
memcached,485,open,4,2019-05-03 14:50:53,2.3,,1,,"b""b' yes"," is a folder inside an unrelated git repo'""",,,,,,,
memcached,485,open,5,2019-05-03 14:50:53,1.0,,1,,"b'b"" whitespace.t won\'t work in that scenario. It\'s using git to find the list of files to check""'",,,,,,,,
memcached,485,open,6,2019-05-03 14:50:53,17.12,,1,,"b""b' Strange feature", check done in another path," All tests successful. Solved. Thanks'""",,,,,,
memcached,485,open,closed,2019-05-03 18:48:41,237.8,0,8,0,,,,,,,,,
memcached,485,open,7,2019-05-03 14:50:53,5.63,1,,,"b'b"" shrug"," sorry. it\'s an old project. I don\'t know why all of the things were done the way they were.""'",,,,,,,
memcached,485,open,reopened,2019-05-03 18:55:55,7.23,1,8,0,,,,,,,,,
memcached,485,open,8,2019-05-03 14:50:53,2.1,,1,,"b'b"" going to track a bugfix for this: have whitespace.t bail if doesn\'t exist.""'",,,,,,,,
memcached,485,open,-,-,-,1,9,0,,,,,,,,,
